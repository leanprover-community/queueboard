{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 107,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "kkytola"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "Add 8 lemmas: `limsup_const_add`, ..., `liminf_sub_const`.\r\n\r\nThe 4 lemmas about `add` are proven with typeclass assumptions which apply to `ℝ`, `ℝ≥0`, and `ℝ≥0∞` (at least). The 4 lemmas about `sub` are proven with typeclass assumptions which apply to `ℝ` and `ℝ≥0` (at least). For `ℝ≥0∞`, we add separate implementations of these latter 4 lemmas `ENNReal.liminf_sub_const`, ...\r\n\r\n---\r\n\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 2,
        "closed": true,
        "closedAt": "2023-08-13T12:12:55Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5jucP6",
              "body": "Maybe I'm missing something, but it seems like [tsub_le_tsub_right](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Order/Sub/Defs.html#tsub_le_tsub_right) is the generalization of [sub_le_sub_right](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Order/Group/Defs.html#sub_le_sub_right) you are looking for?",
              "createdAt": "2023-08-10T12:23:53Z",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5jx3yl",
              "body": "> Maybe I'm missing something, but it seems like [tsub_le_tsub_right](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Order/Sub/Defs.html#tsub_le_tsub_right) is the generalization of [sub_le_sub_right](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Order/Group/Defs.html#sub_le_sub_right) you are looking for?\r\n\r\nYou are right, thank you! I changed the assumptions in the `sub` lemmas. The typeclass assumptions that were required by `tsub_le_tsub_right` now make these 4 lemmas applicable to `ℝ≥0`, but not to `ℝ≥0∞`.\r\n\r\nI realized that I incorrectly claimed that all of these would apply to `ℝ≥0∞`, but for example `limsup_const_sub` is actually false for `ℝ≥0∞`. On the other hand, for example `limsup_sub_const` would be true in `ℝ≥0∞`, but the result doesn't apply to `ℝ≥0∞` with its current typeclasses.\r\n\r\nA remaining asymmetry in the assumptions is that the lemmas about `sub` assume 5 typeclasses `[AddCommSemigroup R] [Sub R] [ContinuousSub R] [OrderedSub R] [CovariantClass R R (fun x y ↦ x + y) fun x y ↦ x ≤ y]` (including commutativity of addition, and orderedness of subtraction), whereas the lemmas about `add` only assumed 3, `[Add R] [ContinuousAdd R] [CovariantClass R R (fun x y ↦ x + y) fun x y ↦ x ≤ y]`.",
              "createdAt": "2023-08-10T22:42:39Z",
              "author": {
                "login": "kkytola"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5jzuQB",
              "body": "> `limsup_sub_const` would be true in `ℝ≥0∞`, but the result doesn't apply to `ℝ≥0∞` with its current typeclasses.\r\n\r\nI don't understand. `ℝ≥0∞` has `OrderedSub` according to [this terribly-named instance](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Real/ENNReal.html#ENNReal.instOrderedSubENNRealToLEToPreorderToPartialOrderToCompleteSemilatticeInfToCompleteLatticeToCompletelyDistribLatticeInstCompleteLinearOrderENNRealToAddToDistribToNonUnitalNonAssocSemiringToNonAssocSemiringToSemiringToOrderedSemiringToOrderedCommSemiringInstCanonicallyOrderedCommSemiringENNRealInstSub\r\n\r\n> A remaining asymmetry in the assumptions is that the lemmas about sub assume 5 typeclasses `[AddCommSemigroup R] [Sub R] [ContinuousSub R] [OrderedSub R] [CovariantClass R R (fun x y ↦ x + y) fun x y ↦ x ≤ y]` (including commutativity of addition, and orderedness of subtraction), whereas the lemmas about add only assumed 3, `[Add R] [ContinuousAdd R] [CovariantClass R R (fun x y ↦ x + y) fun x y ↦ x ≤ y]`.\r\n\r\nI don't think we can do a lot about this, apart from using `CovariantClass` directly on subtraction, but I think there wouldn't be any corresponding instance. So I think this is fine.",
              "createdAt": "2023-08-11T10:06:46Z",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5j3P6w",
              "body": "> > `limsup_sub_const` would be true in `ℝ≥0∞`, but the result doesn't apply to `ℝ≥0∞` with its current typeclasses.\r\n> \r\n> I don't understand. `ℝ≥0∞` has `OrderedSub` according to [this terribly-named instance]\r\n\r\nThe instance that is missing for `ℝ≥0∞` (for the good reason that it is false) is `[ContinuousSub]`. We of course \"almost\" have that, in [ENNReal.continuousOn_sub](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Instances/ENNReal.html#ENNReal.continuousOn_sub).",
              "createdAt": "2023-08-11T21:37:31Z",
              "author": {
                "login": "kkytola"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5j3RM3",
              "body": "> The instance that is missing for `ℝ≥0∞` (for the good reason that it is false) is `[ContinuousSub]`. We of course \"almost\" have that, in [ENNReal.continuousOn_sub](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Instances/ENNReal.html#ENNReal.continuousOn_sub).\r\n\r\nIn ENNReal, the following proof would work. It is probably useful and could be added, but I think it is much more ad hoc than the 8 lemmas in this PR.\r\n\r\n```\r\nimport Mathlib.Analysis.Calculus.FDeriv.Basic\r\n\r\nopen NNReal ENNReal Filter\r\n\r\nlemma limsup_sub_const_ennReal (F : Filter ι) [NeBot F] (f : ι → ℝ≥0∞) (c : ℝ≥0∞) :\r\n    Filter.limsup (fun i ↦ f i - c) F = Filter.limsup f F - c := by\r\n  by_cases hc : c = ∞\r\n  · simp [hc, limsup_const]\r\n  · refine (@Monotone.map_limsup_of_continuousAt ι ℝ≥0∞ ℝ≥0∞ F _ _ _ _ _ _ _\r\n            (fun x ↦ x - c) ?_ f (ENNReal.continuous_sub_right c).continuousAt\r\n            (by isBoundedDefault) (by isBoundedDefault)).symm\r\n    intro x y hxy\r\n    simp only [ge_iff_le, tsub_le_iff_right, hxy.trans le_tsub_add]\r\n```\r\n",
              "createdAt": "2023-08-11T21:41:33Z",
              "author": {
                "login": "kkytola"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5j3SPg",
              "body": "> > > `limsup_sub_const` would be true in `ℝ≥0∞`, but the result doesn't apply to `ℝ≥0∞` with its current typeclasses.\r\n> > \r\n> > \r\n> > I don't understand. `ℝ≥0∞` has `OrderedSub` according to [this terribly-named instance]\r\n> \r\n> The instance that is missing for `ℝ≥0∞` (for the good reason that it is false) is `[ContinuousSub]`. We of course \"almost\" have that, in [ENNReal.continuousOn_sub](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Instances/ENNReal.html#ENNReal.continuousOn_sub).\r\n\r\nOooh right.",
              "createdAt": "2023-08-11T21:46:51Z",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5j3Swh",
              "body": "> > The instance that is missing for `ℝ≥0∞` (for the good reason that it is false) is `[ContinuousSub]`. We of course \"almost\" have that, in [ENNReal.continuousOn_sub](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Instances/ENNReal.html#ENNReal.continuousOn_sub).\r\n> \r\n> In ENNReal, the following proof would work. It is probably useful and could be added, but I think it is much more ad hoc than the 8 lemmas in this PR.\r\n> \r\n> ```\r\n> import Mathlib.Analysis.Calculus.FDeriv.Basic\r\n> \r\n> open NNReal ENNReal Filter\r\n> \r\n> lemma limsup_sub_const_ennReal (F : Filter ι) [NeBot F] (f : ι → ℝ≥0∞) (c : ℝ≥0∞) :\r\n>     Filter.limsup (fun i ↦ f i - c) F = Filter.limsup f F - c := by\r\n>   by_cases hc : c = ∞\r\n>   · simp [hc, limsup_const]\r\n>   · refine (@Monotone.map_limsup_of_continuousAt ι ℝ≥0∞ ℝ≥0∞ F _ _ _ _ _ _ _\r\n>             (fun x ↦ x - c) ?_ f (ENNReal.continuous_sub_right c).continuousAt\r\n>             (by isBoundedDefault) (by isBoundedDefault)).symm\r\n>     intro x y hxy\r\n>     simp only [ge_iff_le, tsub_le_iff_right, hxy.trans le_tsub_add]\r\n> ```\r\n\r\nCan't you just replace [continuous_sub_right](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Algebra/Group/Basic.html#continuous_sub_right) by [ENNReal.continuous_sub_right](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Instances/ENNReal.html#ENNReal.continuous_sub_right) in the original proof? Of course you'd still have to state the lemma twice, but if the proof is as short as I imagine then it's probably worth adding.",
              "createdAt": "2023-08-11T21:49:52Z",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5j3q5I",
              "body": "> Can't you just replace [continuous_sub_right](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Algebra/Group/Basic.html#continuous_sub_right) by [ENNReal.continuous_sub_right](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Instances/ENNReal.html#ENNReal.continuous_sub_right) in the original proof? Of course you'd still have to state the lemma twice, but if the proof is as short as I imagine then it's probably worth adding.\r\n\r\nYou are right about the good proof for `ENNReal`. I added the `ENNReal` special cases of both the 2 `sub` lemmas that go through with essentially unmodified hypotheses, and the 2 `sub` lemmas that require the additional hypothesis `c ≠ ∞`.\r\n\r\nI initially had some doubts, though. All of the 8 lemmas added in the PR are essentially special cases (albeit presumably sufficiently common to merit their own lemmas) of `Antitone.map_limsInf_of_continuousAt` and its 3 friends. When the \"liminf/limsup of constant subtraction/addition (either way)\" can be proven in a single lemma in a decent generality (say `ℝ` and `ℝ≥0` at once), then my opinion was that the addition of the lemmas is justified. I was not totally sure that a special case for `ℝ≥0∞` was worth an individual lemma. But I now think it may be: it is likely useful in its own right, and it could help people notice the corner case assumptions `(c_ne_top : c ≠ ∞)` and [`ENNReal.continuousOn_sub`](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Instances/ENNReal.html#ENNReal.continuousOn_sub) quicker when they need this result.",
              "createdAt": "2023-08-11T23:54:24Z",
              "author": {
                "login": "kkytola"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5j4yzt",
              "body": "Mathlib is not minimalist: while we do like to factor things by having general lemmas, if one useful case just has to be treated separately then it should absolutely be, and not having a common generalization is not a good reason not to include it. So I think these `ENNReal` lemmas are a good addition.",
              "createdAt": "2023-08-12T10:18:50Z",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5j4y36",
              "body": "Thanks!\r\n\r\nbors d+",
              "createdAt": "2023-08-12T10:19:35Z",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5j4y4D",
              "body": ":v: kkytola can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests).",
              "createdAt": "2023-08-12T10:19:36Z",
              "author": {
                "login": "bors"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5j5tMk",
              "body": "bors r+\r\n\r\nThank you for the review improvements golfs!\r\n\r\n",
              "createdAt": "2023-08-12T19:39:42Z",
              "author": {
                "login": "kkytola"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5j5tb1",
              "body": "Build failed:\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/5843117108/job/15844937358)",
              "createdAt": "2023-08-12T19:41:42Z",
              "author": {
                "login": "bors"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5j6jeo",
              "body": "Could you merge master so that `Type*` is recognized?",
              "createdAt": "2023-08-13T09:22:29Z",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5j6sax",
              "body": "bors retry",
              "createdAt": "2023-08-13T11:38:58Z",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5j6vFC",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/5847081436/job/15852949779)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/5847081436/job/15852949901)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/5847081436/job/15852949960)",
              "createdAt": "2023-08-13T12:12:54Z",
              "author": {
                "login": "bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "f3f44d88ebd14a873de172c36dabb90c6e36d2c6",
                "additions": 96,
                "deletions": 0,
                "committedDate": "2023-08-08T23:03:15Z",
                "author": {
                  "name": "Kalle",
                  "email": "kalle.kytola@aalto.fi"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "04b9836c2e2cd2e2250ca7ae9a2b8f0b5349d92d",
                "additions": 1,
                "deletions": 4,
                "committedDate": "2023-08-08T23:19:33Z",
                "author": {
                  "name": "Kalle",
                  "email": "kalle.kytola@aalto.fi"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "4edc3c30e3cfea65cbda23106be440c09b7bcc95",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-08-08T23:24:59Z",
                "author": {
                  "name": "Kalle",
                  "email": "kalle.kytola@aalto.fi"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "56deae4499134c631fe865aa5eba0cd4283f0769",
                "additions": 12,
                "deletions": 26,
                "committedDate": "2023-08-10T21:10:16Z",
                "author": {
                  "name": "Kalle",
                  "email": "kalle.kytola@aalto.fi"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "997384ce08a8a05c990f3511d887d443f408cfab",
                "additions": 2,
                "deletions": 2,
                "committedDate": "2023-08-10T21:16:51Z",
                "author": {
                  "name": "Kalle",
                  "email": "kalle.kytola@aalto.fi"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "e73442a0b8cb369ef2d00caa144b16f3c0fea8e0",
                "additions": 4,
                "deletions": 4,
                "committedDate": "2023-08-11T21:16:04Z",
                "author": {
                  "name": "kkytola",
                  "email": "39528102+kkytola@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "3990a794a4bf50473372da47d6ff45b7f4180ea7",
                "additions": 28,
                "deletions": 30,
                "committedDate": "2023-08-11T21:26:22Z",
                "author": {
                  "name": "Kalle",
                  "email": "kalle.kytola@aalto.fi"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "ddf7fafc0e373795c5c3900b92d827a7c2d69376",
                "additions": 36,
                "deletions": 0,
                "committedDate": "2023-08-11T22:49:12Z",
                "author": {
                  "name": "Kalle",
                  "email": "kalle.kytola@aalto.fi"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "332dc7a82c033433f427124c50d39c9fc61d6de5",
                "additions": 4,
                "deletions": 4,
                "committedDate": "2023-08-11T23:43:39Z",
                "author": {
                  "name": "Kalle",
                  "email": "kalle.kytola@aalto.fi"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "ac810f58f8294e9c84bd5828fddef71180069fd3",
                "additions": 8,
                "deletions": 14,
                "committedDate": "2023-08-12T18:25:44Z",
                "author": {
                  "name": "kkytola",
                  "email": "39528102+kkytola@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "2c4686958c340544de8deba2a639a46ab0566bea",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-08-12T20:28:29Z",
                "author": {
                  "name": "kkytola",
                  "email": "39528102+kkytola@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "bbd5de8982fd72e8b5441d6f16cd4e46143f3922",
                "additions": 15752,
                "deletions": 13266,
                "committedDate": "2023-08-13T10:08:15Z",
                "author": {
                  "name": "Kalle",
                  "email": "kalle.kytola@aalto.fi"
                },
                "statusCheckRollup": null
              }
            }
          ]
        },
        "createdAt": "2023-08-08T23:13:22Z",
        "deletions": 0,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/Topology/Algebra/Order/LiminfLimsup.lean",
              "additions": 77,
              "deletions": 0
            },
            {
              "path": "Mathlib/Topology/Instances/ENNReal.lean",
              "additions": 30,
              "deletions": 0
            }
          ]
        },
        "headRefName": "kkytola/limsup_const_add_etc",
        "headRefOid": "bbd5de8982fd72e8b5441d6f16cd4e46143f3922",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5Xe4uL",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABAt13Ow",
              "color": "bfd4f2",
              "name": "delegated"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJbOw",
              "color": "33DBEC",
              "name": "t-topology"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJlpQ",
              "color": "33DBEC",
              "name": "t-order"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5d5qTG",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ADedecker"
              },
              "submittedAt": "2023-08-12T20:11:01Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 6455,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5dfMEr",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kkytola"
              },
              "submittedAt": "2023-08-08T23:14:29Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5dx-V2",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ADedecker"
              },
              "submittedAt": "2023-08-11T10:07:40Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5dx_Y7",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ADedecker"
              },
              "submittedAt": "2023-08-11T10:10:52Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5dyADX",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ADedecker"
              },
              "submittedAt": "2023-08-11T10:12:54Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5d4ILy",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ADedecker"
              },
              "submittedAt": "2023-08-12T10:14:59Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5d5qTG",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ADedecker"
              },
              "submittedAt": "2023-08-12T20:11:01Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5MweNH",
                    "body": "Maybe adding the import suggests that the lemmas need to be placed in another file instead?",
                    "createdAt": "2023-08-08T23:14:29Z",
                    "author": {
                      "login": "kkytola"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5M9XlY",
                    "body": "Could you move them to a new file `Mathlib.Topology.Algebra.Group.LiminfLimsup`?",
                    "createdAt": "2023-08-11T10:07:40Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5M9YWA",
                    "body": "Actually no that's probably a bad file. Let's keep them here until someone complains :sweat_smile: ",
                    "createdAt": "2023-08-11T10:10:52Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5M9YzI",
                    "body": "```suggestion\r\n    Filter.limsup (fun i ↦ c + f i) F = c + Filter.limsup f F :=\r\n  (Monotone.map_limsSup_of_continuousAt (F := F.map f) (f := fun (x : R) ↦ c + x)\r\n    (fun _ _ h ↦ add_le_add_left h c)\r\n    (continuous_add_left c).continuousAt bdd_above bdd_below).symm\r\n```\r\n\r\nSame below. `convert` is a heavy tactic so it's better not to use it when `refine` works, and here we can even go straight to term mode.",
                    "createdAt": "2023-08-11T10:12:54Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5NBWi7",
                    "body": "```suggestion\r\n    (fun _ _ h ↦ tsub_le_tsub_right h c) (continuous_sub_right c).continuousAt).symm\r\n```",
                    "createdAt": "2023-08-12T10:10:56Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5NBWj9",
                    "body": "```suggestion\r\n    (fun _ _ h ↦ tsub_le_tsub_right h c) (continuous_sub_right c).continuousAt).symm\r\n```",
                    "createdAt": "2023-08-12T10:11:19Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5NBWko",
                    "body": "```suggestion\r\n    Filter.limsup (fun i ↦ c - f i) F = c - Filter.liminf f F :=\r\n  (Antitone.map_limsInf_of_continuousAt (F := F.map f) (f := fun (x : ℝ≥0∞) ↦ c - x)\r\n    (fun _ _ h ↦ tsub_le_tsub_left h c) (continuous_sub_left c_ne_top).continuousAt).symm\r\n```",
                    "createdAt": "2023-08-12T10:11:47Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5NBWlG",
                    "body": "```suggestion\r\n    Filter.liminf (fun i ↦ c - f i) F = c - Filter.limsup f F :=\r\n  (Antitone.map_limsSup_of_continuousAt (F := F.map f) (f := fun (x : ℝ≥0∞) ↦ c - x)\r\n    (fun _ _ h ↦ tsub_le_tsub_left h c) (continuous_sub_left c_ne_top).continuousAt).symm\r\n```",
                    "createdAt": "2023-08-12T10:12:12Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5NCZbr",
                    "body": "```suggestion\r\nvariable {R : Type*} [ConditionallyCompleteLinearOrder R] [TopologicalSpace R] [OrderTopology R]\r\n```\r\nSorry, the change to `Type*` is more recent than this PR so I missed it. Altough the current `bors` failure does not seem to be related, this would probably cause an error in the next batch...",
                    "createdAt": "2023-08-12T20:11:01Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjM5NTI4MTAy",
              "login": "kkytola"
            },
            {
              "id": "MDQ6VXNlcjQ4NjU2Nzkz",
              "login": "ADedecker"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": null,
        "title": "[Merged by Bors] - feat: lemma limsup_const_add + 7 variants",
        "updatedAt": "2023-08-13T12:12:59Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/6455",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "f3f44d88ebd14a873de172c36dabb90c6e36d2c6"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5tzheUzwAAAAJWe80M",
              "createdAt": "2023-08-08T23:13:22Z",
              "label": {
                "id": "MDU6TGFiZWwzMjcxMjQ0NzU5",
                "name": "WIP"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5tzheUzwAAAAJWe80Q",
              "createdAt": "2023-08-08T23:13:22Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJbOw",
                "name": "t-topology"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5tzheUzwAAAAJWe80S",
              "createdAt": "2023-08-08T23:13:22Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJlpQ",
                "name": "t-order"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5dfMEr",
              "createdAt": "2023-08-08T23:14:29Z",
              "body": "",
              "author": {
                "login": "kkytola"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "04b9836c2e2cd2e2250ca7ae9a2b8f0b5349d92d"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "4edc3c30e3cfea65cbda23106be440c09b7bcc95"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5tzheUzwAAAAJWp_vU",
              "createdAt": "2023-08-09T08:12:13Z",
              "label": {
                "id": "MDU6TGFiZWwzMjcxMjQ0NzU5",
                "name": "WIP"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5tzheUzwAAAAJWp_va",
              "createdAt": "2023-08-09T08:12:13Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5jucP6",
              "createdAt": "2023-08-10T12:23:53Z",
              "body": "Maybe I'm missing something, but it seems like [tsub_le_tsub_right](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Order/Sub/Defs.html#tsub_le_tsub_right) is the generalization of [sub_le_sub_right](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Order/Group/Defs.html#sub_le_sub_right) you are looking for?",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5tzheUzwAAAAJXjM6m",
              "createdAt": "2023-08-10T12:24:02Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5tzheUzwAAAAJXjM6w",
              "createdAt": "2023-08-10T12:24:02Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "56deae4499134c631fe865aa5eba0cd4283f0769"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "997384ce08a8a05c990f3511d887d443f408cfab"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5jx3yl",
              "createdAt": "2023-08-10T22:42:39Z",
              "body": "> Maybe I'm missing something, but it seems like [tsub_le_tsub_right](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Order/Sub/Defs.html#tsub_le_tsub_right) is the generalization of [sub_le_sub_right](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Order/Group/Defs.html#sub_le_sub_right) you are looking for?\r\n\r\nYou are right, thank you! I changed the assumptions in the `sub` lemmas. The typeclass assumptions that were required by `tsub_le_tsub_right` now make these 4 lemmas applicable to `ℝ≥0`, but not to `ℝ≥0∞`.\r\n\r\nI realized that I incorrectly claimed that all of these would apply to `ℝ≥0∞`, but for example `limsup_const_sub` is actually false for `ℝ≥0∞`. On the other hand, for example `limsup_sub_const` would be true in `ℝ≥0∞`, but the result doesn't apply to `ℝ≥0∞` with its current typeclasses.\r\n\r\nA remaining asymmetry in the assumptions is that the lemmas about `sub` assume 5 typeclasses `[AddCommSemigroup R] [Sub R] [ContinuousSub R] [OrderedSub R] [CovariantClass R R (fun x y ↦ x + y) fun x y ↦ x ≤ y]` (including commutativity of addition, and orderedness of subtraction), whereas the lemmas about `add` only assumed 3, `[Add R] [ContinuousAdd R] [CovariantClass R R (fun x y ↦ x + y) fun x y ↦ x ≤ y]`.",
              "author": {
                "login": "kkytola"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5tzheUzwAAAAJX5ZIA",
              "createdAt": "2023-08-10T22:48:57Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5tzheUzwAAAAJX5ZIE",
              "createdAt": "2023-08-10T22:48:57Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5jzuQB",
              "createdAt": "2023-08-11T10:06:46Z",
              "body": "> `limsup_sub_const` would be true in `ℝ≥0∞`, but the result doesn't apply to `ℝ≥0∞` with its current typeclasses.\r\n\r\nI don't understand. `ℝ≥0∞` has `OrderedSub` according to [this terribly-named instance](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Real/ENNReal.html#ENNReal.instOrderedSubENNRealToLEToPreorderToPartialOrderToCompleteSemilatticeInfToCompleteLatticeToCompletelyDistribLatticeInstCompleteLinearOrderENNRealToAddToDistribToNonUnitalNonAssocSemiringToNonAssocSemiringToSemiringToOrderedSemiringToOrderedCommSemiringInstCanonicallyOrderedCommSemiringENNRealInstSub\r\n\r\n> A remaining asymmetry in the assumptions is that the lemmas about sub assume 5 typeclasses `[AddCommSemigroup R] [Sub R] [ContinuousSub R] [OrderedSub R] [CovariantClass R R (fun x y ↦ x + y) fun x y ↦ x ≤ y]` (including commutativity of addition, and orderedness of subtraction), whereas the lemmas about add only assumed 3, `[Add R] [ContinuousAdd R] [CovariantClass R R (fun x y ↦ x + y) fun x y ↦ x ≤ y]`.\r\n\r\nI don't think we can do a lot about this, apart from using `CovariantClass` directly on subtraction, but I think there wouldn't be any corresponding instance. So I think this is fine.",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5dyADX",
              "createdAt": "2023-08-11T10:12:54Z",
              "body": "",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5tzheUzwAAAAJYGq8b",
              "createdAt": "2023-08-11T10:13:06Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5tzheUzwAAAAJYGq8l",
              "createdAt": "2023-08-11T10:13:06Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "e73442a0b8cb369ef2d00caa144b16f3c0fea8e0"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "3990a794a4bf50473372da47d6ff45b7f4180ea7"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5j3P6w",
              "createdAt": "2023-08-11T21:37:31Z",
              "body": "> > `limsup_sub_const` would be true in `ℝ≥0∞`, but the result doesn't apply to `ℝ≥0∞` with its current typeclasses.\r\n> \r\n> I don't understand. `ℝ≥0∞` has `OrderedSub` according to [this terribly-named instance]\r\n\r\nThe instance that is missing for `ℝ≥0∞` (for the good reason that it is false) is `[ContinuousSub]`. We of course \"almost\" have that, in [ENNReal.continuousOn_sub](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Instances/ENNReal.html#ENNReal.continuousOn_sub).",
              "author": {
                "login": "kkytola"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5j3RM3",
              "createdAt": "2023-08-11T21:41:33Z",
              "body": "> The instance that is missing for `ℝ≥0∞` (for the good reason that it is false) is `[ContinuousSub]`. We of course \"almost\" have that, in [ENNReal.continuousOn_sub](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Instances/ENNReal.html#ENNReal.continuousOn_sub).\r\n\r\nIn ENNReal, the following proof would work. It is probably useful and could be added, but I think it is much more ad hoc than the 8 lemmas in this PR.\r\n\r\n```\r\nimport Mathlib.Analysis.Calculus.FDeriv.Basic\r\n\r\nopen NNReal ENNReal Filter\r\n\r\nlemma limsup_sub_const_ennReal (F : Filter ι) [NeBot F] (f : ι → ℝ≥0∞) (c : ℝ≥0∞) :\r\n    Filter.limsup (fun i ↦ f i - c) F = Filter.limsup f F - c := by\r\n  by_cases hc : c = ∞\r\n  · simp [hc, limsup_const]\r\n  · refine (@Monotone.map_limsup_of_continuousAt ι ℝ≥0∞ ℝ≥0∞ F _ _ _ _ _ _ _\r\n            (fun x ↦ x - c) ?_ f (ENNReal.continuous_sub_right c).continuousAt\r\n            (by isBoundedDefault) (by isBoundedDefault)).symm\r\n    intro x y hxy\r\n    simp only [ge_iff_le, tsub_le_iff_right, hxy.trans le_tsub_add]\r\n```\r\n",
              "author": {
                "login": "kkytola"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5j3SPg",
              "createdAt": "2023-08-11T21:46:51Z",
              "body": "> > > `limsup_sub_const` would be true in `ℝ≥0∞`, but the result doesn't apply to `ℝ≥0∞` with its current typeclasses.\r\n> > \r\n> > \r\n> > I don't understand. `ℝ≥0∞` has `OrderedSub` according to [this terribly-named instance]\r\n> \r\n> The instance that is missing for `ℝ≥0∞` (for the good reason that it is false) is `[ContinuousSub]`. We of course \"almost\" have that, in [ENNReal.continuousOn_sub](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Instances/ENNReal.html#ENNReal.continuousOn_sub).\r\n\r\nOooh right.",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5j3Swh",
              "createdAt": "2023-08-11T21:49:52Z",
              "body": "> > The instance that is missing for `ℝ≥0∞` (for the good reason that it is false) is `[ContinuousSub]`. We of course \"almost\" have that, in [ENNReal.continuousOn_sub](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Instances/ENNReal.html#ENNReal.continuousOn_sub).\r\n> \r\n> In ENNReal, the following proof would work. It is probably useful and could be added, but I think it is much more ad hoc than the 8 lemmas in this PR.\r\n> \r\n> ```\r\n> import Mathlib.Analysis.Calculus.FDeriv.Basic\r\n> \r\n> open NNReal ENNReal Filter\r\n> \r\n> lemma limsup_sub_const_ennReal (F : Filter ι) [NeBot F] (f : ι → ℝ≥0∞) (c : ℝ≥0∞) :\r\n>     Filter.limsup (fun i ↦ f i - c) F = Filter.limsup f F - c := by\r\n>   by_cases hc : c = ∞\r\n>   · simp [hc, limsup_const]\r\n>   · refine (@Monotone.map_limsup_of_continuousAt ι ℝ≥0∞ ℝ≥0∞ F _ _ _ _ _ _ _\r\n>             (fun x ↦ x - c) ?_ f (ENNReal.continuous_sub_right c).continuousAt\r\n>             (by isBoundedDefault) (by isBoundedDefault)).symm\r\n>     intro x y hxy\r\n>     simp only [ge_iff_le, tsub_le_iff_right, hxy.trans le_tsub_add]\r\n> ```\r\n\r\nCan't you just replace [continuous_sub_right](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Algebra/Group/Basic.html#continuous_sub_right) by [ENNReal.continuous_sub_right](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Instances/ENNReal.html#ENNReal.continuous_sub_right) in the original proof? Of course you'd still have to state the lemma twice, but if the proof is as short as I imagine then it's probably worth adding.",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "ddf7fafc0e373795c5c3900b92d827a7c2d69376"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "332dc7a82c033433f427124c50d39c9fc61d6de5"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5j3q5I",
              "createdAt": "2023-08-11T23:54:24Z",
              "body": "> Can't you just replace [continuous_sub_right](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Algebra/Group/Basic.html#continuous_sub_right) by [ENNReal.continuous_sub_right](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Instances/ENNReal.html#ENNReal.continuous_sub_right) in the original proof? Of course you'd still have to state the lemma twice, but if the proof is as short as I imagine then it's probably worth adding.\r\n\r\nYou are right about the good proof for `ENNReal`. I added the `ENNReal` special cases of both the 2 `sub` lemmas that go through with essentially unmodified hypotheses, and the 2 `sub` lemmas that require the additional hypothesis `c ≠ ∞`.\r\n\r\nI initially had some doubts, though. All of the 8 lemmas added in the PR are essentially special cases (albeit presumably sufficiently common to merit their own lemmas) of `Antitone.map_limsInf_of_continuousAt` and its 3 friends. When the \"liminf/limsup of constant subtraction/addition (either way)\" can be proven in a single lemma in a decent generality (say `ℝ` and `ℝ≥0` at once), then my opinion was that the addition of the lemmas is justified. I was not totally sure that a special case for `ℝ≥0∞` was worth an individual lemma. But I now think it may be: it is likely useful in its own right, and it could help people notice the corner case assumptions `(c_ne_top : c ≠ ∞)` and [`ENNReal.continuousOn_sub`](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Instances/ENNReal.html#ENNReal.continuousOn_sub) quicker when they need this result.",
              "author": {
                "login": "kkytola"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5tzheUzwAAAAJYfnFj",
              "createdAt": "2023-08-11T23:57:39Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5tzheUzwAAAAJYfnFm",
              "createdAt": "2023-08-11T23:57:39Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5d4ILy",
              "createdAt": "2023-08-12T10:10:56Z",
              "body": "",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5j4yzt",
              "createdAt": "2023-08-12T10:18:50Z",
              "body": "Mathlib is not minimalist: while we do like to factor things by having general lemmas, if one useful case just has to be treated separately then it should absolutely be, and not having a common generalization is not a good reason not to include it. So I think these `ENNReal` lemmas are a good addition.",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5j4y36",
              "createdAt": "2023-08-12T10:19:35Z",
              "body": "Thanks!\r\n\r\nbors d+",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5j4y4D",
              "createdAt": "2023-08-12T10:19:36Z",
              "body": ":v: kkytola can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests).",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5tzheUzwAAAAJYmhHw",
              "createdAt": "2023-08-12T10:19:53Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABAt13Ow",
                "name": "delegated"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5tzheUzwAAAAJYmhIH",
              "createdAt": "2023-08-12T10:19:53Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "ac810f58f8294e9c84bd5828fddef71180069fd3"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5j5tMk",
              "createdAt": "2023-08-12T19:39:42Z",
              "body": "bors r+\r\n\r\nThank you for the review improvements golfs!\r\n\r\n",
              "author": {
                "login": "kkytola"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5j5tb1",
              "createdAt": "2023-08-12T19:41:42Z",
              "body": "Build failed:\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/5843117108/job/15844937358)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5d5qTG",
              "createdAt": "2023-08-12T20:11:01Z",
              "body": "",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "2c4686958c340544de8deba2a639a46ab0566bea"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5j6jeo",
              "createdAt": "2023-08-13T09:22:29Z",
              "body": "Could you merge master so that `Type*` is recognized?",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "bbd5de8982fd72e8b5441d6f16cd4e46143f3922"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5j6sax",
              "createdAt": "2023-08-13T11:38:58Z",
              "body": "bors retry",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5j6vFC",
              "createdAt": "2023-08-13T12:12:54Z",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/5847081436/job/15852949779)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/5847081436/job/15852949901)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/5847081436/job/15852949960)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c5tzheUzwAAAAJYzS3c",
              "createdAt": "2023-08-13T12:12:55Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c5tzheUzwAAAAJYzS46",
              "createdAt": "2023-08-13T12:12:59Z"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            }
          ]
        }
      }
    }
  }
}
