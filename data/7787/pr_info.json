{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 28,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "FLDutchmann"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "This lemma came out of my Selberg sieve project.\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\nGolfs welcome! I'm not very happy with the `iterate 4 rw` line.\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 2,
        "closed": true,
        "closedAt": "2023-10-25T08:05:52Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5pu_yM",
              "body": "Note: I have pushed an update to the lean toolchain because this PR was on a [buggy version](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Potential.20data.20loss.20from.20.60lake.20clean.60.20with.204.2E2.2E0-rc2.2F3/near/397875701) of the toolchain. **WARNING**: checking out old commits of this PR using v4.2.0-rc2 or v4.2.0-rc3 can cause `lake clean` to delete your mathlib folder! If you need to do so, make sure to delete `lakefile.olean` manually before running any `lake` commands.",
              "createdAt": "2023-10-21T21:33:04Z",
              "author": {
                "login": "digama0"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5pzZI7",
              "body": "I have the impression there is some induction principle we are missing, in the same spirit as those in Mathlib.RingTheory.UniqueFactorizationDomain.\r\n\r\nMorally, the proof is something like \"since `f` is multiplicative we can assume `x` and `y` are powers of the same prime `p`, and this is not very difficult\".\r\n\r\nHave you tried something like that?",
              "createdAt": "2023-10-23T12:26:27Z",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5p_UUu",
              "body": "> I have the impression there is some induction principle we are missing, in the same spirit as those in Mathlib.RingTheory.UniqueFactorizationDomain.\r\n> \r\n> Morally, the proof is something like \"since `f` is multiplicative we can assume `x` and `y` are powers of the same prime `p`, and this is not very difficult\".\r\n> \r\n> Have you tried something like that?\r\n\r\nMorally we have [eq_iff_eq_on_prime_powers](https://leanprover-community.github.io/mathlib4_docs/Mathlib/NumberTheory/ArithmeticFunction.html#Nat.ArithmeticFunction.IsMultiplicative.eq_iff_eq_on_prime_powers) for two multiplicative functions, but it doesn't directly apply because the LHS/RHS are not multiplicative in `x` or `y`.\r\n\r\nThen in `Mathlib.RingTheory.UniqueFactorizationDomain` there's [induction_on_coprime](https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/UniqueFactorizationDomain.html#UniqueFactorizationMonoid.induction_on_coprime), which looks like a promising generalisation to multiplicative predicates, but this is deceptively difficult to use, because `y ↦ x.lcm y ` isn't multiplicative.  \r\n\r\nI'm having trouble finding some general inductive principle at play here that isn't oddly specific to this one lemma. (something like \"products of `f` applied to different arguments where for each prime the p-adic valuations of the arguments are equal as multisets\")",
              "createdAt": "2023-10-24T23:19:43Z",
              "author": {
                "login": "FLDutchmann"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qBKsf",
              "body": "> > I have the impression there is some induction principle we are missing, in the same spirit as those in Mathlib.RingTheory.UniqueFactorizationDomain.\r\n> > Morally, the proof is something like \"since `f` is multiplicative we can assume `x` and `y` are powers of the same prime `p`, and this is not very difficult\".\r\n> > Have you tried something like that?\r\n> \r\n> Morally we have [eq_iff_eq_on_prime_powers](https://leanprover-community.github.io/mathlib4_docs/Mathlib/NumberTheory/ArithmeticFunction.html#Nat.ArithmeticFunction.IsMultiplicative.eq_iff_eq_on_prime_powers) for two multiplicative functions, but it doesn't directly apply because the LHS/RHS are not multiplicative in `x` or `y`.\r\n> \r\n> Then in `Mathlib.RingTheory.UniqueFactorizationDomain` there's [induction_on_coprime](https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/UniqueFactorizationDomain.html#UniqueFactorizationMonoid.induction_on_coprime), which looks like a promising generalisation to multiplicative predicates, but this is deceptively difficult to use, because `y ↦ x.lcm y ` isn't multiplicative.\r\n> \r\n> I'm having trouble finding some general inductive principle at play here that isn't oddly specific to this one lemma. (something like \"products of `f` applied to different arguments where for each prime the p-adic valuations of the arguments are equal as multisets\")\r\n\r\nYeah, I also tried and it is more complicated that it seems... we can maybe do this later, thanks!\r\n\r\nbors merge",
              "createdAt": "2023-10-25T07:39:44Z",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qBU5r",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6637251110/job/18031174047)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6637251110/job/18031173274)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6637251110/job/18031173683)",
              "createdAt": "2023-10-25T08:05:51Z",
              "author": {
                "login": "bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "0cd492f95c6982a9d85533d5b064fd352dee19c9",
                "additions": 27,
                "deletions": 0,
                "committedDate": "2023-10-19T23:37:14Z",
                "author": {
                  "name": "Arend Mellendijk",
                  "email": "arend.mellendijk@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "7ed91b309de6d14caf94aff2fb968bc1d4d3501a",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-10-21T21:33:02Z",
                "author": {
                  "name": "Mario Carneiro",
                  "email": "di.gama@gmail.com"
                },
                "statusCheckRollup": null
              }
            }
          ]
        },
        "createdAt": "2023-10-19T23:51:17Z",
        "deletions": 1,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/NumberTheory/ArithmeticFunction.lean",
              "additions": 27,
              "deletions": 0
            },
            {
              "path": "lean-toolchain",
              "additions": 1,
              "deletions": 1
            }
          ]
        },
        "headRefName": "arend/lcm_gcd_multiplicative",
        "headRefOid": "7ed91b309de6d14caf94aff2fb968bc1d4d3501a",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5dU2SY",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
              "color": "06e039",
              "name": "ready-to-merge"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJLNA",
              "color": "33DBEC",
              "name": "t-number-theory"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJeVg",
              "color": "33DBEC",
              "name": "t-analysis"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJjTQ",
              "color": "33DBEC",
              "name": "t-algebra"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5k8RLd",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "digama0"
              },
              "submittedAt": "2023-10-23T21:05:53Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5k3EuL",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "riccardobrasca"
              },
              "submittedAt": "2023-10-23T12:26:45Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 7787,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5k3EuL",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "riccardobrasca"
              },
              "submittedAt": "2023-10-23T12:26:45Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5k8RLd",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "digama0"
              },
              "submittedAt": "2023-10-23T21:05:53Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5RkHRU",
                    "body": "This is probably unwanted. You can just merge master and remove this modification.",
                    "createdAt": "2023-10-23T10:00:29Z",
                    "author": {
                      "login": "riccardobrasca"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5RnVNR",
                    "body": "@riccardobrasca My recommendation is to just ignore the toolchain update as long as it doesn't cause a merge conflict. We'll be dealing with these for a while.",
                    "createdAt": "2023-10-23T21:05:53Z",
                    "author": {
                      "login": "digama0"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjg3NTk3NDU=",
              "login": "FLDutchmann"
            },
            {
              "id": "MDQ6VXNlcjg2ODU4OA==",
              "login": "digama0"
            },
            {
              "id": "MDQ6VXNlcjMyNDkwNTMy",
              "login": "riccardobrasca"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": null,
        "title": "[Merged by Bors] - feat(NumberTheory/ArithmeticFunction): lemma about lcm, gcd and multiplicative functions",
        "updatedAt": "2023-10-25T08:05:55Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/7787",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "0cd492f95c6982a9d85533d5b064fd352dee19c9"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c50a9GZzwAAAAJ-15e4",
              "createdAt": "2023-10-19T23:51:17Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c50a9GZzwAAAAJ-15fC",
              "createdAt": "2023-10-19T23:51:17Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c50a9GZzwAAAAJ-15fL",
              "createdAt": "2023-10-19T23:51:17Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJLNA",
                "name": "t-number-theory"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c50a9GZzwAAAAJ-15fX",
              "createdAt": "2023-10-19T23:51:17Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJeVg",
                "name": "t-analysis"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c50a9GZzwAAAAJ-15fl",
              "createdAt": "2023-10-19T23:51:17Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJjTQ",
                "name": "t-algebra"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c50a9GZzwAAAAJ-2TNO",
              "createdAt": "2023-10-20T00:04:33Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "7ed91b309de6d14caf94aff2fb968bc1d4d3501a"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5pu_yM",
              "createdAt": "2023-10-21T21:33:04Z",
              "body": "Note: I have pushed an update to the lean toolchain because this PR was on a [buggy version](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Potential.20data.20loss.20from.20.60lake.20clean.60.20with.204.2E2.2E0-rc2.2F3/near/397875701) of the toolchain. **WARNING**: checking out old commits of this PR using v4.2.0-rc2 or v4.2.0-rc3 can cause `lake clean` to delete your mathlib folder! If you need to do so, make sure to delete `lakefile.olean` manually before running any `lake` commands.",
              "author": {
                "login": "digama0"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5pzZI7",
              "createdAt": "2023-10-23T12:26:27Z",
              "body": "I have the impression there is some induction principle we are missing, in the same spirit as those in Mathlib.RingTheory.UniqueFactorizationDomain.\r\n\r\nMorally, the proof is something like \"since `f` is multiplicative we can assume `x` and `y` are powers of the same prime `p`, and this is not very difficult\".\r\n\r\nHave you tried something like that?",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5k3EuL",
              "createdAt": "2023-10-23T10:00:29Z",
              "body": "",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5p_UUu",
              "createdAt": "2023-10-24T23:19:43Z",
              "body": "> I have the impression there is some induction principle we are missing, in the same spirit as those in Mathlib.RingTheory.UniqueFactorizationDomain.\r\n> \r\n> Morally, the proof is something like \"since `f` is multiplicative we can assume `x` and `y` are powers of the same prime `p`, and this is not very difficult\".\r\n> \r\n> Have you tried something like that?\r\n\r\nMorally we have [eq_iff_eq_on_prime_powers](https://leanprover-community.github.io/mathlib4_docs/Mathlib/NumberTheory/ArithmeticFunction.html#Nat.ArithmeticFunction.IsMultiplicative.eq_iff_eq_on_prime_powers) for two multiplicative functions, but it doesn't directly apply because the LHS/RHS are not multiplicative in `x` or `y`.\r\n\r\nThen in `Mathlib.RingTheory.UniqueFactorizationDomain` there's [induction_on_coprime](https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/UniqueFactorizationDomain.html#UniqueFactorizationMonoid.induction_on_coprime), which looks like a promising generalisation to multiplicative predicates, but this is deceptively difficult to use, because `y ↦ x.lcm y ` isn't multiplicative.  \r\n\r\nI'm having trouble finding some general inductive principle at play here that isn't oddly specific to this one lemma. (something like \"products of `f` applied to different arguments where for each prime the p-adic valuations of the arguments are equal as multisets\")",
              "author": {
                "login": "FLDutchmann"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qBKsf",
              "createdAt": "2023-10-25T07:39:44Z",
              "body": "> > I have the impression there is some induction principle we are missing, in the same spirit as those in Mathlib.RingTheory.UniqueFactorizationDomain.\r\n> > Morally, the proof is something like \"since `f` is multiplicative we can assume `x` and `y` are powers of the same prime `p`, and this is not very difficult\".\r\n> > Have you tried something like that?\r\n> \r\n> Morally we have [eq_iff_eq_on_prime_powers](https://leanprover-community.github.io/mathlib4_docs/Mathlib/NumberTheory/ArithmeticFunction.html#Nat.ArithmeticFunction.IsMultiplicative.eq_iff_eq_on_prime_powers) for two multiplicative functions, but it doesn't directly apply because the LHS/RHS are not multiplicative in `x` or `y`.\r\n> \r\n> Then in `Mathlib.RingTheory.UniqueFactorizationDomain` there's [induction_on_coprime](https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/UniqueFactorizationDomain.html#UniqueFactorizationMonoid.induction_on_coprime), which looks like a promising generalisation to multiplicative predicates, but this is deceptively difficult to use, because `y ↦ x.lcm y ` isn't multiplicative.\r\n> \r\n> I'm having trouble finding some general inductive principle at play here that isn't oddly specific to this one lemma. (something like \"products of `f` applied to different arguments where for each prime the p-adic valuations of the arguments are equal as multisets\")\r\n\r\nYeah, I also tried and it is more complicated that it seems... we can maybe do this later, thanks!\r\n\r\nbors merge",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c50a9GZzwAAAAKBjT4r",
              "createdAt": "2023-10-25T07:40:00Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
                "name": "ready-to-merge"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c50a9GZzwAAAAKBjT66",
              "createdAt": "2023-10-25T07:40:01Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qBU5r",
              "createdAt": "2023-10-25T08:05:51Z",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6637251110/job/18031174047)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6637251110/job/18031173274)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6637251110/job/18031173683)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c50a9GZzwAAAAKBkXFd",
              "createdAt": "2023-10-25T08:05:52Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c50a9GZzwAAAAKBkXQR",
              "createdAt": "2023-10-25T08:05:55Z"
            }
          ]
        }
      }
    }
  }
}
