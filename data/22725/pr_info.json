{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 9,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "grunweg"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "by extending the broadImports check of the header linter accordingly.\r\nThis enforces some of the rules set in #22640.\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nFor details on the \"pull request lifecycle\" in mathlib, please see:\r\nhttps://leanprover-community.github.io/contribute/index.html\r\n\r\nIn particular, note that most reviewers will only notice your PR\r\nif it passes the continuous integration checks.\r\nPlease ask for help on https://leanprover.zulipchat.com if needed.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nIf you are moving or deleting declarations, please include these lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nMoves:\r\n- Vector.* -> List.Vector.*\r\n- ...\r\n\r\nDeletions:\r\n- Nat.bit1_add_bit1\r\n- ...\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 1,
        "closed": false,
        "closedAt": null,
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c6hc96V",
              "body": "### PR summary [a01470fa27](https://github.com/leanprover-community/mathlib4/pull/22725/commits/a01470fa27a4e2f9f9bb2fca9b86f42daaad9c8d)\n\n#### Import changes for modified files\n\nNo significant changes to the import graph\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n\n</details>\n\n---\n\n#### Declarations diff\n\nNo declarations were harmed in the making of this PR! üêô\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n---\n\n<details><summary>No changes to technical debt.</summary>\n\nYou can run this locally as\n```\n./scripts/technical-debt-metrics.sh pr_summary\n```\n* The `relative` value is the weighted *sum* of the differences with weight given by the *inverse* of the current value of the statistic.\n* The `absolute` value is the `relative` value divided by the total sum of the inverses of the current values (i.e. the weighted *average* of the differences).\n</details>\n",
              "createdAt": "2025-03-09T08:05:06Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6hc-CT",
              "body": "About the review requests:\r\n- @YaelDillies Can you check I got the logic exactly right, please?\r\n- @adomani Can you double-check the implementation?\r\nBoth are hopefully quick, and not urgent from my side.",
              "createdAt": "2025-03-09T08:06:10Z",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6hdBuY",
              "body": "!bench",
              "createdAt": "2025-03-09T08:48:05Z",
              "author": {
                "login": "leanprover-community-mathlib4-bot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6hdClH",
              "body": "üöÄ Pull request has been placed on the maintainer queue by YaelDillies.",
              "createdAt": "2025-03-09T08:57:23Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6hdE2S",
              "body": "Here are the [benchmark results](https://speed.lean-lang.org/mathlib4/run-detail/f1045b68-0a7f-4ad0-ac2b-5d2f8a1b6f15) for commit f9829727c289e4feca3b6a537e6bc41e5e6d1355.\nThere were [no significant changes](https://speed.lean-lang.org/mathlib4/compare/4770d126-1c36-4143-ad0a-ce0c370992d4/to/f1045b68-0a7f-4ad0-ac2b-5d2f8a1b6f15) against commit 2186c5fba75a91e10b40599542e35a8875814283.",
              "createdAt": "2025-03-09T09:20:02Z",
              "author": {
                "login": "leanprover-bot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6hdE47",
              "body": "|File|Instructions|%|\n|-|-:|:-:|\n|`build`|+1.504‚¨ù10‚Åπ|(+0.00%)|\n[CI run](https://github.com/leanprover-community/mathlib4/actions/runs/13746981575)",
              "createdAt": "2025-03-09T09:20:33Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6hdGKJ",
              "body": "> Does this prevent also transitive importing? That is, a direct import will get flagged, but what if there is not direct import, but there is a transitive one?\r\n> \r\n> I wonder whether this should be regulated by an extension of the `assert_not_inported` machinery that is directory-aware.\r\n\r\nVery good question! This only lints direct imports. I agree transitive imports should also be caught.\r\n\r\nIf you have a pointer to how to extend assert_not_imported, I'm happy to try. (This is not my highest priority though, so might take some time.) In the mean-time, we could land this with an issue about the generalisation - or wait for the better fix instead. Either way is fine with me.",
              "createdAt": "2025-03-09T09:35:27Z",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6hd5Dy",
              "body": "What if, instead of checking that there is an `import ...` *syntax*, you actually inspect [docs#Lean.Environment.allImportedModuleNames](https://leanprover-community.github.io/mathlib4_docs/Lean/Environment.html#Lean.Environment.allImportedModuleNames), filter out the ones ones that should not be there and assert that the rest is empty?\r\n\r\nThis check should only run on the appropriate set of modules, so that, on most files, just the prefix check on the name will run.",
              "createdAt": "2025-03-09T17:12:52Z",
              "author": {
                "login": "adomani"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "f9829727c289e4feca3b6a537e6bc41e5e6d1355",
                "additions": 10,
                "deletions": 2,
                "committedDate": "2025-03-09T08:01:10Z",
                "author": {
                  "name": "Michael Rothgang",
                  "email": "rothgang@math.uni-bonn.de"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI804-fw",
                        "name": "set_pr_emoji",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13746364351/job/38441729663"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI804-zA",
                        "name": "set_pr_emoji",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13746364393/job/38441729740"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI805vSQ",
                        "name": "set_pr_emoji",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13746370441/job/38441742153"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI801Z5Q",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13746339146/job/38441671141"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI81WUgg",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13746583301/job/38442210434"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI81ywAg",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13746779476/job/38442676226"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI80491Q",
                        "name": "Add topic label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13746364309/job/38441729493"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI804-KQ",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13746364321/job/38441729577"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI81WUiA",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13746583296/job/38442210440"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI81ywDw",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13746779484/job/38442676239"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI804-Gg",
                        "name": "post-or-update-summary-comment",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13746364320/job/38441729562"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI81WUkw",
                        "name": "Fix style issues from lint",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13746583297/job/38442210451"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI81ywXQ",
                        "name": "Fix style issues from lint",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13746779485/job/38442676317"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI801Zvg",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13746339145/job/38441671102"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI804-cQ",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13746364310/job/38441729649"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI801Zlw",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13746339146/job/38441671063"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI801ZeQ",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13746339145/job/38441671033"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI8049vw",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13746364310/job/38441729471"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI801aNg",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13746339146/job/38441671222"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI81q0Ew",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13746339145/job/38442546195"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI805SzQ",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/38441734861"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI805ySg",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=22725&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "a01470fa27a4e2f9f9bb2fca9b86f42daaad9c8d",
                "additions": 0,
                "deletions": 2,
                "committedDate": "2025-03-09T09:24:47Z",
                "author": {
                  "name": "grunweg",
                  "email": "rothgami@math.hu-berlin.de"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI82SJIw",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13747018724/job/38443190563"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI82SIWg",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13747018773/job/38443190362"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI82SIZg",
                        "name": "post-or-update-summary-comment",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13747018778/job/38443190374"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI82SI4Q",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13747018725/job/38443190497"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI82SIog",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13747018771/job/38443190434"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI82SItA",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13747018724/job/38443190452"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI82SJPQ",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13747018725/job/38443190589"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI82SIJw",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13747018771/job/38443190311"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI82SJiQ",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13747018724/job/38443190665"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI83CGtQ",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13747018725/job/38443976373"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI82SYaQ",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/38443194473"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI82Sssw",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=22725&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "createdAt": "2025-03-09T08:04:15Z",
        "deletions": 3,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/Tactic/Linter/Header.lean",
              "additions": 9,
              "deletions": 3
            }
          ]
        },
        "headRefName": "MR-lint-notation-imports",
        "headRefOid": "a01470fa27a4e2f9f9bb2fca9b86f42daaad9c8d",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c6N5GBR",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABh1mAHA",
              "color": "6BEB7E",
              "name": "maintainer-merge"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABk2TD1g",
              "color": "33DBEC",
              "name": "t-linter"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c6fGwSi",
              "body": "Does this prevent also transitive importing?  That is, a direct import will get flagged, but what if there is no direct import, but there is a transitive one?\r\n\r\nI wonder whether this should be regulated by an extension of the `assert_not_imported` machinery that is directory-aware.",
              "state": "COMMENTED",
              "author": {
                "login": "adomani"
              },
              "submittedAt": "2025-03-09T08:29:30Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6fGxwT",
              "body": "Thanks \n\nmaintainer delegate",
              "state": "APPROVED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2025-03-09T08:57:02Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "BLOCKED",
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 22725,
        "potentialMergeCommit": {
          "oid": "9ef41215830ffe9392fe39c5bbb35c7941be6d63"
        },
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": "APPROVED",
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c6fGwSi",
              "body": "Does this prevent also transitive importing?  That is, a direct import will get flagged, but what if there is no direct import, but there is a transitive one?\r\n\r\nI wonder whether this should be regulated by an extension of the `assert_not_imported` machinery that is directory-aware.",
              "state": "COMMENTED",
              "author": {
                "login": "adomani"
              },
              "submittedAt": "2025-03-09T08:29:30Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6fGxwT",
              "body": "Thanks \n\nmaintainer delegate",
              "state": "APPROVED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2025-03-09T08:57:02Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c52Y9_r",
                    "body": "```suggestion\n\n```\n",
                    "createdAt": "2025-03-09T08:56:37Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjEwMTA1MDE2",
              "login": "grunweg"
            },
            {
              "id": "U_kgDOB75MNQ",
              "login": "leanprover-community-mathlib4-bot"
            },
            {
              "id": "MDQ6VXNlcjg1NjY4Mzk0",
              "login": "leanprover-bot"
            },
            {
              "id": "MDQ6VXNlcjI5NDY3NzQ1",
              "login": "adomani"
            },
            {
              "id": "MDQ6VXNlcjE0MDkwNTkz",
              "login": "YaelDillies"
            }
          ]
        },
        "state": "OPEN",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI82SJIw",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13747018724/job/38443190563"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI82SIWg",
                "name": "label-and-report-new-contributor",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13747018773/job/38443190362"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI82SIZg",
                "name": "post-or-update-summary-comment",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13747018778/job/38443190374"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI82SI4Q",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13747018725/job/38443190497"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI82SIog",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13747018771/job/38443190434"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI82SItA",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13747018724/job/38443190452"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI82SJPQ",
                "name": "Build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13747018725/job/38443190589"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI82SIJw",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13747018771/job/38443190311"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI82SJiQ",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13747018724/job/38443190665"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI83CGtQ",
                "name": "Post-CI job",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13747018725/job/38443976373"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI82SYaQ",
                "name": "New Contributor Check",
                "conclusion": "NEUTRAL",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/38443194473"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI82Sssw",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=22725&login=leanprover-community&repository=mathlib4"
              }
            ]
          }
        },
        "title": "feat: enforce that Algebra.Notation imports no other files inside algebra",
        "updatedAt": "2025-03-09T17:13:26Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/22725",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "f9829727c289e4feca3b6a537e6bc41e5e6d1355"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6tKvRvzwAAAAPgEwCp",
              "createdAt": "2025-03-09T08:04:15Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6tKvRvzwAAAAPgEwCq",
              "createdAt": "2025-03-09T08:04:15Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABk2TD1g",
                "name": "t-linter"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6tKvRvzwAAAAPgEwT6",
              "createdAt": "2025-03-09T08:04:43Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAAB4rV5OQ",
                "name": "bench-after-CI"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6hc96V",
              "createdAt": "2025-03-09T08:05:06Z",
              "body": "### PR summary [a01470fa27](https://github.com/leanprover-community/mathlib4/pull/22725/commits/a01470fa27a4e2f9f9bb2fca9b86f42daaad9c8d)\n\n#### Import changes for modified files\n\nNo significant changes to the import graph\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n\n</details>\n\n---\n\n#### Declarations diff\n\nNo declarations were harmed in the making of this PR! üêô\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n---\n\n<details><summary>No changes to technical debt.</summary>\n\nYou can run this locally as\n```\n./scripts/technical-debt-metrics.sh pr_summary\n```\n* The `relative` value is the weighted *sum* of the differences with weight given by the *inverse* of the current value of the statistic.\n* The `absolute` value is the `relative` value divided by the total sum of the inverses of the current values (i.e. the weighted *average* of the differences).\n</details>\n",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "ReviewRequestedEvent",
              "id": "RRE_lADOFcwZ1c6tKvRvzwAAAAPgEwlY",
              "createdAt": "2025-03-09T08:05:18Z",
              "requestedReviewer": {
                "id": "MDQ6VXNlcjE0MDkwNTkz",
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "ReviewRequestedEvent",
              "id": "RRE_lADOFcwZ1c6tKvRvzwAAAAPgEwlc",
              "createdAt": "2025-03-09T08:05:18Z",
              "requestedReviewer": {
                "id": "MDQ6VXNlcjI5NDY3NzQ1",
                "login": "adomani"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6hc-CT",
              "createdAt": "2025-03-09T08:06:10Z",
              "body": "About the review requests:\r\n- @YaelDillies Can you check I got the logic exactly right, please?\r\n- @adomani Can you double-check the implementation?\r\nBoth are hopefully quick, and not urgent from my side.",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6fGwSi",
              "createdAt": "2025-03-09T08:29:30Z",
              "body": "Does this prevent also transitive importing?  That is, a direct import will get flagged, but what if there is no direct import, but there is a transitive one?\r\n\r\nI wonder whether this should be regulated by an extension of the `assert_not_imported` machinery that is directory-aware.",
              "author": {
                "login": "adomani"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6hdBuY",
              "createdAt": "2025-03-09T08:48:05Z",
              "body": "!bench",
              "author": {
                "login": "leanprover-community-mathlib4-bot"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6tKvRvzwAAAAPgFFYa",
              "createdAt": "2025-03-09T08:48:06Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6fGxwT",
              "createdAt": "2025-03-09T08:56:37Z",
              "body": "Thanks \n\nmaintainer delegate",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6hdClH",
              "createdAt": "2025-03-09T08:57:23Z",
              "body": "üöÄ Pull request has been placed on the maintainer queue by YaelDillies.",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6tKvRvzwAAAAPgFKbg",
              "createdAt": "2025-03-09T08:57:24Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABh1mAHA",
                "name": "maintainer-merge"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6hdE2S",
              "createdAt": "2025-03-09T09:20:02Z",
              "body": "Here are the [benchmark results](https://speed.lean-lang.org/mathlib4/run-detail/f1045b68-0a7f-4ad0-ac2b-5d2f8a1b6f15) for commit f9829727c289e4feca3b6a537e6bc41e5e6d1355.\nThere were [no significant changes](https://speed.lean-lang.org/mathlib4/compare/4770d126-1c36-4143-ad0a-ce0c370992d4/to/f1045b68-0a7f-4ad0-ac2b-5d2f8a1b6f15) against commit 2186c5fba75a91e10b40599542e35a8875814283.",
              "author": {
                "login": "leanprover-bot"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6hdE47",
              "createdAt": "2025-03-09T09:20:33Z",
              "body": "|File|Instructions|%|\n|-|-:|:-:|\n|`build`|+1.504‚¨ù10‚Åπ|(+0.00%)|\n[CI run](https://github.com/leanprover-community/mathlib4/actions/runs/13746981575)",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6tKvRvzwAAAAPgFWjT",
              "createdAt": "2025-03-09T09:20:34Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAAB4rV5OQ",
                "name": "bench-after-CI"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "a01470fa27a4e2f9f9bb2fca9b86f42daaad9c8d"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6hdGKJ",
              "createdAt": "2025-03-09T09:35:27Z",
              "body": "> Does this prevent also transitive importing? That is, a direct import will get flagged, but what if there is not direct import, but there is a transitive one?\r\n> \r\n> I wonder whether this should be regulated by an extension of the `assert_not_inported` machinery that is directory-aware.\r\n\r\nVery good question! This only lints direct imports. I agree transitive imports should also be caught.\r\n\r\nIf you have a pointer to how to extend assert_not_imported, I'm happy to try. (This is not my highest priority though, so might take some time.) In the mean-time, we could land this with an issue about the generalisation - or wait for the better fix instead. Either way is fine with me.",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6hd5Dy",
              "createdAt": "2025-03-09T17:12:52Z",
              "body": "What if, instead of checking that there is an `import ...` *syntax*, you actually inspect [docs#Lean.Environment.allImportedModuleNames](https://leanprover-community.github.io/mathlib4_docs/Lean/Environment.html#Lean.Environment.allImportedModuleNames), filter out the ones ones that should not be there and assert that the rest is empty?\r\n\r\nThis check should only run on the appropriate set of modules, so that, on most files, just the prefix check on the name will run.",
              "author": {
                "login": "adomani"
              }
            }
          ]
        }
      }
    }
  }
}
