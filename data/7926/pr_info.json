{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 108,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "mapehe"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "\r\nAdd definitions `CompletelyRegularSpace` and `T35Space`.\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 4,
        "closed": true,
        "closedAt": "2023-10-31T03:36:56Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5qEcsC",
              "body": "I've taken the liberty to mark this as \"topology\". Hope that's fine with you!",
              "createdAt": "2023-10-25T15:35:47Z",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qEfEZ",
              "body": "> I've taken the liberty to mark this as \"topology\". Hope that's fine with you!\n\nSounds good to me!",
              "createdAt": "2023-10-25T15:40:56Z",
              "author": {
                "login": "mapehe"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qEvQC",
              "body": "For context, I'm trying to gradually build higher quality version of [this](https://github.com/leanprover-community/mathlib4/compare/master...mapehe:mathlib4:stone-cech-embedding#diff-2a6e4cb9e091ae059c58aee98c2b41490bf3da03d951473ce856c40a23363bffR601-R604) proof in a couple of more polished PRs",
              "createdAt": "2023-10-25T16:17:50Z",
              "author": {
                "login": "mapehe"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qH2qp",
              "body": "Note it's possible to define completely regular space using [existence of a compatible uniform structure](https://en.wikipedia.org/wiki/Tychonoff_space#Uniform_structures), and I think it would be preferred due to less imports (no mention of real-valued functions). I don't know the proof of equivalence with the current definition, but I think it's something cool to add to mathlib.",
              "createdAt": "2023-10-26T05:34:09Z",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qH3Bj",
              "body": "> Note it's possible to define completely regular space using [existence of a compatible uniform structure](https://en.wikipedia.org/wiki/Tychonoff_space#Uniform_structures), and I think it would be preferred due to less imports (no mention of real-valued functions). I don't know the proof of equivalence with the current definition, but I think it's something cool to add to mathlib.\n\nThanks @alreadydone. I'll need to look into that.",
              "createdAt": "2023-10-26T05:36:09Z",
              "author": {
                "login": "mapehe"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qNObq",
              "body": "Thanks for the feedback on the code @alreadydone and @alexjbest. I made changes accordingly, happy to iterate, if you have further thoughts.",
              "createdAt": "2023-10-26T20:29:13Z",
              "author": {
                "login": "mapehe"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qNPx2",
              "body": "I feel like [this](https://github.com/leanprover-community/mathlib4/pull/7926/files#diff-bb6f0d47c3c6cb637ea412277814b30ac28d936daea70d1401bf6af6a256ba28R65-R68) should be easier, but I couldn't find a single `apply` for that. Maybe [these](https://github.com/leanprover-community/mathlib4/pull/7926/files#diff-bb6f0d47c3c6cb637ea412277814b30ac28d936daea70d1401bf6af6a256ba28R103-R110) two too.",
              "createdAt": "2023-10-26T20:33:55Z",
              "author": {
                "login": "mapehe"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qNZI2",
              "body": "> Note it's possible to define completely regular space using [existence of a compatible uniform structure](https://en.wikipedia.org/wiki/Tychonoff_space#Uniform_structures), and I think it would be preferred due to less imports (no mention of real-valued functions). I don't know the proof of equivalence with the current definition, but I think it's something cool to add to mathlib.\r\n\r\nI thought about this a little bit. What I originally set out to work towards was\r\n```\r\ntheorem denseEmbedding_stoneCechUnit [TopologicalSpace X] [T1Space X] [CompletelyRegularSpace X] :\r\n    @DenseEmbedding _ _ _ _ (stoneCechUnit : X → StoneCech X)\r\n```\r\nThe proof I currently have for that relies on [these](https://github.com/leanprover-community/mathlib4/pull/7926/files#diff-bb6f0d47c3c6cb637ea412277814b30ac28d936daea70d1401bf6af6a256ba28R56) functions in two ways\r\n\r\n1.  Using them, you get a basis for the topology of `X`.\r\n2. The codomain is a compact Hausdorff space. This enables the use of the universal property `stoneCechExtend_extends`.\r\n\r\nI couldn't think of a simple way to understand the proof in terms of uniform structures, so, to me, it seems that this alternative definition would lead to a different direction with other possible goals. I guess it really comes down to what's considered interesting.",
              "createdAt": "2023-10-26T21:07:29Z",
              "author": {
                "login": "mapehe"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qNmyM",
              "body": "I think it's fine to use the current definition for now, and we may or may not prefer to refactor it later using the uniformizable definition ... I think we could just add an instance `[UniformSpace X] : CompleteRegularSpace X` once the equivalence is proved. I think this file will import real numbers anyway so my comment about imports is actually moot.",
              "createdAt": "2023-10-26T22:01:26Z",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qPEPG",
              "body": "> I think it's fine to use the current definition for now, and we may or may not prefer to refactor it later using the uniformizable definition ... I think we could just add an instance `[UniformSpace X] : CompleteRegularSpace X` once the equivalence is proved. I think this file will import real numbers anyway so my comment about imports is actually moot.\r\n\r\nI think it may just be my lack of vision: As you mentioned above, it's possible to define these spaces and the claim I'm interested in without ever referring to reals. It doesn't seem (?) unreasonable to expect there would be some proof without reals too. Unfortunately that ventures to an area I don't know much about.\r\n\r\nOn the other hand, the present definition is a standard ingredient in the literature, so I'd expect it should be a part of mathlib in some form at some point. Perhaps there is an option to work with this definition for now, and improve on these issues later on as you said? I was planning to add a couple of intermediary theorems next which are also standard stuff. It seems that would be recyclable material even if the definitions are rearranged in the future?",
              "createdAt": "2023-10-27T05:49:10Z",
              "author": {
                "login": "mapehe"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qPJjS",
              "body": "> Perhaps there is an option to work with this definition for now, and improve on these issues later on as you said? \r\n\r\nSure; the hard part is to formalize the essential mathematical content, and a future refactor should not take excessive effort.",
              "createdAt": "2023-10-27T06:14:19Z",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qPXX1",
              "body": "Thanks, was able to drop some boring lines based on your tips @alreadydone ",
              "createdAt": "2023-10-27T07:11:20Z",
              "author": {
                "login": "mapehe"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qdPlt",
              "body": "@alreadydone I switched to separate definitions of `CompletelyRegularSpace` and `T35Space` and adjusted the theorems about which space types imply others accordingly. I think the current terminology indeed fits much better with the existing types of spaces",
              "createdAt": "2023-10-30T21:10:41Z",
              "author": {
                "login": "mapehe"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qeUP7",
              "body": "bors merge",
              "createdAt": "2023-10-31T02:20:09Z",
              "author": {
                "login": "PatrickMassot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qeUWM",
              "body": "Thanks @mapehe, and congratulations for your first accepted PR to Mathlib!",
              "createdAt": "2023-10-31T02:20:47Z",
              "author": {
                "login": "PatrickMassot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qehdZ",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6701401687/job/18208772969)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6701401687/job/18208772860)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6701401687/job/18208772545)",
              "createdAt": "2023-10-31T03:36:55Z",
              "author": {
                "login": "bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "4935f4be0db54bc1fa32a0f1aab3f77f602e4aeb",
                "additions": 108,
                "deletions": 0,
                "committedDate": "2023-10-30T21:02:52Z",
                "author": {
                  "name": "Matias Heikkilä",
                  "email": "mapehe@iki.fi"
                },
                "statusCheckRollup": null
              }
            }
          ]
        },
        "createdAt": "2023-10-25T15:14:15Z",
        "deletions": 0,
        "files": {
          "nodes": [
            {
              "path": "Mathlib.lean",
              "additions": 1,
              "deletions": 0
            },
            {
              "path": "Mathlib/Order/Filter/Basic.lean",
              "additions": 4,
              "deletions": 0
            },
            {
              "path": "Mathlib/Topology/CompletelyRegular.lean",
              "additions": 97,
              "deletions": 0
            },
            {
              "path": "Mathlib/Topology/NhdsSet.lean",
              "additions": 6,
              "deletions": 0
            }
          ]
        },
        "headRefName": "completely-regular",
        "headRefOid": "4935f4be0db54bc1fa32a0f1aab3f77f602e4aeb",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5dxJua",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
              "color": "06e039",
              "name": "ready-to-merge"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJbOw",
              "color": "33DBEC",
              "name": "t-topology"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5lU-v6",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alexjbest"
              },
              "submittedAt": "2023-10-26T15:53:39Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5lhDRv",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2023-10-30T02:36:42Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5lhIFo",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "PatrickMassot"
              },
              "submittedAt": "2023-10-30T03:07:52Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 7926,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5lMkem",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2023-10-25T16:25:50Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5lU7M6",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alexjbest"
              },
              "submittedAt": "2023-10-26T15:46:15Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5lU7bo",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alexjbest"
              },
              "submittedAt": "2023-10-26T15:46:45Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5lU9bS",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alexjbest"
              },
              "submittedAt": "2023-10-26T15:50:55Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5lU9ul",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alexjbest"
              },
              "submittedAt": "2023-10-26T15:51:35Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5lU-v6",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alexjbest"
              },
              "submittedAt": "2023-10-26T15:53:39Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5lWEsx",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2023-10-26T18:25:00Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5lZBQp",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mapehe"
              },
              "submittedAt": "2023-10-27T06:11:21Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5lZBXd",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mapehe"
              },
              "submittedAt": "2023-10-27T06:11:49Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5lZDAc",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2023-10-27T06:18:27Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5lZDn6",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2023-10-27T06:21:04Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5lZEnO",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2023-10-27T06:24:51Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5lgEez",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2023-10-29T07:06:32Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5lgMTZ",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mapehe"
              },
              "submittedAt": "2023-10-29T10:49:33Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5lgYlM",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2023-10-29T16:07:43Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5lg1Up",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "PatrickMassot"
              },
              "submittedAt": "2023-10-30T00:53:12Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5lg3rd",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2023-10-30T01:14:59Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5lg_5y",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "PatrickMassot"
              },
              "submittedAt": "2023-10-30T02:16:19Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5lhDRv",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2023-10-30T02:36:42Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5lhIFo",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "PatrickMassot"
              },
              "submittedAt": "2023-10-30T03:07:52Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5loVVU",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mapehe"
              },
              "submittedAt": "2023-10-30T21:06:41Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Rx4sX",
                    "body": "Maybe you're intentionally choosing your formulation but the following looks simpler:\r\n```suggestion\r\n  ∀ x : α, ∀ K : Set α, IsClosed K → x ∉ K →\r\n    ∃ f : C(α, ℝ), f x = 0 ∧ EqOn f 1 K ∧ ∀ x, f x ∈ Icc (0 : ℝ) 1\r\n```\r\nYou could use `C(α, I)` as well, then you don't need to include `f x ∈ Icc (0 : ℝ) 1`.\r\nAlso note that `X Y Z` are preferred over `α γ` etc. if you're starting a new file.",
                    "createdAt": "2023-10-25T16:25:50Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5R3DeJ",
                    "body": "This looks like a bit too an extreme use of `show_term`, was it just a rw before or something? That's probably more readable",
                    "createdAt": "2023-10-26T15:46:15Z",
                    "author": {
                      "login": "alexjbest"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5R3DoY",
                    "body": "If this is a proposition it should be a  `have` not a `let`",
                    "createdAt": "2023-10-26T15:46:45Z",
                    "author": {
                      "login": "alexjbest"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5R3E-U",
                    "body": "There is also a tactic `choose` that can make this sort of thing a bit less annoying to write",
                    "createdAt": "2023-10-26T15:50:55Z",
                    "author": {
                      "login": "alexjbest"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5R30eL",
                    "body": "Isn't this simply `obtain ⟨f, hf, hhf, _⟩ := CompletelyRegularSpace.completely_regular a s hs d`?\r\nAnd if you don't want the `_` you can replace it by `-` so it doesn't show up in the context.",
                    "createdAt": "2023-10-26T18:21:18Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5R3FLg",
                    "body": "You could use `rwa` (rewrite then assumption), here\r\n```suggestion\r\n      rwa [P]\r\n```",
                    "createdAt": "2023-10-26T15:51:35Z",
                    "author": {
                      "login": "alexjbest"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5R3F4w",
                    "body": "You might find the anonynous constructor notation helpful here, you can use `\\<a, b\\>` in place of `Exists.intro a b`, and you can nest this and replace `{left := a, right := b}` with the same thing too.",
                    "createdAt": "2023-10-26T15:53:39Z",
                    "author": {
                      "login": "alexjbest"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5R31Rn",
                    "body": "i.e., `⟨f ⁻¹' v, mem_v, f ⁻¹' u, mem_u, duv⟩`",
                    "createdAt": "2023-10-26T18:24:28Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5R50qs",
                    "body": "Is there a one-liner for this somewhere?",
                    "createdAt": "2023-10-27T06:11:21Z",
                    "author": {
                      "login": "mapehe"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5R510I",
                    "body": "[one_ne_zero](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/NeZero.html#one_ne_zero).symm should work",
                    "createdAt": "2023-10-27T06:18:27Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5R50vF",
                    "body": "Is there a one-liner for this and `hgK`?",
                    "createdAt": "2023-10-27T06:11:49Z",
                    "author": {
                      "login": "mapehe"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5R52OU",
                    "body": "Can't you simply write `g x = 0`? I think `Subtype.ext hfx` solves this.",
                    "createdAt": "2023-10-27T06:20:57Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5R523I",
                    "body": "Something like `fun k hk => Subtype.ext (hfK k hk)`\r\nBTW you can Shift-select multiple lines when adding comments.",
                    "createdAt": "2023-10-27T06:24:51Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5R-qWp",
                    "body": "I think you should remove `T1Space` from the definition, because e.g. on [Wikipedia](https://en.wikipedia.org/wiki/Tychonoff_space) a completely regular space is not necessarily T1; if it's T0 then it's T3 and called a Tychonoff space. The equivalence with uniformizability only holds without the T1 condition, since a uniform space isn't necessarily T1.\r\n\r\nAlso I think you can use `C(X, I)` rather than separating out the `Continuous` condition. I know that @PatrickMassot urged you to separate it out, but I don't see the point: if you're getting out a continuous map from a `CompletelyRegularSpace`, then working with a bundled continuous map will only be convenient; if you're proving a `CompletelyRegularSpace` instance, then writing `⟨⟨f, cont_f⟩, ..⟩` instead of `⟨f, cont_f, ...⟩` isn't really much more difficult. I can see that an unbundled `Continuous` condition would be more convenient if it appears as an argument to a theorem, but not here. Note also that [Urysohn's lemma](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/UrysohnsLemma.html#exists_continuous_zero_one_of_closed) is stated using bundled ContinuousMap.",
                    "createdAt": "2023-10-29T07:06:32Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5R-yMI",
                    "body": "About the terminology: I went back and forth a bit before making this PR, but eventually decided to use the definition given in Walker's book. Reconsidering this, I realize that some of the things I'm planning to add do not require the T1 bit, so it could be better to exclude T1 here, and maybe add a definition for another type of space (`TychonoffSpace`??) with T1 included.\n\nAbout the bundled functions: I don't really have the sufficient background in contributing to mathlib to add any input on that. It seems kind of a style/philosophy thing in this context.",
                    "createdAt": "2023-10-29T10:49:33Z",
                    "author": {
                      "login": "mapehe"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5R-_Av",
                    "body": "> it could be better to exclude T1 here, and maybe add a definition for another type of space (TychonoffSpace??) with T1 included.\r\n\r\nYeah it's definitely reasonable, e.g. [T3Space](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Separation.html#T3Space) is T0 + RegularSpace. So CompleteRegularSpace without T0 is consistent with that, and CompleteRegularSpace + T0 could be called T35Space in analogy with [T25Space](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Separation.html#T25Space).",
                    "createdAt": "2023-10-29T16:07:43Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5R_YVL",
                    "body": "I just checked in Mathlib and *every* use of Urysohn's lemma unpack the bundle continuous map. So thanks @alreadydone for pointing out we should restate that lemma without bundling. I think it is not worth the trouble to fix Urysohn's lemma, but let's not reproduce that mistake here.",
                    "createdAt": "2023-10-30T00:53:11Z",
                    "author": {
                      "login": "PatrickMassot"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5R_aAR",
                    "body": "Excuse me? I don't see it being unpacked at all in UrysohnsBounded, Metrizable, CompHaus/Basic, ContinuousFunction/Ideals, ContinuousMapDense among the [search results](https://github.com/search?q=repo%3Aleanprover-community%2Fmathlib4%20exists_continuous_zero_one_of_closed&type=code). Why would it be unpacked? ContinuousMap has a FunLike instance so if you want the function you can just pretend it's a function, and for the `Continuous` condition you can just write `f.continuous` or even `f.2`.",
                    "createdAt": "2023-10-30T01:14:59Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5R_lN6",
                    "body": "Oh I see my mistake. I saw huge unpacking in lines like `let ⟨f, hfs, hft, hf⟩ := exists_continuous_zero_one_of_closed hs ht hd`, but you are right that the bundle continuous map is not unpacked. So there is indeed no need to fix those (but the also bring nothing).",
                    "createdAt": "2023-10-30T03:07:52Z",
                    "author": {
                      "login": "PatrickMassot"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5R_fjD",
                    "body": "This proof is painful because you do not let filters help you. Whenever you need to discuss elements of a filter, you are either building the early filter library or fighting it. Here you are fighting it.\r\n\r\nOnce you have your function `f` sending `a` to `0` and `s` to 1, the intuitive proof is the following: \r\n* `f` sends the \"set\" of points that are close to `a` into the \"set\" of points that are close to `0` (by continuity of `f` and assumption on `f a`).\r\n* `f` sends the \"set\" of points that are near `s` into the \"set\" of points that are close to `1` (by continuity of `f` and assumption on `f '' s`).\r\n* Because `I` is `T2` and `0 ≠ 1`, those target \"sets\" are disjoints, hence the sources \"sets\" are disjoint.\r\n\r\nThe above arguments uses filters on `X` as generalized sets in `X`, it never uses a set of `X` seen as a member of a filter.\r\n\r\nUnfortunately two lemmas seem to be missing from Mathlib. The first one is very surprising. It covers the \"hence\" in the last sentence above. Mathlib seems to have only the iff version which requires an injectivity assumption. Note the proof is fully obfuscated since the statement is obvious.\r\n\r\n```lean\r\n-- This lemma needs to go in `Order.Filter.Basic`, before `disjoint_map`\r\nlemma Filter.disjoint_of_map {α β : Type*} {F G : Filter α} {f : α → β}\r\n    (h : Disjoint (map f F) (map f G)) : Disjoint F G :=\r\n    disjoint_iff.mpr <| map_eq_bot_iff.mp <| le_bot_iff.mp <| trans map_inf_le (disjoint_iff.mp h)\r\n```\r\n\r\nThen it  is slightly more convenient to add a special case of a lemma we already have:\r\n```lean\r\n-- This lemma needs to go in `Topology.NhdsSet`, after `Continuous.tendsto_nhdsSet`.\r\nlemma Continuous.tendsto_nhdsSet_nhds {X Y : Type*} [TopologicalSpace X] [TopologicalSpace Y]\r\n    {s : Set X} {y : Y} {f : X → Y} (h : Continuous f) (h' : EqOn f (fun _ ↦ y) s) : \r\n    Tendsto f (𝓝ˢ s) (𝓝 y) := by \r\n  rw [← nhdsSet_singleton]\r\n  exact h.tendsto_nhdsSet h'\r\n```\r\n(needing to add stuff there is a lot less surprising since `nhdsSet` isn't very much used).\r\n\r\nNow you need to pay for your idea to use `I` as the target instead of `ℝ`. It seems Mathlib doesn't know that `0 ≠ 1` in this type.\r\n```\r\ninstance : NeZero (1 : I) := ⟨sorry⟩\r\n```\r\n\r\nAnd then you are ready to follow the intuitive sketch above:\r\n```lean\r\ninstance CompletelyRegularSpace.t3space [CompletelyRegularSpace X] : T3Space X := by\r\n  have : T0Space X := by apply T1Space.t0Space\r\n  have : RegularSpace X := (regularSpace_iff X).mpr <| by    \r\n    intro s a hs ha\r\n    obtain ⟨f, cf, hf, hhf⟩ := CompletelyRegularSpace.completely_regular a s hs ha\r\n    apply disjoint_of_map (f := f)\r\n    apply Disjoint.mono (cf.tendsto_nhdsSet_nhds hhf) cf.continuousAt\r\n    exact disjoint_nhds_nhds.mpr (hf.symm ▸ zero_ne_one).symm\r\n  exact {}\r\n```",
                    "createdAt": "2023-10-30T02:16:19Z",
                    "author": {
                      "login": "PatrickMassot"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5R_hxV",
                    "body": "Threre is [unitInterval.instNeZeroElemRealUnitIntervalHasZeroOfNatToOfNat1HasOne](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/UnitInterval.html#unitInterval.instNeZeroElemRealUnitIntervalHasZeroOfNatToOfNat1HasOne) and I'm adding ZeroLEOne and BoundedOrder [here](https://github.com/leanprover-community/mathlib4/pull/7915/files#diff-fa7d5572056db41c1badb453962d73e25039fdaab5aa06bbd70db9221b99727fR75-R77).",
                    "createdAt": "2023-10-30T02:36:42Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SEFfI",
                    "body": "Thanks, this simpler proof will definitely be useful as a reference for me.\r\n\r\nI added the two theorems to the designated places, and switched to the proof above. Someone seems to have added `NeZero` in master recently, so no need to add anything there probably.",
                    "createdAt": "2023-10-30T21:06:41Z",
                    "author": {
                      "login": "mapehe"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjE4MDM3Mjk3",
              "login": "mapehe"
            },
            {
              "id": "MDQ6VXNlcjEwMTA1MDE2",
              "login": "grunweg"
            },
            {
              "id": "MDQ6VXNlcjMwNjQxNDU=",
              "login": "alreadydone"
            },
            {
              "id": "MDQ6VXNlcjE0MDYwODgz",
              "login": "PatrickMassot"
            },
            {
              "id": "MDQ6VXNlcjE2ODg1MzM=",
              "login": "alexjbest"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": null,
        "title": "[Merged by Bors] - feat(Topology/CompletelyRegular): Add definition `CompletelyRegularSpace`",
        "updatedAt": "2023-10-31T03:36:59Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/7926",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c507MDBzwAAAAKB5dPl",
              "createdAt": "2023-10-25T15:35:11Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJbOw",
                "name": "t-topology"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qEcsC",
              "createdAt": "2023-10-25T15:35:47Z",
              "body": "I've taken the liberty to mark this as \"topology\". Hope that's fine with you!",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qEfEZ",
              "createdAt": "2023-10-25T15:40:56Z",
              "body": "> I've taken the liberty to mark this as \"topology\". Hope that's fine with you!\n\nSounds good to me!",
              "author": {
                "login": "mapehe"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qEvQC",
              "createdAt": "2023-10-25T16:17:50Z",
              "body": "For context, I'm trying to gradually build higher quality version of [this](https://github.com/leanprover-community/mathlib4/compare/master...mapehe:mathlib4:stone-cech-embedding#diff-2a6e4cb9e091ae059c58aee98c2b41490bf3da03d951473ce856c40a23363bffR601-R604) proof in a couple of more polished PRs",
              "author": {
                "login": "mapehe"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5lMkem",
              "createdAt": "2023-10-25T16:25:50Z",
              "body": "",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qH2qp",
              "createdAt": "2023-10-26T05:34:09Z",
              "body": "Note it's possible to define completely regular space using [existence of a compatible uniform structure](https://en.wikipedia.org/wiki/Tychonoff_space#Uniform_structures), and I think it would be preferred due to less imports (no mention of real-valued functions). I don't know the proof of equivalence with the current definition, but I think it's something cool to add to mathlib.",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qH3Bj",
              "createdAt": "2023-10-26T05:36:09Z",
              "body": "> Note it's possible to define completely regular space using [existence of a compatible uniform structure](https://en.wikipedia.org/wiki/Tychonoff_space#Uniform_structures), and I think it would be preferred due to less imports (no mention of real-valued functions). I don't know the proof of equivalence with the current definition, but I think it's something cool to add to mathlib.\n\nThanks @alreadydone. I'll need to look into that.",
              "author": {
                "login": "mapehe"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5lU7M6",
              "createdAt": "2023-10-26T15:46:15Z",
              "body": "",
              "author": {
                "login": "alexjbest"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5lU7bo",
              "createdAt": "2023-10-26T15:46:45Z",
              "body": "",
              "author": {
                "login": "alexjbest"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5lU9ul",
              "createdAt": "2023-10-26T15:51:34Z",
              "body": "",
              "author": {
                "login": "alexjbest"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5lU-v6",
              "createdAt": "2023-10-26T15:53:39Z",
              "body": "",
              "author": {
                "login": "alexjbest"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qNObq",
              "createdAt": "2023-10-26T20:29:13Z",
              "body": "Thanks for the feedback on the code @alreadydone and @alexjbest. I made changes accordingly, happy to iterate, if you have further thoughts.",
              "author": {
                "login": "mapehe"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qNPx2",
              "createdAt": "2023-10-26T20:33:55Z",
              "body": "I feel like [this](https://github.com/leanprover-community/mathlib4/pull/7926/files#diff-bb6f0d47c3c6cb637ea412277814b30ac28d936daea70d1401bf6af6a256ba28R65-R68) should be easier, but I couldn't find a single `apply` for that. Maybe [these](https://github.com/leanprover-community/mathlib4/pull/7926/files#diff-bb6f0d47c3c6cb637ea412277814b30ac28d936daea70d1401bf6af6a256ba28R103-R110) two too.",
              "author": {
                "login": "mapehe"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qNZI2",
              "createdAt": "2023-10-26T21:07:29Z",
              "body": "> Note it's possible to define completely regular space using [existence of a compatible uniform structure](https://en.wikipedia.org/wiki/Tychonoff_space#Uniform_structures), and I think it would be preferred due to less imports (no mention of real-valued functions). I don't know the proof of equivalence with the current definition, but I think it's something cool to add to mathlib.\r\n\r\nI thought about this a little bit. What I originally set out to work towards was\r\n```\r\ntheorem denseEmbedding_stoneCechUnit [TopologicalSpace X] [T1Space X] [CompletelyRegularSpace X] :\r\n    @DenseEmbedding _ _ _ _ (stoneCechUnit : X → StoneCech X)\r\n```\r\nThe proof I currently have for that relies on [these](https://github.com/leanprover-community/mathlib4/pull/7926/files#diff-bb6f0d47c3c6cb637ea412277814b30ac28d936daea70d1401bf6af6a256ba28R56) functions in two ways\r\n\r\n1.  Using them, you get a basis for the topology of `X`.\r\n2. The codomain is a compact Hausdorff space. This enables the use of the universal property `stoneCechExtend_extends`.\r\n\r\nI couldn't think of a simple way to understand the proof in terms of uniform structures, so, to me, it seems that this alternative definition would lead to a different direction with other possible goals. I guess it really comes down to what's considered interesting.",
              "author": {
                "login": "mapehe"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qNmyM",
              "createdAt": "2023-10-26T22:01:26Z",
              "body": "I think it's fine to use the current definition for now, and we may or may not prefer to refactor it later using the uniformizable definition ... I think we could just add an instance `[UniformSpace X] : CompleteRegularSpace X` once the equivalence is proved. I think this file will import real numbers anyway so my comment about imports is actually moot.",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qPEPG",
              "createdAt": "2023-10-27T05:49:10Z",
              "body": "> I think it's fine to use the current definition for now, and we may or may not prefer to refactor it later using the uniformizable definition ... I think we could just add an instance `[UniformSpace X] : CompleteRegularSpace X` once the equivalence is proved. I think this file will import real numbers anyway so my comment about imports is actually moot.\r\n\r\nI think it may just be my lack of vision: As you mentioned above, it's possible to define these spaces and the claim I'm interested in without ever referring to reals. It doesn't seem (?) unreasonable to expect there would be some proof without reals too. Unfortunately that ventures to an area I don't know much about.\r\n\r\nOn the other hand, the present definition is a standard ingredient in the literature, so I'd expect it should be a part of mathlib in some form at some point. Perhaps there is an option to work with this definition for now, and improve on these issues later on as you said? I was planning to add a couple of intermediary theorems next which are also standard stuff. It seems that would be recyclable material even if the definitions are rearranged in the future?",
              "author": {
                "login": "mapehe"
              }
            },
            {
              "__typename": "ReadyForReviewEvent",
              "id": "RFRE_lADOFcwZ1c507MDBzwAAAAKC_MTS",
              "createdAt": "2023-10-27T05:52:55Z"
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5lZBQp",
              "createdAt": "2023-10-27T06:11:21Z",
              "body": "",
              "author": {
                "login": "mapehe"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5lZBXd",
              "createdAt": "2023-10-27T06:11:49Z",
              "body": "",
              "author": {
                "login": "mapehe"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qPJjS",
              "createdAt": "2023-10-27T06:14:19Z",
              "body": "> Perhaps there is an option to work with this definition for now, and improve on these issues later on as you said? \r\n\r\nSure; the hard part is to formalize the essential mathematical content, and a future refactor should not take excessive effort.",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5lZEnO",
              "createdAt": "2023-10-27T06:24:51Z",
              "body": "",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qPXX1",
              "createdAt": "2023-10-27T07:11:20Z",
              "body": "Thanks, was able to drop some boring lines based on your tips @alreadydone ",
              "author": {
                "login": "mapehe"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c507MDBzwAAAAKDndWG",
              "createdAt": "2023-10-28T15:47:49Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5lgEez",
              "createdAt": "2023-10-29T07:06:32Z",
              "body": "",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c507MDBzwAAAAKDso9B",
              "createdAt": "2023-10-29T09:35:17Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5lg_5y",
              "createdAt": "2023-10-30T02:16:19Z",
              "body": "",
              "author": {
                "login": "PatrickMassot"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "4935f4be0db54bc1fa32a0f1aab3f77f602e4aeb"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c507MDBzwAAAAKEgehk",
              "createdAt": "2023-10-30T21:04:24Z"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qdPlt",
              "createdAt": "2023-10-30T21:10:41Z",
              "body": "@alreadydone I switched to separate definitions of `CompletelyRegularSpace` and `T35Space` and adjusted the theorems about which space types imply others accordingly. I think the current terminology indeed fits much better with the existing types of spaces",
              "author": {
                "login": "mapehe"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qeUP7",
              "createdAt": "2023-10-31T02:20:09Z",
              "body": "bors merge",
              "author": {
                "login": "PatrickMassot"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c507MDBzwAAAAKEnazg",
              "createdAt": "2023-10-31T02:20:21Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
                "name": "ready-to-merge"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qeUWM",
              "createdAt": "2023-10-31T02:20:47Z",
              "body": "Thanks @mapehe, and congratulations for your first accepted PR to Mathlib!",
              "author": {
                "login": "PatrickMassot"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qehdZ",
              "createdAt": "2023-10-31T03:36:55Z",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6701401687/job/18208772969)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6701401687/job/18208772860)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6701401687/job/18208772545)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c507MDBzwAAAAKEo9jn",
              "createdAt": "2023-10-31T03:36:56Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c507MDBzwAAAAKEo9nM",
              "createdAt": "2023-10-31T03:36:59Z"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            }
          ]
        }
      }
    }
  }
}
