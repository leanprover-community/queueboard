{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 22,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "jjdishere"
        },
        "baseRefName": "master",
        "body": "Add two lemmas about Irreducibility preserved by `MulEquiv`.\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nFor details on the \"pull request lifecycle\" in mathlib, please see:\r\nhttps://leanprover-community.github.io/contribute/index.html\r\n\r\nIn particular, note that most reviewers will only notice your PR\r\nif it passes the continuous integration checks.\r\nPlease ask for help on https://leanprover.zulipchat.com if needed.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nIf you are moving or deleting declarations, please include these lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nMoves:\r\n- Vector.* -> Mathlib.Vector.*\r\n- ...\r\n\r\nDeletions:\r\n- Nat.bit1_add_bit1\r\n- ...\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n\r\n-->\r\n- [x] depends on: #17403 \r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 1,
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c6NVsj3",
              "body": "### PR summary [54f450948e](https://github.com/leanprover-community/mathlib4/pull/17092/commits/54f450948e4553afd29c0f62e115c5005e247120)\n\n<details><summary>\n\n#### Import changes for modified files\n\n</summary>\n\nDependency changes\n\n| File | Base Count | Head Count | Change |\n| --- | --- | --- | --- |\n| Mathlib.Algebra.Associated.Basic | 342 | 343 | +1 (+0.29%) |\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n|<details><summary>18 files</summary> `Mathlib.Data.Int.Associated` `Mathlib.Tactic.NormNum.Prime` `Mathlib.Data.Int.NatPrime` `Mathlib.Algebra.GCDMonoid.Multiset` `Mathlib.Algebra.GroupWithZero.NonZeroDivisors` `Mathlib.Data.Nat.Choose.Dvd` `Mathlib.Algebra.GCDMonoid.Basic` `Mathlib.Algebra.PUnitInstances.GCDMonoid` `Mathlib.Algebra.BigOperators.Associated` `Mathlib.Data.Nat.Factors` `Mathlib.Data.Nat.Prime.Basic` `Mathlib.RingTheory.OreLocalization.Ring` `Mathlib.Data.Nat.Prime.Defs` `Mathlib.Algebra.Associated.Basic` `Mathlib.Data.List.Prime` `Mathlib.Algebra.GCDMonoid.Finset` `Mathlib.Algebra.Associated.OrderedCommMonoid` `Mathlib.Data.Nat.PrimeFin`</details>|1|\n\n</details>\n\n</details>\n\n---\n\n#### Declarations diff\n\n`+ Irreducible.map`\n`+ MulEquiv.irreducible_iff`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.",
              "createdAt": "2024-09-24T13:26:47Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6Orpfg",
              "body": "Now this PR no longer depends on #17089 . Golfed slightly using #6045 .",
              "createdAt": "2024-10-04T14:10:59Z",
              "author": {
                "login": "jjdishere"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6QW1W8",
              "body": "This PR/issue depends on:\n* ~~leanprover-community/mathlib4#17403~~\nBy **[Dependent Issues](https://github.com/z0al/dependent-issues)** (ðŸ¤–). Happy coding!\n<!-- By Dependent Issues (Action) - DO NOT REMOVE -->",
              "createdAt": "2024-10-18T09:03:37Z",
              "author": {
                "login": "mathlib4-dependent-issues-bot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6QqWpa",
              "body": "This PR is ready for review again.",
              "createdAt": "2024-10-21T15:31:04Z",
              "author": {
                "login": "jjdishere"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6QsYBA",
              "body": "In fact, after #17089 is merged still we cannot generalize the `Irreducible.map` to a more general setup. Mathematically, one really needs a bijection to prove this theorem.",
              "createdAt": "2024-10-21T19:32:09Z",
              "author": {
                "login": "jjdishere"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6QwZ_U",
              "body": "Surjective + local hom is not enough, right?",
              "createdAt": "2024-10-22T08:28:42Z",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6Q7K4l",
              "body": "> Surjective + local hom is not enough, right?\r\n\r\nNot enough. In order to show `f (x) = a * b` implies `a` or `b` is a unit, one needs to find preimage `a'` and `b'` of `a` `b` such that `a' * b' = x` and use the fact that `x` is irreducible. However, surjectivity cannot guarantee this. It only guarantees `a' * b' = x * (something in the kernel)`.",
              "createdAt": "2024-10-23T09:16:03Z",
              "author": {
                "login": "jjdishere"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6Q7hD2",
              "body": "> > Surjective + local hom is not enough, right?\r\n> \r\n> Not enough. In order to show `f (x) = a * b` implies `a` or `b` is a unit, one needs to find preimage `a'` and `b'` of `a` `b` such that `a' * b' = x` and use the fact that `x` is irreducible. However, surjectivity cannot guarantee this. It only guarantees `a' * b' = x * (something in the kernel)`.\r\n\r\nYeah, I see it doesn't work immediately, but it would be nice to have an easy counterexample for the docstring. Anyway it is not very important. Thanks!\r\n\r\nbors merge",
              "createdAt": "2024-10-23T09:41:25Z",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6Q8JZ-",
              "body": "Build failed (retrying...):\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/11477450627/job/31939546604)",
              "createdAt": "2024-10-23T10:35:07Z",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6Q8Jwy",
              "body": "Canceled.",
              "createdAt": "2024-10-23T10:35:50Z",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6Q8KWS",
              "body": "> Yeah, I see it doesn't work immediately, but it would be nice to have an easy counterexample for the docstring. Anyway it is not very important. Thanks!\r\n\r\nI found a counterexample and added it to the docstring.",
              "createdAt": "2024-10-23T10:37:03Z",
              "author": {
                "login": "jjdishere"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6Q8Zjc",
              "body": "> > Yeah, I see it doesn't work immediately, but it would be nice to have an easy counterexample for the docstring. Anyway it is not very important. Thanks!\r\n> \r\n> I found a counterexample and added it to the docstring.\r\n\r\nNice!\r\n\r\nbors merge",
              "createdAt": "2024-10-23T11:06:56Z",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6Q835M",
              "body": "Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/11478905250/job/31944061454)\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/11478905250/job/31944061711)",
              "createdAt": "2024-10-23T11:52:51Z",
              "author": {
                "login": "mathlib-bors"
              }
            }
          ]
        },
        "closed": true,
        "closedAt": "2024-10-23T11:52:52Z",
        "createdAt": "2024-09-24T13:26:02Z",
        "deletions": 1,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/Algebra/Associated/Basic.lean",
              "additions": 22,
              "deletions": 1
            }
          ]
        },
        "headRefName": "jiedong_jiang_irreducible'",
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c58hRCg",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
              "color": "06e039",
              "name": "ready-to-merge"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABJc1VKA",
              "color": "acff3f",
              "name": "easy"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJjTQ",
              "color": "33DBEC",
              "name": "t-algebra"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABb5aSCQ",
              "color": "8BBA68",
              "name": "new-contributor"
            }
          ]
        },
        "number": 17092,
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c6KooQi",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2024-09-24T17:15:59Z"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHb9-UwA",
                "name": "label-and-report-new-contributor",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11478135739/job/31941694656"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHb9-Uvw",
                "name": "build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11478135740/job/31941694655"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHb9-M9Q",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11478135052/job/31941692661"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHb9-POw",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11478135048/job/31941693243"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHb9-WTA",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11478135745/job/31941695052"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHb9-OGQ",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11478135052/job/31941692953"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHb9-NFw",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11478135048/job/31941692695"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHb9-U9A",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11478135745/job/31941694708"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHb9-PaA",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11478135052/job/31941693288"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHb9-OMg",
                "name": "Build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11478135048/job/31941692978"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHb9-Qgg",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11478135052/job/31941693570"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHb_a7JQ",
                "name": "Post-CI job",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11478135048/job/31943211813"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHb9-tBw",
                "name": "New Contributor Check",
                "conclusion": "NEUTRAL",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/31941700871"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHb9_yvQ",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=17092&login=leanprover-community&repository=mathlib4"
              },
              {
                "__typename": "StatusContext",
                "id": "SC_kwDOFcwZ1c8AAAAHe-1zqw",
                "context": "bors",
                "state": "SUCCESS",
                "targetUrl": "https://mathlib-bors-ca18eefec4cb.herokuapp.com/batches/6699",
                "description": "Build succeeded"
              }
            ]
          }
        },
        "title": "[Merged by Bors] - feat(Algebra/Irreducible): prove irreducibility preserved by `MulEquiv`",
        "updatedAt": "2024-10-23T11:52:55Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/17092"
      }
    }
  }
}
