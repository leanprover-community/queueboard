{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 271,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "ocfnash"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "The main changes are:\r\n\r\n- we replace the data-bearing `PerfectRing` typeclass with a `Prop`-valued (non-constructive) version,\r\n- we introduce a new typeclass `PerfectField`,\r\n- we add a proof that a perfect field of positive characteristic has surjective Frobenius map,\r\n- we add some basic facts such as perfection of finite rings / fields and products of perfect rings.\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 10,
        "closed": true,
        "closedAt": "2023-08-14T22:04:45Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5ix2lZ",
              "body": "Would you like to add the equivalent definition that a field is perfect if and only if every (finite) algebraic extension is surjective?",
              "createdAt": "2023-07-30T18:21:35Z",
              "author": {
                "login": "acmepjz"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5ix6nD",
              "body": "> Would you like to add the equivalent definition that a field is perfect if and only if every (finite) algebraic extension is surjective?\r\n\r\nI don't plan to do this, but I encourage you to do it in a follow-up PR if you're interested!",
              "createdAt": "2023-07-30T19:55:15Z",
              "author": {
                "login": "ocfnash"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5iyCNZ",
              "body": "> * we replace the data-bearing `PerfectRing` typeclass with a `Prop`-valued (non-constructive) version,\r\n\r\nWhat do we gain by removing the data here? Is the problem that the class would not be subsingleton?",
              "createdAt": "2023-07-30T22:43:14Z",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5i0hUa",
              "body": "> Is the problem that the class would not be subsingleton?\r\n\r\nIn fact the existing class is subsingleton:\r\n```lean\r\n-- Using old definition of `PerfectRing` (which I propose to remove):\r\nexample : Subsingleton (PerfectRing R p) := by\r\n  constructor\r\n  rintro ⟨f, -, hfr⟩ ⟨g, hgl, -⟩\r\n  congr\r\n  exact LeftInverse.eq_rightInverse hfr hgl\r\n```\r\nso this is not the problem.\r\n\r\n> What do we gain by removing the data here? \r\n\r\nI claim the advantages are:\r\n\r\n1. We get a type-theoretic expression of the above uniqueness.\r\n2. Our formalisation becomes classical as opposed to constructive. [Albeit you might argue this begs your question.]\r\n3. The sociological advantage that proposed new definition is what most mathematicians would expect.\r\n4. We cannot author lemmas which depend on a particular instance of `PerfectRing` (e.g., stemming from finiteness) that might fail in a rewrite when `PerfectRing` is available some other way. [I admit, slightly speculative.]",
              "createdAt": "2023-07-31T08:46:16Z",
              "author": {
                "login": "ocfnash"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5i14Ms",
              "body": "1. I'd claim this isn't really true; the actual statement then becomes that the `classical.some` to get nthRoot is unique (which of course is also true), but is more work to state not less!\r\n2. Yes, this is really the same question, which I realize is controversial and subjective\r\n3. That can be resolved with an `ofBijective` constructor: we have the same thing for `IsInternal` and `Decomposition` on direct sums, though maybe there is a stronger answer for 2) there (computable decompositions are common, I don't know about pthRoots).\r\n4. This was the answer I was looking for, but I was hoping we had evidence that the problem was more than speculative!\r\n\r\n",
              "createdAt": "2023-07-31T12:36:39Z",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5i2Gjk",
              "body": "Thanks for these thoughtful responses.\r\n\r\nWith regard to 4, to make it a bit less speculative, I just added an instance proving that the product `R × S` of two perfect rings is perfect. I claim this is exactly the sort of instance that would be problematic with a data-bearing instance as there might be a diamond of solutions (e.g., if `R` and `S` are both finite).",
              "createdAt": "2023-07-31T13:13:14Z",
              "author": {
                "login": "ocfnash"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5j-cRr",
              "body": ":v: ocfnash can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests).",
              "createdAt": "2023-08-14T13:25:08Z",
              "author": {
                "login": "bors"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5j-l3n",
              "body": "bors merge",
              "createdAt": "2023-08-14T13:49:05Z",
              "author": {
                "login": "ocfnash"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5j-4Iw",
              "body": "This PR was included in a batch that was canceled, it will be automatically retried",
              "createdAt": "2023-08-14T14:28:06Z",
              "author": {
                "login": "bors"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5kAonm",
              "body": "Build failed (retrying...):\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/5858949285/job/15883952790)",
              "createdAt": "2023-08-14T18:49:12Z",
              "author": {
                "login": "bors"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5kA5bh",
              "body": "Build failed (retrying...):\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/5859472813/job/15885546222)",
              "createdAt": "2023-08-14T19:42:56Z",
              "author": {
                "login": "bors"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5kBl80",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/5860589299/job/15888992696)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/5860589299/job/15888992286)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/5860589299/job/15888992495)",
              "createdAt": "2023-08-14T22:04:44Z",
              "author": {
                "login": "bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "88b9b776338e4865a75268d58de6a9ac7df283ff",
                "additions": 105,
                "deletions": 0,
                "committedDate": "2023-07-27T15:12:11Z",
                "author": {
                  "name": "Oliver Nash",
                  "email": "github@olivernash.org"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "fd6bf42d887ca7d5982b01ea543a007e8bb9d74f",
                "additions": 5,
                "deletions": 5,
                "committedDate": "2023-07-28T14:23:45Z",
                "author": {
                  "name": "Oliver Nash",
                  "email": "github@olivernash.org"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "4b33ee434f8077f276a7044b570dee1a148ae0ac",
                "additions": 36,
                "deletions": 1,
                "committedDate": "2023-07-28T14:24:07Z",
                "author": {
                  "name": "Oliver Nash",
                  "email": "github@olivernash.org"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "c91e496b7cbceffa1c4f77e427d2d0a061421652",
                "additions": 4,
                "deletions": 3,
                "committedDate": "2023-07-28T15:18:22Z",
                "author": {
                  "name": "Oliver Nash",
                  "email": "github@olivernash.org"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "ee62315d640ab47265b2d6935eb013344afc8856",
                "additions": 26,
                "deletions": 31,
                "committedDate": "2023-07-28T15:47:33Z",
                "author": {
                  "name": "Oliver Nash",
                  "email": "github@olivernash.org"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "749960b06971fe64cf39771cef4e15006eb77ee0",
                "additions": 8,
                "deletions": 10,
                "committedDate": "2023-07-28T15:48:59Z",
                "author": {
                  "name": "Oliver Nash",
                  "email": "github@olivernash.org"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "c91d1033894ac15c2de6ffcc198e0fc9fb854604",
                "additions": 9,
                "deletions": 1,
                "committedDate": "2023-07-28T16:08:07Z",
                "author": {
                  "name": "Oliver Nash",
                  "email": "github@olivernash.org"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "43ed460118bb0caca6a0c71c60930b788d6c6b82",
                "additions": 33,
                "deletions": 135,
                "committedDate": "2023-07-28T17:10:25Z",
                "author": {
                  "name": "Oliver Nash",
                  "email": "github@olivernash.org"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "d2318585a8838b45b100d570a1b7d1e262567c14",
                "additions": 68,
                "deletions": 36,
                "committedDate": "2023-07-30T14:43:55Z",
                "author": {
                  "name": "Oliver Nash",
                  "email": "github@olivernash.org"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "38395453b7df71a7df750465da37cbabf8805058",
                "additions": 7,
                "deletions": 5,
                "committedDate": "2023-07-30T15:02:47Z",
                "author": {
                  "name": "Oliver Nash",
                  "email": "github@olivernash.org"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "0a7e03ec25234d2dc6918e2f73023905b37a034e",
                "additions": 17,
                "deletions": 18,
                "committedDate": "2023-07-30T15:31:14Z",
                "author": {
                  "name": "Oliver Nash",
                  "email": "github@olivernash.org"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "bf3019e3149953e2ec56726a44a9400d0d1cd95d",
                "additions": 3,
                "deletions": 3,
                "committedDate": "2023-07-30T15:35:38Z",
                "author": {
                  "name": "Oliver Nash",
                  "email": "github@olivernash.org"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "b7a5801f3397efe28607ce967db9698ddb7bc07a",
                "additions": 6,
                "deletions": 4,
                "committedDate": "2023-07-30T15:39:41Z",
                "author": {
                  "name": "Oliver Nash",
                  "email": "github@olivernash.org"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "450be97c2a668b73d6ffa2bb25534e13939f03e2",
                "additions": 2,
                "deletions": 2,
                "committedDate": "2023-07-30T15:46:31Z",
                "author": {
                  "name": "Oliver Nash",
                  "email": "github@olivernash.org"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "696409e7454d30829ec4b721485caa26a0e0c27a",
                "additions": 16,
                "deletions": 31,
                "committedDate": "2023-07-30T19:54:04Z",
                "author": {
                  "name": "Oliver Nash",
                  "email": "github@olivernash.org"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "60e118014d499522ae563ef7589aa4f5f3f3ad24",
                "additions": 0,
                "deletions": 6,
                "committedDate": "2023-07-30T22:30:19Z",
                "author": {
                  "name": "Oliver Nash",
                  "email": "github@olivernash.org"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "1a22759f5efff7a2bd2b2675da1caf937102bee0",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-07-31T13:08:57Z",
                "author": {
                  "name": "Oliver Nash",
                  "email": "github@olivernash.org"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "eba14689d78a20ae6770b00aedbfa865614e7210",
                "additions": 8,
                "deletions": 0,
                "committedDate": "2023-07-31T13:09:08Z",
                "author": {
                  "name": "Oliver Nash",
                  "email": "github@olivernash.org"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "ff93cb70d9a51e810a3248b0947831a3d27668a5",
                "additions": 7120,
                "deletions": 2708,
                "committedDate": "2023-08-01T17:20:42Z",
                "author": {
                  "name": "Oliver Nash",
                  "email": "github@olivernash.org"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "7dd9523e51310946ab69e66703d764bb0289f516",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-08-10T09:07:10Z",
                "author": {
                  "name": "Oliver Nash",
                  "email": "github@olivernash.org"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "ca3a259b467c75bacf321710224b8aba5573f8d2",
                "additions": 22920,
                "deletions": 15851,
                "committedDate": "2023-08-10T23:39:30Z",
                "author": {
                  "name": "Oliver Nash",
                  "email": "github@olivernash.org"
                },
                "statusCheckRollup": null
              }
            }
          ]
        },
        "createdAt": "2023-07-27T15:13:26Z",
        "deletions": 209,
        "files": {
          "nodes": [
            {
              "path": "Mathlib.lean",
              "additions": 1,
              "deletions": 0
            },
            {
              "path": "Mathlib/Algebra/Hom/Iterate.lean",
              "additions": 6,
              "deletions": 14
            },
            {
              "path": "Mathlib/Data/Polynomial/Derivative.lean",
              "additions": 0,
              "deletions": 6
            },
            {
              "path": "Mathlib/Data/Set/Pointwise/Iterate.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/FieldTheory/IsAlgClosed/Basic.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/FieldTheory/Perfect.lean",
              "additions": 181,
              "deletions": 0
            },
            {
              "path": "Mathlib/FieldTheory/PerfectClosure.lean",
              "additions": 49,
              "deletions": 164
            },
            {
              "path": "Mathlib/FieldTheory/SplittingField/Construction.lean",
              "additions": 4,
              "deletions": 1
            },
            {
              "path": "Mathlib/RingTheory/Perfection.lean",
              "additions": 20,
              "deletions": 17
            },
            {
              "path": "Mathlib/RingTheory/WittVector/Frobenius.lean",
              "additions": 8,
              "deletions": 5
            }
          ]
        },
        "headRefName": "ocfnash/perfect_fields",
        "headRefOid": "ca3a259b467c75bacf321710224b8aba5573f8d2",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5Wjq8C",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABAt13Ow",
              "color": "bfd4f2",
              "name": "delegated"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
              "color": "06e039",
              "name": "ready-to-merge"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJjTQ",
              "color": "33DBEC",
              "name": "t-algebra"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5cZZiL",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-07-27T15:38:27Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5ccvnj",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "acmepjz"
              },
              "submittedAt": "2023-07-28T00:21:48Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5d_LYn",
              "body": "bors d+",
              "state": "APPROVED",
              "author": {
                "login": "jcommelin"
              },
              "submittedAt": "2023-08-14T13:25:07Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5dmXMv",
              "body": "I raised some questions. I think this is the right way to do it. No constructivists are interested in perfect fields, and this will make the lives of the perfectoid people easier. I don't think there was any real justification in having this definition constructive, I think it was just a historical coincidence because the author of the original file was going through a constructivist phase at the time.\r\n\r\n`PerfectField.toPerfectRing` : nice! ",
              "state": "APPROVED",
              "author": {
                "login": "kbuzzard"
              },
              "submittedAt": "2023-08-09T19:03:54Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 6182,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": "APPROVED",
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5cZZiL",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-07-27T15:38:27Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5cZcfG",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-07-27T15:43:13Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5ccHfC",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "acmepjz"
              },
              "submittedAt": "2023-07-27T21:52:08Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5ccIGN",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "acmepjz"
              },
              "submittedAt": "2023-07-27T21:53:35Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5ccvnj",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "acmepjz"
              },
              "submittedAt": "2023-07-28T00:21:48Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5cgeDg",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-07-28T12:21:50Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5chWEa",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-07-28T14:27:16Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5chWLY",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-07-28T14:27:31Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5dmXMv",
              "body": "I raised some questions. I think this is the right way to do it. No constructivists are interested in perfect fields, and this will make the lives of the perfectoid people easier. I don't think there was any real justification in having this definition constructive, I think it was just a historical coincidence because the author of the original file was going through a constructivist phase at the time.\r\n\r\n`PerfectField.toPerfectRing` : nice! ",
              "state": "APPROVED",
              "author": {
                "login": "kbuzzard"
              },
              "submittedAt": "2023-08-09T19:03:54Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5dqYj1",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-08-10T09:07:40Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5d_LOK",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "jcommelin"
              },
              "submittedAt": "2023-08-14T13:24:44Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5d_LYn",
              "body": "bors d+",
              "state": "APPROVED",
              "author": {
                "login": "jcommelin"
              },
              "submittedAt": "2023-08-14T13:25:07Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5d_V7G",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-08-14T13:48:40Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5MFW2j",
                    "body": "Doesn't this clash with the existing `PerfectRing`?",
                    "createdAt": "2023-07-27T15:38:27Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5MFYnn",
                    "body": "Yes, once I'm happy with this file, I'll be nuking the existing `PerfectRing`.",
                    "createdAt": "2023-07-27T15:43:13Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5MG0Cs",
                    "body": "I think in mathlib we should only use `simp only` but not `simp`?\r\n```suggestion\r\n  ext; simp only [RingHom.coe_comp, RingHom.coe_coe, comp_apply, frobeniusEquiv_symm_apply,\r\n    surjInv_eq, RingHom.id_apply]\r\n```",
                    "createdAt": "2023-07-27T21:52:07Z",
                    "author": {
                      "login": "acmepjz"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5MJvhL",
                    "body": "It's OK to use `simp` to finish a proof (we call this a \"terminal simp\"). So I would only change this to `simp only` if it was slow but it's actually very fast so I'll leave it.",
                    "createdAt": "2023-07-28T14:27:15Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5MG0P5",
                    "body": "Same as above, use `simp only` instead of `simp`\r\n```suggestion\r\n  · exfalso; revert hf; simp only [not_irreducible_expand, IsEmpty.forall_iff]\r\n```",
                    "createdAt": "2023-07-27T21:53:34Z",
                    "author": {
                      "login": "acmepjz"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5MJvlx",
                    "body": "As above.",
                    "createdAt": "2023-07-28T14:27:31Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5MHMcJ",
                    "body": "I have a half-baked attempt using `Mathlib.FieldTheory.SplittingField.Construction` with a lot of `sorry`s:\r\n```lean\r\ninstance PerfectField.toPerfectRing (p : ℕ) [HP : Fact p.Prime] [CharP K p] : PerfectRing K p := by\r\n  refine' mkOfReduced _ _ $ fun y ↦ _\r\n  simp only [frobenius, RingHom.coe_mk, MonoidHom.coe_mk, OneHom.coe_mk]\r\n  let f : Polynomial K := Polynomial.X ^ p - Polynomial.C y\r\n  have hfdeg : f.degree = p :=\r\n    Polynomial.degree_X_pow_sub_C (Nat.pos_of_ne_zero <| NeZero.ne p) y\r\n  have hfdeg' : f.degree ≠ 0 := by rw [hfdeg]; norm_cast; exact NeZero.ne p\r\n  have hfnotunit : ¬ IsUnit f := fun h => hfdeg' <| Polynomial.degree_eq_zero_of_isUnit h\r\n  have hf' : Polynomial.derivative f = 0 := by\r\n    rw [map_sub, Polynomial.derivative_X_pow, CharP.cast_eq_zero, map_zero, zero_mul,\r\n      Polynomial.derivative_C, sub_self]\r\n  have hfnotirr : ¬ Irreducible f := fun h => by\r\n    replace h := separable_of_irreducible h\r\n    rw [Polynomial.Separable, hf', isCoprime_zero_right] at h\r\n    exact hfnotunit h\r\n  let g := f.factor\r\n  let d := g.natDegree\r\n  have hd0 : 0 < d := by\r\n    sorry\r\n  have hdp : d < p := by\r\n    sorry\r\n  have hdinv : IsUnit (d : K) := by\r\n    sorry\r\n  have : Fact (Irreducible g) := f.fact_irreducible_factor\r\n  have hdiv : g ∣ f := Polynomial.factor_dvd_of_not_isUnit hfnotunit\r\n  have hroot := hdiv\r\n  rw [← AdjoinRoot.mk_eq_zero, map_sub, map_pow, AdjoinRoot.mk_X, AdjoinRoot.mk_C,\r\n    sub_eq_zero] at hroot\r\n  have : CharP (AdjoinRoot g) p := by\r\n    sorry\r\n  have hf1 : f.map (AdjoinRoot.of g)\r\n      = ((Polynomial.X (R := AdjoinRoot g)) - Polynomial.C (AdjoinRoot.root g)) ^ p := by\r\n    rw [Polynomial.map_sub, Polynomial.map_pow, Polynomial.map_X,\r\n      Polynomial.map_C, ← hroot, map_pow, sub_pow_char]\r\n  have hg1 : g.map (AdjoinRoot.of g)\r\n      = ((Polynomial.X (R := AdjoinRoot g)) - Polynomial.C (AdjoinRoot.root g)) ^ d := by\r\n    sorry\r\n  have hcoeff : (g.map (AdjoinRoot.of g)).coeff (d - 1) = -d * AdjoinRoot.root g := by\r\n    sorry\r\n  rw [Polynomial.coeff_map] at hcoeff\r\n  use -(d : K)⁻¹ * g.coeff (d - 1)\r\n  sorry\r\n```",
                    "createdAt": "2023-07-28T00:21:47Z",
                    "author": {
                      "login": "acmepjz"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5MJNnT",
                    "body": "Thank you for very much sharing this.\r\n\r\nI have part of a proof which is morally the same but takes a slightly different route. I expect to push later today.",
                    "createdAt": "2023-07-28T12:21:49Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5M1X2L",
                    "body": "```suggestion\r\n   if its absolute Frobenius map `x ↦ xᵖ` is bijective.\r\n```",
                    "createdAt": "2023-08-09T18:52:25Z",
                    "author": {
                      "login": "kbuzzard"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5M1ZaK",
                    "body": "```suggestion\r\n  refine PerfectField.mk <| fun hf ↦ ?_\r\n```\r\nIs `refine` deprecated? Is `$`? I don't know the answers to either of these questions. Similarly line 152.",
                    "createdAt": "2023-08-09T18:57:30Z",
                    "author": {
                      "login": "kbuzzard"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5M4OzQ",
                    "body": "The style here is allowed.",
                    "createdAt": "2023-08-10T09:07:40Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5NGJK7",
                    "body": "Should we still have lemmas like this? (But spelled with `(frobeniusEquiv R p).symm`)",
                    "createdAt": "2023-08-14T13:24:44Z",
                    "author": {
                      "login": "jcommelin"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5NGQCU",
                    "body": "I think we have what we should. In particular, this one is known to `simp` from the rest of what's there:\r\n```lean\r\nexample {x : R} : (frobeniusEquiv R p).symm (x ^ p) = x :=\r\n  by simp? says simp only [map_pow, frobeniusEquiv_symm_pow_p]\r\n```",
                    "createdAt": "2023-08-14T13:48:40Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjc3MzQzNjQ=",
              "login": "ocfnash"
            },
            {
              "id": "MDQ6VXNlcjMzOTc3Nzk=",
              "login": "acmepjz"
            },
            {
              "id": "MDQ6VXNlcjQyNTI2MA==",
              "login": "eric-wieser"
            },
            {
              "id": "MDQ6VXNlcjU2MzY3MDU=",
              "login": "jcommelin"
            },
            {
              "id": "MDQ6VXNlcjMxODY3ODI3",
              "login": "kbuzzard"
            },
            {
              "id": "U_kgDOB75MNQ",
              "login": "leanprover-community-mathlib4-bot"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": null,
        "title": "[Merged by Bors] - chore: refactor perfect rings / fields",
        "updatedAt": "2023-08-14T22:04:49Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/6182",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "88b9b776338e4865a75268d58de6a9ac7df283ff"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5swQfCzwAAAAJQTVtA",
              "createdAt": "2023-07-27T15:13:26Z",
              "label": {
                "id": "MDU6TGFiZWwzMjcxMjQ0NzU5",
                "name": "WIP"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5swQfCzwAAAAJQTVtG",
              "createdAt": "2023-07-27T15:13:26Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJjTQ",
                "name": "t-algebra"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5cZZiL",
              "createdAt": "2023-07-27T15:38:27Z",
              "body": "",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5ccHfC",
              "createdAt": "2023-07-27T21:52:07Z",
              "body": "",
              "author": {
                "login": "acmepjz"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5ccIGN",
              "createdAt": "2023-07-27T21:53:34Z",
              "body": "",
              "author": {
                "login": "acmepjz"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5ccvnj",
              "createdAt": "2023-07-28T00:21:47Z",
              "body": "",
              "author": {
                "login": "acmepjz"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "fd6bf42d887ca7d5982b01ea543a007e8bb9d74f"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "4b33ee434f8077f276a7044b570dee1a148ae0ac"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "c91e496b7cbceffa1c4f77e427d2d0a061421652"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "ee62315d640ab47265b2d6935eb013344afc8856"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "749960b06971fe64cf39771cef4e15006eb77ee0"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "c91d1033894ac15c2de6ffcc198e0fc9fb854604"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "43ed460118bb0caca6a0c71c60930b788d6c6b82"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "d2318585a8838b45b100d570a1b7d1e262567c14"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "38395453b7df71a7df750465da37cbabf8805058"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "0a7e03ec25234d2dc6918e2f73023905b37a034e"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "bf3019e3149953e2ec56726a44a9400d0d1cd95d"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "b7a5801f3397efe28607ce967db9698ddb7bc07a"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "450be97c2a668b73d6ffa2bb25534e13939f03e2"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5ix2lZ",
              "createdAt": "2023-07-30T18:21:35Z",
              "body": "Would you like to add the equivalent definition that a field is perfect if and only if every (finite) algebraic extension is surjective?",
              "author": {
                "login": "acmepjz"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "696409e7454d30829ec4b721485caa26a0e0c27a"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5ix6nD",
              "createdAt": "2023-07-30T19:55:15Z",
              "body": "> Would you like to add the equivalent definition that a field is perfect if and only if every (finite) algebraic extension is surjective?\r\n\r\nI don't plan to do this, but I encourage you to do it in a follow-up PR if you're interested!",
              "author": {
                "login": "ocfnash"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5swQfCzwAAAAJRgJRZ",
              "createdAt": "2023-07-30T19:59:44Z",
              "label": {
                "id": "MDU6TGFiZWwzMjcxMjQ0NzU5",
                "name": "WIP"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5swQfCzwAAAAJRgJRa",
              "createdAt": "2023-07-30T19:59:44Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5swQfCzwAAAAJRgJRb",
              "createdAt": "2023-07-30T19:59:44Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "60e118014d499522ae563ef7589aa4f5f3f3ad24"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5iyCNZ",
              "createdAt": "2023-07-30T22:43:14Z",
              "body": "> * we replace the data-bearing `PerfectRing` typeclass with a `Prop`-valued (non-constructive) version,\r\n\r\nWhat do we gain by removing the data here? Is the problem that the class would not be subsingleton?",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5swQfCzwAAAAJRhbRA",
              "createdAt": "2023-07-30T23:28:16Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5i0hUa",
              "createdAt": "2023-07-31T08:46:16Z",
              "body": "> Is the problem that the class would not be subsingleton?\r\n\r\nIn fact the existing class is subsingleton:\r\n```lean\r\n-- Using old definition of `PerfectRing` (which I propose to remove):\r\nexample : Subsingleton (PerfectRing R p) := by\r\n  constructor\r\n  rintro ⟨f, -, hfr⟩ ⟨g, hgl, -⟩\r\n  congr\r\n  exact LeftInverse.eq_rightInverse hfr hgl\r\n```\r\nso this is not the problem.\r\n\r\n> What do we gain by removing the data here? \r\n\r\nI claim the advantages are:\r\n\r\n1. We get a type-theoretic expression of the above uniqueness.\r\n2. Our formalisation becomes classical as opposed to constructive. [Albeit you might argue this begs your question.]\r\n3. The sociological advantage that proposed new definition is what most mathematicians would expect.\r\n4. We cannot author lemmas which depend on a particular instance of `PerfectRing` (e.g., stemming from finiteness) that might fail in a rewrite when `PerfectRing` is available some other way. [I admit, slightly speculative.]",
              "author": {
                "login": "ocfnash"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5i14Ms",
              "createdAt": "2023-07-31T12:36:39Z",
              "body": "1. I'd claim this isn't really true; the actual statement then becomes that the `classical.some` to get nthRoot is unique (which of course is also true), but is more work to state not less!\r\n2. Yes, this is really the same question, which I realize is controversial and subjective\r\n3. That can be resolved with an `ofBijective` constructor: we have the same thing for `IsInternal` and `Decomposition` on direct sums, though maybe there is a stronger answer for 2) there (computable decompositions are common, I don't know about pthRoots).\r\n4. This was the answer I was looking for, but I was hoping we had evidence that the problem was more than speculative!\r\n\r\n",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "1a22759f5efff7a2bd2b2675da1caf937102bee0"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "eba14689d78a20ae6770b00aedbfa865614e7210"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5i2Gjk",
              "createdAt": "2023-07-31T13:13:14Z",
              "body": "Thanks for these thoughtful responses.\r\n\r\nWith regard to 4, to make it a bit less speculative, I just added an instance proving that the product `R × S` of two perfect rings is perfect. I claim this is exactly the sort of instance that would be problematic with a data-bearing instance as there might be a diamond of solutions (e.g., if `R` and `S` are both finite).",
              "author": {
                "login": "ocfnash"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5swQfCzwAAAAJSzbCF",
              "createdAt": "2023-08-01T17:05:36Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "ff93cb70d9a51e810a3248b0947831a3d27668a5"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5swQfCzwAAAAJSz-_2",
              "createdAt": "2023-08-01T17:22:05Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "ReviewRequestedEvent",
              "id": "RRE_lADOFcwZ1c5swQfCzwAAAAJTMgLk",
              "createdAt": "2023-08-02T09:23:38Z",
              "requestedReviewer": {
                "id": "MDQ6VXNlcjMxODY3ODI3",
                "login": "kbuzzard"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5dmXMv",
              "createdAt": "2023-08-09T18:52:25Z",
              "body": "I raised some questions. I think this is the right way to do it. No constructivists are interested in perfect fields, and this will make the lives of the perfectoid people easier. I don't think there was any real justification in having this definition constructive, I think it was just a historical coincidence because the author of the original file was going through a constructivist phase at the time.\r\n\r\n`PerfectField.toPerfectRing` : nice! ",
              "author": {
                "login": "kbuzzard"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5swQfCzwAAAAJXGR1b",
              "createdAt": "2023-08-09T19:04:14Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5swQfCzwAAAAJXGR1o",
              "createdAt": "2023-08-09T19:04:14Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "7dd9523e51310946ab69e66703d764bb0289f516"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5swQfCzwAAAAJXbS2S",
              "createdAt": "2023-08-10T09:07:51Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5swQfCzwAAAAJXbS2h",
              "createdAt": "2023-08-10T09:07:51Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5swQfCzwAAAAJX4Das",
              "createdAt": "2023-08-10T21:38:39Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "ca3a259b467c75bacf321710224b8aba5573f8d2"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5swQfCzwAAAAJX6KaZ",
              "createdAt": "2023-08-10T23:40:01Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5d_LOK",
              "createdAt": "2023-08-14T13:24:44Z",
              "body": "",
              "author": {
                "login": "jcommelin"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5d_LYn",
              "createdAt": "2023-08-14T13:25:07Z",
              "body": "bors d+",
              "author": {
                "login": "jcommelin"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5j-cRr",
              "createdAt": "2023-08-14T13:25:08Z",
              "body": ":v: ocfnash can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests).",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5swQfCzwAAAAJZNl6h",
              "createdAt": "2023-08-14T13:25:18Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABAt13Ow",
                "name": "delegated"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5swQfCzwAAAAJZNl9n",
              "createdAt": "2023-08-14T13:25:19Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5j-l3n",
              "createdAt": "2023-08-14T13:49:05Z",
              "body": "bors merge",
              "author": {
                "login": "ocfnash"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5swQfCzwAAAAJZOnYH",
              "createdAt": "2023-08-14T13:49:20Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
                "name": "ready-to-merge"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5j-4Iw",
              "createdAt": "2023-08-14T14:28:06Z",
              "body": "This PR was included in a batch that was canceled, it will be automatically retried",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5kAonm",
              "createdAt": "2023-08-14T18:49:12Z",
              "body": "Build failed (retrying...):\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/5858949285/job/15883952790)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5kA5bh",
              "createdAt": "2023-08-14T19:42:56Z",
              "body": "Build failed (retrying...):\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/5859472813/job/15885546222)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5kBl80",
              "createdAt": "2023-08-14T22:04:44Z",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/5860589299/job/15888992696)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/5860589299/job/15888992286)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/5860589299/job/15888992495)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c5swQfCzwAAAAJZh8XG",
              "createdAt": "2023-08-14T22:04:45Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c5swQfCzwAAAAJZh8cJ",
              "createdAt": "2023-08-14T22:04:49Z"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            }
          ]
        }
      }
    }
  }
}
