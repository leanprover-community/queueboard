{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 18,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "chrisflav"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "Naming of universe variables has an impact on universe unification. It seems to matter that the universe variables of `R`, `S` and `T` appear before the universe variables of the generators  in alphabetical order.\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nFor details on the \"pull request lifecycle\" in mathlib, please see:\r\nhttps://leanprover-community.github.io/contribute/index.html\r\n\r\nIn particular, note that most reviewers will only notice your PR\r\nif it passes the continuous integration checks.\r\nPlease ask for help on https://leanprover.zulipchat.com if needed.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nIf you are moving or deleting declarations, please include these lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nMoves:\r\n- Vector.* -> List.Vector.*\r\n- ...\r\n\r\nDeletions:\r\n- Nat.bit1_add_bit1\r\n- ...\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 1,
        "closed": false,
        "closedAt": null,
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c6b7DyE",
              "body": "### PR summary [2c68f5f3e0](https://github.com/leanprover-community/mathlib4/pull/21129/commits/2c68f5f3e0141fecc2fa914ab50b5c525c3f489b)\n\n#### Import changes for modified files\n\nNo significant changes to the import graph\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n\n</details>\n\n---\n\n#### Declarations diff\n\nNo declarations were harmed in the making of this PR! üêô\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n---\n\n<details><summary>No changes to technical debt.</summary>\n\nYou can run this locally as\n```\n./scripts/technical-debt-metrics.sh pr_summary\n```\n* The `relative` value is the weighted *sum* of the differences with weight given by the *inverse* of the current value of the statistic.\n* The `absolute` value is the `relative` value divided by the total sum of the inverses of the current values (i.e. the weighted *average* of the differences).\n</details>\n",
              "createdAt": "2025-01-27T14:43:21Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6b7FBZ",
              "body": "!bench",
              "createdAt": "2025-01-27T14:45:21Z",
              "author": {
                "login": "chrisflav"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6b7jFT",
              "body": "Here are the [benchmark results](https://speed.lean-lang.org/mathlib4/run-detail/78f74629-e510-4a9c-8eb5-8cd1c9c17055) for commit dbb8c6dfd3be8e51d66f9acf1f8b97c8cb188cdc.\nThere were [significant changes](https://speed.lean-lang.org/mathlib4/compare/fbb76a5c-e017-4dd4-8f85-395cdbbfcc0b/to/78f74629-e510-4a9c-8eb5-8cd1c9c17055) against commit efeadfb18697dff701318aa598fc7cd36099920a:\n```diff\n  Benchmark                                   Metric         Change\n  =================================================================\n+ ~Mathlib.RingTheory.Kaehler.JacobiZariski   instructions   -29.0%\n```",
              "createdAt": "2025-01-27T15:31:23Z",
              "author": {
                "login": "leanprover-bot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6b7jar",
              "body": "|File|Instructions|%|\n|-|-:|:-:|\n|`build`|-225.54‚¨ù10‚Åπ|(-0.14%)|\n|`Mathlib.RingTheory.Kaehler.JacobiZariski`|-210.979‚¨ù10‚Åπ|(-29.00%)|\n[CI run](https://github.com/leanprover-community/mathlib4/actions/runs/12992471508)",
              "createdAt": "2025-01-27T15:31:55Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6b7p6F",
              "body": "üöÄ Pull request has been placed on the maintainer queue by grunweg.",
              "createdAt": "2025-01-27T15:42:14Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6b7rJj",
              "body": "> Wow, these are great speed-ups! These should definitely land soon.\r\n> \r\n> Do you understand _why_ this changes performance? If so, it would be good to document (and look for other instances in mathlib/perhaps even write a linter). If not, can you start a discussion on zulip?\r\n> \r\n> I'll be bold nominate for a quick merge, mostly to get the ball rolling. maintainer delegate?\r\n\r\nYou probably missed the discussion at https://leanprover.zulipchat.com/#narrow/channel/144837-PR-reviews/topic/.2321099.20use.20unification.20hints.20for.20generators.\r\n\r\nSo @mattrobball and @erdOne should have a look first.",
              "createdAt": "2025-01-27T15:44:09Z",
              "author": {
                "login": "chrisflav"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6b7sRs",
              "body": "I think changing the convention for naming universes in this file is not a good idea. I am pretty sure that the kernel is able to check equality of levels from the names directly and that is what allows it avoid many unfolding steps. I am less sure about the importance of the ordering. ",
              "createdAt": "2025-01-27T15:45:55Z",
              "author": {
                "login": "mattrobball"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6b7unS",
              "body": "> I think changing the convention for naming universes in this file is not a good idea. I am pretty sure that the kernel is able to check equality of levels from the names directly and that is what allows it avoid many unfolding steps. I am less sure about the importance of the ordering.\r\n\r\nIt definitely matters that the universes of `R`, `S` and `T` appear before the universes of `P`, `Q`, etc. alphabetically, just replace `a`, `b` and `c` by `x`, `y` and `z` respectively and many declarations even start to timeout with maxHeartbeats reached.",
              "createdAt": "2025-01-27T15:49:31Z",
              "author": {
                "login": "chrisflav"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6b7zsl",
              "body": "I should be clear since there are two possible orderings: 1. declaration ordering (ie what line number/column does a level appear) and 2. orderings on the names via the usual lexicographical ordering on strings. \r\n\r\nThe former doesn't seem to matter. The latter seems to matter both for the elaborator and the kernel. Lexical ordering gives equality in the kernel. ",
              "createdAt": "2025-01-27T15:57:15Z",
              "author": {
                "login": "mattrobball"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6b71bP",
              "body": "> I should be clear since there are two possible orderings: 1. declaration ordering (ie what line number/column does a level appear) and 2. orderings on the names via the usual lexicographical ordering on strings.\r\n> \r\n> The former doesn't seem to matter. The latter seems to matter both for the elaborator and the kernel. Lexical ordering gives equality in the kernel.\r\n\r\nSo what exactly do you suggest to change in this PR?",
              "createdAt": "2025-01-27T15:59:50Z",
              "author": {
                "login": "chrisflav"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6b77nU",
              "body": "I think it is possible to preserve the alphabetical order while having universe names adhering to the naming convention. \r\nAnd I'm guessing that is what Matthew is also suggesting?",
              "createdAt": "2025-01-27T16:09:11Z",
              "author": {
                "login": "erdOne"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6b8EG7",
              "body": "Aha, thanks for the clarification, changed it accordingly.",
              "createdAt": "2025-01-27T16:18:45Z",
              "author": {
                "login": "chrisflav"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6b8W7Y",
              "body": "!bench",
              "createdAt": "2025-01-27T16:29:55Z",
              "author": {
                "login": "chrisflav"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6b8ejQ",
              "body": "Is there an open issue on anything like this with core?",
              "createdAt": "2025-01-27T16:41:10Z",
              "author": {
                "login": "mattrobball"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6b8xj7",
              "body": "Here are the [benchmark results](https://speed.lean-lang.org/mathlib4/run-detail/15bf4113-dfbb-48fb-8ed3-2964b2e1c21e) for commit 8700e7115e5738b95516d09b3a466f264413a6c9.\nThere were [significant changes](https://speed.lean-lang.org/mathlib4/compare/fbb76a5c-e017-4dd4-8f85-395cdbbfcc0b/to/15bf4113-dfbb-48fb-8ed3-2964b2e1c21e) against commit efeadfb18697dff701318aa598fc7cd36099920a:\n```diff\n  Benchmark                                   Metric         Change\n  =================================================================\n+ ~Mathlib.RingTheory.Kaehler.JacobiZariski   instructions   -29.1%\n```",
              "createdAt": "2025-01-27T17:11:21Z",
              "author": {
                "login": "leanprover-bot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6b8x1-",
              "body": "|File|Instructions|%|\n|-|-:|:-:|\n|`build`|-213.23‚¨ù10‚Åπ|(-0.14%)|\n|`Mathlib.RingTheory.Kaehler.JacobiZariski`|-211.705‚¨ù10‚Åπ|(-29.10%)|\n[CI run](https://github.com/leanprover-community/mathlib4/actions/runs/12994404726)",
              "createdAt": "2025-01-27T17:11:45Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6b9p9h",
              "body": "I think I need to take a little time to evaluate this holistically. I am concerned we are papering over problems which will only become worse with time. ",
              "createdAt": "2025-01-27T18:51:14Z",
              "author": {
                "login": "mattrobball"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6cF0q3",
              "body": "I raise your 29% to 60% ;-)\r\n\r\nhttps://github.com/leanprover-community/mathlib4/pull/21165#issuecomment-2618740450",
              "createdAt": "2025-01-28T11:45:55Z",
              "author": {
                "login": "kbuzzard"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6cF1rw",
              "body": "> I raise your 29% to 60% ;-)\r\n\r\nYou did not follow the unwritten rules of this competition which clearly state *without changing the results of this file.* :)",
              "createdAt": "2025-01-28T11:47:58Z",
              "author": {
                "login": "chrisflav"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6cF4Mf",
              "body": "But I saved *half a trillion* instructions! That is a huge number!\r\n\r\nI've closed the PR in case anyone thought it was serious.\r\n\r\nHow do we move forwards on this? Presumably someone needs to find some kind of example, ideally mathlib-free, showing where the problem is? This might be really hard. ",
              "createdAt": "2025-01-28T11:52:45Z",
              "author": {
                "login": "kbuzzard"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6cGjed",
              "body": "I am not sure that this PR is more serious than #21165. The latter does follow existing patterns in Mathlib. \r\n\r\nGiven @kbuzzard 's [comment](https://leanprover.zulipchat.com/#narrow/channel/287929-mathlib4/topic/JacobiZariski.20is.20slow.2E/near/496312821) I am becoming more skeptical that the current design is aligned with how Lean works, currently. \r\n\r\n1. We should raise the issue with core to get their opinion on design. Note that `Œ¥Aux_toAlgHom` seems a prime example for this [comment](https://github.com/leanprover/lean4/issues/5695#issuecomment-2486571193) \r\n2. We can attempt a fix to the elaborator and/or kernel to see if indeed inconsistent universe normalization of nested `max`'s is a/the culprit here.\r\n3. We can, and probably should, attempt to unbundle the type fields from the offending structures. ",
              "createdAt": "2025-01-28T13:12:43Z",
              "author": {
                "login": "mattrobball"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6hiaDe",
              "body": "This has now come up in the triage meeting because it's one of the longest open PRs on the queue. One way of proceeding is that we document that this is a hack and merge it because at the end of the day it's making mathlib compile more quickly for everyone. What do people think about this?\r\n\r\nPS there doesn't seem to be a link to the relevant Zulip thread, which is [here](https://leanprover.zulipchat.com/#narrow/channel/287929-mathlib4/topic/JacobiZariski.20is.20slow.2E/near/496225223).",
              "createdAt": "2025-03-10T10:45:33Z",
              "author": {
                "login": "kbuzzard"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6hjrVs",
              "body": "I still worry we are just digging ourselves deeper into a hole with the current designs. ",
              "createdAt": "2025-03-10T12:51:58Z",
              "author": {
                "login": "mattrobball"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "dbb8c6dfd3be8e51d66f9acf1f8b97c8cb188cdc",
                "additions": 14,
                "deletions": 20,
                "committedDate": "2025-01-27T14:41:43Z",
                "author": {
                  "name": "Christian Merten",
                  "email": "christian@merten.dev"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb6bucA",
                        "name": "set_pr_emoji",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12992640691/job/36232949360"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb2vqCQ",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12991483074/job/36229081609"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb2xyzg",
                        "name": "Lint style",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12991493454/job/36229116622"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb6kGvg",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12992681802/job/36233086654"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb8Vl5Q",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12993229077/job/36234946021"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb8Wujg",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12993234270/job/36234964622"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb8ZfvQ",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12993247628/job/36235009981"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb8dOJw",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12993265039/job/36235071015"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb2xvYw",
                        "name": "Add topic label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12991493417/job/36229115747"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb2xvlw",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12991493418/job/36229115799"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb6kGuw",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12992681812/job/36233086651"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb8VmRQ",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12993229075/job/36234946117"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb8Wvow",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12993234279/job/36234964899"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb8ZiUg",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12993247673/job/36235010642"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb8dN1g",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12993265025/job/36235070934"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb2xvKA",
                        "name": "post-or-update-summary-comment",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12991493440/job/36229115688"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb6kIzQ",
                        "name": "Fix style issues from lint",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12992681837/job/36233087181"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb8VmLg",
                        "name": "Fix style issues from lint",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12993229073/job/36234946094"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb8Wuhw",
                        "name": "Fix style issues from lint",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12993234262/job/36234964615"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb8ZfPg",
                        "name": "Fix style issues from lint",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12993247622/job/36235009854"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb8dNwQ",
                        "name": "Fix style issues from lint",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12993265031/job/36235070913"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb2vsIw",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12991483069/job/36229082147"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb2vsog",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12991483074/job/36229082274"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb2xv-A",
                        "name": "Check all files imported",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12991493454/job/36229115896"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb2vqGg",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12991483069/job/36229081626"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb2vunw",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12991483074/job/36229082783"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb3WWCw",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12991483069/job/36229715467"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb2yWYQ",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/36229125729"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb2yOHQ",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=21129&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "8700e7115e5738b95516d09b3a466f264413a6c9",
                "additions": 6,
                "deletions": 6,
                "committedDate": "2025-01-27T16:17:20Z",
                "author": {
                  "name": "Christian Merten",
                  "email": "christian@merten.dev"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb8yLkg",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12993366177/job/36235414418"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb81PQg",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12993382040/job/36235464514"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb9AubQ",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12993439477/job/36235652717"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb9InGg",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12993479506/job/36235781914"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb-IJkw",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12993802927/job/36236822931"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb-R-eQ",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12993851844/job/36236983929"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb-SZuQ",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12993854069/job/36236990905"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb-zwNA",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12994020969/job/36237537332"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb_mXsQ",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12994269637/job/36238366641"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb8yRYQ",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12993366700/job/36235415905"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb81PWg",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12993382038/job/36235464538"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb9AtbQ",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12993439481/job/36235652461"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb9IojA",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12993479509/job/36235782284"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb-IJTw",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12993802938/job/36236822863"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb-R_eA",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12993851852/job/36236984184"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb-SZ5w",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12993854081/job/36236990951"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb-zw-g",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12994020976/job/36237537530"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb_mVpQ",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12994269652/job/36238366117"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb8yRkQ",
                        "name": "post-or-update-summary-comment",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12993366695/job/36235415953"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb81QZg",
                        "name": "Fix style issues from lint",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12993382043/job/36235464806"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb9AwOg",
                        "name": "Fix style issues from lint",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12993439484/job/36235653178"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb9InkQ",
                        "name": "Fix style issues from lint",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12993479540/job/36235782033"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb-IGCg",
                        "name": "Fix style issues from lint",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12993802958/job/36236822026"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb-SAgA",
                        "name": "Fix style issues from lint",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12993851837/job/36236984448"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb-SZ8Q",
                        "name": "Fix style issues from lint",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12993854063/job/36236990961"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb-zvAw",
                        "name": "Fix style issues from lint",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12994020961/job/36237537027"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb_mVpA",
                        "name": "Fix style issues from lint",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12994269620/job/36238366116"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb8yNRA",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12993366159/job/36235414852"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb8yQnA",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12993366693/job/36235415708"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb8yNmw",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12993366177/job/36235414939"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb8yLog",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12993366159/job/36235414434"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb8yS8Q",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12993366693/job/36235416305"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb8yP4g",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12993366177/job/36235415522"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb9ZKlg",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12993366159/job/36236053142"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb8y0NQ",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/36235424821"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIb80kdA",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=21129&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "2c68f5f3e0141fecc2fa914ab50b5c525c3f489b",
                "additions": 4,
                "deletions": 0,
                "committedDate": "2025-01-27T17:28:31Z",
                "author": {
                  "name": "Christian Merten",
                  "email": "christian@merten.dev"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIi_QSlQ",
                        "name": "set_pr_emoji",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13154279032/job/36707766933"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIcA_-zQ",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12994729718/job/36239834829"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIcBAGHg",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12994730731/job/36239836702"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIcBAGug",
                        "name": "post-or-update-summary-comment",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12994730736/job/36239836858"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIcA_-5w",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12994729714/job/36239834855"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIcBAHcg",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12994730732/job/36239837042"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIcA_8yg",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12994729718/job/36239834314"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIcA_9TQ",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12994729714/job/36239834445"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIcBAGLA",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12994730732/job/36239836716"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIcBAAeA",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12994729718/job/36239835256"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIcBi1kQ",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12994729714/job/36240405905"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIcBAhhQ",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/36239843717"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIcBCZag",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=21129&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "createdAt": "2025-01-27T14:42:25Z",
        "deletions": 20,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/RingTheory/Kaehler/JacobiZariski.lean",
              "additions": 18,
              "deletions": 20
            }
          ]
        },
        "headRefName": "jacobi-zariski-universe",
        "headRefOid": "2c68f5f3e0141fecc2fa914ab50b5c525c3f489b",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c6JGGuT",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJjTQ",
              "color": "33DBEC",
              "name": "t-algebra"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABnIXseA",
              "color": "39061E",
              "name": "performance-hack"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c6Zh3yY",
              "body": "Wow, these are great speed-ups! These should definitely land soon.\r\n\r\nDo you understand *why* this changes performance? If so, it would be good to document (and look for other instances in mathlib/perhaps even write a linter). If not, can you start a discussion on zulip?\r\n\r\nI'll be bold nominate for a quick merge, mostly to get the ball rolling.\r\nmaintainer delegate?",
              "state": "COMMENTED",
              "author": {
                "login": "grunweg"
              },
              "submittedAt": "2025-01-27T15:41:51Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6ZiwCl",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "erdOne"
              },
              "submittedAt": "2025-01-27T17:04:23Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6ZiniR",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mattrobball"
              },
              "submittedAt": "2025-01-27T16:51:00Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 21129,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c6Zh3yY",
              "body": "Wow, these are great speed-ups! These should definitely land soon.\r\n\r\nDo you understand *why* this changes performance? If so, it would be good to document (and look for other instances in mathlib/perhaps even write a linter). If not, can you start a discussion on zulip?\r\n\r\nI'll be bold nominate for a quick merge, mostly to get the ball rolling.\r\nmaintainer delegate?",
              "state": "COMMENTED",
              "author": {
                "login": "grunweg"
              },
              "submittedAt": "2025-01-27T15:41:51Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6ZiLsF",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mattrobball"
              },
              "submittedAt": "2025-01-27T16:10:16Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6ZiL4I",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mattrobball"
              },
              "submittedAt": "2025-01-27T16:10:34Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6ZiMTg",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mattrobball"
              },
              "submittedAt": "2025-01-27T16:11:16Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6ZiM58",
              "body": "These seem to give the same benefit and more closely follow the naming conventions in place. \r\n\r\nThis is very brittle though. ",
              "state": "COMMENTED",
              "author": {
                "login": "mattrobball"
              },
              "submittedAt": "2025-01-27T16:12:11Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6ZiR0c",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "chrisflav"
              },
              "submittedAt": "2025-01-27T16:18:20Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6ZiUCA",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mattrobball"
              },
              "submittedAt": "2025-01-27T16:21:13Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6ZiVYC",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "chrisflav"
              },
              "submittedAt": "2025-01-27T16:23:13Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6ZieIS",
              "body": "These would be better and still seem to perform the same. Generally, the user should not have to guess at the alphabetical orderings of names to get reasonable performance in elaboration and type checking.",
              "state": "COMMENTED",
              "author": {
                "login": "mattrobball"
              },
              "submittedAt": "2025-01-27T16:39:38Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6Zihl7",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "chrisflav"
              },
              "submittedAt": "2025-01-27T16:42:14Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6ZihrB",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mattrobball"
              },
              "submittedAt": "2025-01-27T16:42:22Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6ZiniR",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mattrobball"
              },
              "submittedAt": "2025-01-27T16:51:00Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6ZiwCl",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "erdOne"
              },
              "submittedAt": "2025-01-27T17:04:23Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5zFLm4",
                    "body": "Can you please add a comment that this order is deliberate? Otherwise, somebody might want to come along and \"clean this up\".",
                    "createdAt": "2025-01-27T15:40:37Z",
                    "author": {
                      "login": "grunweg"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5zFXhl",
                    "body": "```suggestion\r\nuniverse u‚ÇÅ u‚ÇÇ u‚ÇÉ w‚ÇÅ w‚ÇÇ w‚ÇÉ w‚ÇÑ w‚ÇÖ\r\n```",
                    "createdAt": "2025-01-27T16:10:16Z",
                    "author": {
                      "login": "mattrobball"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5zFbc5",
                    "body": "I think the `u`s should come after the `w`s so it matches the order in `Algebra.Generators`.",
                    "createdAt": "2025-01-27T16:18:20Z",
                    "author": {
                      "login": "chrisflav"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5zFc4I",
                    "body": "I think that is ok for now but ask:\r\n\r\nIs this/that ordering still necessary with Lean 4? ",
                    "createdAt": "2025-01-27T16:21:13Z",
                    "author": {
                      "login": "mattrobball"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5zFdl-",
                    "body": "I thought it mattered when using explicit universe annotations with `.{..}`, because `.{w}` is more convenient than `.{_, w}`.",
                    "createdAt": "2025-01-27T16:23:13Z",
                    "author": {
                      "login": "chrisflav"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5zFklF",
                    "body": "I had a vague memory of alphabetical ordering interceding here also but it seems not be the case. ",
                    "createdAt": "2025-01-27T16:42:22Z",
                    "author": {
                      "login": "mattrobball"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5zFXoB",
                    "body": "```suggestion\r\nvariable {R : Type u‚ÇÅ} {S : Type u‚ÇÇ} [CommRing R] [CommRing S] [Algebra R S]\r\nvariable {T : Type u‚ÇÉ} [CommRing T] [Algebra R T] [Algebra S T] [IsScalarTower R S T]\r\nvariable (Q : Generators.{w‚ÇÅ} S T) (P : Generators.{w‚ÇÇ} R S)\r\nvariable (Q' : Generators.{w‚ÇÉ} S T) (P' : Generators.{w‚ÇÑ} R S) (W : Generators.{w‚ÇÖ} R T)\r\n```",
                    "createdAt": "2025-01-27T16:10:34Z",
                    "author": {
                      "login": "mattrobball"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5zFX5R",
                    "body": "```suggestion\r\nvariable {T : Type u‚ÇÉ} [CommRing T] [Algebra R T] [Algebra S T] [IsScalarTower R S T]\r\n```",
                    "createdAt": "2025-01-27T16:11:16Z",
                    "author": {
                      "login": "mattrobball"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5zFiq_",
                    "body": "```suggestion\r\nuniverse w‚ÇÅ w‚ÇÇ w‚ÇÉ w‚ÇÑ w‚ÇÖ\r\n```",
                    "createdAt": "2025-01-27T16:37:06Z",
                    "author": {
                      "login": "mattrobball"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5zFi2Z",
                    "body": "```suggestion\r\nvariable {R S T : Type*} [CommRing R] [CommRing S] [CommRing T] \r\nvariable [Algebra R S] [Algebra R T] [Algebra S T] [IsScalarTower R S T]\r\n```",
                    "createdAt": "2025-01-27T16:37:36Z",
                    "author": {
                      "login": "mattrobball"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5zFkh6",
                    "body": "Isn't this just working because the automatically introduced universe variables `u_i` are still alphabetically at the right place? So it seems this is even harder to control.",
                    "createdAt": "2025-01-27T16:42:14Z",
                    "author": {
                      "login": "chrisflav"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5zFnps",
                    "body": "Yes they are generated as `u_i` and we still need `u < w` for this hack. I don't see an advantage to the current situation and this is easier to digest for a reader. \r\n\r\nBefore merging, this PR will need some documentation with a link to an issue somewhere tracking this so readers won't have to guess at why things are the way they are. ",
                    "createdAt": "2025-01-27T16:50:59Z",
                    "author": {
                      "login": "mattrobball"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5zFsj8",
                    "body": "I personally think if we are intentionally controlling the names of universes we should be explicit about them.",
                    "createdAt": "2025-01-27T17:04:23Z",
                    "author": {
                      "login": "erdOne"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5zFi9z",
                    "body": "```suggestion\r\nvariable {T : Type*} [CommRing T] [Algebra R T] [Algebra S T] [IsScalarTower R S T]\r\n```",
                    "createdAt": "2025-01-27T16:37:56Z",
                    "author": {
                      "login": "mattrobball"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "U_kgDOCB8vYg",
              "login": "chrisflav"
            },
            {
              "id": "MDQ6VXNlcjg1NjY4Mzk0",
              "login": "leanprover-bot"
            },
            {
              "id": "U_kgDOBfZl7g",
              "login": "mattrobball"
            },
            {
              "id": "MDQ6VXNlcjM2NDE0Mjcw",
              "login": "erdOne"
            },
            {
              "id": "MDQ6VXNlcjMxODY3ODI3",
              "login": "kbuzzard"
            },
            {
              "id": "MDQ6VXNlcjEwMTA1MDE2",
              "login": "grunweg"
            },
            {
              "id": "MDQ6VXNlcjEwODE4NDM0",
              "login": "sgouezel"
            }
          ]
        },
        "state": "OPEN",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIi_QSlQ",
                "name": "set_pr_emoji",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13154279032/job/36707766933"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIcA_-zQ",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12994729718/job/36239834829"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIcBAGHg",
                "name": "label-and-report-new-contributor",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12994730731/job/36239836702"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIcBAGug",
                "name": "post-or-update-summary-comment",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12994730736/job/36239836858"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIcA_-5w",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12994729714/job/36239834855"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIcBAHcg",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12994730732/job/36239837042"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIcA_8yg",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12994729718/job/36239834314"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIcA_9TQ",
                "name": "Build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12994729714/job/36239834445"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIcBAGLA",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12994730732/job/36239836716"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIcBAAeA",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12994729718/job/36239835256"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIcBi1kQ",
                "name": "Post-CI job",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12994729714/job/36240405905"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIcBAhhQ",
                "name": "New Contributor Check",
                "conclusion": "NEUTRAL",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/36239843717"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIcBCZag",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=21129&login=leanprover-community&repository=mathlib4"
              }
            ]
          }
        },
        "title": "perf(RingTheory/Kaehler/JacobiZariski): reorder universe variables",
        "updatedAt": "2025-03-11T10:12:09Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/21129",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "dbb8c6dfd3be8e51d66f9acf1f8b97c8cb188cdc"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6b7DyE",
              "createdAt": "2025-01-27T14:43:21Z",
              "body": "### PR summary [2c68f5f3e0](https://github.com/leanprover-community/mathlib4/pull/21129/commits/2c68f5f3e0141fecc2fa914ab50b5c525c3f489b)\n\n#### Import changes for modified files\n\nNo significant changes to the import graph\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n\n</details>\n\n---\n\n#### Declarations diff\n\nNo declarations were harmed in the making of this PR! üêô\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n---\n\n<details><summary>No changes to technical debt.</summary>\n\nYou can run this locally as\n```\n./scripts/technical-debt-metrics.sh pr_summary\n```\n* The `relative` value is the weighted *sum* of the differences with weight given by the *inverse* of the current value of the statistic.\n* The `absolute` value is the `relative` value divided by the total sum of the inverses of the current values (i.e. the weighted *average* of the differences).\n</details>\n",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6nrkIpzwAAAAO-YzBA",
              "createdAt": "2025-01-27T14:43:29Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJjTQ",
                "name": "t-algebra"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6b7FBZ",
              "createdAt": "2025-01-27T14:45:21Z",
              "body": "!bench",
              "author": {
                "login": "chrisflav"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6b7jFT",
              "createdAt": "2025-01-27T15:31:23Z",
              "body": "Here are the [benchmark results](https://speed.lean-lang.org/mathlib4/run-detail/78f74629-e510-4a9c-8eb5-8cd1c9c17055) for commit dbb8c6dfd3be8e51d66f9acf1f8b97c8cb188cdc.\nThere were [significant changes](https://speed.lean-lang.org/mathlib4/compare/fbb76a5c-e017-4dd4-8f85-395cdbbfcc0b/to/78f74629-e510-4a9c-8eb5-8cd1c9c17055) against commit efeadfb18697dff701318aa598fc7cd36099920a:\n```diff\n  Benchmark                                   Metric         Change\n  =================================================================\n+ ~Mathlib.RingTheory.Kaehler.JacobiZariski   instructions   -29.0%\n```",
              "author": {
                "login": "leanprover-bot"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6b7jar",
              "createdAt": "2025-01-27T15:31:55Z",
              "body": "|File|Instructions|%|\n|-|-:|:-:|\n|`build`|-225.54‚¨ù10‚Åπ|(-0.14%)|\n|`Mathlib.RingTheory.Kaehler.JacobiZariski`|-210.979‚¨ù10‚Åπ|(-29.00%)|\n[CI run](https://github.com/leanprover-community/mathlib4/actions/runs/12992471508)",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ReadyForReviewEvent",
              "id": "RFRE_lADOFcwZ1c6nrkIpzwAAAAO-b3vn",
              "createdAt": "2025-01-27T15:36:13Z"
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6nrkIpzwAAAAO-cETO",
              "createdAt": "2025-01-27T15:39:36Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABnIXseA",
                "name": "performance-hack"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6Zh3yY",
              "createdAt": "2025-01-27T15:40:37Z",
              "body": "Wow, these are great speed-ups! These should definitely land soon.\r\n\r\nDo you understand *why* this changes performance? If so, it would be good to document (and look for other instances in mathlib/perhaps even write a linter). If not, can you start a discussion on zulip?\r\n\r\nI'll be bold nominate for a quick merge, mostly to get the ball rolling.\r\nmaintainer delegate?",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6b7p6F",
              "createdAt": "2025-01-27T15:42:14Z",
              "body": "üöÄ Pull request has been placed on the maintainer queue by grunweg.",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6nrkIpzwAAAAO-cNv_",
              "createdAt": "2025-01-27T15:42:15Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABh1mAHA",
                "name": "maintainer-merge"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6b7rJj",
              "createdAt": "2025-01-27T15:44:09Z",
              "body": "> Wow, these are great speed-ups! These should definitely land soon.\r\n> \r\n> Do you understand _why_ this changes performance? If so, it would be good to document (and look for other instances in mathlib/perhaps even write a linter). If not, can you start a discussion on zulip?\r\n> \r\n> I'll be bold nominate for a quick merge, mostly to get the ball rolling. maintainer delegate?\r\n\r\nYou probably missed the discussion at https://leanprover.zulipchat.com/#narrow/channel/144837-PR-reviews/topic/.2321099.20use.20unification.20hints.20for.20generators.\r\n\r\nSo @mattrobball and @erdOne should have a look first.",
              "author": {
                "login": "chrisflav"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6b7sRs",
              "createdAt": "2025-01-27T15:45:55Z",
              "body": "I think changing the convention for naming universes in this file is not a good idea. I am pretty sure that the kernel is able to check equality of levels from the names directly and that is what allows it avoid many unfolding steps. I am less sure about the importance of the ordering. ",
              "author": {
                "login": "mattrobball"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6b7unS",
              "createdAt": "2025-01-27T15:49:31Z",
              "body": "> I think changing the convention for naming universes in this file is not a good idea. I am pretty sure that the kernel is able to check equality of levels from the names directly and that is what allows it avoid many unfolding steps. I am less sure about the importance of the ordering.\r\n\r\nIt definitely matters that the universes of `R`, `S` and `T` appear before the universes of `P`, `Q`, etc. alphabetically, just replace `a`, `b` and `c` by `x`, `y` and `z` respectively and many declarations even start to timeout with maxHeartbeats reached.",
              "author": {
                "login": "chrisflav"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6b7zsl",
              "createdAt": "2025-01-27T15:57:15Z",
              "body": "I should be clear since there are two possible orderings: 1. declaration ordering (ie what line number/column does a level appear) and 2. orderings on the names via the usual lexicographical ordering on strings. \r\n\r\nThe former doesn't seem to matter. The latter seems to matter both for the elaborator and the kernel. Lexical ordering gives equality in the kernel. ",
              "author": {
                "login": "mattrobball"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6b71bP",
              "createdAt": "2025-01-27T15:59:50Z",
              "body": "> I should be clear since there are two possible orderings: 1. declaration ordering (ie what line number/column does a level appear) and 2. orderings on the names via the usual lexicographical ordering on strings.\r\n> \r\n> The former doesn't seem to matter. The latter seems to matter both for the elaborator and the kernel. Lexical ordering gives equality in the kernel.\r\n\r\nSo what exactly do you suggest to change in this PR?",
              "author": {
                "login": "chrisflav"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6b77nU",
              "createdAt": "2025-01-27T16:09:11Z",
              "body": "I think it is possible to preserve the alphabetical order while having universe names adhering to the naming convention. \r\nAnd I'm guessing that is what Matthew is also suggesting?",
              "author": {
                "login": "erdOne"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6ZiLsF",
              "createdAt": "2025-01-27T16:10:16Z",
              "body": "",
              "author": {
                "login": "mattrobball"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6ZiL4I",
              "createdAt": "2025-01-27T16:10:34Z",
              "body": "",
              "author": {
                "login": "mattrobball"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6ZiMTg",
              "createdAt": "2025-01-27T16:11:15Z",
              "body": "",
              "author": {
                "login": "mattrobball"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6ZiM58",
              "createdAt": "2025-01-27T16:12:11Z",
              "body": "These seem to give the same benefit and more closely follow the naming conventions in place. \r\n\r\nThis is very brittle though. ",
              "author": {
                "login": "mattrobball"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "8700e7115e5738b95516d09b3a466f264413a6c9"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6b8EG7",
              "createdAt": "2025-01-27T16:18:45Z",
              "body": "Aha, thanks for the clarification, changed it accordingly.",
              "author": {
                "login": "chrisflav"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6b8W7Y",
              "createdAt": "2025-01-27T16:29:55Z",
              "body": "!bench",
              "author": {
                "login": "chrisflav"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6ZieIS",
              "createdAt": "2025-01-27T16:37:06Z",
              "body": "These would be better and still seem to perform the same. Generally, the user should not have to guess at the alphabetical orderings of names to get reasonable performance in elaboration and type checking.",
              "author": {
                "login": "mattrobball"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6b8ejQ",
              "createdAt": "2025-01-27T16:41:10Z",
              "body": "Is there an open issue on anything like this with core?",
              "author": {
                "login": "mattrobball"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6b8xj7",
              "createdAt": "2025-01-27T17:11:21Z",
              "body": "Here are the [benchmark results](https://speed.lean-lang.org/mathlib4/run-detail/15bf4113-dfbb-48fb-8ed3-2964b2e1c21e) for commit 8700e7115e5738b95516d09b3a466f264413a6c9.\nThere were [significant changes](https://speed.lean-lang.org/mathlib4/compare/fbb76a5c-e017-4dd4-8f85-395cdbbfcc0b/to/15bf4113-dfbb-48fb-8ed3-2964b2e1c21e) against commit efeadfb18697dff701318aa598fc7cd36099920a:\n```diff\n  Benchmark                                   Metric         Change\n  =================================================================\n+ ~Mathlib.RingTheory.Kaehler.JacobiZariski   instructions   -29.1%\n```",
              "author": {
                "login": "leanprover-bot"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6b8x1-",
              "createdAt": "2025-01-27T17:11:45Z",
              "body": "|File|Instructions|%|\n|-|-:|:-:|\n|`build`|-213.23‚¨ù10‚Åπ|(-0.14%)|\n|`Mathlib.RingTheory.Kaehler.JacobiZariski`|-211.705‚¨ù10‚Åπ|(-29.10%)|\n[CI run](https://github.com/leanprover-community/mathlib4/actions/runs/12994404726)",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "2c68f5f3e0141fecc2fa914ab50b5c525c3f489b"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6b9p9h",
              "createdAt": "2025-01-27T18:51:14Z",
              "body": "I think I need to take a little time to evaluate this holistically. I am concerned we are papering over problems which will only become worse with time. ",
              "author": {
                "login": "mattrobball"
              }
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c517cbQ",
              "createdAt": "2025-01-28T10:48:20Z",
              "source": {
                "id": "PR_kwDOFcwZ1c6JNFps",
                "title": "joke: make JacobiZariski universe-monomorphic",
                "url": "https://github.com/leanprover-community/mathlib4/pull/21165"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6cF0q3",
              "createdAt": "2025-01-28T11:45:55Z",
              "body": "I raise your 29% to 60% ;-)\r\n\r\nhttps://github.com/leanprover-community/mathlib4/pull/21165#issuecomment-2618740450",
              "author": {
                "login": "kbuzzard"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6cF1rw",
              "createdAt": "2025-01-28T11:47:58Z",
              "body": "> I raise your 29% to 60% ;-)\r\n\r\nYou did not follow the unwritten rules of this competition which clearly state *without changing the results of this file.* :)",
              "author": {
                "login": "chrisflav"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6cF4Mf",
              "createdAt": "2025-01-28T11:52:45Z",
              "body": "But I saved *half a trillion* instructions! That is a huge number!\r\n\r\nI've closed the PR in case anyone thought it was serious.\r\n\r\nHow do we move forwards on this? Presumably someone needs to find some kind of example, ideally mathlib-free, showing where the problem is? This might be really hard. ",
              "author": {
                "login": "kbuzzard"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6cGjed",
              "createdAt": "2025-01-28T13:12:43Z",
              "body": "I am not sure that this PR is more serious than #21165. The latter does follow existing patterns in Mathlib. \r\n\r\nGiven @kbuzzard 's [comment](https://leanprover.zulipchat.com/#narrow/channel/287929-mathlib4/topic/JacobiZariski.20is.20slow.2E/near/496312821) I am becoming more skeptical that the current design is aligned with how Lean works, currently. \r\n\r\n1. We should raise the issue with core to get their opinion on design. Note that `Œ¥Aux_toAlgHom` seems a prime example for this [comment](https://github.com/leanprover/lean4/issues/5695#issuecomment-2486571193) \r\n2. We can attempt a fix to the elaborator and/or kernel to see if indeed inconsistent universe normalization of nested `max`'s is a/the culprit here.\r\n3. We can, and probably should, attempt to unbundle the type fields from the offending structures. ",
              "author": {
                "login": "mattrobball"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOB7kabM52keKp",
              "createdAt": "2025-01-30T12:29:39Z",
              "source": {
                "id": "I_kwDOB7kabM6aDQUI",
                "title": "Universe level normalization has associativity of `max` backwards from parsing associativity",
                "url": "https://github.com/leanprover/lean4/issues/5695"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6nrkIpzwAAAAPFF900",
              "createdAt": "2025-02-05T09:31:08Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABh1mAHA",
                "name": "maintainer-merge"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6hiaDe",
              "createdAt": "2025-03-10T10:45:33Z",
              "body": "This has now come up in the triage meeting because it's one of the longest open PRs on the queue. One way of proceeding is that we document that this is a hack and merge it because at the end of the day it's making mathlib compile more quickly for everyone. What do people think about this?\r\n\r\nPS there doesn't seem to be a link to the relevant Zulip thread, which is [here](https://leanprover.zulipchat.com/#narrow/channel/287929-mathlib4/topic/JacobiZariski.20is.20slow.2E/near/496225223).",
              "author": {
                "login": "kbuzzard"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6hjrVs",
              "createdAt": "2025-03-10T12:51:58Z",
              "body": "I still worry we are just digging ourselves deeper into a hole with the current designs. ",
              "author": {
                "login": "mattrobball"
              }
            }
          ]
        }
      }
    }
  }
}
