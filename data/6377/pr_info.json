{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 108,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "joelriou"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "This PR slightly extends the basic API of pretriangulated categories.\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 1,
        "closed": true,
        "closedAt": "2023-08-09T08:46:10Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5jU5so",
              "body": "> There are 3 `coyoneda_exact` lemmas, but only 2 `yoneda_exact` lemmas. Is that on purpose?\r\n\r\nYes, it is on purpose. Indeed, the `yoneda_exact₁` variant would be quite unpractical because of the complicated formulation of the condition on the morphism:\r\n\r\n```lean\r\nlemma yoneda_exact₁ (T : Triangle C) (hT : T ∈ distTriang C) {X : C} (f : T.obj₁ ⟶ X)\r\n    (hf : T.mor₃⟦(-1 : ℤ)⟧' ≫ (shiftEquiv C (1 : ℤ)).unitIso.inv.app T.obj₁ ≫ f = 0) :\r\n    ∃ (g : T.obj₂ ⟶ X), f = T.mor₁ ≫ g :=\r\n  yoneda_exact₂ T.invRotate (inv_rot_of_dist_triangle _ hT) f (by\r\n    simpa using hf)\r\n```\r\n\r\nIf we ever need this in the applications, it would be more obvious to me to directly use `yoneda_exact₂ T.invRotate` rather than `yoneda_exact₁`. Do you think I should include it anyway?",
              "createdAt": "2023-08-05T07:19:44Z",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5jmDsM",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/5806640799/job/15739937410)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/5806640799/job/15739938275)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/5806640799/job/15739937962)",
              "createdAt": "2023-08-09T08:46:08Z",
              "author": {
                "login": "bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "ccffa1cdded717f3192fa58c8b78166979b4bfb0",
                "additions": 109,
                "deletions": 12,
                "committedDate": "2023-08-05T06:09:46Z",
                "author": {
                  "name": "Joël Riou",
                  "email": "joel.riou@universite-paris-saclay.fr"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "01b383edd8e1b100c7f798a4fe419a4df272911c",
                "additions": 3,
                "deletions": 3,
                "committedDate": "2023-08-05T06:12:00Z",
                "author": {
                  "name": "Joël Riou",
                  "email": "joel.riou@universite-paris-saclay.fr"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "289320eee11e425fccefa2abbfab27f99aab8501",
                "additions": 0,
                "deletions": 1,
                "committedDate": "2023-08-05T06:14:13Z",
                "author": {
                  "name": "Joël Riou",
                  "email": "joel.riou@universite-paris-saclay.fr"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "e48e44e75f132fb76bb0d642004126017075c663",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-08-05T07:20:38Z",
                "author": {
                  "name": "Joël Riou",
                  "email": "joel.riou@universite-paris-saclay.fr"
                },
                "statusCheckRollup": null
              }
            }
          ]
        },
        "createdAt": "2023-08-05T06:10:54Z",
        "deletions": 12,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/CategoryTheory/Triangulated/Pretriangulated.lean",
              "additions": 108,
              "deletions": 12
            }
          ]
        },
        "headRefName": "pretriangulated_misc",
        "headRefOid": "e48e44e75f132fb76bb0d642004126017075c663",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5XPhDP",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
              "color": "06e039",
              "name": "ready-to-merge"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJTYQ",
              "color": "33dbec",
              "name": "t-category-theory"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5dhT60",
              "body": "Sorry for the late response. I think your reasoning for leaving out the `yoneda_exact_1` variant is fine.\r\n\r\nbors merge",
              "state": "APPROVED",
              "author": {
                "login": "jcommelin"
              },
              "submittedAt": "2023-08-09T08:22:15Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 6377,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": "APPROVED",
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5dNapV",
              "body": "There are 3 `coyoneda_exact` lemmas, but only 2 `yoneda_exact` lemmas. Is that on purpose?",
              "state": "COMMENTED",
              "author": {
                "login": "jcommelin"
              },
              "submittedAt": "2023-08-05T06:58:06Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5dhT60",
              "body": "Sorry for the late response. I think your reasoning for leaving out the `yoneda_exact_1` variant is fine.\r\n\r\nbors merge",
              "state": "APPROVED",
              "author": {
                "login": "jcommelin"
              },
              "submittedAt": "2023-08-09T08:22:15Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": []
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjM3NzcyOTQ5",
              "login": "joelriou"
            },
            {
              "id": "MDQ6VXNlcjU2MzY3MDU=",
              "login": "jcommelin"
            },
            {
              "id": "U_kgDOB75MNQ",
              "login": "leanprover-community-mathlib4-bot"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": null,
        "title": "[Merged by Bors] - feat: more basic API for pretriangulated categories",
        "updatedAt": "2023-08-09T08:46:14Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/6377",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "ccffa1cdded717f3192fa58c8b78166979b4bfb0"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5th4fgzwAAAAJU6dTi",
              "createdAt": "2023-08-05T06:10:54Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJTYQ",
                "name": "t-category-theory"
              }
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5N1d2H",
              "createdAt": "2023-08-05T06:11:06Z",
              "source": {
                "id": "PR_kwDOFcwZ1c5Q-fSR",
                "title": "feat/refactor: redefinition of homology + derived categories",
                "url": "https://github.com/leanprover-community/mathlib4/pull/4197"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "01b383edd8e1b100c7f798a4fe419a4df272911c"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "289320eee11e425fccefa2abbfab27f99aab8501"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5dNapV",
              "createdAt": "2023-08-05T06:58:06Z",
              "body": "There are 3 `coyoneda_exact` lemmas, but only 2 `yoneda_exact` lemmas. Is that on purpose?",
              "author": {
                "login": "jcommelin"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5th4fgzwAAAAJU6wJe",
              "createdAt": "2023-08-05T06:58:14Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5jU5so",
              "createdAt": "2023-08-05T07:19:44Z",
              "body": "> There are 3 `coyoneda_exact` lemmas, but only 2 `yoneda_exact` lemmas. Is that on purpose?\r\n\r\nYes, it is on purpose. Indeed, the `yoneda_exact₁` variant would be quite unpractical because of the complicated formulation of the condition on the morphism:\r\n\r\n```lean\r\nlemma yoneda_exact₁ (T : Triangle C) (hT : T ∈ distTriang C) {X : C} (f : T.obj₁ ⟶ X)\r\n    (hf : T.mor₃⟦(-1 : ℤ)⟧' ≫ (shiftEquiv C (1 : ℤ)).unitIso.inv.app T.obj₁ ≫ f = 0) :\r\n    ∃ (g : T.obj₂ ⟶ X), f = T.mor₁ ≫ g :=\r\n  yoneda_exact₂ T.invRotate (inv_rot_of_dist_triangle _ hT) f (by\r\n    simpa using hf)\r\n```\r\n\r\nIf we ever need this in the applications, it would be more obvious to me to directly use `yoneda_exact₂ T.invRotate` rather than `yoneda_exact₁`. Do you think I should include it anyway?",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5th4fgzwAAAAJU66ZV",
              "createdAt": "2023-08-05T07:19:58Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5th4fgzwAAAAJU66ZZ",
              "createdAt": "2023-08-05T07:19:58Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "e48e44e75f132fb76bb0d642004126017075c663"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5dhT60",
              "createdAt": "2023-08-09T08:22:15Z",
              "body": "Sorry for the late response. I think your reasoning for leaving out the `yoneda_exact_1` variant is fine.\r\n\r\nbors merge",
              "author": {
                "login": "jcommelin"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5th4fgzwAAAAJWqZU3",
              "createdAt": "2023-08-09T08:22:28Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
                "name": "ready-to-merge"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5th4fgzwAAAAJWqZXj",
              "createdAt": "2023-08-09T08:22:29Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5jmDsM",
              "createdAt": "2023-08-09T08:46:08Z",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/5806640799/job/15739937410)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/5806640799/job/15739938275)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/5806640799/job/15739937962)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c5th4fgzwAAAAJWrUuy",
              "createdAt": "2023-08-09T08:46:10Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c5th4fgzwAAAAJWrU3m",
              "createdAt": "2023-08-09T08:46:14Z"
            },
            {
              "__typename": "ReferencedEvent"
            }
          ]
        }
      }
    }
  }
}
