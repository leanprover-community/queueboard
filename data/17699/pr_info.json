{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 191,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "loefflerd"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "We define the forward-difference (discrete derivative) operator, and prove the Gregory-Newton formula (discrete version of Taylor's theorem).\r\n\r\nBased on results from the ETH bachelor thesis of Giulio Caflisch.\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nFor details on the \"pull request lifecycle\" in mathlib, please see:\r\nhttps://leanprover-community.github.io/contribute/index.html\r\n\r\nIn particular, note that most reviewers will only notice your PR\r\nif it passes the continuous integration checks.\r\nPlease ask for help on https://leanprover.zulipchat.com if needed.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nIf you are moving or deleting declarations, please include these lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nMoves:\r\n- Vector.* -> Mathlib.Vector.*\r\n- ...\r\n\r\nDeletions:\r\n- Nat.bit1_add_bit1\r\n- ...\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 2,
        "closed": true,
        "closedAt": "2024-11-13T21:29:30Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c6PlcZS",
              "body": "### PR summary [0a51be44f0](https://github.com/leanprover-community/mathlib4/pull/17699/commits/0a51be44f025fc292e5b5fd71b7681737a8e7410)\n\n#### Import changes for modified files\n\nNo significant changes to the import graph\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n| `Mathlib.Algebra.Group.ForwardDiff`|740|\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ coe_fwdDiffâ‚—`\n`+ coe_fwdDiffâ‚—_pow`\n`+ fwdDiff`\n`+ fwdDiff_add`\n`+ fwdDiff_choose`\n`+ fwdDiff_const`\n`+ fwdDiff_const_smul`\n`+ fwdDiff_finset_sum`\n`+ fwdDiff_iter_add`\n`+ fwdDiff_iter_choose`\n`+ fwdDiff_iter_choose_zero`\n`+ fwdDiff_iter_const_smul`\n`+ fwdDiff_iter_eq_sum_shift`\n`+ fwdDiff_iter_finset_sum`\n`+ fwdDiff_smul`\n`+ fwdDiff_smul_const`\n`+ fwdDiffâ‚—`\n`+ shift_eq_sum_fwdDiff_iter`\n`+ shiftâ‚—`\n`+ shiftâ‚—_apply`\n`+ shiftâ‚—_pow_apply`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n</details>",
              "createdAt": "2024-10-13T12:18:58Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6PlgCF",
              "body": "I had already started something similar, but in a slightly more general setup: Instead of only considering the discrete forward difference `f (x + 1) - f x`, I also consider the general weighted sum `âˆ‘ s, w s â€¢ f (x + s)`.\r\n\r\nYou can find my code [here](https://github.com/YaelDillies/LeanCamCombi/blob/master/LeanCamCombi/DiscreteDeriv.lean). It is written for the special case of polynomials but applies mutatis mutandis to general functions. I had written it for a course that @madvorak was going to teach, but he didn't end up using it.\r\n\r\nIt would be great if you could incorporate some of the ideas from there.",
              "createdAt": "2024-10-13T13:04:24Z",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6Plh83",
              "body": "> I had already started something similar, but in a slightly more general setup [...] It is written for the special case of polynomials but applies mutatis mutandis to general functions [...] It would be great if you could incorporate some of the ideas from there.\r\n\r\nWhich particular ideas would you suggest that Giulio and I should incorporate? \r\n\r\nI actually think your treatment could, conversely, benefit from incorporating some ideas from ours (if you intend to pursue it further at any point in future). Note that \"discConv_discConv\", the key lemma which is `sorry`ed in your treatment, would be automatic in our approach: it is subsumed by the fact that for any abelian group `G` and monoid-with-one `M`, `M â†’ G` is canonically a module over its own endomorphism algebra `Module.End â„¤ (M â†’ G)`, and we can compose this with the natural map from `â„¤[X]` to `Module.End â„¤ (M â†’ G)` sending `X` to the shift-by-1 operator, to obtain a module action of polynomials on `M â†’ G` with `X` acting as the shift. Then Newton-Gregory is just the binomial expansion of `((X - 1) + 1) ^ n`.",
              "createdAt": "2024-10-13T13:27:24Z",
              "author": {
                "login": "loefflerd"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6Q9pAQ",
              "body": "> Which particular ideas would you suggest that Giulio and I should incorporate?\r\n\r\nThe weighted sum of shits idea is the one I am thinking of. Instead of just considering the shift operator `f â†¦ f (x + 1) - f x`, you could consider more generally `f â†¦ âˆ‘ s, w s â€¢ f (x + s)` (inaccurate notation, see my LeanCamCombi file for the precise one) where `w` is a finsupp. Your proofs should still go through mostly unchanged, but will be more applicable as you can now talk about general composition of shift operators. This is useful to eg show the way shift operators reduce the degree of a polynomial (this was the original purpose of my LeanCamCombi file) and @grhkm21 on Xena just mentioned a number theory statement that needs the shift operator `f â†¦ f (x + s) - f x`.\r\n\r\n> I actually think your treatment could, conversely, benefit from incorporating some ideas from ours (if you intend to pursue it further at any point in future).\r\n\r\nNo plan for now. Too busy ðŸ˜…",
              "createdAt": "2024-10-23T13:00:39Z",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6Q-BBV",
              "body": "> > I actually think your treatment could, conversely, benefit from incorporating some ideas from ours (if you intend to pursue it further at any point in future).\r\n> \r\n> No plan for now. Too busy ðŸ˜…\r\n\r\nI think the programme that you refer to â€“ developing this very general notion of discrete convolution â€“Â may well be interesting; but I don't see that it has that much to do with the present PR, particularly since you seem to be focussing on polyomials, while for our purposes it is vital to be able to treat arbitrary functions (we want this for Mahler's theorem, and Mahler's theorem for polynomials is a triviality).\r\n\r\nIf neither you nor anyone else is currently planning to pursue the discrete-convolutions project, then may I suggest that it should not be a factor in the review process for this PR?",
              "createdAt": "2024-10-23T13:28:22Z",
              "author": {
                "login": "loefflerd"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6Q_vM4",
              "body": "> don't see that it has that much to do with the present PR, particularly since you seem to be focussing on polyomials\r\n\r\nThe fact that my file is dealing with polynomials instead of general functions is a distraction. You can take my file and replace polynomials by arbitrary functions. Add in your insight of using End-valued linear functions and you will get something close to what I would like you to do.",
              "createdAt": "2024-10-23T15:28:28Z",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6RAAdi",
              "body": "Yael, your comments do not appear to be a review of the PR at hand, but rather an attempt to co-opt me into finishing one of your projects for you. ",
              "createdAt": "2024-10-23T15:50:16Z",
              "author": {
                "login": "loefflerd"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6RAz95",
              "body": "Let's not get too heated and try to resolve this peacefully! :) As I was pinged, let me add my input too. I was looking at the circle method, which I imagine analytic NT projects eventually have to work on, so this is relevant.\r\n\r\nOne specific lemma needed for Hua's result on Waring's problem is [Hua's lemma](https://en.wikipedia.org/wiki/Hua%27s_lemma), which the proof can be found at Section 1.6 of [these notes](https://www.williamchen-mathematics.info/lnhlmfolder/hlm01.pdf) (extended version of Vaughan's \"HL method\" book). And in there we need forward difference operator $\\Delta_1(\\phi(x); h_1) = \\phi(x + h_1) - \\phi(x)$ (and in fact the iterated difference operator $\\Delta_{j + 1}(\\phi(x); h_1, \\ldots, h_{j + 1})$ but not now), even for general $x, h_1 \\in \\mathbb{R}$. So it'll definitely be nice to have the forward difference operator defined generally to accept $h_1$ as a parameter, which of course can't be defined in terms of $\\Delta_1(\\phi(x); 1)$.\r\n\r\nI was not aware of Yael's results, but if their definition is (1) used *somewhere* (2) a generalisation of the one I gave, then sure, why not.\r\n\r\nDavid, do you mind explaining (apart from lack of time, motivation, etc. I mean purely technical aspects) what would be the disadvantages of defining the operator via Yael's definition?\r\n\r\nAlso, let's keep the scope of the PR small and make sure this work by David**'s student** gets in without much pain, so let's not prove any lemmas from Yael's file (but of course we can take the `discForwardDiff` definition for example)",
              "createdAt": "2024-10-23T17:14:43Z",
              "author": {
                "login": "grhkm21"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6RCLQp",
              "body": "> David, do you mind explaining (apart from lack of time, motivation, etc. I mean purely technical aspects) what would be the disadvantages of defining the operator via Yael's definition?\r\n\r\nTo me it seems pedantic and overcomplicated â€“ lots of extra work for little clear gain. I'd be happy to be proved wrong, and if Yael wants to work out this approach then he's welcome to go ahead as far as I'm concerned, but I'm not inclined to invest time in it myself. (Yael is not the only one who is busy.)\r\n\r\nI can certainly see the use-case for (iterated) difference operators with an arbitrary specified \"step size\", which would cover the application to Hua's lemma that @grhkm21 mentioned. I would be happy to add this to the current PR.\r\n\r\n",
              "createdAt": "2024-10-23T19:29:32Z",
              "author": {
                "login": "loefflerd"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6TgtiH",
              "body": "Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/11825522486/job/32949484010)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/11825522486/job/32949483748)",
              "createdAt": "2024-11-13T21:29:29Z",
              "author": {
                "login": "mathlib-bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "e7af202bbe8d12fadc961702a2e0fde9235a9aaa",
                "additions": 179,
                "deletions": 0,
                "committedDate": "2024-10-23T20:28:27Z",
                "author": {
                  "name": "David Loeffler",
                  "email": "d.loeffler.01@cantab.net"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "0b3245104862b89b7e2fb8789a0bb45cb7ea5af4",
                "additions": 16,
                "deletions": 11,
                "committedDate": "2024-10-23T20:28:27Z",
                "author": {
                  "name": "David Loeffler",
                  "email": "d.loeffler.01@cantab.net"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "93b0a8ae99f29efe362a04627ffd158bc5ff81ea",
                "additions": 2,
                "deletions": 0,
                "committedDate": "2024-10-23T20:28:27Z",
                "author": {
                  "name": "David Loeffler",
                  "email": "d.loeffler.01@cantab.net"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "28e93d4d7a7e21d6cb4780ef4c51a480a6e2b287",
                "additions": 51,
                "deletions": 46,
                "committedDate": "2024-10-23T20:28:27Z",
                "author": {
                  "name": "David Loeffler",
                  "email": "d.loeffler.01@cantab.net"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHcbnHVQ",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11487678409/job/31972771669"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHcbnHdg",
                        "name": "build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11487678404/job/31972771702"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHcbnETA",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11487678189/job/31972770892"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHcbnEag",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11487678194/job/31972770922"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHcbnIww",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11487678407/job/31972772035"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHcbnFXQ",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11487678189/job/31972771165"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHcbnGcg",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11487678194/job/31972771442"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHcbnHpA",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11487678407/job/31972771748"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHcbnGeA",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11487678189/job/31972771448"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHcbnFnQ",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11487678194/job/31972771229"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHcbnIAA",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11487678189/job/31972771840"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHcb59ng",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11487678194/job/31973080478"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHcbnZLQ",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/31972776237"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHcbnAaA",
                        "name": ".github/dependabot.yml",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dependabot-api.githubapp.com"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHcbogsg",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=17699&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "0a51be44f025fc292e5b5fd71b7681737a8e7410",
                "additions": 50438,
                "deletions": 23736,
                "committedDate": "2024-11-07T21:50:10Z",
                "author": {
                  "name": "David Loeffler",
                  "email": "d.loeffler.01@cantab.net"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHq8-rXw",
                        "name": "Fix style issues from lint",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11824844898/job/32947284831"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHq8-pRg",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11824844886/job/32947284294"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHnBC3QQ",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11731950690/job/32683112257"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHq8-pig",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11824844894/job/32947284362"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHnBC2_w",
                        "name": "build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11731950686/job/32683112191"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHnBDFQA",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11731951642/job/32683115840"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHnBDD2A",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11731951643/job/32683115480"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHnBC4Vg",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11731950685/job/32683112534"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHq8-qQA",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11824844886/job/32947284544"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHnBDGQA",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11731951642/job/32683116096"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHnBDE4Q",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11731951643/job/32683115745"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHnBC3MA",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11731950685/job/32683112240"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHnBDD8g",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11731951642/job/32683115506"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHnBDGLA",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11731951643/job/32683116076"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHnBDHIQ",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11731951642/job/32683116321"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHnBZItA",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11731951643/job/32683477172"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHnBDLFQ",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/32683117333"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHnBECbg",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=17699&login=leanprover-community&repository=mathlib4"
                      },
                      {
                        "__typename": "StatusContext",
                        "id": "SC_kwDOFcwZ1c8AAAAHlaTGsw",
                        "context": "bors",
                        "state": "SUCCESS",
                        "targetUrl": "https://mathlib-bors-ca18eefec4cb.herokuapp.com/batches/7385",
                        "description": "Build succeeded"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "createdAt": "2024-10-13T12:18:11Z",
        "deletions": 0,
        "files": {
          "nodes": [
            {
              "path": "Mathlib.lean",
              "additions": 1,
              "deletions": 0
            },
            {
              "path": "Mathlib/Algebra/Group/ForwardDiff.lean",
              "additions": 190,
              "deletions": 0
            }
          ]
        },
        "headRefName": "DL_fwd_diff",
        "headRefOid": "0a51be44f025fc292e5b5fd71b7681737a8e7410",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5-coWM",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
              "color": "06e039",
              "name": "ready-to-merge"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJjTQ",
              "color": "33DBEC",
              "name": "t-algebra"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c6NHD6g",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "vihdzp"
              },
              "submittedAt": "2024-10-14T19:20:25Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6RGFBW",
              "body": "This PR looks fine to me as is, and is in a rather natural generality. It can certainly be generalized further, but I don't think its current state would make such a generalization harder.\r\n\r\nSo let's just merge as is, and refactor/generalize when needed.\r\n\r\nbors merge",
              "state": "COMMENTED",
              "author": {
                "login": "jcommelin"
              },
              "submittedAt": "2024-11-13T19:59:07Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 17699,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": [
            {
              "requestedReviewer": {
                "id": "MDQ6VXNlcjE0MDkwNTkz",
                "login": "YaelDillies"
              }
            }
          ]
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c6NHD6g",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "vihdzp"
              },
              "submittedAt": "2024-10-14T19:20:25Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6NHR7M",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "loefflerd"
              },
              "submittedAt": "2024-10-14T19:58:32Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6RGFBW",
              "body": "This PR looks fine to me as is, and is in a rather natural generality. It can certainly be generalized further, but I don't think its current state would make such a generalization harder.\r\n\r\nSo let's just merge as is, and refactor/generalize when needed.\r\n\r\nbors merge",
              "state": "COMMENTED",
              "author": {
                "login": "jcommelin"
              },
              "submittedAt": "2024-11-13T19:59:07Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rSXSi",
                    "body": "I don't really agree with making this private. If it's useful for proofs within this file, it's quite possible it's useful for proofs outside of it.",
                    "createdAt": "2024-10-14T19:20:25Z",
                    "author": {
                      "login": "vihdzp"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5rSevC",
                    "body": "I'd be happy with that, sure!Â I've un-privatised (publicized?) them, but put them in a namespace, to avoid cluttering up the root namespace too much.",
                    "createdAt": "2024-10-14T19:58:32Z",
                    "author": {
                      "login": "loefflerd"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjM0Mzk2ODg=",
              "login": "loefflerd"
            },
            {
              "id": "MDQ6VXNlcjE0MDkwNTkz",
              "login": "YaelDillies"
            },
            {
              "id": "MDQ6VXNlcjgzNTE3NTg0",
              "login": "grhkm21"
            },
            {
              "id": "MDQ6VXNlcjU2MzY3MDU=",
              "login": "jcommelin"
            },
            {
              "id": "MDQ6VXNlcjY1NDY1Njcw",
              "login": "vihdzp"
            },
            {
              "id": "U_kgDOB75MNQ",
              "login": "leanprover-community-mathlib4-bot"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHq8-rXw",
                "name": "Fix style issues from lint",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11824844898/job/32947284831"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHq8-pRg",
                "name": "Add ready-to-merge label",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11824844886/job/32947284294"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHnBC3QQ",
                "name": "label-and-report-new-contributor",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11731950690/job/32683112257"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHq8-pig",
                "name": "Ping maintainers on Zulip",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11824844894/job/32947284362"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHnBC2_w",
                "name": "build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11731950686/job/32683112191"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHnBDFQA",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11731951642/job/32683115840"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHnBDD2A",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11731951643/job/32683115480"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHnBC4Vg",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11731950685/job/32683112534"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHq8-qQA",
                "name": "Add delegated label",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11824844886/job/32947284544"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHnBDGQA",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11731951642/job/32683116096"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHnBDE4Q",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11731951643/job/32683115745"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHnBC3MA",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11731950685/job/32683112240"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHnBDD8g",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11731951642/job/32683115506"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHnBDGLA",
                "name": "Build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11731951643/job/32683116076"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHnBDHIQ",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11731951642/job/32683116321"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHnBZItA",
                "name": "Post-CI job",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11731951643/job/32683477172"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHnBDLFQ",
                "name": "New Contributor Check",
                "conclusion": "NEUTRAL",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/32683117333"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHnBECbg",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=17699&login=leanprover-community&repository=mathlib4"
              },
              {
                "__typename": "StatusContext",
                "id": "SC_kwDOFcwZ1c8AAAAHlaTGsw",
                "context": "bors",
                "state": "SUCCESS",
                "targetUrl": "https://mathlib-bors-ca18eefec4cb.herokuapp.com/batches/7385",
                "description": "Build succeeded"
              }
            ]
          }
        },
        "title": "[Merged by Bors] - feat(Algebra/Group): forward difference operator",
        "updatedAt": "2024-11-13T21:29:43Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/17699",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "ReviewRequestedEvent",
              "id": "RRE_lADOFcwZ1c6aA6svzwAAAANnY-2C",
              "createdAt": "2024-10-13T12:18:11Z",
              "requestedReviewer": {
                "id": "MDQ6VXNlcjE0MDkwNTkz",
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6PlcZS",
              "createdAt": "2024-10-13T12:18:58Z",
              "body": "### PR summary [0a51be44f0](https://github.com/leanprover-community/mathlib4/pull/17699/commits/0a51be44f025fc292e5b5fd71b7681737a8e7410)\n\n#### Import changes for modified files\n\nNo significant changes to the import graph\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n| `Mathlib.Algebra.Group.ForwardDiff`|740|\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ coe_fwdDiffâ‚—`\n`+ coe_fwdDiffâ‚—_pow`\n`+ fwdDiff`\n`+ fwdDiff_add`\n`+ fwdDiff_choose`\n`+ fwdDiff_const`\n`+ fwdDiff_const_smul`\n`+ fwdDiff_finset_sum`\n`+ fwdDiff_iter_add`\n`+ fwdDiff_iter_choose`\n`+ fwdDiff_iter_choose_zero`\n`+ fwdDiff_iter_const_smul`\n`+ fwdDiff_iter_eq_sum_shift`\n`+ fwdDiff_iter_finset_sum`\n`+ fwdDiff_smul`\n`+ fwdDiff_smul_const`\n`+ fwdDiffâ‚—`\n`+ shift_eq_sum_fwdDiff_iter`\n`+ shiftâ‚—`\n`+ shiftâ‚—_apply`\n`+ shiftâ‚—_pow_apply`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n</details>",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6aA6svzwAAAANnY_dX",
              "createdAt": "2024-10-13T12:19:28Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJjTQ",
                "name": "t-algebra"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6PlgCF",
              "createdAt": "2024-10-13T13:04:24Z",
              "body": "I had already started something similar, but in a slightly more general setup: Instead of only considering the discrete forward difference `f (x + 1) - f x`, I also consider the general weighted sum `âˆ‘ s, w s â€¢ f (x + s)`.\r\n\r\nYou can find my code [here](https://github.com/YaelDillies/LeanCamCombi/blob/master/LeanCamCombi/DiscreteDeriv.lean). It is written for the special case of polynomials but applies mutatis mutandis to general functions. I had written it for a course that @madvorak was going to teach, but he didn't end up using it.\r\n\r\nIt would be great if you could incorporate some of the ideas from there.",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6Plh83",
              "createdAt": "2024-10-13T13:27:24Z",
              "body": "> I had already started something similar, but in a slightly more general setup [...] It is written for the special case of polynomials but applies mutatis mutandis to general functions [...] It would be great if you could incorporate some of the ideas from there.\r\n\r\nWhich particular ideas would you suggest that Giulio and I should incorporate? \r\n\r\nI actually think your treatment could, conversely, benefit from incorporating some ideas from ours (if you intend to pursue it further at any point in future). Note that \"discConv_discConv\", the key lemma which is `sorry`ed in your treatment, would be automatic in our approach: it is subsumed by the fact that for any abelian group `G` and monoid-with-one `M`, `M â†’ G` is canonically a module over its own endomorphism algebra `Module.End â„¤ (M â†’ G)`, and we can compose this with the natural map from `â„¤[X]` to `Module.End â„¤ (M â†’ G)` sending `X` to the shift-by-1 operator, to obtain a module action of polynomials on `M â†’ G` with `X` acting as the shift. Then Newton-Gregory is just the binomial expansion of `((X - 1) + 1) ^ n`.",
              "author": {
                "login": "loefflerd"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6NHD6g",
              "createdAt": "2024-10-14T19:20:25Z",
              "body": "",
              "author": {
                "login": "vihdzp"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c6aA6svzwAAAANo7zsx",
              "createdAt": "2024-10-14T20:08:01Z"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6Q9pAQ",
              "createdAt": "2024-10-23T13:00:39Z",
              "body": "> Which particular ideas would you suggest that Giulio and I should incorporate?\r\n\r\nThe weighted sum of shits idea is the one I am thinking of. Instead of just considering the shift operator `f â†¦ f (x + 1) - f x`, you could consider more generally `f â†¦ âˆ‘ s, w s â€¢ f (x + s)` (inaccurate notation, see my LeanCamCombi file for the precise one) where `w` is a finsupp. Your proofs should still go through mostly unchanged, but will be more applicable as you can now talk about general composition of shift operators. This is useful to eg show the way shift operators reduce the degree of a polynomial (this was the original purpose of my LeanCamCombi file) and @grhkm21 on Xena just mentioned a number theory statement that needs the shift operator `f â†¦ f (x + s) - f x`.\r\n\r\n> I actually think your treatment could, conversely, benefit from incorporating some ideas from ours (if you intend to pursue it further at any point in future).\r\n\r\nNo plan for now. Too busy ðŸ˜…",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6aA6svzwAAAANzELkt",
              "createdAt": "2024-10-23T13:00:44Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6Q-BBV",
              "createdAt": "2024-10-23T13:28:22Z",
              "body": "> > I actually think your treatment could, conversely, benefit from incorporating some ideas from ours (if you intend to pursue it further at any point in future).\r\n> \r\n> No plan for now. Too busy ðŸ˜…\r\n\r\nI think the programme that you refer to â€“ developing this very general notion of discrete convolution â€“Â may well be interesting; but I don't see that it has that much to do with the present PR, particularly since you seem to be focussing on polyomials, while for our purposes it is vital to be able to treat arbitrary functions (we want this for Mahler's theorem, and Mahler's theorem for polynomials is a triviality).\r\n\r\nIf neither you nor anyone else is currently planning to pursue the discrete-convolutions project, then may I suggest that it should not be a factor in the review process for this PR?",
              "author": {
                "login": "loefflerd"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6aA6svzwAAAANzKVyM",
              "createdAt": "2024-10-23T13:46:56Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6Q_vM4",
              "createdAt": "2024-10-23T15:28:28Z",
              "body": "> don't see that it has that much to do with the present PR, particularly since you seem to be focussing on polyomials\r\n\r\nThe fact that my file is dealing with polynomials instead of general functions is a distraction. You can take my file and replace polynomials by arbitrary functions. Add in your insight of using End-valued linear functions and you will get something close to what I would like you to do.",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6RAAdi",
              "createdAt": "2024-10-23T15:50:16Z",
              "body": "Yael, your comments do not appear to be a review of the PR at hand, but rather an attempt to co-opt me into finishing one of your projects for you. ",
              "author": {
                "login": "loefflerd"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6RAz95",
              "createdAt": "2024-10-23T17:14:43Z",
              "body": "Let's not get too heated and try to resolve this peacefully! :) As I was pinged, let me add my input too. I was looking at the circle method, which I imagine analytic NT projects eventually have to work on, so this is relevant.\r\n\r\nOne specific lemma needed for Hua's result on Waring's problem is [Hua's lemma](https://en.wikipedia.org/wiki/Hua%27s_lemma), which the proof can be found at Section 1.6 of [these notes](https://www.williamchen-mathematics.info/lnhlmfolder/hlm01.pdf) (extended version of Vaughan's \"HL method\" book). And in there we need forward difference operator $\\Delta_1(\\phi(x); h_1) = \\phi(x + h_1) - \\phi(x)$ (and in fact the iterated difference operator $\\Delta_{j + 1}(\\phi(x); h_1, \\ldots, h_{j + 1})$ but not now), even for general $x, h_1 \\in \\mathbb{R}$. So it'll definitely be nice to have the forward difference operator defined generally to accept $h_1$ as a parameter, which of course can't be defined in terms of $\\Delta_1(\\phi(x); 1)$.\r\n\r\nI was not aware of Yael's results, but if their definition is (1) used *somewhere* (2) a generalisation of the one I gave, then sure, why not.\r\n\r\nDavid, do you mind explaining (apart from lack of time, motivation, etc. I mean purely technical aspects) what would be the disadvantages of defining the operator via Yael's definition?\r\n\r\nAlso, let's keep the scope of the PR small and make sure this work by David**'s student** gets in without much pain, so let's not prove any lemmas from Yael's file (but of course we can take the `discForwardDiff` definition for example)",
              "author": {
                "login": "grhkm21"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6aA6svzwAAAANzmws6",
              "createdAt": "2024-10-23T17:15:29Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6RCLQp",
              "createdAt": "2024-10-23T19:29:32Z",
              "body": "> David, do you mind explaining (apart from lack of time, motivation, etc. I mean purely technical aspects) what would be the disadvantages of defining the operator via Yael's definition?\r\n\r\nTo me it seems pedantic and overcomplicated â€“ lots of extra work for little clear gain. I'd be happy to be proved wrong, and if Yael wants to work out this approach then he's welcome to go ahead as far as I'm concerned, but I'm not inclined to invest time in it myself. (Yael is not the only one who is busy.)\r\n\r\nI can certainly see the use-case for (iterated) difference operators with an arbitrary specified \"step size\", which would cover the application to Hua's lemma that @grhkm21 mentioned. I would be happy to add this to the current PR.\r\n\r\n",
              "author": {
                "login": "loefflerd"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c6aA6svzwAAAANz9TIt",
              "createdAt": "2024-10-23T20:31:57Z"
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6aA6svzwAAAANz9V7t",
              "createdAt": "2024-10-23T20:32:51Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6RGFBW",
              "createdAt": "2024-11-13T19:59:07Z",
              "body": "This PR looks fine to me as is, and is in a rather natural generality. It can certainly be generalized further, but I don't think its current state would make such a generalization harder.\r\n\r\nSo let's just merge as is, and refactor/generalize when needed.\r\n\r\nbors merge",
              "author": {
                "login": "jcommelin"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6aA6svzwAAAAOPRncH",
              "createdAt": "2024-11-13T19:59:18Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
                "name": "ready-to-merge"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6TgtiH",
              "createdAt": "2024-11-13T21:29:29Z",
              "body": "Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/11825522486/job/32949484010)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/11825522486/job/32949483748)",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c6aA6svzwAAAAOPVEi4",
              "createdAt": "2024-11-13T21:29:31Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c6aA6svzwAAAAOPVFAe",
              "createdAt": "2024-11-13T21:29:43Z"
            }
          ]
        }
      }
    }
  }
}
