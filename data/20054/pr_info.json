{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 444,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "YaelDillies"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "Define constructible sets, which are morally sets in a topological space which we can make out of finite unions and intersections of open and closed sets.\r\n\r\nFrom GrowthInGroups (LeanCamCombi)\r\n\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nFor details on the \"pull request lifecycle\" in mathlib, please see:\r\nhttps://leanprover-community.github.io/contribute/index.html\r\n\r\nIn particular, note that most reviewers will only notice your PR\r\nif it passes the continuous integration checks.\r\nPlease ask for help on https://leanprover.zulipchat.com if needed.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nIf you are moving or deleting declarations, please include these lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nMoves:\r\n- Vector.* -> List.Vector.*\r\n- ...\r\n\r\nDeletions:\r\n- Nat.bit1_add_bit1\r\n- ...\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 3,
        "closed": false,
        "closedAt": null,
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c6YLf-Y",
              "body": "### PR summary [4e337c3de9](https://github.com/leanprover-community/mathlib4/pull/20054/commits/4e337c3de95d3fff8952315d7a7ae0147970088c)\n\n#### Import changes for modified files\n\nNo significant changes to the import graph\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n| `Mathlib.Topology.Constructible` (new file)|718|\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ IsConstructible`\n`+ IsConstructible.biInter`\n`+ IsConstructible.biUnion`\n`+ IsConstructible.compl`\n`+ IsConstructible.empty`\n`+ IsConstructible.empty_union_induction`\n`+ IsConstructible.himp`\n`+ IsConstructible.iInter`\n`+ IsConstructible.iUnion`\n`+ IsConstructible.image_of_isClosedEmbedding`\n`+ IsConstructible.image_of_isOpenEmbedding`\n`+ IsConstructible.induction_of_isTopologicalBasis`\n`+ IsConstructible.inter`\n`+ IsConstructible.isLocallyConstructible`\n`+ IsConstructible.of_compl`\n`+ IsConstructible.preimage`\n`+ IsConstructible.preimage_of_isClosedEmbedding`\n`+ IsConstructible.preimage_of_isOpenEmbedding`\n`+ IsConstructible.sInter`\n`+ IsConstructible.sUnion`\n`+ IsConstructible.sdiff`\n`+ IsConstructible.union`\n`+ IsConstructible.univ`\n`+ IsLocallyConstructible`\n`+ IsLocallyConstructible.empty`\n`+ IsLocallyConstructible.finsetInf`\n`+ IsLocallyConstructible.finsetInf'`\n`+ IsLocallyConstructible.iInter`\n`+ IsLocallyConstructible.inter`\n`+ IsLocallyConstructible.sInter`\n`+ IsLocallyConstructible.univ`\n`+ IsRetrocompact`\n`+ IsRetrocompact.biInter`\n`+ IsRetrocompact.biUnion`\n`+ IsRetrocompact.empty`\n`+ IsRetrocompact.finsetInf`\n`+ IsRetrocompact.finsetInf'`\n`+ IsRetrocompact.finsetSup`\n`+ IsRetrocompact.finsetSup'`\n`+ IsRetrocompact.iInter`\n`+ IsRetrocompact.iUnion`\n`+ IsRetrocompact.image_of_isEmbedding`\n`+ IsRetrocompact.inter`\n`+ IsRetrocompact.inter_isOpen`\n`+ IsRetrocompact.isOpen_inter`\n`+ IsRetrocompact.preimage_of_isClosedEmbedding`\n`+ IsRetrocompact.preimage_of_isOpenEmbedding`\n`+ IsRetrocompact.sInter`\n`+ IsRetrocompact.sUnion`\n`+ IsRetrocompact.singleton`\n`+ IsRetrocompact.union`\n`+ IsRetrocompact.univ`\n`+ IsRetrocompact_iff_isSpectralMap_subtypeVal`\n`+ Topology.IsClosedEmbedding.inclusion`\n`+ Topology.IsOpenEmbedding.inclusion`\n`+ _root_.IsRetrocompact.isCompact`\n`+ _root_.IsRetrocompact.isConstructible`\n`+ _root_.IsRetrocompact.isLocallyConstructible`\n`+ _root_.TopologicalSpace.IsTopologicalBasis.isConstructible`\n`+ _root_.TopologicalSpace.IsTopologicalBasis.isConstructible'`\n`+ _root_.TopologicalSpace.IsTopologicalBasis.isRetrocompact`\n`+ _root_.TopologicalSpace.IsTopologicalBasis.isRetrocompact'`\n`+ _root_.TopologicalSpace.IsTopologicalBasis.isRetrocompact_iff_isCompact`\n`+ _root_.TopologicalSpace.IsTopologicalBasis.isRetrocompact_iff_isCompact'`\n`+ isConstructible_compl`\n`+ isConstructible_preimage_of_isOpenEmbedding`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n</details>\n\n---\n\n<details><summary>No changes to technical debt.</summary>\n\nYou can run this locally as\n```\n./scripts/technical-debt-metrics.sh pr_summary\n```\n* The `relative` value is the weighted *sum* of the differences with weight given by the *inverse* of the current value of the statistic.\n* The `absolute` value is the `relative` value divided by the total sum of the inverses of the current values (i.e. the weighted *average* of the differences).\n</details>",
              "createdAt": "2024-12-19T09:13:20Z",
              "author": {
                "login": "github-actions"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "4f8a76ed4ebc7c36a25dd9c01b1d5f7f10af2c42",
                "additions": 301,
                "deletions": 0,
                "committedDate": "2025-01-03T15:44:41Z",
                "author": {
                  "name": "Yaël Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "26e050659601a6aa5ba24515e1ab387e23f7b01e",
                "additions": 4,
                "deletions": 1,
                "committedDate": "2025-01-03T15:44:41Z",
                "author": {
                  "name": "Yaël Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "246239e0f403397b511de2417b75c22cf4070541",
                "additions": 83,
                "deletions": 44,
                "committedDate": "2025-01-03T15:44:42Z",
                "author": {
                  "name": "Yaël Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "1a750a0c7e5a79bff44a43d81ce3522ca5754820",
                "additions": 27,
                "deletions": 24,
                "committedDate": "2025-01-03T15:44:42Z",
                "author": {
                  "name": "Yaël Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "1045dc80e2e359541f6179f9b85b6903e72a79e6",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2025-01-03T15:44:42Z",
                "author": {
                  "name": "Yaël Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "0ba091694fd2d48adc5ca84d1a3ffb833ad7483c",
                "additions": 66,
                "deletions": 75,
                "committedDate": "2025-01-03T15:44:42Z",
                "author": {
                  "name": "Yaël Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "ddf26b3cf42b691acbe3cd6a7872f2669b2240f6",
                "additions": 33,
                "deletions": 4,
                "committedDate": "2025-01-03T15:44:42Z",
                "author": {
                  "name": "Yaël Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "4e337c3de95d3fff8952315d7a7ae0147970088c",
                "additions": 91,
                "deletions": 14,
                "committedDate": "2025-01-03T15:49:41Z",
                "author": {
                  "name": "Yaël Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAILT6yLQ",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12600238308/job/35118821933"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAILT6yCg",
                        "name": "post-or-update-summary-comment",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12600238294/job/35118821898"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAILT6twQ",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12600237786/job/35118820801"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAILT6t6w",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12600237793/job/35118820843"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAILT6yPA",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12600238298/job/35118821948"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAILT6ulw",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12600237786/job/35118821015"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAILT6vyg",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12600237793/job/35118821322"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAILT6zEQ",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12600238298/job/35118822161"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAILT6u2g",
                        "name": "Build",
                        "conclusion": null,
                        "status": "IN_PROGRESS",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12600237793/job/35118821082"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAILT6vgw",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12600237786/job/35118821251"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAILT6wdw",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12600237786/job/35118821495"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAILT7aAg",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/35118832130"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAILT8PYA",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=20054&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "createdAt": "2024-12-19T09:12:27Z",
        "deletions": 1,
        "files": {
          "nodes": [
            {
              "path": "Mathlib.lean",
              "additions": 1,
              "deletions": 0
            },
            {
              "path": "Mathlib/Topology/Constructible.lean",
              "additions": 429,
              "deletions": 0
            },
            {
              "path": "Mathlib/Topology/Constructions.lean",
              "additions": 14,
              "deletions": 1
            }
          ]
        },
        "headRefName": "constructible_set",
        "headRefOid": "4e337c3de95d3fff8952315d7a7ae0147970088c",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c6Fv78c",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJbOw",
              "color": "33DBEC",
              "name": "t-topology"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c6V4Ye6",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "b-mehta"
              },
              "submittedAt": "2024-12-19T13:09:06Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WW-Y7",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "AntoineChambert-Loir"
              },
              "submittedAt": "2024-12-25T14:14:31Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WXbQ-",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2024-12-26T02:19:40Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WELTd",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "urkud"
              },
              "submittedAt": "2024-12-20T14:30:03Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "BLOCKED",
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 20054,
        "potentialMergeCommit": {
          "oid": "3dcaf28258e3f0345a1cc05fda365c724901e25d"
        },
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": [
            {
              "requestedReviewer": {
                "id": "MDQ6VXNlcjM2NDE0Mjcw",
                "login": "erdOne"
              }
            }
          ]
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c6V4Ye6",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "b-mehta"
              },
              "submittedAt": "2024-12-19T13:09:06Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WDKhx",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2024-12-20T12:02:52Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WEFmP",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "AntoineChambert-Loir"
              },
              "submittedAt": "2024-12-20T14:17:47Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WEGQI",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "AntoineChambert-Loir"
              },
              "submittedAt": "2024-12-20T14:19:13Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WEHXz",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "AntoineChambert-Loir"
              },
              "submittedAt": "2024-12-20T14:21:43Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WEH2I",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "AntoineChambert-Loir"
              },
              "submittedAt": "2024-12-20T14:22:42Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WEIrF",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "AntoineChambert-Loir"
              },
              "submittedAt": "2024-12-20T14:24:23Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WEKvo",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "urkud"
              },
              "submittedAt": "2024-12-20T14:28:51Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WEK_h",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "AntoineChambert-Loir"
              },
              "submittedAt": "2024-12-20T14:29:23Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WELTd",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "urkud"
              },
              "submittedAt": "2024-12-20T14:30:03Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WELUg",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "AntoineChambert-Loir"
              },
              "submittedAt": "2024-12-20T14:30:05Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WEMNn",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "AntoineChambert-Loir"
              },
              "submittedAt": "2024-12-20T14:32:02Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WEMku",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "AntoineChambert-Loir"
              },
              "submittedAt": "2024-12-20T14:32:49Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WEM1H",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "AntoineChambert-Loir"
              },
              "submittedAt": "2024-12-20T14:33:24Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WENmS",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "AntoineChambert-Loir"
              },
              "submittedAt": "2024-12-20T14:35:03Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WEOFl",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "AntoineChambert-Loir"
              },
              "submittedAt": "2024-12-20T14:36:06Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WHwMm",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2024-12-21T09:03:17Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WHwPy",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2024-12-21T09:05:15Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WHxRL",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2024-12-21T09:42:52Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WHyK2",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2024-12-21T10:14:47Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WOeOU",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "erdOne"
              },
              "submittedAt": "2024-12-23T11:00:50Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WOxxA",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2024-12-23T11:45:43Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WQ7Ty",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2024-12-23T18:44:44Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WQ8OI",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2024-12-23T19:11:18Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WRFn-",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2024-12-23T19:26:24Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WROSN",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2024-12-23T20:05:33Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WROim",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2024-12-23T20:06:50Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WROxw",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2024-12-23T20:08:00Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WRSTM",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2024-12-23T20:26:08Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WTaY4",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2024-12-24T08:39:22Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WTaf_",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2024-12-24T08:39:47Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WTeH0",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2024-12-24T08:53:03Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WTgD2",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2024-12-24T09:00:05Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WVGE1",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2024-12-24T16:37:40Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WVMU7",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2024-12-24T17:24:08Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WW5ur",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2024-12-25T13:03:28Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WW-SC",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "AntoineChambert-Loir"
              },
              "submittedAt": "2024-12-25T14:12:43Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WW-Y7",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "AntoineChambert-Loir"
              },
              "submittedAt": "2024-12-25T14:14:31Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WXMJu",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2024-12-25T21:10:45Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WXOID",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2024-12-25T23:04:53Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6WXbQ-",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2024-12-26T02:19:40Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5wxcD8",
                    "body": "```suggestion\r\nmake out of finite unions and finite intersections of open and closed sets.\r\n```\r\nThis is what you actually use later on... But what exactly do you mean by \"morally\" here? To me, this docstring doesn't give much help in understanding the concept, since it's not mathematically what's going on nor does it explain why this notion is close to what you actually say later",
                    "createdAt": "2024-12-19T13:09:05Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5w4foi",
                    "body": "The \"morally\" is the fact that in full generality open and closed sets should be replaced by open retrocompact and complement of open retrocompact sets, which is a mouthful for what's ultimately a technicality",
                    "createdAt": "2024-12-20T12:02:51Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5w5BQ0",
                    "body": "(It's not a technicality, it's fundamental: in the spectrum of a ring $R$, the complement of a retrocompact open set is of the form $V(f_1,\\dots,f_r)$ for finitely many elements $f_i$ of $R$. Constructible sets would be uninteresting. The parallel with first order model theory is perfect: formulas are finite. Infinite logic exists, but it's a completely different story.)",
                    "createdAt": "2024-12-20T14:17:47Z",
                    "author": {
                      "login": "AntoineChambert-Loir"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5xAyRX",
                    "body": "Any plans to connect to [IsLocallyClosed](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Defs/Basic.html#IsLocallyClosed)? [Wikipedia](https://en.wikipedia.org/wiki/Constructible_set_(topology)#Definitions) claims that in a locally noetherian space (Mathlib only has noetherian spaces), all subsets are retrocompact, and the constructible sets coincide with finite unions of locally closed sets.",
                    "createdAt": "2024-12-23T18:44:44Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5xA_4z",
                    "body": "No, no plan. Feel free to once it's merged!",
                    "createdAt": "2024-12-23T20:05:33Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5w5BrZ",
                    "body": "choose between “retrocompact” and “retro-compact”. (I'd prefer the former…)",
                    "createdAt": "2024-12-20T14:19:13Z",
                    "author": {
                      "login": "AntoineChambert-Loir"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5w5CWV",
                    "body": "As said in the conversation, this is *not* an auxiliary condition, and it is crucial in some cases (eg, infinite jet schemes that appear in motivic integration), so I'd delete the second comment for the docstring, but keep it on the docstring on the top of the file.",
                    "createdAt": "2024-12-20T14:21:43Z",
                    "author": {
                      "login": "AntoineChambert-Loir"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5w5Cnz",
                    "body": "finite unions and finite intersections would be useful as well.",
                    "createdAt": "2024-12-20T14:22:42Z",
                    "author": {
                      "login": "AntoineChambert-Loir"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5w5DFV",
                    "body": "shouldn't it be `isConstructible_compl_iff`?",
                    "createdAt": "2024-12-20T14:24:23Z",
                    "author": {
                      "login": "AntoineChambert-Loir"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5w7TKT",
                    "body": "`_iff` and `_eq` are only necessary when ambiguity would otherwise arise",
                    "createdAt": "2024-12-21T09:42:52Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5w5ETA",
                    "body": "Please add a paragraph or two explaining why this notion is important.",
                    "createdAt": "2024-12-20T14:28:51Z",
                    "author": {
                      "login": "urkud"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5w5Ebu",
                    "body": "Why working with a parameterized topological basis `b` and not a `Set (Set alpha)`?",
                    "createdAt": "2024-12-20T14:29:22Z",
                    "author": {
                      "login": "AntoineChambert-Loir"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5w5En4",
                    "body": "(that should remove some `lift` subtleties below)",
                    "createdAt": "2024-12-20T14:30:05Z",
                    "author": {
                      "login": "AntoineChambert-Loir"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5w7UFZ",
                    "body": "Waiting for @erdOne's input here",
                    "createdAt": "2024-12-21T10:14:47Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5w_MV8",
                    "body": "I responded to Yael by DM and forgot to reply here.\r\nYes I agree that it is better to use `Set (Set alpha)`",
                    "createdAt": "2024-12-23T11:00:50Z",
                    "author": {
                      "login": "erdOne"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5w_XlN",
                    "body": "Note that some things got better, some things got worse. Likely, the best of both worlds would be to have two predicates for topological bases: one for set families, one for indexed families",
                    "createdAt": "2024-12-23T11:45:43Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5w5Ena",
                    "body": "AFAIR, we use `X`, `Y` for topological spaces now.",
                    "createdAt": "2024-12-20T14:30:03Z",
                    "author": {
                      "login": "urkud"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5w5FJF",
                    "body": "```suggestion\r\n/-- A set in a topological space is locally constructible, if it can be partitioned along an\r\n```",
                    "createdAt": "2024-12-20T14:32:02Z",
                    "author": {
                      "login": "AntoineChambert-Loir"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5w5FXg",
                    "body": "(with finite covers, constructible and locally constructible sets would coincide)",
                    "createdAt": "2024-12-20T14:32:49Z",
                    "author": {
                      "login": "AntoineChambert-Loir"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5w7SDP",
                    "body": "Yes of course!",
                    "createdAt": "2024-12-21T09:03:17Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5w5FhE",
                    "body": "The letter `F` is fine but a script `U` would be clearer.",
                    "createdAt": "2024-12-20T14:33:24Z",
                    "author": {
                      "login": "AntoineChambert-Loir"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5w5F89",
                    "body": "I'm surprised this lemma cannot be generalized to `IsConstructible s`.",
                    "createdAt": "2024-12-20T14:35:03Z",
                    "author": {
                      "login": "AntoineChambert-Loir"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5w7SGB",
                    "body": "This is just a restatement of `IsLocallyConstructible` in terms of `iUnion`. `ι` can be infinite",
                    "createdAt": "2024-12-21T09:05:14Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5w5GO_",
                    "body": "can you add `union` and finite unions?",
                    "createdAt": "2024-12-20T14:36:06Z",
                    "author": {
                      "login": "AntoineChambert-Loir"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5xAy_-",
                    "body": "```suggestion\r\n    (hf' : IsCompact (range f)ᶜ) (hs : IsRetroCompact s) : IsRetroCompact (f ⁻¹' s) := by\r\n```",
                    "createdAt": "2024-12-23T18:49:00Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5xAzhd",
                    "body": "?",
                    "createdAt": "2024-12-23T18:52:15Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5xCv3t",
                    "body": "Leftover!",
                    "createdAt": "2024-12-24T08:39:47Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5xA0Tc",
                    "body": "Can't you just say: every point has an open neighborhood U such that `s ∩ U` is constructible?\r\nAlso the definitions on Stacks and Wikipedia both say that `s ∩ U` is constructible in `U`; is that equivalent to being constructible in `X`? (I think it's weaker.)",
                    "createdAt": "2024-12-23T18:56:51Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5xCyil",
                    "body": "Unless I'm missing something, a subset `s` of an open set `U` is constructible iff it is constructible in `U`. Proof:\r\n* If `s` constructible, say `s = U₁ ∩ C₁ ∪ ... ∪ Uₙ ∩ Cₙ`, then `s = (U₁ ∩ U) ∩ (C₁ ∩ U) ∪ ... ∪ (Uₙ ∩ U) ∩ (Cₙ ∩ U)` is constructible in `U`.\r\n* If `s` constructible in `U`, say `s = (U₁ ∩ U) ∩ (C₁ ∩ U) ∪ ... ∪ (Uₙ ∩ U) ∩ (Cₙ ∩ U)`, then `s = (U₁ ∩ U) ∩ C₁ ∪ ... ∪ (Uₙ ∩ U) ∩ Cₙ` is constructible",
                    "createdAt": "2024-12-24T08:53:03Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5xCz-n",
                    "body": "In fact, I have already proved this as `IsConstructible.image_of_isOpenEmbedding` and around. I guess I need some retrocompactness assumption. Is this what you had in mind?",
                    "createdAt": "2024-12-24T09:00:05Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5xD9-Z",
                    "body": "Yeah I think when working under full generality, in your second bullet point the `U₁ ∩ U` and `U \\ C₁` needs to be retrocompact, but being retrocompact in `U` may not imply being retrocompact in `X`.\r\nIf every open cover has a refinement by retrocompact opens, then I think your definition of IsLocallyConstructible agrees with the usual one. However, it seems a scheme doesn't necessarily satisfy this condition. Were you able to prove Chevalley (image of locally constructible under finite presented scheme morphism is locally constructible) in full generality using your definition?",
                    "createdAt": "2024-12-24T16:37:40Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5xEDOT",
                    "body": "We proved Chevalley in full generality for constructible sets, but not for locally constructible sets, no",
                    "createdAt": "2024-12-24T17:24:08Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5xF3DK",
                    "body": "Are you sure your suggested definition is correct? Every set is locally constructible:\r\n```\r\ndef IsLocallyConstructible (s : Set X) : Prop := ∀ x, ∃ U ∈ 𝓝 x, IsOpen U ∧ IsConstructible (s ↓∩ U)\r\n\r\nlemma isLocallyConstructible : IsLocallyConstructible s :=\r\n  fun _ ↦ ⟨univ, by simp⟩\r\n```",
                    "createdAt": "2024-12-25T13:03:28Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5xF8Q1",
                    "body": "It really looks like it is Grothendieck's definition of a locally constructible set, see EGA, 0 III, 9.1.11.\r\nIt might not be if notation has a distinct meaning than the one I imagine.\r\n\r\nhttp://www.numdam.org/item/PMIHES_1961__11__5_0.pdf",
                    "createdAt": "2024-12-25T14:12:43Z",
                    "author": {
                      "login": "AntoineChambert-Loir"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5xGTU0",
                    "body": "[`s ↓∩ U` is a set in `s`, not in `U`](https://github.com/leanprover-community/mathlib4/blob/5f24fc48e5bbc2aa88d21ccd4c2ed932b9b11483/Mathlib/Data/Set/Notation.lean#L17-L18).",
                    "createdAt": "2024-12-25T21:10:45Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5xGYnZ",
                    "body": "🤦 ",
                    "createdAt": "2024-12-25T23:04:53Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5xA2ch",
                    "body": "Do we have the fact that the Boolean subalgebra generated by a set `s` closed under `inf` and `sup` consists of exactly finite `sup` of elements of the form `a \\ b` with a, b in s?\r\nIf we take `s` to be the set of open retrocompact sets, then we get the more familiar definition seen on Stacks and Wikipedia.",
                    "createdAt": "2024-12-23T19:10:34Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5xBADi",
                    "body": "No, see the recent Zulip topic about disjunctive normal form",
                    "createdAt": "2024-12-23T20:06:50Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5xF8YG",
                    "body": "This is 9.1.3 in Grothendieck, reference above, and should not be hard to formalize directly if needed.",
                    "createdAt": "2024-12-25T14:14:31Z",
                    "author": {
                      "login": "AntoineChambert-Loir"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5xGnlc",
                    "body": "Indeed it's not hard; see #20251. It turns out I need that `s` contains top and bot as well.",
                    "createdAt": "2024-12-26T02:19:39Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5xA5iw",
                    "body": "Maybe IsRetro**c**ompact? cf. IsSemisimpleRing, Semiring etc.",
                    "createdAt": "2024-12-23T19:25:16Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5xA5t-",
                    "body": "I feel that this word is too ambiguous to be exempt from a namespace. Is `Set.IsConstructible` appropriate? Or `TopologicalSpace.IsConstructible`?",
                    "createdAt": "2024-12-23T19:26:21Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5xBAOU",
                    "body": "I know it's ambiguous, but I don't know which I should disambiguate it. Would `IsConstructibleSet` be fine?",
                    "createdAt": "2024-12-23T20:08:00Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5xBCx3",
                    "body": "That is sufficient to disambiguate from [constructible numbers](https://en.wikipedia.org/wiki/Constructible_number), but there is also the [set-theoretic notion](https://en.wikipedia.org/wiki/Constructible_universe#Constructible_sets_are_definable_from_the_ordinals) (which might be called ZFSet.IsConstructible if it ever makes into mathlib). That's why I suggest something about topology in the name.",
                    "createdAt": "2024-12-23T20:26:07Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5xCvyK",
                    "body": "Ended up putting `IsConstructible` and `IsLocallyConstructible` (but not `IsRetrocompact`) under the `Topology` namespace",
                    "createdAt": "2024-12-24T08:39:22Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjE0MDkwNTkz",
              "login": "YaelDillies"
            },
            {
              "id": "MDQ6VXNlcjE4ODgxMw==",
              "login": "urkud"
            },
            {
              "id": "MDQ6VXNlcjMwNjQxNDU=",
              "login": "alreadydone"
            },
            {
              "id": "MDQ6VXNlcjQ4MTczNDg=",
              "login": "AntoineChambert-Loir"
            },
            {
              "id": "MDQ6VXNlcjI5OTU5MjI2",
              "login": "b-mehta"
            },
            {
              "id": "MDQ6VXNlcjM2NDE0Mjcw",
              "login": "erdOne"
            }
          ]
        },
        "state": "OPEN",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAILT6yLQ",
                "name": "label-and-report-new-contributor",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12600238308/job/35118821933"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAILT6yCg",
                "name": "post-or-update-summary-comment",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12600238294/job/35118821898"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAILT6twQ",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12600237786/job/35118820801"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAILT6t6w",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12600237793/job/35118820843"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAILT6yPA",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12600238298/job/35118821948"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAILT6ulw",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12600237786/job/35118821015"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAILT6vyg",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12600237793/job/35118821322"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAILT6zEQ",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12600238298/job/35118822161"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAILT6u2g",
                "name": "Build",
                "conclusion": null,
                "status": "IN_PROGRESS",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12600237793/job/35118821082"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAILT6vgw",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12600237786/job/35118821251"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAILT6wdw",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12600237786/job/35118821495"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAILT7aAg",
                "name": "New Contributor Check",
                "conclusion": "NEUTRAL",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/35118832130"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAILT8PYA",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=20054&login=leanprover-community&repository=mathlib4"
              }
            ]
          }
        },
        "title": "feat: constructible sets",
        "updatedAt": "2025-01-03T15:50:48Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/20054",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6YLf-Y",
              "createdAt": "2024-12-19T09:13:20Z",
              "body": "### PR summary [4e337c3de9](https://github.com/leanprover-community/mathlib4/pull/20054/commits/4e337c3de95d3fff8952315d7a7ae0147970088c)\n\n#### Import changes for modified files\n\nNo significant changes to the import graph\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n| `Mathlib.Topology.Constructible` (new file)|718|\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ IsConstructible`\n`+ IsConstructible.biInter`\n`+ IsConstructible.biUnion`\n`+ IsConstructible.compl`\n`+ IsConstructible.empty`\n`+ IsConstructible.empty_union_induction`\n`+ IsConstructible.himp`\n`+ IsConstructible.iInter`\n`+ IsConstructible.iUnion`\n`+ IsConstructible.image_of_isClosedEmbedding`\n`+ IsConstructible.image_of_isOpenEmbedding`\n`+ IsConstructible.induction_of_isTopologicalBasis`\n`+ IsConstructible.inter`\n`+ IsConstructible.isLocallyConstructible`\n`+ IsConstructible.of_compl`\n`+ IsConstructible.preimage`\n`+ IsConstructible.preimage_of_isClosedEmbedding`\n`+ IsConstructible.preimage_of_isOpenEmbedding`\n`+ IsConstructible.sInter`\n`+ IsConstructible.sUnion`\n`+ IsConstructible.sdiff`\n`+ IsConstructible.union`\n`+ IsConstructible.univ`\n`+ IsLocallyConstructible`\n`+ IsLocallyConstructible.empty`\n`+ IsLocallyConstructible.finsetInf`\n`+ IsLocallyConstructible.finsetInf'`\n`+ IsLocallyConstructible.iInter`\n`+ IsLocallyConstructible.inter`\n`+ IsLocallyConstructible.sInter`\n`+ IsLocallyConstructible.univ`\n`+ IsRetrocompact`\n`+ IsRetrocompact.biInter`\n`+ IsRetrocompact.biUnion`\n`+ IsRetrocompact.empty`\n`+ IsRetrocompact.finsetInf`\n`+ IsRetrocompact.finsetInf'`\n`+ IsRetrocompact.finsetSup`\n`+ IsRetrocompact.finsetSup'`\n`+ IsRetrocompact.iInter`\n`+ IsRetrocompact.iUnion`\n`+ IsRetrocompact.image_of_isEmbedding`\n`+ IsRetrocompact.inter`\n`+ IsRetrocompact.inter_isOpen`\n`+ IsRetrocompact.isOpen_inter`\n`+ IsRetrocompact.preimage_of_isClosedEmbedding`\n`+ IsRetrocompact.preimage_of_isOpenEmbedding`\n`+ IsRetrocompact.sInter`\n`+ IsRetrocompact.sUnion`\n`+ IsRetrocompact.singleton`\n`+ IsRetrocompact.union`\n`+ IsRetrocompact.univ`\n`+ IsRetrocompact_iff_isSpectralMap_subtypeVal`\n`+ Topology.IsClosedEmbedding.inclusion`\n`+ Topology.IsOpenEmbedding.inclusion`\n`+ _root_.IsRetrocompact.isCompact`\n`+ _root_.IsRetrocompact.isConstructible`\n`+ _root_.IsRetrocompact.isLocallyConstructible`\n`+ _root_.TopologicalSpace.IsTopologicalBasis.isConstructible`\n`+ _root_.TopologicalSpace.IsTopologicalBasis.isConstructible'`\n`+ _root_.TopologicalSpace.IsTopologicalBasis.isRetrocompact`\n`+ _root_.TopologicalSpace.IsTopologicalBasis.isRetrocompact'`\n`+ _root_.TopologicalSpace.IsTopologicalBasis.isRetrocompact_iff_isCompact`\n`+ _root_.TopologicalSpace.IsTopologicalBasis.isRetrocompact_iff_isCompact'`\n`+ isConstructible_compl`\n`+ isConstructible_preimage_of_isOpenEmbedding`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n</details>\n\n---\n\n<details><summary>No changes to technical debt.</summary>\n\nYou can run this locally as\n```\n./scripts/technical-debt-metrics.sh pr_summary\n```\n* The `relative` value is the weighted *sum* of the differences with weight given by the *inverse* of the current value of the statistic.\n* The `absolute` value is the `relative` value divided by the total sum of the inverses of the current values (i.e. the weighted *average* of the differences).\n</details>",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6j5QkIzwAAAAOopJPq",
              "createdAt": "2024-12-19T09:13:21Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJbOw",
                "name": "t-topology"
              }
            },
            {
              "__typename": "ReviewRequestedEvent",
              "id": "RRE_lADOFcwZ1c6j5QkIzwAAAAOopUb9",
              "createdAt": "2024-12-19T09:17:07Z",
              "requestedReviewer": {
                "id": "MDQ6VXNlcjI5OTU5MjI2",
                "login": "b-mehta"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6V4Ye6",
              "createdAt": "2024-12-19T13:09:05Z",
              "body": "",
              "author": {
                "login": "b-mehta"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6WEGQI",
              "createdAt": "2024-12-20T14:19:13Z",
              "body": "",
              "author": {
                "login": "AntoineChambert-Loir"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6WEHXz",
              "createdAt": "2024-12-20T14:21:42Z",
              "body": "",
              "author": {
                "login": "AntoineChambert-Loir"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6WEH2I",
              "createdAt": "2024-12-20T14:22:42Z",
              "body": "",
              "author": {
                "login": "AntoineChambert-Loir"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6WEIrF",
              "createdAt": "2024-12-20T14:24:23Z",
              "body": "",
              "author": {
                "login": "AntoineChambert-Loir"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6WEKvo",
              "createdAt": "2024-12-20T14:28:51Z",
              "body": "",
              "author": {
                "login": "urkud"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6WEK_h",
              "createdAt": "2024-12-20T14:29:22Z",
              "body": "",
              "author": {
                "login": "AntoineChambert-Loir"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6WELTd",
              "createdAt": "2024-12-20T14:30:03Z",
              "body": "",
              "author": {
                "login": "urkud"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6WEMNn",
              "createdAt": "2024-12-20T14:32:02Z",
              "body": "",
              "author": {
                "login": "AntoineChambert-Loir"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6WEM1H",
              "createdAt": "2024-12-20T14:33:24Z",
              "body": "",
              "author": {
                "login": "AntoineChambert-Loir"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6WENmS",
              "createdAt": "2024-12-20T14:35:03Z",
              "body": "",
              "author": {
                "login": "AntoineChambert-Loir"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6WEOFl",
              "createdAt": "2024-12-20T14:36:06Z",
              "body": "",
              "author": {
                "login": "AntoineChambert-Loir"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6j5QkIzwAAAAOpyKay",
              "createdAt": "2024-12-20T14:36:25Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6j5QkIzwAAAAOqIg-S",
              "createdAt": "2024-12-21T10:14:54Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "ReviewRequestedEvent",
              "id": "RRE_lADOFcwZ1c6j5QkIzwAAAAOqlNCk",
              "createdAt": "2024-12-23T10:54:11Z",
              "requestedReviewer": {
                "id": "MDQ6VXNlcjM2NDE0Mjcw",
                "login": "erdOne"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6WQ8OI",
              "createdAt": "2024-12-23T18:49:00Z",
              "body": "",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6WRFn-",
              "createdAt": "2024-12-23T19:25:16Z",
              "body": "",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c6j5QkIzwAAAAOuRnf4",
              "createdAt": "2025-01-03T15:49:47Z"
            }
          ]
        }
      }
    }
  }
}
