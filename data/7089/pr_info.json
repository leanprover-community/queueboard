{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 63,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "dwrensha"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 2,
        "closed": true,
        "closedAt": "2023-09-26T18:32:21Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5mgWYI",
              "body": "I have not been able to get the `Nat.ceil` case to fully work with `Qq`. Here's what I have:\r\n```lean\r\n/-- Extension for the `positivity` tactic: `Nat.ceil` is positive if its input is. -/\r\n@[positivity ‚åà _ ‚åâ‚Çä]\r\ndef evalNatCeil : PositivityExt where eval {_u _Œ±} _zŒ± _pŒ± (e : Q(‚Ñï)) := do\r\n  let ~q(@Nat.ceil $Œ±' $i $j $a) := e | throwError \"failed to match on Nat.ceil application\"\r\n  match ‚Üê core q(inferInstance) q(inferInstance) a with\r\n  | .positive pa =>\r\n      let _los : Q(LinearOrderedSemiring $Œ±') ‚Üê synthInstanceQ q(LinearOrderedSemiring $Œ±')\r\n      letI ret : Q(0 < $e) := q(nat_ceil_pos (Œ± := $Œ±') $pa)\r\n      pure (.positive ret)\r\n  | _ => pure .none\r\n```\r\n\r\nand I get the error:\r\n```\r\napplication type mismatch\r\n  Mathlib.Meta.Positivity.nat_ceil_pos ¬´$pa¬ª\r\nargument\r\n  ¬´$pa¬ª\r\nhas type\r\n  @OfNat.ofNat ¬´$Œ±'¬ª 0 (@Zero.toOfNat0 ¬´$Œ±'¬ª inferInstance) < ¬´$a¬ª : Prop\r\nbut is expected to have type\r\n  @OfNat.ofNat ¬´$Œ±'¬ª 0 (@Zero.toOfNat0 ¬´$Œ±'¬ª MonoidWithZero.toZero) < ?m.346824 : Prop\r\n```",
              "createdAt": "2023-09-14T16:16:23Z",
              "author": {
                "login": "dwrensha"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5mgqMn",
              "body": "I pushed a version that uses `Qq` for the matching part of `Nat.ceil`. I still have not figured out how to make it work for the proof construction part, but I'm not too worried about that, as the matching part is where the main concerns were in our discussion above.",
              "createdAt": "2023-09-14T17:09:20Z",
              "author": {
                "login": "dwrensha"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5mgu5t",
              "body": "> I still have not figured out how to make it work for the proof construction part\r\n\r\nI pushed a change to do this",
              "createdAt": "2023-09-14T17:23:22Z",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5nVzcD",
              "body": "üöÄ Pull request has been placed on the maintainer queue by YaelDillies.",
              "createdAt": "2023-09-25T13:58:51Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5neMqm",
              "body": "bors merge",
              "createdAt": "2023-09-26T17:20:27Z",
              "author": {
                "login": "fpvandoorn"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5nelr2",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6316371943/job/17150821432)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6316371943/job/17150821644)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6316371943/job/17150821063)",
              "createdAt": "2023-09-26T18:32:19Z",
              "author": {
                "login": "bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "5920378ea733f30d737ce41cadb173c617a9fd6a",
                "additions": 60,
                "deletions": 63,
                "committedDate": "2023-09-10T23:06:44Z",
                "author": {
                  "name": "David Renshaw",
                  "email": "dwrenshaw@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "f814d952920f769a24ef570d47d9d4a50e5cb1d6",
                "additions": 3,
                "deletions": 3,
                "committedDate": "2023-09-10T23:19:57Z",
                "author": {
                  "name": "David Renshaw",
                  "email": "dwrenshaw@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "c8e7f3a96c297e74d1acf95249e72940e6a1c8dd",
                "additions": 2,
                "deletions": 2,
                "committedDate": "2023-09-14T11:32:03Z",
                "author": {
                  "name": "David Renshaw",
                  "email": "dwrenshaw@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "8bd7e4bd3cf1c169f0adbee80a798498b9d594c0",
                "additions": 9,
                "deletions": 6,
                "committedDate": "2023-09-14T12:30:22Z",
                "author": {
                  "name": "David Renshaw",
                  "email": "dwrenshaw@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "0364b81b889d85d93ce2d0b733f2724ea6edb430",
                "additions": 3,
                "deletions": 3,
                "committedDate": "2023-09-14T14:51:34Z",
                "author": {
                  "name": "David Renshaw",
                  "email": "dwrenshaw@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "c93b5fe4a8ad4679191f9ea05dda758811c4ad1b",
                "additions": 6,
                "deletions": 6,
                "committedDate": "2023-09-14T15:12:42Z",
                "author": {
                  "name": "David Renshaw",
                  "email": "dwrenshaw@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "0e01b9aec30a79c8afaa713f685f8383f964e4fe",
                "additions": 9,
                "deletions": 9,
                "committedDate": "2023-09-14T15:55:24Z",
                "author": {
                  "name": "David Renshaw",
                  "email": "dwrenshaw@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "e813eac5503556fd7067b55457cf264e2e34662c",
                "additions": 9,
                "deletions": 9,
                "committedDate": "2023-09-14T16:03:14Z",
                "author": {
                  "name": "David Renshaw",
                  "email": "dwrenshaw@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "b2d35ae341c4e7a30be55f54987e28ea86f06f26",
                "additions": 3,
                "deletions": 7,
                "committedDate": "2023-09-14T17:04:48Z",
                "author": {
                  "name": "David Renshaw",
                  "email": "dwrenshaw@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "2326f9f44e36e37b8fa09653a1973bd796fff184",
                "additions": 5,
                "deletions": 1,
                "committedDate": "2023-09-14T17:22:34Z",
                "author": {
                  "name": "Eric Wieser",
                  "email": "wieser.eric@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "5d621334a432fa13117b48e8fb1f9902c8d5199b",
                "additions": 11456,
                "deletions": 5371,
                "committedDate": "2023-09-16T12:38:40Z",
                "author": {
                  "name": "David Renshaw",
                  "email": "dwrenshaw@gmail.com"
                },
                "statusCheckRollup": null
              }
            }
          ]
        },
        "createdAt": "2023-09-10T23:07:14Z",
        "deletions": 63,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/Algebra/Order/Floor.lean",
              "additions": 58,
              "deletions": 58
            },
            {
              "path": "test/positivity.lean",
              "additions": 5,
              "deletions": 5
            }
          ]
        },
        "headRefName": "positivity-floor",
        "headRefOid": "5d621334a432fa13117b48e8fb1f9902c8d5199b",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5Z9pBj",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
              "color": "06e039",
              "name": "ready-to-merge"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABKAKYew",
              "color": "33DBEC",
              "name": "t-meta"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5g81-b",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kim-em"
              },
              "submittedAt": "2023-09-14T10:27:01Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hADZM",
              "body": "",
              "state": "APPROVED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-09-14T17:13:53Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5h4n1l",
              "body": "Analytic number theory really needs those extensions back.\r\n\r\nmaintainer merge",
              "state": "APPROVED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2023-09-25T13:58:38Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 7089,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": "APPROVED",
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5g80rb",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kim-em"
              },
              "submittedAt": "2023-09-14T10:23:50Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5g804q",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kim-em"
              },
              "submittedAt": "2023-09-14T10:24:21Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5g81-b",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kim-em"
              },
              "submittedAt": "2023-09-14T10:27:01Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5g84_c",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-09-14T10:33:29Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5g9qRC",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "dwrensha"
              },
              "submittedAt": "2023-09-14T12:32:54Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5g9r_D",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "dwrensha"
              },
              "submittedAt": "2023-09-14T12:35:24Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5g-0AV",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-09-14T14:45:19Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5g-4cK",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "dwrensha"
              },
              "submittedAt": "2023-09-14T14:52:54Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5g-53J",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-09-14T14:54:58Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5g-7-4",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-09-14T14:58:37Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5g_BwU",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-09-14T15:09:14Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5g_IQT",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "dwrensha"
              },
              "submittedAt": "2023-09-14T15:21:26Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5g_JmX",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "dwrensha"
              },
              "submittedAt": "2023-09-14T15:23:43Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5g_M10",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-09-14T15:27:34Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5g_Qeb",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "dwrensha"
              },
              "submittedAt": "2023-09-14T15:31:53Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5g_ReV",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-09-14T15:33:06Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5g_ThB",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "dwrensha"
              },
              "submittedAt": "2023-09-14T15:35:40Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5g_bN2",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-09-14T15:48:21Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hACuO",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-09-14T17:12:05Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hADZM",
              "body": "",
              "state": "APPROVED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-09-14T17:13:53Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hAEco",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "dwrensha"
              },
              "submittedAt": "2023-09-14T17:16:50Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hAFBl",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "dwrensha"
              },
              "submittedAt": "2023-09-14T17:18:21Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5h4lJo",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2023-09-25T13:53:48Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5h4n1l",
              "body": "Analytic number theory really needs those extensions back.\r\n\r\nmaintainer merge",
              "state": "APPROVED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2023-09-25T13:58:38Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5PBSx0",
                    "body": "```suggestion\r\n@[positivity ‚åà _ ‚åâ‚Çä]\r\n```",
                    "createdAt": "2023-09-14T10:23:50Z",
                    "author": {
                      "login": "kim-em"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5PBS6Q",
                    "body": "```suggestion\r\n@[positivity ‚åà _ ‚åâ]\r\n```",
                    "createdAt": "2023-09-14T10:24:21Z",
                    "author": {
                      "login": "kim-em"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5PBTp-",
                    "body": "Hard to tell what this is matching for!\r\n\r\nAnd is it really meant to be constrained to `Type`?",
                    "createdAt": "2023-09-14T10:27:01Z",
                    "author": {
                      "login": "kim-em"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PBVj0",
                    "body": "Can we use a `Qq` match here?",
                    "createdAt": "2023-09-14T10:33:29Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PB1PZ",
                    "body": ">  Hard to tell what this is matching for!\r\n\r\nI added some comments and included the `.const` head. Hopefully that makes things clearer.\r\n\r\n\r\n> And is it really meant to be constrained to Type?\r\n\r\nAh, good point. This should be `Type u`. Fixed.",
                    "createdAt": "2023-09-14T12:32:54Z",
                    "author": {
                      "login": "dwrensha"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PB1-j",
                    "body": "> Can we use a Qq match here?\r\n\r\nMaybe! But I was unable to figure out how. Even if we do figure it out, I suspect the result will be more complicated that what I have here. (For one thing, I think it would require adding more `synthInstanceQ`.)",
                    "createdAt": "2023-09-14T12:35:24Z",
                    "author": {
                      "login": "dwrensha"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5PCjzC",
                    "body": "This type is wrong here",
                    "createdAt": "2023-09-14T14:45:19Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PCmmf",
                    "body": "fixed",
                    "createdAt": "2023-09-14T14:52:54Z",
                    "author": {
                      "login": "dwrensha"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5PCnfP",
                    "body": "The `Qq` syntax is something like\r\n```\r\n  have e : Q(‚Ñ§) := ‚Üê whnfR e\r\n  let ~q(@Int.floor $Œ±' $inst1 $inst2 $a) := e | throwError \"failed to match on Int.floor application\"\r\n```\r\nthought I seem to be having trouble making the rest work",
                    "createdAt": "2023-09-14T14:54:58Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5PCozT",
                    "body": "I think this `u` is the wrong universe; it's the universe of `Nat` not of alpha.",
                    "createdAt": "2023-09-14T14:58:37Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PCwh7",
                    "body": "Good point. I updated it to grab the correct universe from the `Nat.ceil` const.",
                    "createdAt": "2023-09-14T15:21:26Z",
                    "author": {
                      "login": "dwrensha"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5PCsih",
                    "body": "Here's a full Qq version:\r\n```suggestion\r\n/-- Extension for the `positivity` tactic: `Int.floor` is nonnegative if its input is. -/\r\n@[positivity ‚åä _ ‚åã]\r\ndef evalFloor : PositivityExt where eval {_u _Œ±} _zŒ± _pŒ± (e : Q(‚Ñ§)) := do\r\n  let ~q(@Int.floor $Œ±' $i $j $a) := e | throwError \"failed to match on Int.floor application\"\r\n  let zŒ±' : Q(Zero $Œ±') ‚Üê synthInstanceQ (u := u_1.succ) _\r\n  let pŒ±' : Q(PartialOrder $Œ±') ‚Üê synthInstanceQ (u := u_1.succ) _\r\n  assertInstancesCommute\r\n  match ‚Üê core zŒ±' pŒ±' a with\r\n  | .positive pa =>\r\n      letI ret : Q(0 ‚â§ $e) := q(int_floor_nonneg_of_pos (Œ± := $Œ±') $pa)\r\n      pure (.nonnegative ret)\r\n  | .nonnegative pa =>\r\n      letI ret : Q(0 ‚â§ $e) := q(int_floor_nonneg (Œ± := $Œ±') $pa)\r\n      pure (.nonnegative ret)\r\n  | _ => pure .none\r\n```",
                    "createdAt": "2023-09-14T15:09:14Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PCxRW",
                    "body": "Thanks!\r\nI actually prefer what I have, as it's shorter and easier (for me at least) to understand.\r\n\r\nI guess that `u_1` gets inserted into the context from the `~q()` match? Is there a way to make that binding explicit?",
                    "createdAt": "2023-09-14T15:23:42Z",
                    "author": {
                      "login": "dwrensha"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PCymW",
                    "body": "Yes, the `u_1` is being inserted unhygienically and I can't work out how to name it.\r\n\r\nThe advantage of my spelling is that it's much less fragile to argument changes to `Int.floor`.",
                    "createdAt": "2023-09-14T15:27:34Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PC0DN",
                    "body": "> The advantage of my spelling is that it's much less fragile to argument changes to `Int.floor`.\r\n\r\nHow so? It seems to me that your matching on `~q(@Int.floor $Œ±' $i $j $a)` is essentially the same as my matching on `(.app (.app (.app (.app (.const ``Int.floor [u']) (Œ±' : Q(Type $u'))) _) _) a)`\r\n",
                    "createdAt": "2023-09-14T15:31:52Z",
                    "author": {
                      "login": "dwrensha"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PC0cl",
                    "body": "Here's a shorter version, that does the instance search at compile time:\r\n```suggestion\r\n/-- Extension for the `positivity` tactic: `Int.floor` is nonnegative if its input is. -/\r\n@[positivity ‚åä _ ‚åã]\r\ndef evalFloor : PositivityExt where eval {_u _Œ±} _zŒ± _pŒ± (e : Q(‚Ñ§)) := do\r\n  let ~q(@Int.floor $Œ±' $i $j $a) := e | throwError \"failed to match on Int.floor application\"\r\n  match ‚Üê core q(inferInstance) q(inferInstance) a with\r\n  | .positive pa =>\r\n      letI ret : Q(0 ‚â§ $e) := q(int_floor_nonneg_of_pos (Œ± := $Œ±') $pa)\r\n      pure (.nonnegative <| ret)\r\n  | .nonnegative pa =>\r\n      letI ret : Q(0 ‚â§ $e) := q(int_floor_nonneg (Œ± := $Œ±') $pa)\r\n      pure (.nonnegative ret)\r\n  | _ => pure .none\r\n```",
                    "createdAt": "2023-09-14T15:33:06Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PC1PZ",
                    "body": "ah, that's starting to look more reasonable. I'll try that.",
                    "createdAt": "2023-09-14T15:35:40Z",
                    "author": {
                      "login": "dwrensha"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PC6hm",
                    "body": "> How so? It seems to me that your matching on `~q(@Int.floor $Œ±' $i $j $a)` is essentially the same as my matching on ``` (.app (.app (.app (.app (.const ``Int.floor [u']) (Œ±' : Q(Type $u'))) _) _) a) ```\r\n\r\nIf the syntax changes, my code will become a Qq error at compile time. Yours will become a match failure at tactic use.",
                    "createdAt": "2023-09-14T15:48:21Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5PDZIO",
                    "body": "I'm curious if there's now any benefit to these; presumably you could inline them in the `q()`s below. Maybe there's a performance benefit with having them separated? cc @semorrison, @gebner.",
                    "createdAt": "2023-09-14T17:12:05Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PDaSW",
                    "body": "I'm curious too! I kept them like this (as they were in mathlib3) for the sake of making the port as direct as possible.",
                    "createdAt": "2023-09-14T17:16:49Z",
                    "author": {
                      "login": "dwrensha"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PDarZ",
                    "body": "Maybe the point is that in mathlib3, inlining was more painful because there was no `q()`?\r\n\r\n(hm... but these are all just a single application, so constructing them without `q()` is not very cumbersome at all. So... I'm at a loss)",
                    "createdAt": "2023-09-14T17:18:21Z",
                    "author": {
                      "login": "dwrensha"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PoJkN",
                    "body": "I wrote the original extensions. It was very hard to make `mk_app` work reliably and I resorted to never use it more than once per term construction. A typical problem is that it would eagerly try to insert the `a = 0` argument when I wanted to construct a term of type `a ‚â† 0`.",
                    "createdAt": "2023-09-25T13:53:48Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjQ5NTc2OA==",
              "login": "dwrensha"
            },
            {
              "id": "MDQ6VXNlcjQyNTI2MA==",
              "login": "eric-wieser"
            },
            {
              "id": "MDQ6VXNlcjczNzYwMTI=",
              "login": "fpvandoorn"
            },
            {
              "id": "MDQ6VXNlcjQ3Nzk1Ng==",
              "login": "kim-em"
            },
            {
              "id": "MDQ6VXNlcjE0MDkwNTkz",
              "login": "YaelDillies"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": null,
        "title": "[Merged by Bors] - feat: Port positivity extensions for `Nat.ceil`, `Int.ceil`, `Int.floor`",
        "updatedAt": "2023-09-26T18:32:26Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/7089",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "5920378ea733f30d737ce41cadb173c617a9fd6a"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5wnaVuzwAAAAJnkX4f",
              "createdAt": "2023-09-10T23:07:22Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "f814d952920f769a24ef570d47d9d4a50e5cb1d6"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5g80rb",
              "createdAt": "2023-09-14T10:23:50Z",
              "body": "",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5g804q",
              "createdAt": "2023-09-14T10:24:21Z",
              "body": "",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5g81-b",
              "createdAt": "2023-09-14T10:27:00Z",
              "body": "",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "c8e7f3a96c297e74d1acf95249e72940e6a1c8dd"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "8bd7e4bd3cf1c169f0adbee80a798498b9d594c0"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5g-0AV",
              "createdAt": "2023-09-14T14:45:19Z",
              "body": "",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "0364b81b889d85d93ce2d0b733f2724ea6edb430"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5g-53J",
              "createdAt": "2023-09-14T14:54:58Z",
              "body": "",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5g-7-4",
              "createdAt": "2023-09-14T14:58:37Z",
              "body": "",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5g_BwU",
              "createdAt": "2023-09-14T15:09:14Z",
              "body": "",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "c93b5fe4a8ad4679191f9ea05dda758811c4ad1b"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "0e01b9aec30a79c8afaa713f685f8383f964e4fe"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "e813eac5503556fd7067b55457cf264e2e34662c"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5mgWYI",
              "createdAt": "2023-09-14T16:16:23Z",
              "body": "I have not been able to get the `Nat.ceil` case to fully work with `Qq`. Here's what I have:\r\n```lean\r\n/-- Extension for the `positivity` tactic: `Nat.ceil` is positive if its input is. -/\r\n@[positivity ‚åà _ ‚åâ‚Çä]\r\ndef evalNatCeil : PositivityExt where eval {_u _Œ±} _zŒ± _pŒ± (e : Q(‚Ñï)) := do\r\n  let ~q(@Nat.ceil $Œ±' $i $j $a) := e | throwError \"failed to match on Nat.ceil application\"\r\n  match ‚Üê core q(inferInstance) q(inferInstance) a with\r\n  | .positive pa =>\r\n      let _los : Q(LinearOrderedSemiring $Œ±') ‚Üê synthInstanceQ q(LinearOrderedSemiring $Œ±')\r\n      letI ret : Q(0 < $e) := q(nat_ceil_pos (Œ± := $Œ±') $pa)\r\n      pure (.positive ret)\r\n  | _ => pure .none\r\n```\r\n\r\nand I get the error:\r\n```\r\napplication type mismatch\r\n  Mathlib.Meta.Positivity.nat_ceil_pos ¬´$pa¬ª\r\nargument\r\n  ¬´$pa¬ª\r\nhas type\r\n  @OfNat.ofNat ¬´$Œ±'¬ª 0 (@Zero.toOfNat0 ¬´$Œ±'¬ª inferInstance) < ¬´$a¬ª : Prop\r\nbut is expected to have type\r\n  @OfNat.ofNat ¬´$Œ±'¬ª 0 (@Zero.toOfNat0 ¬´$Œ±'¬ª MonoidWithZero.toZero) < ?m.346824 : Prop\r\n```",
              "author": {
                "login": "dwrensha"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "b2d35ae341c4e7a30be55f54987e28ea86f06f26"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5mgqMn",
              "createdAt": "2023-09-14T17:09:20Z",
              "body": "I pushed a version that uses `Qq` for the matching part of `Nat.ceil`. I still have not figured out how to make it work for the proof construction part, but I'm not too worried about that, as the matching part is where the main concerns were in our discussion above.",
              "author": {
                "login": "dwrensha"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5hACuO",
              "createdAt": "2023-09-14T17:12:04Z",
              "body": "",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5hADZM",
              "createdAt": "2023-09-14T17:13:53Z",
              "body": "",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "2326f9f44e36e37b8fa09653a1973bd796fff184"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5mgu5t",
              "createdAt": "2023-09-14T17:23:22Z",
              "body": "> I still have not figured out how to make it work for the proof construction part\r\n\r\nI pushed a change to do this",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "5d621334a432fa13117b48e8fb1f9902c8d5199b"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5h4n1l",
              "createdAt": "2023-09-25T13:58:38Z",
              "body": "Analytic number theory really needs those extensions back.\r\n\r\nmaintainer merge",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5wnaVuzwAAAAJvpm6s",
              "createdAt": "2023-09-25T13:58:50Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKAKYew",
                "name": "t-meta"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5nVzcD",
              "createdAt": "2023-09-25T13:58:51Z",
              "body": "üöÄ Pull request has been placed on the maintainer queue by YaelDillies.",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5neMqm",
              "createdAt": "2023-09-26T17:20:27Z",
              "body": "bors merge",
              "author": {
                "login": "fpvandoorn"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5wnaVuzwAAAAJwixIS",
              "createdAt": "2023-09-26T17:20:41Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
                "name": "ready-to-merge"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5wnaVuzwAAAAJwixKy",
              "createdAt": "2023-09-26T17:20:42Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5nelr2",
              "createdAt": "2023-09-26T18:32:19Z",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6316371943/job/17150821432)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6316371943/job/17150821644)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6316371943/job/17150821063)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c5wnaVuzwAAAAJwlUnE",
              "createdAt": "2023-09-26T18:32:21Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c5wnaVuzwAAAAJwlUxa",
              "createdAt": "2023-09-26T18:32:26Z"
            }
          ]
        }
      }
    }
  }
}
