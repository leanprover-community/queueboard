{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 69,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "xroblot"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "This PR defines the discriminant of a number field as the discriminant of `RingOfIntegers.basis` and proves some basic results, mainly: it does not depend upon the choice of the integral basis and it is equal to 1 for `ℚ`.\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n- [x] depends on: #6422 \r\n- [x] depends on: #6424\r\n \r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 2,
        "closed": true,
        "closedAt": "2023-09-01T13:47:43Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5j34ml",
              "body": "This PR/issue depends on:\n* ~~leanprover-community/mathlib4#6422~~\n* ~~leanprover-community/mathlib4#6424~~\nBy **[Dependent Issues](https://github.com/z0al/dependent-issues)** (🤖). Happy coding!\n<!-- By Dependent Issues (Action) - DO NOT REMOVE -->",
              "createdAt": "2023-08-12T01:20:21Z",
              "author": {
                "login": "leanprover-community-mathlib4-bot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5j4_Kp",
              "body": "🚀 Pull request has been placed on the maintainer queue by ericrbg.",
              "createdAt": "2023-08-12T12:15:08Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5j4_K7",
              "body": "🚀 Pull request has been placed on the maintainer queue by ericrbg.",
              "createdAt": "2023-08-12T12:15:14Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5j5I_P",
              "body": "A mathematical comment: do we really want the discriminant to be an integer? I mean, in general it is an ideal, and it is really a coincidence that for `ℤ` we can select a canonical generator.\r\n\r\nI know that on Zulip I said the opposite ([here](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Discriminant.20of.20a.20number.20field/near/267843794)) but it seems a good idea to at least raise the question.",
              "createdAt": "2023-08-12T13:45:36Z",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5j5KZc",
              "body": "Thinking more about this I think the definition is wrong: we shouldn't use a `ℤ`-basis, since in general, for number fields extensions, this does not exist. In my opinion the discriminant should be defined using a `K`-basis of `L` given by integral elements. In the `flt-regular` project this was completely clear (we needed to do this *before* computing the ring of integers). I have a discussion with Anne about this, let me see if I find it.",
              "createdAt": "2023-08-12T14:01:44Z",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5j5MHN",
              "body": "> Thinking more about this I think the definition is wrong: we shouldn't use a `ℤ`-basis, since in general, for number fields extensions, this does not exist. In my opinion the discriminant should be defined using a `K`-basis of `L` given by integral elements. In the `flt-regular` project this was completely clear (we needed to do this _before_ computing the ring of integers). I have a discussion with Anne about this, let me see if I find it.\r\n\r\nSee the discussion [here](https://github.com/leanprover-community/mathlib/pull/17299). You can also have a look at what I did with [RingOfIntegers.norm](https://leanprover-community.github.io/mathlib4_docs/Mathlib/NumberTheory/NumberField/Norm.html#RingOfIntegers.norm), that I think has the same problem (we don't want to use the norm of `𝓞 K / ℤ`, but the norm of `K / ℚ`).",
              "createdAt": "2023-08-12T14:18:16Z",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5j59mP",
              "body": "> A mathematical comment: do we really want the discriminant to be an integer? I mean, in general it is an ideal, and it is really a coincidence that for `ℤ` we can select a canonical generator.\r\n\r\nFrom my experience in algebraic number theory, there are two notions of discriminants: the absolute discriminant, this is the one in this PR, that is always an rational integer, and the relative discriminant which, for the reason you explained, has to be an ideal (see https://en.wikipedia.org/wiki/Discriminant_of_an_algebraic_number_field). There is no doubt in my mind that the (absolute) discriminant has to be a rational integer and I cannot think of any textbook on this topic where it is not defined that way. Furthermore, as mentioned in the discussion you linked, the sign of the discriminant does carry some arithmetic information that it's missing in the definition as an ideal. For example, it is convenient to refer to quadratic fields using their discriminant: the sign gives the signature and removes any ambiguity.\r\n\r\nIn my opinion, the best way to proceed would be to define the (absolute) discriminant and then add later on the notion of relative discriminant (as an ideal) and the lemma that says that the (absolute) discriminant is the norm of the relative discriminant with the sign given by the parity of the number of complex places. \r\n",
              "createdAt": "2023-08-12T23:11:29Z",
              "author": {
                "login": "xroblot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5kBohv",
              "body": "I am more concerned by my second remark about using a basis of `𝓞 K` instead of a basis of `K` given by integral elements. The point is that this requires to know `𝓞 K` *before* computing the discriminant, and sometimes what we do is the opposite, we use the discriminant to compute `𝓞 K`. What do you think?",
              "createdAt": "2023-08-14T22:12:49Z",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5kB2es",
              "body": "Riccardo, some comments about the mathematics, as I think I'm not following some of your previous discussion with Anne:\r\n\r\n> The point is that if we replace ℤ with R (the ring of integer of a finite extension of ℚ and S is now the ring of integers of a finite extension L of ℚ then it's possible that S is not free as R module, so norm R : S →* R can be 0. I indeed think that the norm relative to S should never be used.\r\n\r\nHow can the norm be zero? Is this not just restricting the norm from L/K to S/R? and why should we never use the norm relative to S?\r\n\r\n",
              "createdAt": "2023-08-14T23:11:22Z",
              "author": {
                "login": "ericrbg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5kB2m2",
              "body": "on this note:\r\n\r\n> I am more concerned by my second remark about using a basis of 𝓞 K instead of a basis of K given by integral elements. The point is that this requires to know 𝓞 K before computing the discriminant, and sometimes what we do is the opposite, we use the discriminant to compute 𝓞 K. What do you think?\r\n\r\nCan't this just be dealt with with a lemma saying that the discr is equal the discriminant of some integral basis? Should be trivial to prove",
              "createdAt": "2023-08-14T23:12:00Z",
              "author": {
                "login": "ericrbg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5kB-Jo",
              "body": "> Riccardo, some comments about the mathematics, as I think I'm not following some of your previous discussion with Anne:\r\n> \r\n> > The point is that if we replace ℤ with R (the ring of integer of a finite extension of ℚ and S is now the ring of integers of a finite extension L of ℚ then it's possible that S is not free as R module, so norm R : S →* R can be 0. I indeed think that the norm relative to S should never be used.\r\n> \r\n> How can the norm be zero? Is this not just restricting the norm from L/K to S/R? and why should we never use the norm relative to S?\r\n\r\nIf `𝓞 K` is not free the norm is `0` by definition (I think).",
              "createdAt": "2023-08-14T23:48:31Z",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5kB_6v",
              "body": "> Riccardo, some comments about the mathematics, as I think I'm not following some of your previous discussion with Anne:\r\n> \r\n> > The point is that if we replace ℤ with R (the ring of integer of a finite extension of ℚ and S is now the ring of integers of a finite extension L of ℚ then it's possible that S is not free as R module, so norm R : S →* R can be 0. I indeed think that the norm relative to S should never be used.\r\n> \r\n> How can the norm be zero? Is this not just restricting the norm from L/K to S/R? and why should we never use the norm relative to S?\r\n\r\nThe point is exactly that the norm `𝓞 K → ℤ` is not defined as the restriction of the norm `K → ℚ`. It is defined taking a `ℤ` basis of `𝓞 K` and computing the determinant of the multiplication by an element of `𝓞 K`, and in my opinion this shouldn't be used.",
              "createdAt": "2023-08-14T23:58:49Z",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5kCBEI",
              "body": "> on this note:\r\n> \r\n> > I am more concerned by my second remark about using a basis of 𝓞 K instead of a basis of K given by integral elements. The point is that this requires to know 𝓞 K before computing the discriminant, and sometimes what we do is the opposite, we use the discriminant to compute 𝓞 K. What do you think?\r\n> \r\n> Can't this just be dealt with with a lemma saying that the discr is equal the discriminant of some integral basis? Should be trivial to prove\r\n\r\nSure, but my claim (and as usual I am happy to be proved wrong) is that we are just introducing a not natural notion and proving that in this case (when the base ring is `ℤ`) it coincides with the natural one.",
              "createdAt": "2023-08-15T00:05:21Z",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5kCdJ9",
              "body": "> I am more concerned by my second remark about using a basis of `𝓞 K` instead of a basis of `K` given by integral elements. The point is that this requires to know `𝓞 K` _before_ computing the discriminant, and sometimes what we do is the opposite, we use the discriminant to compute `𝓞 K`. What do you think?\r\n\r\nFrom a computational point of view, given a number field by, say, an irreducible polynomial, the way to compute its discriminant is to first compute its ring of integers and that means compute a ℤ-basis of it. In some rare situation, the number field is constructed in such way that its discriminant is known beforehand (for example, if it is constructed via class field theory) and then knowing it (or more accurately its factorisation)  helps a little in constructing a ℤ-basis of the ring of integers. As far as I can tell, the discriminant is always introduced in textbooks using a ℤ-basis of the ring of integers. \r\n\r\n> Can't this just be dealt with with a lemma saying that the discr is equal the discriminant of some integral basis? Should be trivial to prove. \r\n\r\nThe lemma is already in the PR, it's `discr_eq_discr`.\r\n\r\nIn my opinion, we are barking at the wrong tree. I think the discriminant should be defined using a  ℤ-basis of the ring of integers since it is the most direct way and useful way to do it (one reason I wanted to introduce the discriminant is to do volume computation for applications of Minkowski lemma with Minkowski's theorem : a nontrivial number field has nontrivial discriminant, and Hermite–Minkowski theorem : in a fixed algebraic closure, there are only finitely many number fields of a given discriminant. This definition of the discriminant relates it naturally to the volume of the integer lattice in `canonicalEmbedding`). The real challenge, in my mind, is how to define the `relative discriminant` in a way that is the most adapted and useful. Here there are several options and I am not sure which one is the best. \r\n\r\nPS. I added the mention `absolute` in the PR to make clear the distinction with the relative discriminant. \r\n\r\n\r\n",
              "createdAt": "2023-08-15T03:10:46Z",
              "author": {
                "login": "xroblot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5kCdo6",
              "body": "> A mathematical comment: do we really want the discriminant to be an integer? I mean, in general it is an ideal, and it is really a coincidence that for `ℤ` we can select a canonical generator.\r\n\r\nI guess maybe the reason we have different point of view is that, for me, this is not a coincidence. It is a very strong feature of ℤ-lattices that their volume is independent of the choice of the basis.  This is what makes it possible to define the discriminant, but also the regulator and other similar invariants that \"quantify\" the size of ℤ-lattices.",
              "createdAt": "2023-08-15T03:14:24Z",
              "author": {
                "login": "xroblot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5lEi0v",
              "body": "@riccardobrasca, do you now agree with the way the discriminant is defined in this PR? If you want, I can move the discussion to Zulip to get more opinions. ",
              "createdAt": "2023-08-28T13:20:31Z",
              "author": {
                "login": "xroblot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5lM8pQ",
              "body": "Sorry, I am still on vacation with a limited internet connection. I am not totally sure about using a basis as Z module, but maybe the only way is to see what happens. In any case I think asking on zulip is a good idea.",
              "createdAt": "2023-08-29T17:55:44Z",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5lbiH0",
              "body": ":v: xroblot can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests).",
              "createdAt": "2023-08-31T20:11:26Z",
              "author": {
                "login": "bors"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5lfeQF",
              "body": "bors r+",
              "createdAt": "2023-09-01T13:27:24Z",
              "author": {
                "login": "xroblot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5lflPX",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6050048756/job/16418502172)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6050048756/job/16418502400)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6050048756/job/16418502910)",
              "createdAt": "2023-09-01T13:47:42Z",
              "author": {
                "login": "bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "ae4fcf58d00257dc338295d9240184649d26aca1",
                "additions": 221,
                "deletions": 94,
                "committedDate": "2023-08-06T07:37:22Z",
                "author": {
                  "name": "Xavier-François Roblot",
                  "email": "46200072+xroblot@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "d41284a7d28ac76ddcd94c6425976065c0270883",
                "additions": 0,
                "deletions": 17,
                "committedDate": "2023-08-06T07:38:59Z",
                "author": {
                  "name": "Xavier-François Roblot",
                  "email": "46200072+xroblot@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "b12a43d1dcb30d5a7dae789d5ac32b93536e2d1d",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-08-06T08:07:18Z",
                "author": {
                  "name": "Xavier-François Roblot",
                  "email": "46200072+xroblot@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "03d72e832b140eaeab6e5316e017530afd87f635",
                "additions": 92,
                "deletions": 71,
                "committedDate": "2023-08-07T09:20:32Z",
                "author": {
                  "name": "Xavier-François Roblot",
                  "email": "46200072+xroblot@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "6c4987dc89dfcd2d7119c551728f779bc2a26c0d",
                "additions": 0,
                "deletions": 1,
                "committedDate": "2023-08-07T09:22:40Z",
                "author": {
                  "name": "Xavier-François Roblot",
                  "email": "46200072+xroblot@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "6fc9e3cac5dae651e94516562e4e59b4f131eeaa",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-08-07T22:14:35Z",
                "author": {
                  "name": "Xavier-François Roblot",
                  "email": "46200072+xroblot@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "14760b7257f5813c9d1a58b335aaa7dec996cba4",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-08-07T22:15:53Z",
                "author": {
                  "name": "Xavier-François Roblot",
                  "email": "46200072+xroblot@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "6fd5d6409d778f9e860966b1d5336fe7776e7ca6",
                "additions": 65,
                "deletions": 8,
                "committedDate": "2023-08-07T22:20:34Z",
                "author": {
                  "name": "Xavier-François Roblot",
                  "email": "46200072+xroblot@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "f59bb003fd544bce4e392e0c61410183ad1ac045",
                "additions": 2966,
                "deletions": 621,
                "committedDate": "2023-08-08T00:03:10Z",
                "author": {
                  "name": "Xavier-François Roblot",
                  "email": "46200072+xroblot@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "3a8cee015f88100dfe4f694dae375b965fab6c31",
                "additions": 17470,
                "deletions": 13723,
                "committedDate": "2023-08-11T01:46:12Z",
                "author": {
                  "name": "Xavier-François Roblot",
                  "email": "46200072+xroblot@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "98952768a13a5238cda86d4130d8f89dd1e6fefc",
                "additions": 14505,
                "deletions": 13118,
                "committedDate": "2023-08-11T10:04:58Z",
                "author": {
                  "name": "Xavier-François Roblot",
                  "email": "46200072+xroblot@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "417e8f1fe65f1829a82abaab05d59a95a9fe60a9",
                "additions": 1011,
                "deletions": 407,
                "committedDate": "2023-08-12T02:47:56Z",
                "author": {
                  "name": "Xavier-François Roblot",
                  "email": "46200072+xroblot@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "2a3ab8b429e806b34231bf6dc5ee27d722fec1cd",
                "additions": 6,
                "deletions": 1,
                "committedDate": "2023-08-12T02:50:33Z",
                "author": {
                  "name": "Xavier-François Roblot",
                  "email": "46200072+xroblot@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "4b78a35da7366713213900d5da4015523c1b6178",
                "additions": 4,
                "deletions": 5,
                "committedDate": "2023-08-12T23:54:09Z",
                "author": {
                  "name": "Xavier-François Roblot",
                  "email": "46200072+xroblot@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "2f4cf021f5c32a17c5ac7526133000aa6191d57f",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-08-13T00:00:27Z",
                "author": {
                  "name": "Xavier-François Roblot",
                  "email": "46200072+xroblot@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "f66e1fb2f98a53744fca792854d2bc92c0cf16b0",
                "additions": 3,
                "deletions": 0,
                "committedDate": "2023-08-13T00:04:30Z",
                "author": {
                  "name": "Xavier-François Roblot",
                  "email": "46200072+xroblot@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "60f0950931642d7f102d9b8a6a336a57e1d32cea",
                "additions": 3,
                "deletions": 2,
                "committedDate": "2023-08-15T03:04:17Z",
                "author": {
                  "name": "Xavier-François Roblot",
                  "email": "46200072+xroblot@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "6fd69dcb326517a0242849d0ea46bfd3d94a162a",
                "additions": 21028,
                "deletions": 8387,
                "committedDate": "2023-08-30T12:00:52Z",
                "author": {
                  "name": "Xavier-François Roblot",
                  "email": "46200072+xroblot@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "c6577f29567d6e6c086e28bd7bd571aa687f9295",
                "additions": 3,
                "deletions": 0,
                "committedDate": "2023-08-30T12:09:15Z",
                "author": {
                  "name": "Xavier-François Roblot",
                  "email": "46200072+xroblot@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "410891232e98830a817be0e4b22959d05753d85a",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-08-30T12:17:59Z",
                "author": {
                  "name": "Xavier-François Roblot",
                  "email": "46200072+xroblot@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "2314c085c5cafdbb3575f441e0bb1905c6f328ac",
                "additions": 1794,
                "deletions": 928,
                "committedDate": "2023-09-01T12:56:47Z",
                "author": {
                  "name": "Xavier-François Roblot",
                  "email": "46200072+xroblot@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            }
          ]
        },
        "createdAt": "2023-08-06T07:37:49Z",
        "deletions": 0,
        "files": {
          "nodes": [
            {
              "path": "Mathlib.lean",
              "additions": 1,
              "deletions": 0
            },
            {
              "path": "Mathlib/NumberTheory/NumberField/Discriminant.lean",
              "additions": 68,
              "deletions": 0
            }
          ]
        },
        "headRefName": "xfr_discriminant",
        "headRefOid": "2314c085c5cafdbb3575f441e0bb1905c6f328ac",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5XQ_BX",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABAt13Ow",
              "color": "bfd4f2",
              "name": "delegated"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJLNA",
              "color": "33DBEC",
              "name": "t-number-theory"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5eLUX0",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-08-16T08:02:59Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5eWvqQ",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2023-08-17T16:35:18Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5fgS1A",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "jcommelin"
              },
              "submittedAt": "2023-08-30T09:33:14Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5fx92C",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "riccardobrasca"
              },
              "submittedAt": "2023-09-01T13:15:52Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5d4dVc",
              "body": "lgtm! It will be good to rewrite some of the FLT calculations of the discriminant in terms of this so that we have the full results later, if you want you could mention this in the todo!\r\n\r\nmaintainer merge",
              "state": "APPROVED",
              "author": {
                "login": "ericrbg"
              },
              "submittedAt": "2023-08-12T12:14:54Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 6394,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": "APPROVED",
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5d4dVc",
              "body": "lgtm! It will be good to rewrite some of the FLT calculations of the discriminant in terms of this so that we have the full results later, if you want you could mention this in the todo!\r\n\r\nmaintainer merge",
              "state": "APPROVED",
              "author": {
                "login": "ericrbg"
              },
              "submittedAt": "2023-08-12T12:14:54Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5d4qc5",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-08-12T13:18:26Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5d4qmh",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-08-12T13:18:53Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5d6Gvu",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "xroblot"
              },
              "submittedAt": "2023-08-12T23:58:34Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5eLTmI",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2023-08-16T08:01:04Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5eLUX0",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-08-16T08:02:59Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5eSlYp",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "xroblot"
              },
              "submittedAt": "2023-08-17T07:12:43Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5eWvqQ",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2023-08-17T16:35:18Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5fgS1A",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "jcommelin"
              },
              "submittedAt": "2023-08-30T09:33:14Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5fhRdA",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "xroblot"
              },
              "submittedAt": "2023-08-30T12:10:09Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5ftAxT",
              "body": "You convinced me this is the right definition, thanks!\r\n\r\nbors d+",
              "state": "COMMENTED",
              "author": {
                "login": "riccardobrasca"
              },
              "submittedAt": "2023-08-31T20:11:25Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5fx2de",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "xroblot"
              },
              "submittedAt": "2023-09-01T13:00:11Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5fx92C",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "riccardobrasca"
              },
              "submittedAt": "2023-09-01T13:15:52Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5NBknE",
                    "body": "I'm not honestly sure why this is preferred, but it seems to me that having a `discr_def` theorem is often preferred instead of just `rw [discr]`. ",
                    "createdAt": "2023-08-12T12:14:15Z",
                    "author": {
                      "login": "ericrbg"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5NBtwk",
                    "body": "Another good option would be to make `discr` an `abbrev`, then you don't need the lemma at all",
                    "createdAt": "2023-08-12T13:18:26Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5NOB_C",
                    "body": "> I'm not honestly sure why this is preferred, but it seems to me that having a `discr_def` theorem is often preferred instead of just `rw [discr]`. \r\n\r\nOne problem I noticed is that simp_rw can't rewrite backwards:\r\n```\r\ndef double (n : ℕ) : ℕ := n + n\r\n\r\nexample (n : ℕ) : double n = n + n := by\r\n  simp_rw [← double]\r\n```\r\nyields\r\n> invalid '←' modifier, 'double' is a declaration name to be unfolded\r\n\r\n(same for `simp only` and `simp`)\r\nwhile `rw [← double]`, `simp_rw [double]`, `rw [double]` all work.",
                    "createdAt": "2023-08-16T08:01:04Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5NOCek",
                    "body": "That sounds like a bug to file against `simp only`",
                    "createdAt": "2023-08-16T08:02:59Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5NSykN",
                    "body": "Note that I changed `discr` to an `abbrev`.",
                    "createdAt": "2023-08-17T07:12:43Z",
                    "author": {
                      "login": "xroblot"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5NVd1u",
                    "body": "> That sounds like a bug to file against `simp only`\r\n\r\nhttps://github.com/leanprover/lean4/issues/2431",
                    "createdAt": "2023-08-17T16:35:18Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5NBt4K",
                    "body": "```suggestion\r\ntheorem numberField_discr_eq_one : discr ℚ = 1 := by\r\n```\r\nor\r\n```suggestion\r\ntheorem _root_.NumberField.discr_rat : discr ℚ = 1 := by\r\n```",
                    "createdAt": "2023-08-12T13:18:53Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5NCtpP",
                    "body": "Since there are already [Rat.numberField](https://leanprover-community.github.io/mathlib4_docs/Mathlib/NumberTheory/NumberField/Basic.html#Rat.numberField) and [Rat.ringOfIntegersEquiv](https://leanprover-community.github.io/mathlib4_docs/Mathlib/NumberTheory/NumberField/Basic.html#Rat.ringOfIntegersEquiv), maybe the best compromise is `Rat.numberField_discr`?",
                    "createdAt": "2023-08-12T23:58:34Z",
                    "author": {
                      "login": "xroblot"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5OFL9U",
                    "body": "This can be a simp lemma. Would you also please alias this lemma as `NumberField.discr_rat`?",
                    "createdAt": "2023-08-30T09:33:14Z",
                    "author": {
                      "login": "jcommelin"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5OF6Fv",
                    "body": "Done.",
                    "createdAt": "2023-08-30T12:10:08Z",
                    "author": {
                      "login": "xroblot"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ONi7D",
                    "body": "The full name of this is something like `NumberField.Rat.numberField_discr`, right? It seems a little repetitive.. Why not simply `NumberField.Rat.discr`?",
                    "createdAt": "2023-08-31T20:11:03Z",
                    "author": {
                      "login": "riccardobrasca"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5OQr7K",
                    "body": "The result is called `Rat.numberField_discr` with an alias `NumberField.discr_rat`",
                    "createdAt": "2023-09-01T13:00:11Z",
                    "author": {
                      "login": "xroblot"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5OQwek",
                    "body": "Ah sorry, I didn't notice you ended `NumberField`.",
                    "createdAt": "2023-09-01T13:15:52Z",
                    "author": {
                      "login": "riccardobrasca"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjQ2MjAwMDcy",
              "login": "xroblot"
            },
            {
              "id": "U_kgDOB75MNQ",
              "login": "leanprover-community-mathlib4-bot"
            },
            {
              "id": "MDQ6VXNlcjMyNDkwNTMy",
              "login": "riccardobrasca"
            },
            {
              "id": "MDQ6VXNlcjM3OTg0ODUx",
              "login": "ericrbg"
            },
            {
              "id": "MDQ6VXNlcjQyNTI2MA==",
              "login": "eric-wieser"
            },
            {
              "id": "MDQ6VXNlcjMwNjQxNDU=",
              "login": "alreadydone"
            },
            {
              "id": "MDQ6VXNlcjU2MzY3MDU=",
              "login": "jcommelin"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": null,
        "title": "[Merged by Bors] - feat: define the discriminant of a number field",
        "updatedAt": "2023-09-01T13:47:47Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/6394",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "ae4fcf58d00257dc338295d9240184649d26aca1"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5tjxVuzwAAAAJVC_a2",
              "createdAt": "2023-08-06T07:38:05Z",
              "label": {
                "id": "MDU6TGFiZWwzMjcxMjQ0NzU5",
                "name": "WIP"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5tjxVuzwAAAAJVC_a3",
              "createdAt": "2023-08-06T07:38:05Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJLNA",
                "name": "t-number-theory"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "d41284a7d28ac76ddcd94c6425976065c0270883"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "b12a43d1dcb30d5a7dae789d5ac32b93536e2d1d"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "03d72e832b140eaeab6e5316e017530afd87f635"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "6c4987dc89dfcd2d7119c551728f779bc2a26c0d"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5tjxVuzwAAAAJVc95x",
              "createdAt": "2023-08-07T12:39:39Z",
              "label": {
                "id": "MDU6TGFiZWwzMjg4OTQyMDg2",
                "name": "blocked-by-other-PR"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "6fc9e3cac5dae651e94516562e4e59b4f131eeaa"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "14760b7257f5813c9d1a58b335aaa7dec996cba4"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "6fd5d6409d778f9e860966b1d5336fe7776e7ca6"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5tjxVuzwAAAAJVyfQx",
              "createdAt": "2023-08-07T22:34:28Z",
              "label": {
                "id": "MDU6TGFiZWwzMjcxMjQ0NzU5",
                "name": "WIP"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5tjxVuzwAAAAJVyfQz",
              "createdAt": "2023-08-07T22:34:28Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5tjxVuzwAAAAJVzWwx",
              "createdAt": "2023-08-07T23:24:17Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "f59bb003fd544bce4e392e0c61410183ad1ac045"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5tjxVuzwAAAAJV0Rum",
              "createdAt": "2023-08-08T00:22:40Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5tjxVuzwAAAAJX4UO_",
              "createdAt": "2023-08-10T21:51:09Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "3a8cee015f88100dfe4f694dae375b965fab6c31"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "98952768a13a5238cda86d4130d8f89dd1e6fefc"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5tjxVuzwAAAAJYGfvt",
              "createdAt": "2023-08-11T10:07:39Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5tjxVuzwAAAAJYg554",
              "createdAt": "2023-08-12T01:20:20Z",
              "label": {
                "id": "MDU6TGFiZWwzMjg4OTQyMDg2",
                "name": "blocked-by-other-PR"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5j34ml",
              "createdAt": "2023-08-12T01:20:21Z",
              "body": "This PR/issue depends on:\n* ~~leanprover-community/mathlib4#6422~~\n* ~~leanprover-community/mathlib4#6424~~\nBy **[Dependent Issues](https://github.com/z0al/dependent-issues)** (🤖). Happy coding!\n<!-- By Dependent Issues (Action) - DO NOT REMOVE -->",
              "author": {
                "login": "leanprover-community-mathlib4-bot"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5tjxVuzwAAAAJYhB9W",
              "createdAt": "2023-08-12T01:25:14Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "417e8f1fe65f1829a82abaab05d59a95a9fe60a9"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5tjxVuzwAAAAJYiKmI",
              "createdAt": "2023-08-12T02:49:07Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "2a3ab8b429e806b34231bf6dc5ee27d722fec1cd"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5d4dVc",
              "createdAt": "2023-08-12T12:14:15Z",
              "body": "lgtm! It will be good to rewrite some of the FLT calculations of the discriminant in terms of this so that we have the full results later, if you want you could mention this in the todo!\r\n\r\nmaintainer merge",
              "author": {
                "login": "ericrbg"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5j4_Kp",
              "createdAt": "2023-08-12T12:15:08Z",
              "body": "🚀 Pull request has been placed on the maintainer queue by ericrbg.",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5j4_K7",
              "createdAt": "2023-08-12T12:15:14Z",
              "body": "🚀 Pull request has been placed on the maintainer queue by ericrbg.",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5d4qmh",
              "createdAt": "2023-08-12T13:18:53Z",
              "body": "",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5j5I_P",
              "createdAt": "2023-08-12T13:45:36Z",
              "body": "A mathematical comment: do we really want the discriminant to be an integer? I mean, in general it is an ideal, and it is really a coincidence that for `ℤ` we can select a canonical generator.\r\n\r\nI know that on Zulip I said the opposite ([here](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Discriminant.20of.20a.20number.20field/near/267843794)) but it seems a good idea to at least raise the question.",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5j5KZc",
              "createdAt": "2023-08-12T14:01:44Z",
              "body": "Thinking more about this I think the definition is wrong: we shouldn't use a `ℤ`-basis, since in general, for number fields extensions, this does not exist. In my opinion the discriminant should be defined using a `K`-basis of `L` given by integral elements. In the `flt-regular` project this was completely clear (we needed to do this *before* computing the ring of integers). I have a discussion with Anne about this, let me see if I find it.",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5j5MHN",
              "createdAt": "2023-08-12T14:18:16Z",
              "body": "> Thinking more about this I think the definition is wrong: we shouldn't use a `ℤ`-basis, since in general, for number fields extensions, this does not exist. In my opinion the discriminant should be defined using a `K`-basis of `L` given by integral elements. In the `flt-regular` project this was completely clear (we needed to do this _before_ computing the ring of integers). I have a discussion with Anne about this, let me see if I find it.\r\n\r\nSee the discussion [here](https://github.com/leanprover-community/mathlib/pull/17299). You can also have a look at what I did with [RingOfIntegers.norm](https://leanprover-community.github.io/mathlib4_docs/Mathlib/NumberTheory/NumberField/Norm.html#RingOfIntegers.norm), that I think has the same problem (we don't want to use the norm of `𝓞 K / ℤ`, but the norm of `K / ℚ`).",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5j59mP",
              "createdAt": "2023-08-12T23:11:29Z",
              "body": "> A mathematical comment: do we really want the discriminant to be an integer? I mean, in general it is an ideal, and it is really a coincidence that for `ℤ` we can select a canonical generator.\r\n\r\nFrom my experience in algebraic number theory, there are two notions of discriminants: the absolute discriminant, this is the one in this PR, that is always an rational integer, and the relative discriminant which, for the reason you explained, has to be an ideal (see https://en.wikipedia.org/wiki/Discriminant_of_an_algebraic_number_field). There is no doubt in my mind that the (absolute) discriminant has to be a rational integer and I cannot think of any textbook on this topic where it is not defined that way. Furthermore, as mentioned in the discussion you linked, the sign of the discriminant does carry some arithmetic information that it's missing in the definition as an ideal. For example, it is convenient to refer to quadratic fields using their discriminant: the sign gives the signature and removes any ambiguity.\r\n\r\nIn my opinion, the best way to proceed would be to define the (absolute) discriminant and then add later on the notion of relative discriminant (as an ideal) and the lemma that says that the (absolute) discriminant is the norm of the relative discriminant with the sign given by the parity of the number of complex places. \r\n",
              "author": {
                "login": "xroblot"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "4b78a35da7366713213900d5da4015523c1b6178"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "2f4cf021f5c32a17c5ac7526133000aa6191d57f"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "f66e1fb2f98a53744fca792854d2bc92c0cf16b0"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5kBohv",
              "createdAt": "2023-08-14T22:12:49Z",
              "body": "I am more concerned by my second remark about using a basis of `𝓞 K` instead of a basis of `K` given by integral elements. The point is that this requires to know `𝓞 K` *before* computing the discriminant, and sometimes what we do is the opposite, we use the discriminant to compute `𝓞 K`. What do you think?",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5kB2es",
              "createdAt": "2023-08-14T23:11:22Z",
              "body": "Riccardo, some comments about the mathematics, as I think I'm not following some of your previous discussion with Anne:\r\n\r\n> The point is that if we replace ℤ with R (the ring of integer of a finite extension of ℚ and S is now the ring of integers of a finite extension L of ℚ then it's possible that S is not free as R module, so norm R : S →* R can be 0. I indeed think that the norm relative to S should never be used.\r\n\r\nHow can the norm be zero? Is this not just restricting the norm from L/K to S/R? and why should we never use the norm relative to S?\r\n\r\n",
              "author": {
                "login": "ericrbg"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5kB2m2",
              "createdAt": "2023-08-14T23:12:00Z",
              "body": "on this note:\r\n\r\n> I am more concerned by my second remark about using a basis of 𝓞 K instead of a basis of K given by integral elements. The point is that this requires to know 𝓞 K before computing the discriminant, and sometimes what we do is the opposite, we use the discriminant to compute 𝓞 K. What do you think?\r\n\r\nCan't this just be dealt with with a lemma saying that the discr is equal the discriminant of some integral basis? Should be trivial to prove",
              "author": {
                "login": "ericrbg"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5kB-Jo",
              "createdAt": "2023-08-14T23:48:31Z",
              "body": "> Riccardo, some comments about the mathematics, as I think I'm not following some of your previous discussion with Anne:\r\n> \r\n> > The point is that if we replace ℤ with R (the ring of integer of a finite extension of ℚ and S is now the ring of integers of a finite extension L of ℚ then it's possible that S is not free as R module, so norm R : S →* R can be 0. I indeed think that the norm relative to S should never be used.\r\n> \r\n> How can the norm be zero? Is this not just restricting the norm from L/K to S/R? and why should we never use the norm relative to S?\r\n\r\nIf `𝓞 K` is not free the norm is `0` by definition (I think).",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5kB_6v",
              "createdAt": "2023-08-14T23:58:49Z",
              "body": "> Riccardo, some comments about the mathematics, as I think I'm not following some of your previous discussion with Anne:\r\n> \r\n> > The point is that if we replace ℤ with R (the ring of integer of a finite extension of ℚ and S is now the ring of integers of a finite extension L of ℚ then it's possible that S is not free as R module, so norm R : S →* R can be 0. I indeed think that the norm relative to S should never be used.\r\n> \r\n> How can the norm be zero? Is this not just restricting the norm from L/K to S/R? and why should we never use the norm relative to S?\r\n\r\nThe point is exactly that the norm `𝓞 K → ℤ` is not defined as the restriction of the norm `K → ℚ`. It is defined taking a `ℤ` basis of `𝓞 K` and computing the determinant of the multiplication by an element of `𝓞 K`, and in my opinion this shouldn't be used.",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5kCBEI",
              "createdAt": "2023-08-15T00:05:21Z",
              "body": "> on this note:\r\n> \r\n> > I am more concerned by my second remark about using a basis of 𝓞 K instead of a basis of K given by integral elements. The point is that this requires to know 𝓞 K before computing the discriminant, and sometimes what we do is the opposite, we use the discriminant to compute 𝓞 K. What do you think?\r\n> \r\n> Can't this just be dealt with with a lemma saying that the discr is equal the discriminant of some integral basis? Should be trivial to prove\r\n\r\nSure, but my claim (and as usual I am happy to be proved wrong) is that we are just introducing a not natural notion and proving that in this case (when the base ring is `ℤ`) it coincides with the natural one.",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "60f0950931642d7f102d9b8a6a336a57e1d32cea"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5kCdJ9",
              "createdAt": "2023-08-15T03:10:46Z",
              "body": "> I am more concerned by my second remark about using a basis of `𝓞 K` instead of a basis of `K` given by integral elements. The point is that this requires to know `𝓞 K` _before_ computing the discriminant, and sometimes what we do is the opposite, we use the discriminant to compute `𝓞 K`. What do you think?\r\n\r\nFrom a computational point of view, given a number field by, say, an irreducible polynomial, the way to compute its discriminant is to first compute its ring of integers and that means compute a ℤ-basis of it. In some rare situation, the number field is constructed in such way that its discriminant is known beforehand (for example, if it is constructed via class field theory) and then knowing it (or more accurately its factorisation)  helps a little in constructing a ℤ-basis of the ring of integers. As far as I can tell, the discriminant is always introduced in textbooks using a ℤ-basis of the ring of integers. \r\n\r\n> Can't this just be dealt with with a lemma saying that the discr is equal the discriminant of some integral basis? Should be trivial to prove. \r\n\r\nThe lemma is already in the PR, it's `discr_eq_discr`.\r\n\r\nIn my opinion, we are barking at the wrong tree. I think the discriminant should be defined using a  ℤ-basis of the ring of integers since it is the most direct way and useful way to do it (one reason I wanted to introduce the discriminant is to do volume computation for applications of Minkowski lemma with Minkowski's theorem : a nontrivial number field has nontrivial discriminant, and Hermite–Minkowski theorem : in a fixed algebraic closure, there are only finitely many number fields of a given discriminant. This definition of the discriminant relates it naturally to the volume of the integer lattice in `canonicalEmbedding`). The real challenge, in my mind, is how to define the `relative discriminant` in a way that is the most adapted and useful. Here there are several options and I am not sure which one is the best. \r\n\r\nPS. I added the mention `absolute` in the PR to make clear the distinction with the relative discriminant. \r\n\r\n\r\n",
              "author": {
                "login": "xroblot"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5kCdo6",
              "createdAt": "2023-08-15T03:14:24Z",
              "body": "> A mathematical comment: do we really want the discriminant to be an integer? I mean, in general it is an ideal, and it is really a coincidence that for `ℤ` we can select a canonical generator.\r\n\r\nI guess maybe the reason we have different point of view is that, for me, this is not a coincidence. It is a very strong feature of ℤ-lattices that their volume is independent of the choice of the basis.  This is what makes it possible to define the discriminant, but also the regulator and other similar invariants that \"quantify\" the size of ℤ-lattices.",
              "author": {
                "login": "xroblot"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5lEi0v",
              "createdAt": "2023-08-28T13:20:31Z",
              "body": "@riccardobrasca, do you now agree with the way the discriminant is defined in this PR? If you want, I can move the discussion to Zulip to get more opinions. ",
              "author": {
                "login": "xroblot"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5lM8pQ",
              "createdAt": "2023-08-29T17:55:44Z",
              "body": "Sorry, I am still on vacation with a limited internet connection. I am not totally sure about using a basis as Z module, but maybe the only way is to see what happens. In any case I think asking on zulip is a good idea.",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5fgS1A",
              "createdAt": "2023-08-30T09:33:14Z",
              "body": "",
              "author": {
                "login": "jcommelin"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "6fd69dcb326517a0242849d0ea46bfd3d94a162a"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "c6577f29567d6e6c086e28bd7bd571aa687f9295"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "410891232e98830a817be0e4b22959d05753d85a"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5ftAxT",
              "createdAt": "2023-08-31T20:11:03Z",
              "body": "You convinced me this is the right definition, thanks!\r\n\r\nbors d+",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5lbiH0",
              "createdAt": "2023-08-31T20:11:26Z",
              "body": ":v: xroblot can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests).",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5tjxVuzwAAAAJi6wrj",
              "createdAt": "2023-08-31T20:11:39Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABAt13Ow",
                "name": "delegated"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5tjxVuzwAAAAJi6wuO",
              "createdAt": "2023-08-31T20:11:40Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "2314c085c5cafdbb3575f441e0bb1905c6f328ac"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5lfeQF",
              "createdAt": "2023-09-01T13:27:24Z",
              "body": "bors r+",
              "author": {
                "login": "xroblot"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5lflPX",
              "createdAt": "2023-09-01T13:47:42Z",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6050048756/job/16418502172)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6050048756/job/16418502400)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6050048756/job/16418502910)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c5tjxVuzwAAAAJjZYHz",
              "createdAt": "2023-09-01T13:47:44Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c5tjxVuzwAAAAJjZYQE",
              "createdAt": "2023-09-01T13:47:47Z"
            }
          ]
        }
      }
    }
  }
}
