{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 85,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "4e554c4c"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "Port of leanprover-community/mathlib#17973\r\n\r\nFollow up work:\r\n* add `IsPushout` when `M` is a `CommRing`.\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 4,
        "closed": true,
        "closedAt": "2023-07-29T19:59:51Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5g8Lnm",
              "body": "> This theorem has slightly strange hypotheses. `is_localized_module S f` should already give `M'` the structure of a module over `localization S`, although perhaps this is hard to state without creating typeclass problems? I guess if you have a use for this lemma (rather than the lemma where you create the `module (localization S) M'` and `is_scalar_tower R (localization S) M'` from the other hypotheses) then I guess we should have it.\r\n\r\n_Originally posted by @kbuzzard in https://github.com/leanprover-community/mathlib/pull/17973#pullrequestreview-1520243319_\r\n\r\n---\r\nIndeed. When I was first PRing this (it was awhile ago) I did write some form of `instance [IsLocalizedModule S f] : SMul (Localization S) M'`, but this was quite troublesome due to typeclass inference and functions. Instead, if necessary the module structure can always be created manually using [`LocalizedModule.lift`](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Module/LocalizedModule.html#LocalizedModule.lift).\r\n            ",
              "createdAt": "2023-07-08T00:32:02Z",
              "author": {
                "login": "4e554c4c"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5iv4Fs",
              "body": ":v: 4e554c4c can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests).",
              "createdAt": "2023-07-29T12:16:21Z",
              "author": {
                "login": "bors"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5iwOaK",
              "body": "bors r+",
              "createdAt": "2023-07-29T18:04:58Z",
              "author": {
                "login": "4e554c4c"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5iwOaN",
              "body": ":-1: Rejected by label",
              "createdAt": "2023-07-29T18:05:00Z",
              "author": {
                "login": "bors"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5iwUhh",
              "body": "bors r+",
              "createdAt": "2023-07-29T18:50:49Z",
              "author": {
                "login": "4e554c4c"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5iwb4t",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/5701987390/job/15453229346)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/5701987390/job/15453229416)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/5701987390/job/15453229457)",
              "createdAt": "2023-07-29T19:59:50Z",
              "author": {
                "login": "bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "2c9aae38a71cf169fba28ca3efcd88907fed0b73",
                "additions": 94,
                "deletions": 0,
                "committedDate": "2023-07-07T21:49:08Z",
                "author": {
                  "name": "Calvin Lee",
                  "email": "calvins.lee@utah.edu"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "74d030c1c1ebca2d48229b797c968e55180e27be",
                "additions": 15,
                "deletions": 23,
                "committedDate": "2023-07-08T02:56:19Z",
                "author": {
                  "name": "Calvin Lee",
                  "email": "calvins.lee@utah.edu"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "1502af86966d2e2893b2876e93212bf90de5c8fc",
                "additions": 9,
                "deletions": 11,
                "committedDate": "2023-07-08T20:18:44Z",
                "author": {
                  "name": "Calvin Lee",
                  "email": "calvins.lee@utah.edu"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "6d8d90501764606634fb73514e67049562048ea3",
                "additions": 18,
                "deletions": 12,
                "committedDate": "2023-07-09T04:59:32Z",
                "author": {
                  "name": "Calvin Lee",
                  "email": "calvins.lee@utah.edu"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "ac1b02c44e61d346e32e8972a409546d80a2a3df",
                "additions": 2,
                "deletions": 1,
                "committedDate": "2023-07-09T05:07:42Z",
                "author": {
                  "name": "Calvin Lee",
                  "email": "calvins.lee@utah.edu"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "8f96987b0f7b6dff1a6476e768e7749f40dad6a7",
                "additions": 2,
                "deletions": 4,
                "committedDate": "2023-07-11T16:19:35Z",
                "author": {
                  "name": "Calvin Lee",
                  "email": "pounce@integraldoma.in"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "e592fe1c8c7d3f9edea030614c022a5486412612",
                "additions": 5686,
                "deletions": 429,
                "committedDate": "2023-07-11T16:20:24Z",
                "author": {
                  "name": "Calvin Lee",
                  "email": "pounce@integraldoma.in"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "9c1a76f952086027e09a7de3fb9a9c14062fbaf1",
                "additions": 8,
                "deletions": 11,
                "committedDate": "2023-07-11T16:33:16Z",
                "author": {
                  "name": "Calvin Lee",
                  "email": "pounce@integraldoma.in"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "f2fc2d0ebd81b5f52f3e3c8ac835e49ace90a56f",
                "additions": 5,
                "deletions": 7,
                "committedDate": "2023-07-24T18:41:58Z",
                "author": {
                  "name": "Calvin Lee",
                  "email": "pounce@meta.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "cbe982908fd4969679e913ce766da10e73069b5f",
                "additions": 22,
                "deletions": 19,
                "committedDate": "2023-07-25T19:13:16Z",
                "author": {
                  "name": "Calvin Lee",
                  "email": "pounce@integraldoma.in"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "c66e00d7da0900736a034028e1f5004a95f4781e",
                "additions": 28908,
                "deletions": 23253,
                "committedDate": "2023-07-25T19:14:38Z",
                "author": {
                  "name": "Calvin Lee",
                  "email": "pounce@integraldoma.in"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "6b1a50f3c2b356d6d1c69122c716dadbc70a86f9",
                "additions": 12,
                "deletions": 17,
                "committedDate": "2023-07-26T19:50:14Z",
                "author": {
                  "name": "Calvin Lee",
                  "email": "pounce@meta.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "3e5b41ea7cf3ca7b0eeeb66e548ebd8f5d0f0a16",
                "additions": 4,
                "deletions": 0,
                "committedDate": "2023-07-26T20:03:03Z",
                "author": {
                  "name": "Calvin Lee",
                  "email": "pounce@integraldoma.in"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "ea4312cad2499ddb03d9717716156dba71b8f7f4",
                "additions": 47,
                "deletions": 43,
                "committedDate": "2023-07-27T18:38:49Z",
                "author": {
                  "name": "Calvin Lee",
                  "email": "pounce@integraldoma.in"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "f2d2c4b5406368d79747329e53f5f008b2dbcd86",
                "additions": 19,
                "deletions": 23,
                "committedDate": "2023-07-29T16:50:47Z",
                "author": {
                  "name": "Calvin Lee",
                  "email": "pounce@meta.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "ec7aad8bf1fdda0858df62f70dc26eed12fc90be",
                "additions": 0,
                "deletions": 1,
                "committedDate": "2023-07-29T18:04:00Z",
                "author": {
                  "name": "Calvin Lee",
                  "email": "pounce@integraldoma.in"
                },
                "statusCheckRollup": null
              }
            }
          ]
        },
        "createdAt": "2023-07-08T00:23:52Z",
        "deletions": 0,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/Algebra/Module/LocalizedModule.lean",
              "additions": 29,
              "deletions": 0
            },
            {
              "path": "Mathlib/LinearAlgebra/TensorProduct.lean",
              "additions": 11,
              "deletions": 0
            },
            {
              "path": "Mathlib/RingTheory/Localization/Basic.lean",
              "additions": 11,
              "deletions": 0
            },
            {
              "path": "Mathlib/RingTheory/Localization/Module.lean",
              "additions": 34,
              "deletions": 0
            }
          ]
        },
        "headRefName": "feat/localized-module-is-tensor-product",
        "headRefOid": "ec7aad8bf1fdda0858df62f70dc26eed12fc90be",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5U-RuE",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABAt13Ow",
              "color": "bfd4f2",
              "name": "delegated"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5ascg3",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kmill"
              },
              "submittedAt": "2023-07-10T08:55:13Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5b-78w",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "Vierkantor"
              },
              "submittedAt": "2023-07-24T10:52:14Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5cAH-P",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "101damnations"
              },
              "submittedAt": "2023-07-24T13:49:39Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5clQiq",
              "body": "Thank you again for your patience sticking with this, this was a bit trickier than it could have been (partly because of missing API) and of course because of the port. You should expect a better experience from future PR reviews!\r\n\r\nPlease apply my final suggestions and then feel free to merge.\r\n\r\nbors d+\r\n\r\n",
              "state": "APPROVED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-07-29T12:16:20Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 5766,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": "APPROVED",
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5an8nJ",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "4e554c4c"
              },
              "submittedAt": "2023-07-08T02:26:10Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5ascg3",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kmill"
              },
              "submittedAt": "2023-07-10T08:55:13Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5a4O8S",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "4e554c4c"
              },
              "submittedAt": "2023-07-11T16:36:55Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5b96ak",
              "body": "Thanks, a few small suggestions and a question I'll repeat on Zulip.",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-07-24T09:48:45Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5b-78w",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "Vierkantor"
              },
              "submittedAt": "2023-07-24T10:52:14Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5cAH-P",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "101damnations"
              },
              "submittedAt": "2023-07-24T13:49:39Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5cA7fv",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-07-24T15:30:06Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5cCJ0z",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "4e554c4c"
              },
              "submittedAt": "2023-07-24T18:50:31Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5cOfMR",
              "body": "Thanks for sticking with this. It's very close now.\r\n\r\nI think there are further opportunities to simplify this proof (and extract new lemmas) but I'm out of time for now. I'll try to come back to this within 24 hours if nobody else does.",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-07-26T10:30:29Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5cWh6-",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-07-27T09:21:08Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5cazhv",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "4e554c4c"
              },
              "submittedAt": "2023-07-27T18:41:24Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5clQiq",
              "body": "Thank you again for your patience sticking with this, this was a bit trickier than it could have been (partly because of missing API) and of course because of the port. You should expect a better experience from future PR reviews!\r\n\r\nPlease apply my final suggestions and then feel free to merge.\r\n\r\nbors d+\r\n\r\n",
              "state": "APPROVED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-07-29T12:16:20Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5K6MG3",
                    "body": "> What does it mean for a bilinear map to be a tensor product? Did you mean to say this? And what is `N`?\r\n\r\n_Originally posted by @kbuzzard in https://github.com/leanprover-community/mathlib/pull/17973#discussion_r1256596031_\r\n\r\n--\r\noops, `N` here should be `M'`\r\nBy \"is a tensor product\", I mean that this map (along with `M'`) is universal.\r\nBoth the binary map and object are necessary to define the tensor product, so I don't have an issue calling either \"the tensor product\". This also goes well with how our typeclasses are defined. (`IsBaseChange` is defined as `IsTensorProduct` for the map given in this docstring).",
                    "createdAt": "2023-07-08T02:26:10Z",
                    "author": {
                      "login": "4e554c4c"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5K-phb",
                    "body": "Just mentioning to whoever is reviewing that I created #5786 so that this can be written instead as\r\n```suggestion\r\n          conv in (↑s • _) • _ =>\r\n```\r\n\r\nThe way `pattern` handles `occs` is a little weird in the context of `in` clauses, so I'll also mention that here's a way you could write the one above that uses it:\r\n```lean\r\n          conv in (occs := 1 2) Localization.mk _ s => all_goals\r\n              rw [← smul_eq_mul R, ← Localization.smul_mk]\r\n```",
                    "createdAt": "2023-07-10T08:55:13Z",
                    "author": {
                      "login": "kmill"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5LGfKp",
                    "body": "thanks! done.",
                    "createdAt": "2023-07-11T16:36:55Z",
                    "author": {
                      "login": "4e554c4c"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Lz_oP",
                    "body": "We prefer to place the `:` at the end of the line rather than the start of the next (see [here](https://leanprover-community.github.io/contribute/style.html#structuring-definitions-and-theorems) albeit this needs updating now that the port is complete).\r\n```suggestion\r\n    (h : ∀ (m₁ m₂ : M) (n₁ n₂ : N), ∃ m n, m₁ ⊗ₜ n₁ + m₂ ⊗ₜ n₂ = m ⊗ₜ[R] n) :\r\n    ∃ m n, x = m ⊗ₜ n := by\r\n```",
                    "createdAt": "2023-07-24T08:29:33Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5L0AEu",
                    "body": "For lemma / theorems (but not definitions) we try to have a name that reflects the type of the hypothesis and conclusion, so this should probably be something like:\r\n```suggestion\r\ntheorem exists_eq_tmul_of_forall (x : TensorProduct R M N)\r\n```",
                    "createdAt": "2023-07-24T08:31:00Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5L0WmX",
                    "body": "It's also hard to think of a circumstance when we would want to use this lemma (I note that you don't use it here). I'm not against adding it but it would be helpful if you could motivate why you want it.",
                    "createdAt": "2023-07-24T09:48:10Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5L2s8v",
                    "body": "Right, so I opened a [thread](https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/What.20to.20do.20with.20small.2C.20self-contained.20lemmas.3F) about this on github a long time ago, and the indication seemed to be that it wouldn't hurt to add lemmas like this to mathlib.\r\n\r\nThe point is to include a useful criterion of when every element of a tensor product is pure, which is true in the case of $`S^{-1}R\\otimes_R M`$ where we are working. This lemma was used in an earlier version of my theorem, but ended up not being useful later (when rephrasing things as `IsBaseChange` instead of `IsTensorProduct`). I decided to keep the theorem in hopes it would be useful to others, but am happy to remove it (since it ended up basically being trivial after a lot of golfing).",
                    "createdAt": "2023-07-24T18:50:30Z",
                    "author": {
                      "login": "4e554c4c"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5L0AUz",
                    "body": "Using `rfl` when destructing saves having the rewrite afterward:\r\n```suggestion\r\n  · obtain ⟨m₁, n₁, rfl⟩ := h₁\r\n    obtain ⟨m₂, n₂, rfl⟩ := h₂\r\n```",
                    "createdAt": "2023-07-24T08:31:44Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5L0G-M",
                    "body": "This comes transitively from `import Mathlib.RingTheory.IsTensorProduct`.\r\n```suggestion\r\n```",
                    "createdAt": "2023-07-24T08:55:10Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5L0VPU",
                    "body": "I'm not an expert on this corner of the library but I believe we prefer to prove theorems about the universal property of localizations using `Submonoid.LocalizationMap` rather than the particular model provided by `Localization`.\r\n\r\nWith that in mind, I believe a better setup would be as follows:\r\n```lean\r\nvariable {A : Type _} [CommRing A] [Algebra R A] [Module A M'] [IsScalarTower R A M']\r\n\r\ntheorem isBaseChange (g : Submonoid.LocalizationMap S A) : IsBaseChange A f := sorry -- Your proof here\r\n```\r\nand this recovers your original statement as:\r\n```lean\r\n-- Just for illustration, this wouldn't actually go in the library\r\nexample [Module (Localization S) M'] [IsScalarTower R (Localization S) M'] :\r\n    IsBaseChange (Localization S) f :=\r\n  isBaseChange S f (Localization.monoidOf S)\r\n```\r\nI'll raise this on Zulip to see if I can attract some expert opinions.",
                    "createdAt": "2023-07-24T09:43:47Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5L0qZb",
                    "body": "I haven't used `LocalizedModule` but certainly my experience in ring/field theory localizations would agree with Oliver's suggestion.",
                    "createdAt": "2023-07-24T10:52:13Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5L1abN",
                    "body": "Me too, though I also haven't used `LocalizedModule`, and I think `(g : Submonoid.LocalizationMap S A)` should be `[IsLocalization S A]` (and then `(Localization.monoidOf S)` can be removed).",
                    "createdAt": "2023-07-24T13:49:38Z",
                    "author": {
                      "login": "101damnations"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5L17BN",
                    "body": "Thanks @101damnations this makes sense, we have a special typeclass `IsLocalization` expressing the fact that an `algebraMap` satisfies the hypothesis required to build a `Submonoid.LocalizationMap`. So the correct statement should be:\r\n```lean\r\ntheorem isBaseChange {A : Type _} [CommRing A] [Algebra R A] [Module A M'] [IsScalarTower R A M']\r\n    [IsLocalization S A] :\r\n    IsBaseChange A f :=\r\n  sorry -- Your proof here!\r\n\r\n-- Just for illustration, this wouldn't actually go in the library\r\nexample [Module (Localization S) M'] [IsScalarTower R (Localization S) M'] :\r\n    IsBaseChange (Localization S) f :=\r\n  isBaseChange S f\r\n```",
                    "createdAt": "2023-07-24T15:30:06Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5L-iSz",
                    "body": "```suggestion\r\nvariable {A : Type _}\r\n  [CommRing A] [Algebra R A] [Module A M'] [IsScalarTower R A M'] [IsLocalization S A]\r\n```",
                    "createdAt": "2023-07-26T09:44:58Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5L-ipp",
                    "body": "```suggestion\r\n  refine' IsBaseChange.of_lift_unique _ (fun Q _ _ _ _ g ↦ _)\r\n```",
                    "createdAt": "2023-07-26T09:46:11Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5L-iul",
                    "body": "```suggestion\r\n-/\r\n```",
                    "createdAt": "2023-07-26T09:46:22Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5L-zl9",
                    "body": "If you add the following lemma:\r\n```lean\r\n@[simp] lemma IsLocalization.smul_mk'_self {s : S} {r : R} :\r\n    (s : R) • IsLocalization.mk' A r s = algebraMap R A r := by\r\n  rw [IsLocalization.smul_mk', IsLocalization.mk'_mul_cancel_left]\r\n```\r\n(e.g., just below the your new lemma `IsLocalization.smul_mk'`) then we can golf this part to:\r\n```suggestion\r\n    intro s\r\n    simp_rw [Module.End_isUnit_iff, Function.bijective_iff_existsUnique,\r\n      Module.algebraMap_end_apply]\r\n    intro q\r\n    refine' ⟨(IsLocalization.mk' _ 1 s : A) • q, _, _⟩\r\n    · simp only [← smul_assoc, IsLocalization.smul_mk'_self, map_one, one_smul]\r\n    · rintro q rfl\r\n      simp only [smul_comm _ (s : R), ← smul_assoc, IsLocalization.smul_mk'_self, map_one, one_smul]\r\n```",
                    "createdAt": "2023-07-26T10:29:02Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5MDj2A",
                    "body": "If we add the following definition somewhere (maybe to `RingTheory/Localization/Module.lean`):\r\n```lean\r\nsection move_me\r\n\r\nvariable (A)\r\nvariable {M N : Type _}\r\n  [AddCommMonoid M] [Module R M] [Module A M] [IsScalarTower R A M]\r\n  [AddCommMonoid N] [Module R N] [Module A N] [IsScalarTower R A N]\r\n\r\n/-- An `R`-linear map between two `S⁻¹R`-modules is actually `S⁻¹R`-linear. -/\r\ndef _root_.LinearMap.extendScalarsOfIsLocalization (f : M →ₗ[R] N) : M →ₗ[A] N where\r\n  toFun := f\r\n  map_add' := f.map_add\r\n  map_smul' := by\r\n    intro r m\r\n    simp only [RingHom.id_apply]\r\n    rcases IsLocalization.mk'_surjective S r with ⟨r, s, rfl⟩\r\n    conv_lhs =>\r\n      rw [← one_smul A (f _), ← IsLocalization.mk'_self' _ (x := s),  ← mul_one r,\r\n        ← mul_one (↑s : R)]\r\n      conv =>\r\n        -- 'repeat' appears to discharge goals\r\n        -- https://github.com/leanprover/lean4/pull/2357\r\n        repeat rw [← IsLocalization.smul_mk' ]\r\n      rw [smul_assoc r, f.map_smul]\r\n      conv in (↑s • _) • _ =>\r\n        rw [smul_comm]\r\n      conv in (↑s • _) • _ =>\r\n        rw [smul_assoc, smul_comm]\r\n      rw [← f.map_smul (↑s : ↑ S)]\r\n      conv in (occs := 1) _ • _ • _ =>\r\n        rw [← smul_assoc]\r\n      arg 2; rw [← smul_assoc]\r\n    iterate 2 rw [IsLocalization.smul_mk', mul_one]\r\n    rw [IsLocalization.mk'_self, one_smul]\r\n\r\n@[simp] lemma _root_.LinearMap.restrictScalars_extendScalarsOfIsLocalization (f : M →ₗ[R] N) :\r\n    (f.extendScalarsOfIsLocalization S A).restrictScalars R = f := rfl\r\n\r\nend move_me\r\n```\r\nthen this proof can become:\r\n```suggestion\r\n  rcases this with ⟨ℓ, rfl, h₂⟩\r\n  refine' ⟨ℓ.extendScalarsOfIsLocalization S A, by simp, fun g'' h ↦ _⟩\r\n  have := h₂ (LinearMap.restrictScalars R g'') h\r\n  rw [← ℓ.restrictScalars_extendScalarsOfIsLocalization S A] at this\r\n  ext x\r\n  apply_fun fun f => f x at this\r\n  simpa [LinearMap.restrictScalars_apply]\r\n```\r\n",
                    "createdAt": "2023-07-27T09:21:08Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5MGLpm",
                    "body": "thanks! this is the refactor I was vaguely thinking about :laughing: ",
                    "createdAt": "2023-07-27T18:41:24Z",
                    "author": {
                      "login": "4e554c4c"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5MMSq8",
                    "body": "This will help us golf some downstream proofs:\r\n```suggestion\r\n\r\n@[simp] theorem smul_mk'_one (x : R) (m : M) : x • mk' S 1 m = mk' S x m := by\r\n  rw [smul_mk', mul_one]\r\n\r\n```",
                    "createdAt": "2023-07-29T12:08:32Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5MMSra",
                    "body": "```suggestion\r\nvariable (A : Type _) [CommRing A] [Algebra R A] [IsLocalization S A]\r\n```",
                    "createdAt": "2023-07-29T12:09:07Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5MMSsK",
                    "body": "```suggestion\r\n\r\nopen IsLocalization\r\n\r\n```",
                    "createdAt": "2023-07-29T12:09:52Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5MMStm",
                    "body": "This is a great opportunity to use `calc`:\r\n```suggestion\r\n    rcases mk'_surjective S r with ⟨r, s, rfl⟩\r\n    calc f (mk' A r s • m)\r\n        = ((s : R) • mk' A 1 s) • f (mk' A r s • m) := by simp\r\n      _ = (mk' A 1 s) • (s : R) • f (mk' A r s • m) := by rw [smul_comm, smul_assoc]\r\n      _ = (mk' A 1 s) • f ((s : R) • mk' A r s • m) := by simp\r\n      _ = (mk' A 1 s) • f (r • m) := by rw [← smul_assoc, smul_mk'_self, algebraMap_smul]\r\n      _ = (mk' A 1 s) • r • f m := by simp\r\n      _ = mk' A r s • f m := by rw [smul_comm, ← smul_assoc, smul_mk'_one]\r\n```",
                    "createdAt": "2023-07-29T12:10:35Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5MMSvF",
                    "body": "I forgot to include this in a previous review; it will help us golf a downstream proof:\r\n```suggestion\r\n\r\n@[simp] lemma LinearMap.extendScalarsOfIsLocalization_apply (f : M →ₗ[A] N) :\r\n    f.extendScalarsOfIsLocalization S A = f := rfl\r\n\r\nend\r\n```",
                    "createdAt": "2023-07-29T12:11:31Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5MMSwF",
                    "body": "Thanks to our new `simp` lemmas, this can be just:\r\n```suggestion\r\n  ext x\r\n  simp [← h₂ (LinearMap.restrictScalars R g'') h]\r\n```",
                    "createdAt": "2023-07-29T12:12:27Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjQ3NDMxMTM=",
              "login": "4e554c4c"
            },
            {
              "id": "MDQ6VXNlcjIzNTMwNw==",
              "login": "kmill"
            },
            {
              "id": "MDQ6VXNlcjIxMTY1NzA=",
              "login": "Vierkantor"
            },
            {
              "id": "MDQ6VXNlcjc3MzQzNjQ=",
              "login": "ocfnash"
            },
            {
              "id": "MDQ6VXNlcjQwNzQ1MTA0",
              "login": "101damnations"
            },
            {
              "id": "MDQ6VXNlcjQyNTI2MA==",
              "login": "eric-wieser"
            },
            {
              "id": "U_kgDOB75MNQ",
              "login": "leanprover-community-mathlib4-bot"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": null,
        "title": "[Merged by Bors] - feat: add IsLocalizedModule.isBaseChange",
        "updatedAt": "2023-07-29T19:59:55Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/5766",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "2c9aae38a71cf169fba28ca3efcd88907fed0b73"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5q9t3szwAAAAJFxEnO",
              "createdAt": "2023-07-08T00:23:52Z",
              "label": {
                "id": "MDU6TGFiZWwzMjcxMjQ0NzU5",
                "name": "WIP"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5q9t3szwAAAAJFxEnR",
              "createdAt": "2023-07-08T00:23:52Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABJ_5Nfw",
                "name": "mathlib3-pair"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5g8Lnm",
              "createdAt": "2023-07-08T00:32:02Z",
              "body": "> This theorem has slightly strange hypotheses. `is_localized_module S f` should already give `M'` the structure of a module over `localization S`, although perhaps this is hard to state without creating typeclass problems? I guess if you have a use for this lemma (rather than the lemma where you create the `module (localization S) M'` and `is_scalar_tower R (localization S) M'` from the other hypotheses) then I guess we should have it.\r\n\r\n_Originally posted by @kbuzzard in https://github.com/leanprover-community/mathlib/pull/17973#pullrequestreview-1520243319_\r\n\r\n---\r\nIndeed. When I was first PRing this (it was awhile ago) I did write some form of `instance [IsLocalizedModule S f] : SMul (Localization S) M'`, but this was quite troublesome due to typeclass inference and functions. Instead, if necessary the module structure can always be created manually using [`LocalizedModule.lift`](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Module/LocalizedModule.html#LocalizedModule.lift).\r\n            ",
              "author": {
                "login": "4e554c4c"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5an8nJ",
              "createdAt": "2023-07-08T02:26:10Z",
              "body": "",
              "author": {
                "login": "4e554c4c"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "74d030c1c1ebca2d48229b797c968e55180e27be"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "1502af86966d2e2893b2876e93212bf90de5c8fc"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5q9t3szwAAAAJGIZsG",
              "createdAt": "2023-07-09T04:59:06Z",
              "label": {
                "id": "MDU6TGFiZWwzMjcxMjQ0NzU5",
                "name": "WIP"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5q9t3szwAAAAJGIZsI",
              "createdAt": "2023-07-09T04:59:06Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "6d8d90501764606634fb73514e67049562048ea3"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5q9t3szwAAAAJGIZ5P",
              "createdAt": "2023-07-09T05:00:06Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABMtntmA",
                "name": "new-feature"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "ac1b02c44e61d346e32e8972a409546d80a2a3df"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5q9t3szwAAAAJGIq4s",
              "createdAt": "2023-07-09T06:09:52Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5q9t3szwAAAAJGNSay",
              "createdAt": "2023-07-09T20:21:08Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5ascg3",
              "createdAt": "2023-07-10T08:55:13Z",
              "body": "",
              "author": {
                "login": "kmill"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "8f96987b0f7b6dff1a6476e768e7749f40dad6a7"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "e592fe1c8c7d3f9edea030614c022a5486412612"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "9c1a76f952086027e09a7de3fb9a9c14062fbaf1"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5q9t3szwAAAAJJWieY",
              "createdAt": "2023-07-14T10:41:00Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABPL-huQ",
                "name": "forward-port-placeholder"
              }
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOBdYtcs5NiJm0",
              "createdAt": "2023-07-16T07:45:06Z",
              "source": {
                "id": "PR_kwDOBdYtcs5FuDvs",
                "title": "feat(algebra/module/localized_module): add is_tensor_product for localized_modules",
                "url": "https://github.com/leanprover-community/mathlib3/pull/17973"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5q9t3szwAAAAJKADoh",
              "createdAt": "2023-07-16T17:02:03Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABPL-huQ",
                "name": "forward-port-placeholder"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5q9t3szwAAAAJKAGi_",
              "createdAt": "2023-07-16T17:10:40Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABJ_5Nfw",
                "name": "mathlib3-pair"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5b96ak",
              "createdAt": "2023-07-24T08:29:33Z",
              "body": "Thanks, a few small suggestions and a question I'll repeat on Zulip.",
              "author": {
                "login": "ocfnash"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5q9t3szwAAAAJN-LAY",
              "createdAt": "2023-07-24T09:49:28Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5q9t3szwAAAAJN-LAk",
              "createdAt": "2023-07-24T09:49:28Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "f2fc2d0ebd81b5f52f3e3c8ac835e49ace90a56f"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "cbe982908fd4969679e913ce766da10e73069b5f"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "c66e00d7da0900736a034028e1f5004a95f4781e"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5q9t3szwAAAAJPA1Bx",
              "createdAt": "2023-07-25T19:21:27Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5q9t3szwAAAAJPA1B8",
              "createdAt": "2023-07-25T19:21:27Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5q9t3szwAAAAJPDaLD",
              "createdAt": "2023-07-25T20:30:51Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5q9t3szwAAAAJPEh1U",
              "createdAt": "2023-07-25T21:06:14Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5cOfMR",
              "createdAt": "2023-07-26T09:44:58Z",
              "body": "Thanks for sticking with this. It's very close now.\r\n\r\nI think there are further opportunities to simplify this proof (and extract new lemmas) but I'm out of time for now. I'll try to come back to this within 24 hours if nobody else does.",
              "author": {
                "login": "ocfnash"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "6b1a50f3c2b356d6d1c69122c716dadbc70a86f9"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "3e5b41ea7cf3ca7b0eeeb66e548ebd8f5d0f0a16"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5q9t3szwAAAAJPxRHm",
              "createdAt": "2023-07-26T20:05:21Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5q9t3szwAAAAJPy6gH",
              "createdAt": "2023-07-26T21:02:21Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5cWh6-",
              "createdAt": "2023-07-27T09:21:08Z",
              "body": "",
              "author": {
                "login": "ocfnash"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5q9t3szwAAAAJQFPLn",
              "createdAt": "2023-07-27T09:24:53Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5q9t3szwAAAAJQFPLw",
              "createdAt": "2023-07-27T09:24:53Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "ea4312cad2499ddb03d9717716156dba71b8f7f4"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5q9t3szwAAAAJQb8Vl",
              "createdAt": "2023-07-27T18:40:54Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5q9t3szwAAAAJQb8Vw",
              "createdAt": "2023-07-27T18:40:54Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5q9t3szwAAAAJQb8V6",
              "createdAt": "2023-07-27T18:40:54Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5q9t3szwAAAAJQdor_",
              "createdAt": "2023-07-27T19:34:43Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5clQiq",
              "createdAt": "2023-07-29T12:08:32Z",
              "body": "Thank you again for your patience sticking with this, this was a bit trickier than it could have been (partly because of missing API) and of course because of the port. You should expect a better experience from future PR reviews!\r\n\r\nPlease apply my final suggestions and then feel free to merge.\r\n\r\nbors d+\r\n\r\n",
              "author": {
                "login": "ocfnash"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5iv4Fs",
              "createdAt": "2023-07-29T12:16:21Z",
              "body": ":v: 4e554c4c can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests).",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5q9t3szwAAAAJRU6tW",
              "createdAt": "2023-07-29T12:16:32Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABAt13Ow",
                "name": "delegated"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5q9t3szwAAAAJRU6t8",
              "createdAt": "2023-07-29T12:16:33Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "f2d2c4b5406368d79747329e53f5f008b2dbcd86"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5q9t3szwAAAAJRXBo5",
              "createdAt": "2023-07-29T16:51:11Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "ec7aad8bf1fdda0858df62f70dc26eed12fc90be"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5iwOaK",
              "createdAt": "2023-07-29T18:04:58Z",
              "body": "bors r+",
              "author": {
                "login": "4e554c4c"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5iwOaN",
              "createdAt": "2023-07-29T18:05:00Z",
              "body": ":-1: Rejected by label",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5q9t3szwAAAAJRX1Z7",
              "createdAt": "2023-07-29T18:50:32Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5iwUhh",
              "createdAt": "2023-07-29T18:50:49Z",
              "body": "bors r+",
              "author": {
                "login": "4e554c4c"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5iwb4t",
              "createdAt": "2023-07-29T19:59:50Z",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/5701987390/job/15453229346)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/5701987390/job/15453229416)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/5701987390/job/15453229457)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c5q9t3szwAAAAJRYc9e",
              "createdAt": "2023-07-29T19:59:51Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c5q9t3szwAAAAJRYdEJ",
              "createdAt": "2023-07-29T19:59:55Z"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            }
          ]
        }
      }
    }
  }
}
