{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 5,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "ChrisHughes24"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "---\r\nThis should be safe now that instance cycles are allowed in Lean4\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 6,
        "closed": true,
        "closedAt": "2024-12-26T18:00:39Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5j56Zn",
              "body": "I've seen those build errors before, when changing unrelated files. Typeclass inference spends a long time doing a stupid thing (it's `ring1` failing to prove F[X][X] has char 0), and random changes can push it over the edge. Either increase the numbers or disable the instance which is causing all the problems (it's `StrictOrderedSemiring.to_charZero`, you can `attribute [-instance]` it)",
              "createdAt": "2023-08-12T22:25:09Z",
              "author": {
                "login": "kbuzzard"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5kNB-3",
              "body": "!bench",
              "createdAt": "2023-08-16T19:09:25Z",
              "author": {
                "login": "ChrisHughes24"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5kNQZ7",
              "body": "Here are the [benchmark results](http://speed.lean-fro.org/mathlib4/run-detail/f7252fbb-a848-439c-8e44-29e8e1649a1b) for commit 5629904bb0b4f807f29c89d690f7747a993ae34d.\nThere were [significant changes](http://speed.lean-fro.org/mathlib4/compare/c5dc31bb-341f-4840-9bc0-f51540af240b/to/f7252fbb-a848-439c-8e44-29e8e1649a1b) against commit 8712fabc6d0867d8040373d582459b461b6deff9:\n```diff\n  Benchmark                             Metric           Change\n  =============================================================\n- build                                 native linking    11.1%\n- ~Mathlib.NumberTheory.SumTwoSquares   instructions       5.8%\n```",
              "createdAt": "2023-08-16T20:00:29Z",
              "author": {
                "login": "leanprover-bot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5kbguN",
              "body": "Empirically typeclass cycles are still bad, at least in my experience. I recently tried to promote two theorems to instances and ran into non-trivial problems (to say nothing of performance hits). I mentioned this here:\r\nhttps://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/type.20class.20inference.20looping/near/385635549\r\n\r\nIMHO, the situation is better than Lean 3 but I think typeclass inference still has a lot of room for improvement in Lean 4 (which is actually pretty exciting, as I believe we'll see it happen).\r\n\r\nSo unfortunately I think we should not make this change.",
              "createdAt": "2023-08-19T12:28:54Z",
              "author": {
                "login": "ocfnash"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5n-p8P",
              "body": "I just came across this PR again (tidying my notifications) and it occurs to me that the right fix would be to change the definition of the `CharP` class to the mathematically more sensible:\r\n```lean\r\nclass CharP [AddMonoidWithOne R] (p : ℕ) : Prop where\r\n  cast_eq_iff' : ∀ x y : ℕ, (x : R) = (y : R) ↔ (x : ZMod p) = (y : ZMod p)\r\n```\r\nand then delete `CharZero` since it is then equivalent (even without additive inverses) to `CharP R 0`.\r\n\r\nFor bonus points one could even rename `CharP` to `Char`!",
              "createdAt": "2023-10-03T08:36:00Z",
              "author": {
                "login": "ocfnash"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "19e1cb7f2261292ab9e29a7b624c39ba58313a31",
                "additions": 1,
                "deletions": 6,
                "committedDate": "2023-08-12T20:03:13Z",
                "author": {
                  "name": "Chris Hughes",
                  "email": "chrishughes24@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "d88b534e169f9ac02d80d66e58bb9e98e801e447",
                "additions": 1,
                "deletions": 2,
                "committedDate": "2023-08-12T20:36:45Z",
                "author": {
                  "name": "Chris Hughes",
                  "email": "chrishughes24@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "be9b1f9006838354313e49584f63d7de671efc7a",
                "additions": 3,
                "deletions": 0,
                "committedDate": "2023-08-12T22:36:54Z",
                "author": {
                  "name": "Chris Hughes",
                  "email": "chrishughes24@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "5629904bb0b4f807f29c89d690f7747a993ae34d",
                "additions": 8510,
                "deletions": 2486,
                "committedDate": "2023-08-16T19:09:14Z",
                "author": {
                  "name": "Chris Hughes",
                  "email": "chrishughes24@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "0a881ac429e1119b2eeea80867160d5dee0b4ec3",
                "additions": 1935,
                "deletions": 1037,
                "committedDate": "2023-08-19T14:12:52Z",
                "author": {
                  "name": "Chris Hughes",
                  "email": "chrishughes24@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAErF9Q9g",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=6548&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "createdAt": "2023-08-12T20:04:30Z",
        "deletions": 8,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/Algebra/CharP/Basic.lean",
              "additions": 1,
              "deletions": 2
            },
            {
              "path": "Mathlib/Algebra/CharP/LocalRing.lean",
              "additions": 0,
              "deletions": 1
            },
            {
              "path": "Mathlib/Algebra/CharP/MixedCharZero.lean",
              "additions": 0,
              "deletions": 1
            },
            {
              "path": "Mathlib/AlgebraicGeometry/EllipticCurve/Point.lean",
              "additions": 3,
              "deletions": 0
            },
            {
              "path": "Mathlib/FieldTheory/IsAlgClosed/Classification.lean",
              "additions": 0,
              "deletions": 2
            },
            {
              "path": "Mathlib/FieldTheory/Separable.lean",
              "additions": 1,
              "deletions": 2
            }
          ]
        },
        "headRefName": "charP_charZero_refactor",
        "headRefOid": "0a881ac429e1119b2eeea80867160d5dee0b4ec3",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5XzQLD",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c7P265b",
              "color": "f9d0c4",
              "name": "awaiting-author"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
              "color": "f99094",
              "name": "merge-conflict"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJjTQ",
              "color": "33DBEC",
              "name": "t-algebra"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5eguP3",
              "body": "I'd like to have this but I think Mathlib / Lean is not yet ready.",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-08-19T12:33:29Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "DIRTY",
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 6548,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5eguP3",
              "body": "I'd like to have this but I think Mathlib / Lean is not yet ready.",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-08-19T12:33:29Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Nb-7f",
                    "body": "In addition to the disappointing [benchmark results](https://github.com/leanprover-community/mathlib4/pull/6548#issuecomment-1681196667) I think this is a pretty big red flag.",
                    "createdAt": "2023-08-19T12:32:53Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjMzODQ3Njg2",
              "login": "ChrisHughes24"
            },
            {
              "id": "MDQ6VXNlcjMxODY3ODI3",
              "login": "kbuzzard"
            },
            {
              "id": "MDQ6VXNlcjg1NjY4Mzk0",
              "login": "leanprover-bot"
            },
            {
              "id": "MDQ6VXNlcjc3MzQzNjQ=",
              "login": "ocfnash"
            },
            {
              "id": "U_kgDOB75MNQ",
              "login": "leanprover-community-mathlib4-bot"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAErF9Q9g",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=6548&login=leanprover-community&repository=mathlib4"
              }
            ]
          }
        },
        "title": "refactor: make charP_to_charZero an instance",
        "updatedAt": "2024-12-26T18:00:42Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/6548",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5uKYgbzwAAAAJYsfGl",
              "createdAt": "2023-08-12T20:04:30Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5uKYgbzwAAAAJYsfGn",
              "createdAt": "2023-08-12T20:04:30Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "UnsubscribedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5j56Zn",
              "createdAt": "2023-08-12T22:25:09Z",
              "body": "I've seen those build errors before, when changing unrelated files. Typeclass inference spends a long time doing a stupid thing (it's `ring1` failing to prove F[X][X] has char 0), and random changes can push it over the edge. Either increase the numbers or disable the instance which is causing all the problems (it's `StrictOrderedSemiring.to_charZero`, you can `attribute [-instance]` it)",
              "author": {
                "login": "kbuzzard"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5uKYgbzwAAAAJYt310",
              "createdAt": "2023-08-12T23:03:02Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5kNB-3",
              "createdAt": "2023-08-16T19:09:25Z",
              "body": "!bench",
              "author": {
                "login": "ChrisHughes24"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5kNQZ7",
              "createdAt": "2023-08-16T20:00:29Z",
              "body": "Here are the [benchmark results](http://speed.lean-fro.org/mathlib4/run-detail/f7252fbb-a848-439c-8e44-29e8e1649a1b) for commit 5629904bb0b4f807f29c89d690f7747a993ae34d.\nThere were [significant changes](http://speed.lean-fro.org/mathlib4/compare/c5dc31bb-341f-4840-9bc0-f51540af240b/to/f7252fbb-a848-439c-8e44-29e8e1649a1b) against commit 8712fabc6d0867d8040373d582459b461b6deff9:\n```diff\n  Benchmark                             Metric           Change\n  =============================================================\n- build                                 native linking    11.1%\n- ~Mathlib.NumberTheory.SumTwoSquares   instructions       5.8%\n```",
              "author": {
                "login": "leanprover-bot"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5kbguN",
              "createdAt": "2023-08-19T12:28:54Z",
              "body": "Empirically typeclass cycles are still bad, at least in my experience. I recently tried to promote two theorems to instances and ran into non-trivial problems (to say nothing of performance hits). I mentioned this here:\r\nhttps://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/type.20class.20inference.20looping/near/385635549\r\n\r\nIMHO, the situation is better than Lean 3 but I think typeclass inference still has a lot of room for improvement in Lean 4 (which is actually pretty exciting, as I believe we'll see it happen).\r\n\r\nSo unfortunately I think we should not make this change.",
              "author": {
                "login": "ocfnash"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5eguP3",
              "createdAt": "2023-08-19T12:32:53Z",
              "body": "I'd like to have this but I think Mathlib / Lean is not yet ready.",
              "author": {
                "login": "ocfnash"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5uKYgbzwAAAAJcJq5-",
              "createdAt": "2023-08-19T12:33:58Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5uKYgbzwAAAAJcJq6C",
              "createdAt": "2023-08-19T12:33:58Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5uKYgbzwAAAAJcJq6D",
              "createdAt": "2023-08-19T12:33:58Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJjTQ",
                "name": "t-algebra"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "BaseRefChangedEvent"
            },
            {
              "__typename": "BaseRefChangedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5n-p8P",
              "createdAt": "2023-10-03T08:36:00Z",
              "body": "I just came across this PR again (tidying my notifications) and it occurs to me that the right fix would be to change the definition of the `CharP` class to the mathematically more sensible:\r\n```lean\r\nclass CharP [AddMonoidWithOne R] (p : ℕ) : Prop where\r\n  cast_eq_iff' : ∀ x y : ℕ, (x : R) = (y : R) ↔ (x : ZMod p) = (y : ZMod p)\r\n```\r\nand then delete `CharZero` since it is then equivalent (even without additive inverses) to `CharP R 0`.\r\n\r\nFor bonus points one could even rename `CharP` to `Char`!",
              "author": {
                "login": "ocfnash"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5uKYgbzwAAAAKYRtlo",
              "createdAt": "2023-12-04T21:34:14Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c5uKYgbzwAAAAOrzBUw",
              "createdAt": "2024-12-26T18:00:39Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c5uKYgbzwAAAAOrzBX8",
              "createdAt": "2024-12-26T18:00:41Z"
            }
          ]
        }
      }
    }
  }
}
