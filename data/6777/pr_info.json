{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 703,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "adomani"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "Replace `CovariantClass X X (· * ·) (· ≤ ·)` with -> `CovariantClass X X HMul.hMul LE.le` and similarly for `HAdd`, `LT`, `Contravariant`.\r\n\r\nThis PR is inspired by [Issue #6646](https://github.com/leanprover-community/mathlib4/issues/6646) and, more specifically, [this comment](https://github.com/leanprover-community/mathlib4/issues/6646#issuecomment-1692792066).\r\n\r\nNote that https://github.com/leanprover/lean4/pull/2267 would make this unnecessary\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n```bash\r\n# First sed command:\r\n#   the first captured pattern is `Co*variantClass <type> <type> `\r\n#   the second captured pattern is `<type>`\r\n#   the third captured pattern is `+` or `*`\r\n#   the fourth captured pattern is `<` or `≤`\r\n#   a match for `Co*variantClass <type> <type> (· <op> ·) (· <rel> ·)` becomes\r\n#               `Co*variantClass <type> <type> replaceop<op> replaceop<rel>`\r\n# Second sed command: similar to the first, but looks for `(Function.swap (· <op> ·))`\r\nsed -i '\r\ns=\\(Co[ntra]*variantClass \\(..*\\) \\2 \\)(· *\\([+*]\\) *·) (· *\\([<≤]\\) *·)=\\1replaceop\\3 replaceop\\4=g\r\ns=\\(Co[ntra]*variantClass \\(..*\\) \\2 \\)(\\([Functio\\.swap ]*\\)(· *\\([+*]\\) *·)) (· *\\([<≤]\\) *·)=\\1(\\3replaceop\\4) replaceop\\5=g\r\n\r\ns=replaceop+=HAdd.hAdd=g\r\ns=replaceop\\*=HMul.hMul=g\r\ns=replaceop<=LT.lt=g\r\ns=replaceop≤=LE.le=g\r\ns=\\(Co[ntra]*variantClass N N\\) (· \\* ·) r=\\1 HMul.hMul r=g\r\ns=\\(Co[ntra]*variantClass N N (swap μ)\\) (· ≤ ·)=\\1 LE.le=g\r\ns=\\(Co[ntra]*variantClass N N\\) (swap (· \\* ·)) r=\\1 (swap HMul.hMul) r=g\r\ns=\\(CovariantClass (Filter α) (Filter α)\\) (· / ·) (· ≤ ·)=\\1 HDiv.hDiv LE.le=g\r\ns=\\(CovariantClass (Filter α) (Filter α)\\) (swap (· / ·)) (· ≤ ·)=\\1 (swap HDiv.hDiv) LE.le=g\r\ns=\\(Co[ntra]*variantClass .* (fun x y .> . \\* .)\\) (· ≤ ·)=\\1 LE.le=g\r\ns=\\(Co[ntra]*variantClass .* (fun x y .> . \\* .)\\) (· < ·)=\\1 LT.lt=g\r\ns=\\(Co[ntra]*variantClass [^}]*\\) (· ≤ ·)=\\1 LE.le=g\r\ns=\\(CovariantClass .* (Filter β)\\) (· • ·) LE.le=\\1 HSMul.hSMul LE.le=g\r\n' $(git ls-files '*.lean')\r\n```\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 81,
        "closed": false,
        "closedAt": null,
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5k69xX",
              "body": "!bench",
              "createdAt": "2023-08-25T10:58:35Z",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5k7NIX",
              "body": "Here are the [benchmark results](http://speed.lean-fro.org/mathlib4/run-detail/f516ff94-f413-425c-83c0-a1d7fea170b3) for commit b19956dc37a91d2aea4ca6b13501a360a83b076e.\nThere were [significant changes](http://speed.lean-fro.org/mathlib4/compare/4a7c8d4d-672e-4842-9679-572ce3731a33/to/f516ff94-f413-425c-83c0-a1d7fea170b3) against commit 7f2ee0917b6e7b4d2a2fbd505eb56448b0cce911:\n```diff\n  Benchmark                                    Metric               Change\n  ========================================================================\n- build                                        native compilation     9.7%\n+ ~Mathlib.Algebra.Bounds                      instructions         -15.0%\n+ ~Mathlib.Algebra.CovariantAndContravariant   instructions          -6.0%\n+ ~Mathlib.Algebra.GroupPower.Order            instructions          -7.0%\n+ ~Mathlib.Algebra.MonoidAlgebra.Degree        instructions          -9.7%\n+ ~Mathlib.Algebra.Order.Group.OrderIso        instructions          -6.3%\n+ ~Mathlib.Algebra.Order.LatticeGroup          instructions          -6.4%\n+ ~Mathlib.Algebra.Order.Monoid.Lemmas         instructions          -6.7%\n+ ~Mathlib.Algebra.Order.Pointwise             instructions          -5.6%\n+ ~Mathlib.Algebra.Order.Positive.Ring         instructions          -8.0%\n+ ~Mathlib.Algebra.Order.Sub.Canonical         instructions          -9.5%\n+ ~Mathlib.Algebra.Order.Sub.Defs              instructions          -6.0%\n```",
              "createdAt": "2023-08-25T11:56:24Z",
              "author": {
                "login": "leanprover-bot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5k7UZt",
              "body": "> There are some left-over occurrences of the old pattern in\r\n\r\nDo you intend to address these too, or in a follow-up PR?",
              "createdAt": "2023-08-25T12:21:25Z",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5k7U_J",
              "body": "This is ugly; why should we prefer this? Should we not instead wait for Mario's fix?",
              "createdAt": "2023-08-25T12:23:22Z",
              "author": {
                "login": "ericrbg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5k7hPA",
              "body": "As I said, it's prettier in the docs even though uglier in the source. So that's another thing to fix ...",
              "createdAt": "2023-08-25T13:01:43Z",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5k78cK",
              "body": "On the other hand, (· * ·), (· + ·), (· ≤ ·), (· < ·) look too much like faces and that could be a distraction to new Lean 4 users before they get used to it...",
              "createdAt": "2023-08-25T14:17:43Z",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5k8INY",
              "body": "@eric-wieser, I have updated the PR: I think that this addresses all the cases of `Co*variantClass X X ...`.\r\n\r\nThe cases where the two types `X` are different actually benefit from eta-reduction, so I left them untouched.\r\n\r\nAlso, there were a couple of instance of `(swap) HDiv` in `Order/Filter/Pointwise`.",
              "createdAt": "2023-08-25T14:45:15Z",
              "author": {
                "login": "adomani"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5k8I9c",
              "body": "@ericrbg, probably Mario's fix would be a more robust solution, but this one straightforward, available already and, honestly, I am not so convinced that it is uglier than the weird sequence of symbols that you get with the other notation. :shrug: \r\n\r\nAnyway, I will also not lose any sleep if this PR does not get merged...",
              "createdAt": "2023-08-25T14:47:25Z",
              "author": {
                "login": "adomani"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5k8KY3",
              "body": "> The cases where the two types `X` are different actually benefit from eta-reduction, so I left them untouched.\r\n\r\nWhich cases are these? Benefit how?",
              "createdAt": "2023-08-25T14:51:30Z",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5k8LO5",
              "body": "When I changed some of those, the result did not seem to type-check.  Let me find a good example.",
              "createdAt": "2023-08-25T14:53:58Z",
              "author": {
                "login": "adomani"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5k8MhA",
              "body": "Here is an example:\r\n```lean\r\n-- Mathlib/Algebra/Order/Ring/Lemmas.lean\r\nabbrev PosMulMono : Prop :=\r\n  CovariantClass α≥0 α HMul.hMul (· ≤ ·)  -- failed to synthesize instance  HMul { x // 0 ≤ x } α α\r\n#align pos_mul_mono PosMulMono\r\n```\r\nIt seems that the coercion from the subtype is not inserted, without the eta-expansion?\r\nThe original has\r\n```lean\r\nCovariantClass α≥0 α (fun x y => x * y) (· ≤ ·)\r\n```\r\nand I checked that\r\n```lean\r\nCovariantClass α≥0 α (· * ·) (· ≤ ·)\r\n```\r\nworks, but `HMul.hMul` gives the error.",
              "createdAt": "2023-08-25T14:57:51Z",
              "author": {
                "login": "adomani"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5k8OUc",
              "body": "Does replacing the `le` but not the `mul` work?",
              "createdAt": "2023-08-25T15:03:09Z",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5k8QAy",
              "body": "It ought to, since that is an inequality on the \"ambient\" type, let me confirm.\r\nEDIT: yes, it works.  Updating...",
              "createdAt": "2023-08-25T15:07:57Z",
              "author": {
                "login": "adomani"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5k8U6S",
              "body": "With the new version, this is what is left:\r\n```\r\n$ grep \"Co[ntra]*variantClass .*·\" $( git ls-files '*.lean' )\r\nMathlib/Data/List/BigOperators/Basic.lean:    [CovariantClass M M HMul.hMul LE.le] {l₁ l₂ : List M} (h : Forall₂ (· ≤ ·) l₁ l₂) :\r\n```\r\nthat is, a better regex would show nothing!",
              "createdAt": "2023-08-25T15:22:52Z",
              "author": {
                "login": "adomani"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5k8Z3Q",
              "body": "!bench",
              "createdAt": "2023-08-25T15:38:24Z",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5k8l84",
              "body": "Here are the [benchmark results](http://speed.lean-fro.org/mathlib4/run-detail/2c11f39b-f709-49ad-8397-074e4940edd8) for commit 32047f5f9a736420c81a9948be62a04049fd06ed.\nThere were [significant changes](http://speed.lean-fro.org/mathlib4/compare/4a7c8d4d-672e-4842-9679-572ce3731a33/to/2c11f39b-f709-49ad-8397-074e4940edd8) against commit 7f2ee0917b6e7b4d2a2fbd505eb56448b0cce911:\n```diff\n  Benchmark                                    Metric         Change\n  ==================================================================\n+ ~Mathlib.Algebra.Bounds                      instructions   -15.1%\n+ ~Mathlib.Algebra.CovariantAndContravariant   instructions    -6.6%\n+ ~Mathlib.Algebra.GroupPower.Order            instructions    -7.2%\n+ ~Mathlib.Algebra.MonoidAlgebra.Degree        instructions    -9.7%\n+ ~Mathlib.Algebra.Order.Group.Defs            instructions    -5.6%\n+ ~Mathlib.Algebra.Order.Group.OrderIso        instructions    -6.0%\n+ ~Mathlib.Algebra.Order.Interval              instructions    -5.0%\n+ ~Mathlib.Algebra.Order.LatticeGroup          instructions    -6.5%\n+ ~Mathlib.Algebra.Order.Monoid.Lemmas         instructions    -6.7%\n+ ~Mathlib.Algebra.Order.Pointwise             instructions    -6.0%\n+ ~Mathlib.Algebra.Order.Positive.Ring         instructions    -8.0%\n+ ~Mathlib.Algebra.Order.Sub.Canonical         instructions    -9.5%\n+ ~Mathlib.Algebra.Order.Sub.Defs              instructions    -6.0%\n```",
              "createdAt": "2023-08-25T16:13:32Z",
              "author": {
                "login": "leanprover-bot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5k8okQ",
              "body": "Given the speedup, I'm happy with this being merged before https://github.com/leanprover/lean4/pull/2267.\r\n\r\nCan you add a docstring to these two classes that:\r\n* Advises the user to avoid the `(· * ·)`-style spellings in favor of `HMul.hMul` (in particular, emphasizing that the `h` variants must be used)\r\n* mentions the fact that this is only necessary while leanprover/lean4#2267 doesn't exist\r\n\r\n@digama0, are you ok with this being merged? If not, would you prefer a custom mathlib elaborator that made `(+)` legal again like it was in Lean 3?",
              "createdAt": "2023-08-25T16:22:52Z",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5k8ry2",
              "body": "@eric-wieser, the doc-strings to `Co*variantClass` now contain this:\r\n\r\n*Note:*  if using this class for an operation like addition or multiplication, please,\r\nuse it in the form `CovariantClass M M HMul.hMul LE.le` and likewise with `HAdd.hAdd, LT.lt...`.\r\nIn particular, the `H`eterogenous is important!\r\nThis avoids eta-expansion of the deprecated spelling `(· * ·)`.\r\nThis is only relevant until [Issue https://github.com/leanprover-community/mathlib4/issues/2267](https://github.com/leanprover/lean4/pull/2267) gets\r\nmerged.",
              "createdAt": "2023-08-25T16:34:22Z",
              "author": {
                "login": "adomani"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5k98Zj",
              "body": "> @digama0, are you ok with this being merged? If not, would you prefer a custom mathlib elaborator that made `(+)` legal again like it was in Lean 3?\r\n\r\nI like the idea of a `(+)` notation for `HAdd.hAdd` and similarly for the few other binops that come up here. I don't want `HAdd.hAdd` to proliferate as it will be hard to find and fix if/when https://github.com/leanprover/lean4/pull/2267 lands, but `(+)` is distinctive and we can decide whether we want to keep it or replace it with `(.+.)`  if the latter gets fixed.",
              "createdAt": "2023-08-25T21:34:25Z",
              "author": {
                "login": "digama0"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5k-IAi",
              "body": "> as it will be hard to find and fix ...\r\n\r\nWill it? I would have thought a string match would cover pretty much every case.",
              "createdAt": "2023-08-25T22:42:28Z",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5k-box",
              "body": "Is the issue specifically with `HAdd.hAdd`, or also with `HMul.hMul`?  I think that the only replacements that I did are\n* `+, *, /` for the operation and\n* `<, ≤` for the relation.\n\nAlso, this would only be for operations mentioned as arguments of a `Co*variantClass` application, so something that should be easily found via a regex.\n\nAnyway, I'm only saying this, since I would like to understand better the implications of the change.",
              "createdAt": "2023-08-26T00:49:54Z",
              "author": {
                "login": "adomani"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5n49FQ",
              "body": "@digama0 @eric-wieser How should we move forward here?",
              "createdAt": "2023-10-02T13:07:44Z",
              "author": {
                "login": "jcommelin"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5n-dLJ",
              "body": "I'm happy with this but would prefer that @digama0 make the final decision",
              "createdAt": "2023-10-03T08:09:17Z",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5n-dVg",
              "body": "I'm happy with this but would prefer that @digama0 make the final decision",
              "createdAt": "2023-10-03T08:09:43Z",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5oF7ho",
              "body": "> > as it will be hard to find and fix ...\r\n> \r\n> Will it? I would have thought a string match would cover pretty much every case.\r\n\r\nA string match will also hit uses of the identifier that are part of applications, as well as uses of the identifier as an ident which is not an expression context. Some of these might be replaceable by the expression, but not all of them, and my worry is that we are mixing these together now and will have difficulty teasing them apart later.",
              "createdAt": "2023-10-04T08:27:02Z",
              "author": {
                "login": "digama0"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5oLQfk",
              "body": "@digama0, is your suggestion to add\r\n```lean\r\nnotation \"(+)\" => HAdd.hAdd\r\nnotation \"(*)\" => HMul.hMul\r\n```\r\nand then use it consistently in the `Co*variant` replacements?  If this is the case, it will be very easy to adjust the code for the automatic conversion.",
              "createdAt": "2023-10-04T23:23:48Z",
              "author": {
                "login": "adomani"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5oMQ4M",
              "body": "Yes, except you should use `\"(\" \"+\" \")\"` instead to avoid making `(+)` a token.",
              "createdAt": "2023-10-05T05:15:24Z",
              "author": {
                "login": "digama0"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5oMifK",
              "body": "@digama0, I made the replacement.  This should address all `(*)` and `(+)`.\r\n\r\nThis PR changes also `(· / ·)` with `HDiv.hDiv` in a single file:\r\n```\r\nMathlib/Order/Filter/Pointwise.lean:533:instance covariant_div : CovariantClass (Filter α) (Filter α) HDiv.hDiv LE.le :=\r\nMathlib/Order/Filter/Pointwise.lean:539:instance covariant_swap_div : CovariantClass (Filter α) (Filter α) (swap HDiv.hDiv) LE.le :=\r\n```\r\n\r\nShould I introduce `(/)` notation for this one as well, or do you prefer to leave it as is?\r\n\r\n[I did not introduce the notations `(<)` and `(≤)` either, and used `LT.lt` and `LE.le`: let me know if this is also something that you want to change!]",
              "createdAt": "2023-10-05T05:56:20Z",
              "author": {
                "login": "adomani"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5oM74U",
              "body": "The new notation means that now this happens:\r\n```lean\r\n#check 2 * Real.pi  -- (*) 2 Real.pi : ℝ\r\n```\r\n(There were two failing `#guard_msgs` in `test/{ Recall.lean + propose.lean }` that highlighted this.)",
              "createdAt": "2023-10-05T07:12:12Z",
              "author": {
                "login": "adomani"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5oNEhD",
              "body": "With my very limited understanding of how these things work, I think that the new notation overrides the usual infix one for addition and multiplication.  This affects the pretty-printer and what you see in the infoview.  It would be great if there were a way to tell the pretty-printer to only use the new notation, if the new notation has literally been typed.\r\n\r\nIs this possible?",
              "createdAt": "2023-10-05T07:31:30Z",
              "author": {
                "login": "adomani"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5pu_1g",
              "body": "Note: I have pushed an update to the lean toolchain because this PR was on a [buggy version](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Potential.20data.20loss.20from.20.60lake.20clean.60.20with.204.2E2.2E0-rc2.2F3/near/397875701) of the toolchain. **WARNING**: checking out old commits of this PR using v4.2.0-rc2 or v4.2.0-rc3 can cause `lake clean` to delete your mathlib folder! If you need to do so, make sure to delete `lakefile.olean` manually before running any `lake` commands.",
              "createdAt": "2023-10-21T21:33:59Z",
              "author": {
                "login": "digama0"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "b19956dc37a91d2aea4ca6b13501a360a83b076e",
                "additions": 640,
                "deletions": 640,
                "committedDate": "2023-08-25T08:34:45Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "02b9f275c45114d5eead66fe5f5608a18fe8f231",
                "additions": 6,
                "deletions": 6,
                "committedDate": "2023-08-25T14:13:18Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "2bfe58fca744956af464c5c7ef8ab4e2b948b47f",
                "additions": 3,
                "deletions": 3,
                "committedDate": "2023-08-25T14:17:38Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "ac132279e052dab7d53bf2b153b810dd210983eb",
                "additions": 9,
                "deletions": 10,
                "committedDate": "2023-08-25T14:40:44Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "5013a3d66e3fb7e6131cd66d45cd5f56aefb8fec",
                "additions": 16,
                "deletions": 16,
                "committedDate": "2023-08-25T15:13:04Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "4f9c26d9cf57283f75bc6bcd5fade90a88122db1",
                "additions": 5,
                "deletions": 5,
                "committedDate": "2023-08-25T15:16:22Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "32047f5f9a736420c81a9948be62a04049fd06ed",
                "additions": 2,
                "deletions": 2,
                "committedDate": "2023-08-25T15:22:10Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "78fcd72b415bbf88953fba76ec97703a964d328c",
                "additions": 16,
                "deletions": 0,
                "committedDate": "2023-08-25T16:32:51Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "f7a75bcf0b460f1ebb99acb21dbcd551d9ff75d2",
                "additions": 408,
                "deletions": 332,
                "committedDate": "2023-08-25T17:50:21Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "03bc7760e8e58d7a38f606dd12fce2afd4b9e4ca",
                "additions": 3,
                "deletions": 3,
                "committedDate": "2023-08-25T18:42:32Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "9a6064eba96f7f2fbc06d2205505e009de808da1",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-08-27T17:12:23Z",
                "author": {
                  "name": "damiano",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "0fc1862c9cfbfd6b9da3e0e3bfd237cec8606cbb",
                "additions": 23909,
                "deletions": 9602,
                "committedDate": "2023-09-12T13:45:24Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "75f1d9254bcec7cb80feabc76e9654bdd5834956",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-09-12T13:45:42Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "65304abd355ee0bca866afb4e09c1080677ae8fa",
                "additions": 25786,
                "deletions": 11955,
                "committedDate": "2023-10-04T06:22:52Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "3c17482e0bd4411ab2344ced8ac2fb730460373c",
                "additions": 14,
                "deletions": 14,
                "committedDate": "2023-10-04T06:24:59Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "dc5b5223debe60a945bbf53b978cd8c6426ed541",
                "additions": 624,
                "deletions": 621,
                "committedDate": "2023-10-05T05:48:52Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "0a8c898fe00698bc2021ca6bfec16978e66819f8",
                "additions": 4,
                "deletions": 4,
                "committedDate": "2023-10-05T05:53:24Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "243aa6bf84d5c630d1e5b66d565258c8488b7266",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-10-05T07:10:31Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "9b174e9daa2be7d5986ae966a126ebbe475fd0f5",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-10-05T07:15:18Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "b5f454b9ec998199d17491a4d07092a5dbf03616",
                "additions": 2,
                "deletions": 2,
                "committedDate": "2023-10-05T07:38:20Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "7199bcafc03bf8d692573c07862013dd71b844b7",
                "additions": 1182,
                "deletions": 493,
                "committedDate": "2023-10-05T08:41:15Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEH0h-Lg",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6518849620/job/17704713774"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEH8WS6Q",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6522875281/job/17712911081"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEH0h91Q",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6518849619/job/17704713685"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEH8WS2Q",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6522875282/job/17712911065"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEH0h95w",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6518849620/job/17704713703"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEH8WTYg",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6522875281/job/17712911202"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "c6179ddc74cd3b5f71f4d735fa622c5d1390d4f5",
                "additions": 11340,
                "deletions": 4500,
                "committedDate": "2023-10-16T22:31:33Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "f6a5af265dd9fc94a2f42a7e48f821c540c4035a",
                "additions": 12,
                "deletions": 12,
                "committedDate": "2023-10-16T22:37:07Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEIor3Hg",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6540099412/job/17759401758"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEIor2bQ",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6540099415/job/17759401581"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEIokqJQ",
                        "name": "Add annotations",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6540060511/job/17759283749"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEIokmRQ",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6540059942/job/17759282757"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEIokndQ",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6540059944/job/17759283061"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEIokqyQ",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6540060504/job/17759283913"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEIor2Sg",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6540099412/job/17759401546"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEIokndA",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6540059942/job/17759283060"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEIokogw",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6540059944/job/17759283331"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEIokqPA",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6540060504/job/17759283772"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEIokm1w",
                        "name": "Check all files imported (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6540059942/job/17759282903"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEIokmJw",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6540059944/job/17759282727"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEIoko8Q",
                        "name": "check workflows (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6540059942/job/17759283441"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEIokm0w",
                        "name": "check workflows",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6540059944/job/17759282899"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEIokoHg",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6540059942/job/17759283230"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEIokn6g",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6540059944/job/17759283178"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEIokprw",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6540059942/job/17759283631"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEIqTqbg",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6540059944/job/17761102446"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "bf8a5622077dc2c5f92b38677191765190f05e92",
                "additions": 1866,
                "deletions": 1006,
                "committedDate": "2023-10-17T16:49:40Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "85961f1657f7f5183a80c9fd40c95bc4f71e7eed",
                "additions": 15,
                "deletions": 15,
                "committedDate": "2023-10-17T16:52:06Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEJFM1Yg",
                        "name": "Add annotations",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6550360249/job/17789302114"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEJFMvBw",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6550359718/job/17789300487"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEJFMvVw",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6550359720/job/17789300567"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEJFM0pQ",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6550360230/job/17789301925"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEJFMxVA",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6550359718/job/17789301076"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEJFMwow",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6550359720/job/17789300899"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEJFM14A",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6550360230/job/17789302240"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEJFMyWw",
                        "name": "Check all files imported (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6550359718/job/17789301339"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEJFMyiw",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6550359720/job/17789301387"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEJFMwCw",
                        "name": "check workflows (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6550359718/job/17789300747"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEJFMzhA",
                        "name": "check workflows",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6550359720/job/17789301636"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEJFMzSw",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6550359718/job/17789301579"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEJFMxnw",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6550359720/job/17789301151"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEJFM0Ng",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6550359718/job/17789301814"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEJHysrw",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6550359720/job/17792019631"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "19b236df688780f3185fba44cb14056ca5d3431b",
                "additions": 13,
                "deletions": 7,
                "committedDate": "2023-10-17T19:16:58Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEJJzYrg",
                        "name": "Add annotations",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6551917868/job/17794128046"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEJJzUrg",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6551917409/job/17794127022"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEJJzT4w",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6551917413/job/17794126819"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEJJzZlQ",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6551917874/job/17794128277"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEJJzWfA",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6551917409/job/17794127484"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEJJzVyg",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6551917413/job/17794127306"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEJJzYww",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6551917874/job/17794128067"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEJJzTdw",
                        "name": "Check all files imported (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6551917409/job/17794126711"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEJJzU3g",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6551917413/job/17794127070"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEJJzVhw",
                        "name": "check workflows (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6551917409/job/17794127239"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEJJzXRw",
                        "name": "check workflows",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6551917413/job/17794127687"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEJJzXVQ",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6551917409/job/17794127701"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEJJzWiQ",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6551917413/job/17794127497"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEJJzYPA",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6551917409/job/17794127932"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEJMBSCA",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6551917413/job/17796452872"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "49bfc4e589c8f22df4a30da7a69213d673d2fd3f",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-10-21T21:33:57Z",
                "author": {
                  "name": "Mario Carneiro",
                  "email": "di.gama@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAELKmCyA",
                        "name": "Add annotations",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6599789841/job/17929175752"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAELKmAxw",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6599789637/job/17929175239"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAELKmBEw",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6599789638/job/17929175315"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAELKmCyQ",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6599789840/job/17929175753"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAELKmBDw",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6599789637/job/17929175311"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAELKmA2A",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6599789638/job/17929175256"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAELKmDOw",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6599789840/job/17929175867"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAELKmBVw",
                        "name": "Check all files imported (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6599789637/job/17929175383"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAELKmByg",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6599789638/job/17929175498"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAELKmBzg",
                        "name": "check workflows (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6599789637/job/17929175502"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAELKmCbQ",
                        "name": "check workflows",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6599789638/job/17929175661"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAELKmCZA",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6599789637/job/17929175652"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAELKmBUw",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6599789638/job/17929175379"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAELKmCxQ",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6599789637/job/17929175749"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAELMiQLA",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6599789638/job/17931210796"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAErF9hjw",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=6777&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "createdAt": "2023-08-25T08:40:14Z",
        "deletions": 678,
        "files": {
          "nodes": [
            {
              "path": "Counterexamples/ZeroDivisorsInAddMonoidAlgebras.lean",
              "additions": 4,
              "deletions": 4
            },
            {
              "path": "Mathlib/Algebra/BigOperators/Basic.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/Algebra/Bounds.lean",
              "additions": 6,
              "deletions": 6
            },
            {
              "path": "Mathlib/Algebra/CovariantAndContravariant.lean",
              "additions": 57,
              "deletions": 38
            },
            {
              "path": "Mathlib/Algebra/DirectSum/Internal.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Algebra/Group/UniqueProds.lean",
              "additions": 3,
              "deletions": 3
            },
            {
              "path": "Mathlib/Algebra/GroupPower/Order.lean",
              "additions": 20,
              "deletions": 20
            },
            {
              "path": "Mathlib/Algebra/MonoidAlgebra/Degree.lean",
              "additions": 16,
              "deletions": 11
            },
            {
              "path": "Mathlib/Algebra/Order/Archimedean.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Algebra/Order/Group/Abs.lean",
              "additions": 4,
              "deletions": 4
            },
            {
              "path": "Mathlib/Algebra/Order/Group/Defs.lean",
              "additions": 34,
              "deletions": 34
            },
            {
              "path": "Mathlib/Algebra/Order/Group/DenselyOrdered.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Algebra/Order/Group/MinMax.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Algebra/Order/Group/OrderIso.lean",
              "additions": 3,
              "deletions": 3
            },
            {
              "path": "Mathlib/Algebra/Order/Hom/Monoid.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Algebra/Order/Interval.lean",
              "additions": 8,
              "deletions": 8
            },
            {
              "path": "Mathlib/Algebra/Order/Kleene.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/Algebra/Order/LatticeGroup.lean",
              "additions": 36,
              "deletions": 36
            },
            {
              "path": "Mathlib/Algebra/Order/Module.lean",
              "additions": 6,
              "deletions": 6
            },
            {
              "path": "Mathlib/Algebra/Order/Monoid/Basic.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/Algebra/Order/Monoid/Cancel/Defs.lean",
              "additions": 3,
              "deletions": 3
            },
            {
              "path": "Mathlib/Algebra/Order/Monoid/Canonical/Defs.lean",
              "additions": 3,
              "deletions": 3
            },
            {
              "path": "Mathlib/Algebra/Order/Monoid/Defs.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/Algebra/Order/Monoid/Lemmas.lean",
              "additions": 181,
              "deletions": 181
            },
            {
              "path": "Mathlib/Algebra/Order/Monoid/MinMax.lean",
              "additions": 17,
              "deletions": 17
            },
            {
              "path": "Mathlib/Algebra/Order/Monoid/NatCast.lean",
              "additions": 9,
              "deletions": 9
            },
            {
              "path": "Mathlib/Algebra/Order/Monoid/OrderDual.lean",
              "additions": 16,
              "deletions": 16
            },
            {
              "path": "Mathlib/Algebra/Order/Monoid/Prod.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Algebra/Order/Monoid/WithTop.lean",
              "additions": 48,
              "deletions": 48
            },
            {
              "path": "Mathlib/Algebra/Order/Monoid/WithZero/Basic.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/Algebra/Order/Monoid/WithZero/Defs.lean",
              "additions": 4,
              "deletions": 4
            },
            {
              "path": "Mathlib/Algebra/Order/Nonneg/Ring.lean",
              "additions": 6,
              "deletions": 6
            },
            {
              "path": "Mathlib/Algebra/Order/Pointwise.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/Algebra/Order/Positive/Ring.lean",
              "additions": 17,
              "deletions": 17
            },
            {
              "path": "Mathlib/Algebra/Order/Ring/Canonical.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/Algebra/Order/Ring/Defs.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Algebra/Order/Ring/Lemmas.lean",
              "additions": 16,
              "deletions": 16
            },
            {
              "path": "Mathlib/Algebra/Order/Sub/Basic.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/Algebra/Order/Sub/Canonical.lean",
              "additions": 8,
              "deletions": 8
            },
            {
              "path": "Mathlib/Algebra/Order/Sub/Defs.lean",
              "additions": 6,
              "deletions": 5
            },
            {
              "path": "Mathlib/Algebra/Order/WithZero.lean",
              "additions": 3,
              "deletions": 3
            },
            {
              "path": "Mathlib/Algebra/Parity.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Algebra/Star/Order.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/Algebra/Tropical/Basic.lean",
              "additions": 13,
              "deletions": 13
            },
            {
              "path": "Mathlib/Analysis/Normed/Order/Lattice.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Data/DFinsupp/Lex.lean",
              "additions": 6,
              "deletions": 6
            },
            {
              "path": "Mathlib/Data/DFinsupp/Order.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/Data/Finset/Fold.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Data/Finsupp/Lex.lean",
              "additions": 6,
              "deletions": 6
            },
            {
              "path": "Mathlib/Data/Finsupp/Order.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/Data/List/BigOperators/Basic.lean",
              "additions": 21,
              "deletions": 21
            },
            {
              "path": "Mathlib/Data/List/BigOperators/Lemmas.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Data/Multiset/Basic.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/Data/Nat/Cast/Order.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/Data/PNat/Basic.lean",
              "additions": 4,
              "deletions": 4
            },
            {
              "path": "Mathlib/Data/Real/ENNReal.lean",
              "additions": 5,
              "deletions": 5
            },
            {
              "path": "Mathlib/Data/Real/NNReal.lean",
              "additions": 3,
              "deletions": 3
            },
            {
              "path": "Mathlib/Data/Set/Semiring.lean",
              "additions": 3,
              "deletions": 3
            },
            {
              "path": "Mathlib/Data/Sign.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/MeasureTheory/Function/LpOrder.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/MeasureTheory/Measure/MeasureSpace.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/MeasureTheory/Measure/VectorMeasure.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/Order/ConditionallyCompleteLattice/Group.lean",
              "additions": 8,
              "deletions": 8
            },
            {
              "path": "Mathlib/Order/Filter/Basic.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/Order/Filter/Pointwise.lean",
              "additions": 6,
              "deletions": 6
            },
            {
              "path": "Mathlib/Probability/Martingale/Basic.lean",
              "additions": 10,
              "deletions": 10
            },
            {
              "path": "Mathlib/Probability/Process/Stopping.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/RingTheory/GradedAlgebra/Basic.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/SetTheory/Cardinal/Basic.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/SetTheory/Game/Basic.lean",
              "additions": 4,
              "deletions": 4
            },
            {
              "path": "Mathlib/SetTheory/Game/PGame.lean",
              "additions": 4,
              "deletions": 4
            },
            {
              "path": "Mathlib/SetTheory/Ordinal/Arithmetic.lean",
              "additions": 6,
              "deletions": 6
            },
            {
              "path": "Mathlib/SetTheory/Ordinal/Basic.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/SetTheory/Ordinal/NaturalOps.lean",
              "additions": 3,
              "deletions": 3
            },
            {
              "path": "Mathlib/Tactic/GCongr/Core.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/Tactic/Positivity/Basic.lean",
              "additions": 5,
              "deletions": 5
            },
            {
              "path": "Mathlib/Topology/ContinuousFunction/Algebra.lean",
              "additions": 4,
              "deletions": 4
            },
            {
              "path": "lean-toolchain",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "test/Recall.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "test/propose.lean",
              "additions": 1,
              "deletions": 1
            }
          ]
        },
        "headRefName": "adomani/unetaContravariant",
        "headRefOid": "49bfc4e589c8f22df4a30da7a69213d673d2fd3f",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5Yxahe",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
              "color": "f99094",
              "name": "merge-conflict"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5kB7V2",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "sgouezel"
              },
              "submittedAt": "2023-10-14T16:48:55Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5fMsX1",
              "body": "LGTM, thanks!",
              "state": "APPROVED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2023-08-27T16:46:01Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "DIRTY",
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 6777,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": [
                {
                  "login": "alreadydone"
                }
              ]
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": "APPROVED",
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5fMsX1",
              "body": "LGTM, thanks!",
              "state": "APPROVED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2023-08-27T16:46:01Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5kB7V2",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "sgouezel"
              },
              "submittedAt": "2023-10-14T16:48:55Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5kDzOB",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "adomani"
              },
              "submittedAt": "2023-10-15T08:06:32Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5kMwOc",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "adomani"
              },
              "submittedAt": "2023-10-16T22:43:07Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5N4o0H",
                    "body": "maybe\r\n```suggestion\r\nIn particular, the `H`eterogeneity is important!\r\n```",
                    "createdAt": "2023-08-27T16:44:43Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5N4o1q",
                    "body": "```suggestion\r\nIn particular, the `H`eterogeneity is important!\r\n```",
                    "createdAt": "2023-08-27T16:45:17Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5RCAUy",
                    "body": "Is there a reason why this one is not `(*)`?",
                    "createdAt": "2023-10-14T16:48:55Z",
                    "author": {
                      "login": "sgouezel"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5RDQUD",
                    "body": "I think that this is an oversight.  It might be caused by the fact that the regex that I used assumed that it should match `(. * .)` and `(. < .)`, rather than one expanded and one not.\n\nThis was a reasonable assumption before doing the replacement, but might have gotten confused after some partial fix of a merge conflict.\n\nI'll fix this and the regex once I'm back at a computer.\n\nHowever, the bigger issue here is that introducing the `(*)` syntax is very nice, but gets used *everywhere* in place of the infix notation.",
                    "createdAt": "2023-10-15T08:06:32Z",
                    "author": {
                      "login": "adomani"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5RJEsT",
                    "body": "I replaced the one you highlighted and a couple more that had creeped in due to the hybrid usage `(· * ·) LT.lt`/`(· * ·) LE.le` and analogous with `+`.  I could not find cases with the \"dual\" `HMul.hMul (· < ·)` and variations with `Add/≤`.",
                    "createdAt": "2023-10-16T22:43:07Z",
                    "author": {
                      "login": "adomani"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjI5NDY3NzQ1",
              "login": "adomani"
            },
            {
              "id": "MDQ6VXNlcjQyNTI2MA==",
              "login": "eric-wieser"
            },
            {
              "id": "MDQ6VXNlcjg1NjY4Mzk0",
              "login": "leanprover-bot"
            },
            {
              "id": "MDQ6VXNlcjM3OTg0ODUx",
              "login": "ericrbg"
            },
            {
              "id": "MDQ6VXNlcjMwNjQxNDU=",
              "login": "alreadydone"
            },
            {
              "id": "MDQ6VXNlcjg2ODU4OA==",
              "login": "digama0"
            },
            {
              "id": "MDQ6VXNlcjU2MzY3MDU=",
              "login": "jcommelin"
            },
            {
              "id": "MDQ6VXNlcjEwODE4NDM0",
              "login": "sgouezel"
            },
            {
              "id": "MDQ6VXNlcjQ3Nzk1Ng==",
              "login": "kim-em"
            },
            {
              "id": "U_kgDOB75MNQ",
              "login": "leanprover-community-mathlib4-bot"
            }
          ]
        },
        "state": "OPEN",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAELKmCyA",
                "name": "Add annotations",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6599789841/job/17929175752"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAELKmAxw",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6599789637/job/17929175239"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAELKmBEw",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6599789638/job/17929175315"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAELKmCyQ",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6599789840/job/17929175753"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAELKmBDw",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6599789637/job/17929175311"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAELKmA2A",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6599789638/job/17929175256"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAELKmDOw",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6599789840/job/17929175867"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAELKmBVw",
                "name": "Check all files imported (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6599789637/job/17929175383"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAELKmByg",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6599789638/job/17929175498"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAELKmBzg",
                "name": "check workflows (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6599789637/job/17929175502"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAELKmCbQ",
                "name": "check workflows",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6599789638/job/17929175661"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAELKmCZA",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6599789637/job/17929175652"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAELKmBUw",
                "name": "Build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6599789638/job/17929175379"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAELKmCxQ",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6599789637/job/17929175749"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAELMiQLA",
                "name": "Post-CI job",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6599789638/job/17931210796"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAErF9hjw",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=6777&login=leanprover-community&repository=mathlib4"
              }
            ]
          }
        },
        "title": "chore(Co*variantClass): replace eta-expanded (· * ·), (· + ·), (· ≤ ·), (· < ·)",
        "updatedAt": "2024-07-31T08:14:02Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/6777",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5OH0nW",
              "createdAt": "2023-08-25T08:41:10Z",
              "source": {
                "id": "I_kwDOFcwZ1c5uos3g",
                "title": "Make use of loopy instances for implications between Co(ntra)variantClasses",
                "url": "https://github.com/leanprover-community/mathlib4/issues/6646"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5vQlJIzwAAAAJfdwGm",
              "createdAt": "2023-08-25T10:31:31Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5k69xX",
              "createdAt": "2023-08-25T10:58:35Z",
              "body": "!bench",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5k7NIX",
              "createdAt": "2023-08-25T11:56:24Z",
              "body": "Here are the [benchmark results](http://speed.lean-fro.org/mathlib4/run-detail/f516ff94-f413-425c-83c0-a1d7fea170b3) for commit b19956dc37a91d2aea4ca6b13501a360a83b076e.\nThere were [significant changes](http://speed.lean-fro.org/mathlib4/compare/4a7c8d4d-672e-4842-9679-572ce3731a33/to/f516ff94-f413-425c-83c0-a1d7fea170b3) against commit 7f2ee0917b6e7b4d2a2fbd505eb56448b0cce911:\n```diff\n  Benchmark                                    Metric               Change\n  ========================================================================\n- build                                        native compilation     9.7%\n+ ~Mathlib.Algebra.Bounds                      instructions         -15.0%\n+ ~Mathlib.Algebra.CovariantAndContravariant   instructions          -6.0%\n+ ~Mathlib.Algebra.GroupPower.Order            instructions          -7.0%\n+ ~Mathlib.Algebra.MonoidAlgebra.Degree        instructions          -9.7%\n+ ~Mathlib.Algebra.Order.Group.OrderIso        instructions          -6.3%\n+ ~Mathlib.Algebra.Order.LatticeGroup          instructions          -6.4%\n+ ~Mathlib.Algebra.Order.Monoid.Lemmas         instructions          -6.7%\n+ ~Mathlib.Algebra.Order.Pointwise             instructions          -5.6%\n+ ~Mathlib.Algebra.Order.Positive.Ring         instructions          -8.0%\n+ ~Mathlib.Algebra.Order.Sub.Canonical         instructions          -9.5%\n+ ~Mathlib.Algebra.Order.Sub.Defs              instructions          -6.0%\n```",
              "author": {
                "login": "leanprover-bot"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5k7UZt",
              "createdAt": "2023-08-25T12:21:25Z",
              "body": "> There are some left-over occurrences of the old pattern in\r\n\r\nDo you intend to address these too, or in a follow-up PR?",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5k7U_J",
              "createdAt": "2023-08-25T12:23:22Z",
              "body": "This is ugly; why should we prefer this? Should we not instead wait for Mario's fix?",
              "author": {
                "login": "ericrbg"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5k7hPA",
              "createdAt": "2023-08-25T13:01:43Z",
              "body": "As I said, it's prettier in the docs even though uglier in the source. So that's another thing to fix ...",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5k78cK",
              "createdAt": "2023-08-25T14:17:43Z",
              "body": "On the other hand, (· * ·), (· + ·), (· ≤ ·), (· < ·) look too much like faces and that could be a distraction to new Lean 4 users before they get used to it...",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5vQlJIzwAAAAJfmIy0",
              "createdAt": "2023-08-25T14:33:41Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5vQlJIzwAAAAJfmIy4",
              "createdAt": "2023-08-25T14:33:41Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5k8INY",
              "createdAt": "2023-08-25T14:45:15Z",
              "body": "@eric-wieser, I have updated the PR: I think that this addresses all the cases of `Co*variantClass X X ...`.\r\n\r\nThe cases where the two types `X` are different actually benefit from eta-reduction, so I left them untouched.\r\n\r\nAlso, there were a couple of instance of `(swap) HDiv` in `Order/Filter/Pointwise`.",
              "author": {
                "login": "adomani"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5k8I9c",
              "createdAt": "2023-08-25T14:47:25Z",
              "body": "@ericrbg, probably Mario's fix would be a more robust solution, but this one straightforward, available already and, honestly, I am not so convinced that it is uglier than the weird sequence of symbols that you get with the other notation. :shrug: \r\n\r\nAnyway, I will also not lose any sleep if this PR does not get merged...",
              "author": {
                "login": "adomani"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5vQlJIzwAAAAJfmsi0",
              "createdAt": "2023-08-25T14:47:54Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5vQlJIzwAAAAJfmsi_",
              "createdAt": "2023-08-25T14:47:54Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5k8KY3",
              "createdAt": "2023-08-25T14:51:30Z",
              "body": "> The cases where the two types `X` are different actually benefit from eta-reduction, so I left them untouched.\r\n\r\nWhich cases are these? Benefit how?",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5k8LO5",
              "createdAt": "2023-08-25T14:53:58Z",
              "body": "When I changed some of those, the result did not seem to type-check.  Let me find a good example.",
              "author": {
                "login": "adomani"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5k8MhA",
              "createdAt": "2023-08-25T14:57:51Z",
              "body": "Here is an example:\r\n```lean\r\n-- Mathlib/Algebra/Order/Ring/Lemmas.lean\r\nabbrev PosMulMono : Prop :=\r\n  CovariantClass α≥0 α HMul.hMul (· ≤ ·)  -- failed to synthesize instance  HMul { x // 0 ≤ x } α α\r\n#align pos_mul_mono PosMulMono\r\n```\r\nIt seems that the coercion from the subtype is not inserted, without the eta-expansion?\r\nThe original has\r\n```lean\r\nCovariantClass α≥0 α (fun x y => x * y) (· ≤ ·)\r\n```\r\nand I checked that\r\n```lean\r\nCovariantClass α≥0 α (· * ·) (· ≤ ·)\r\n```\r\nworks, but `HMul.hMul` gives the error.",
              "author": {
                "login": "adomani"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5k8OUc",
              "createdAt": "2023-08-25T15:03:09Z",
              "body": "Does replacing the `le` but not the `mul` work?",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5k8QAy",
              "createdAt": "2023-08-25T15:07:57Z",
              "body": "It ought to, since that is an inequality on the \"ambient\" type, let me confirm.\r\nEDIT: yes, it works.  Updating...",
              "author": {
                "login": "adomani"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5k8U6S",
              "createdAt": "2023-08-25T15:22:52Z",
              "body": "With the new version, this is what is left:\r\n```\r\n$ grep \"Co[ntra]*variantClass .*·\" $( git ls-files '*.lean' )\r\nMathlib/Data/List/BigOperators/Basic.lean:    [CovariantClass M M HMul.hMul LE.le] {l₁ l₂ : List M} (h : Forall₂ (· ≤ ·) l₁ l₂) :\r\n```\r\nthat is, a better regex would show nothing!",
              "author": {
                "login": "adomani"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5k8Z3Q",
              "createdAt": "2023-08-25T15:38:24Z",
              "body": "!bench",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5k8l84",
              "createdAt": "2023-08-25T16:13:32Z",
              "body": "Here are the [benchmark results](http://speed.lean-fro.org/mathlib4/run-detail/2c11f39b-f709-49ad-8397-074e4940edd8) for commit 32047f5f9a736420c81a9948be62a04049fd06ed.\nThere were [significant changes](http://speed.lean-fro.org/mathlib4/compare/4a7c8d4d-672e-4842-9679-572ce3731a33/to/2c11f39b-f709-49ad-8397-074e4940edd8) against commit 7f2ee0917b6e7b4d2a2fbd505eb56448b0cce911:\n```diff\n  Benchmark                                    Metric         Change\n  ==================================================================\n+ ~Mathlib.Algebra.Bounds                      instructions   -15.1%\n+ ~Mathlib.Algebra.CovariantAndContravariant   instructions    -6.6%\n+ ~Mathlib.Algebra.GroupPower.Order            instructions    -7.2%\n+ ~Mathlib.Algebra.MonoidAlgebra.Degree        instructions    -9.7%\n+ ~Mathlib.Algebra.Order.Group.Defs            instructions    -5.6%\n+ ~Mathlib.Algebra.Order.Group.OrderIso        instructions    -6.0%\n+ ~Mathlib.Algebra.Order.Interval              instructions    -5.0%\n+ ~Mathlib.Algebra.Order.LatticeGroup          instructions    -6.5%\n+ ~Mathlib.Algebra.Order.Monoid.Lemmas         instructions    -6.7%\n+ ~Mathlib.Algebra.Order.Pointwise             instructions    -6.0%\n+ ~Mathlib.Algebra.Order.Positive.Ring         instructions    -8.0%\n+ ~Mathlib.Algebra.Order.Sub.Canonical         instructions    -9.5%\n+ ~Mathlib.Algebra.Order.Sub.Defs              instructions    -6.0%\n```",
              "author": {
                "login": "leanprover-bot"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5k8okQ",
              "createdAt": "2023-08-25T16:22:52Z",
              "body": "Given the speedup, I'm happy with this being merged before https://github.com/leanprover/lean4/pull/2267.\r\n\r\nCan you add a docstring to these two classes that:\r\n* Advises the user to avoid the `(· * ·)`-style spellings in favor of `HMul.hMul` (in particular, emphasizing that the `h` variants must be used)\r\n* mentions the fact that this is only necessary while leanprover/lean4#2267 doesn't exist\r\n\r\n@digama0, are you ok with this being merged? If not, would you prefer a custom mathlib elaborator that made `(+)` legal again like it was in Lean 3?",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5k8ry2",
              "createdAt": "2023-08-25T16:34:22Z",
              "body": "@eric-wieser, the doc-strings to `Co*variantClass` now contain this:\r\n\r\n*Note:*  if using this class for an operation like addition or multiplication, please,\r\nuse it in the form `CovariantClass M M HMul.hMul LE.le` and likewise with `HAdd.hAdd, LT.lt...`.\r\nIn particular, the `H`eterogenous is important!\r\nThis avoids eta-expansion of the deprecated spelling `(· * ·)`.\r\nThis is only relevant until [Issue https://github.com/leanprover-community/mathlib4/issues/2267](https://github.com/leanprover/lean4/pull/2267) gets\r\nmerged.",
              "author": {
                "login": "adomani"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5vQlJIzwAAAAJfs3sz",
              "createdAt": "2023-08-25T17:38:14Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5vQlJIzwAAAAJfux1j",
              "createdAt": "2023-08-25T18:36:16Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5k98Zj",
              "createdAt": "2023-08-25T21:34:25Z",
              "body": "> @digama0, are you ok with this being merged? If not, would you prefer a custom mathlib elaborator that made `(+)` legal again like it was in Lean 3?\r\n\r\nI like the idea of a `(+)` notation for `HAdd.hAdd` and similarly for the few other binops that come up here. I don't want `HAdd.hAdd` to proliferate as it will be hard to find and fix if/when https://github.com/leanprover/lean4/pull/2267 lands, but `(+)` is distinctive and we can decide whether we want to keep it or replace it with `(.+.)`  if the latter gets fixed.",
              "author": {
                "login": "digama0"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5k-IAi",
              "createdAt": "2023-08-25T22:42:28Z",
              "body": "> as it will be hard to find and fix ...\r\n\r\nWill it? I would have thought a string match would cover pretty much every case.",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5k-box",
              "createdAt": "2023-08-26T00:49:54Z",
              "body": "Is the issue specifically with `HAdd.hAdd`, or also with `HMul.hMul`?  I think that the only replacements that I did are\n* `+, *, /` for the operation and\n* `<, ≤` for the relation.\n\nAlso, this would only be for operations mentioned as arguments of a `Co*variantClass` application, so something that should be easily found via a regex.\n\nAnyway, I'm only saying this, since I would like to understand better the implications of the change.",
              "author": {
                "login": "adomani"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5fMsX1",
              "createdAt": "2023-08-27T16:44:43Z",
              "body": "LGTM, thanks!",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5vQlJIzwAAAAJjnWag",
              "createdAt": "2023-09-01T21:53:03Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5vQlJIzwAAAAJovcP1",
              "createdAt": "2023-09-12T13:48:56Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5OZOzL",
              "createdAt": "2023-09-13T08:21:22Z",
              "source": {
                "id": "PR_kwDOFcwZ1c5XHXcp",
                "title": "[Merged by Bors] - feat: Extending convex functions",
                "url": "https://github.com/leanprover-community/mathlib4/pull/6339"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5vQlJIzwAAAAJqCzyN",
              "createdAt": "2023-09-14T08:27:18Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "BaseRefChangedEvent"
            },
            {
              "__typename": "BaseRefChangedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5n49FQ",
              "createdAt": "2023-10-02T13:07:44Z",
              "body": "@digama0 @eric-wieser How should we move forward here?",
              "author": {
                "login": "jcommelin"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5n-dLJ",
              "createdAt": "2023-10-03T08:09:17Z",
              "body": "I'm happy with this but would prefer that @digama0 make the final decision",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5n-dVg",
              "createdAt": "2023-10-03T08:09:43Z",
              "body": "I'm happy with this but would prefer that @digama0 make the final decision",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5vQlJIzwAAAAJ0oQPo",
              "createdAt": "2023-10-04T06:34:47Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5oF7ho",
              "createdAt": "2023-10-04T08:27:02Z",
              "body": "> > as it will be hard to find and fix ...\r\n> \r\n> Will it? I would have thought a string match would cover pretty much every case.\r\n\r\nA string match will also hit uses of the identifier that are part of applications, as well as uses of the identifier as an ident which is not an expression context. Some of these might be replaceable by the expression, but not all of them, and my worry is that we are mixing these together now and will have difficulty teasing them apart later.",
              "author": {
                "login": "digama0"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5oLQfk",
              "createdAt": "2023-10-04T23:23:48Z",
              "body": "@digama0, is your suggestion to add\r\n```lean\r\nnotation \"(+)\" => HAdd.hAdd\r\nnotation \"(*)\" => HMul.hMul\r\n```\r\nand then use it consistently in the `Co*variant` replacements?  If this is the case, it will be very easy to adjust the code for the automatic conversion.",
              "author": {
                "login": "adomani"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5oMQ4M",
              "createdAt": "2023-10-05T05:15:24Z",
              "body": "Yes, except you should use `\"(\" \"+\" \")\"` instead to avoid making `(+)` a token.",
              "author": {
                "login": "digama0"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5oMifK",
              "createdAt": "2023-10-05T05:56:20Z",
              "body": "@digama0, I made the replacement.  This should address all `(*)` and `(+)`.\r\n\r\nThis PR changes also `(· / ·)` with `HDiv.hDiv` in a single file:\r\n```\r\nMathlib/Order/Filter/Pointwise.lean:533:instance covariant_div : CovariantClass (Filter α) (Filter α) HDiv.hDiv LE.le :=\r\nMathlib/Order/Filter/Pointwise.lean:539:instance covariant_swap_div : CovariantClass (Filter α) (Filter α) (swap HDiv.hDiv) LE.le :=\r\n```\r\n\r\nShould I introduce `(/)` notation for this one as well, or do you prefer to leave it as is?\r\n\r\n[I did not introduce the notations `(<)` and `(≤)` either, and used `LT.lt` and `LE.le`: let me know if this is also something that you want to change!]",
              "author": {
                "login": "adomani"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5oM74U",
              "createdAt": "2023-10-05T07:12:12Z",
              "body": "The new notation means that now this happens:\r\n```lean\r\n#check 2 * Real.pi  -- (*) 2 Real.pi : ℝ\r\n```\r\n(There were two failing `#guard_msgs` in `test/{ Recall.lean + propose.lean }` that highlighted this.)",
              "author": {
                "login": "adomani"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5oNEhD",
              "createdAt": "2023-10-05T07:31:30Z",
              "body": "With my very limited understanding of how these things work, I think that the new notation overrides the usual infix one for addition and multiplication.  This affects the pretty-printer and what you see in the infoview.  It would be great if there were a way to tell the pretty-printer to only use the new notation, if the new notation has literally been typed.\r\n\r\nIs this possible?",
              "author": {
                "login": "adomani"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5vQlJIzwAAAAJ1bmjN",
              "createdAt": "2023-10-05T08:28:13Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5vQlJIzwAAAAJ1cekH",
              "createdAt": "2023-10-05T08:49:11Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5kB7V2",
              "createdAt": "2023-10-14T16:48:55Z",
              "body": "",
              "author": {
                "login": "sgouezel"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5pu_1g",
              "createdAt": "2023-10-21T21:33:59Z",
              "body": "Note: I have pushed an update to the lean toolchain because this PR was on a [buggy version](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Potential.20data.20loss.20from.20.60lake.20clean.60.20with.204.2E2.2E0-rc2.2F3/near/397875701) of the toolchain. **WARNING**: checking out old commits of this PR using v4.2.0-rc2 or v4.2.0-rc3 can cause `lake clean` to delete your mathlib folder! If you need to do so, make sure to delete `lakefile.olean` manually before running any `lake` commands.",
              "author": {
                "login": "digama0"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5vQlJIzwAAAAKEZn0h",
              "createdAt": "2023-10-30T17:49:05Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            }
          ]
        }
      }
    }
  }
}
