{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 424,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "acmepjz"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "Main changes:\r\n\r\n- rename current `Mathlib/FieldTheory/SeparableDegree` to `Mathlib/RingTheory/Polynomial/SeparableDegree`\r\n  and create new `Mathlib/FieldTheory/SeparableDegree`\r\n\r\nMain definitions\r\n\r\n- `Emb F E`: the type of `F`-algebra homomorphisms from `E` to the algebraic closure of `E`.\r\n\r\n- `sepDegree F E`: the separable degree of an algebraic extension `E / F` of fields, defined to be the cardinal of `F`-algebra homomorphisms from `E` to the algebraic closure of `E`. \r\n(Mathematically, it should be the algebraic closure of `F`, but in order to make the type compatible with `Module.rank F E`, we use the algebraic closure of `E`.)\r\n  Note that if `E / F` is not algebraic, then this definition makes no mathematical sense.\r\n\r\n- `finSepDegree F E`: the separable degree of `E / F` as a natural number, which is zero if `sepDegree F E` is not finite.\r\n\r\nMain results\r\n\r\n- `embEquivOfEquiv`, `sepDegree_eq_of_equiv`, `finSepDegree_eq_of_equiv`: a random isomorphism\r\n  between `Emb F E` and `Emb F E'` when `E` and `E'` are isomorphic as `F`-algebras.\r\n  In particular, they have the same cardinality (so `sepDegree` and `finSepDegree` are equal).\r\n\r\n- `embEquivOfAdjoinSplits'`, `sepDegree_eq_of_adjoin_splits'`, `finSepDegree_eq_of_adjoin_splits'`:\r\n  a random isomorphism between `Emb F E` and `E ‚Üí‚Çê[F] K` if `E = F(S)` such that every element\r\n  `s` of `S` is integral (= algebraic) over `F` and whose minimal polynomial splits in `K`.\r\n  In particular, they have the same cardinality.\r\n\r\n- `embEquivOfIsAlgClosed`, `sepDegree_eq_of_isAlgClosed`, `finSepDegree_eq_of_isAlgClosed`:\r\n  a random isomorphism between `Emb F E` and `E ‚Üí‚Çê[F] K` when `E / F`\r\n  is algebraic and `K / F` is algebraically closed.\r\n  In particular, they have the same cardinality.\r\n\r\n- `embProdEmbOfIsAlgebraic`, `lift_sepDegree_mul_lift_sepDegree_of_isAlgebraic`,\r\n  `sepDegree_mul_sepDegree_of_isAlgebraic`, `finSepDegree_mul_finSepDegree_of_isAlgebraic`:\r\n  if `K / E / F` is a field extension tower, such that `K / E` is algebraic,\r\n  then there is a non-canonical isomorphism `(Emb F E) √ó (Emb E K) ‚âÉ (Emb F K)`.\r\n  In particular, the separable degree satisfies the tower law: `[E:F]_s [K:E]_s = [K:F]_s`.\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n- [x] depends on: #8221 [need `IntermediateField.algHom_mk_adjoin_splits‚ÇÄ'`]\r\n- [x] depends on: #8418\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 3,
        "closed": true,
        "closedAt": "2023-11-28T16:18:01Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5q4iX7",
              "body": "Ah, I come up with a key lemma: if `E / F` and `K / F` are field extensions, `S : Set E` is such that for all element `x` in `S`, `x` is algebraic over `F`, and the minimal polynomial of `x` over `F` splits in `K`, then there exists an `F`-algebra homomorphism from `F(S)` to `K`. I think the proof is similar to `IsAlgClosed.lift`, and this key lemma can be used to prove `IsAlgClosed.lift` and `IsSepClosed.lift`.",
              "createdAt": "2023-11-03T22:43:30Z",
              "author": {
                "login": "acmepjz"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5q47Ps",
              "body": "It's called `mem_maximalSubfieldWithHom_of_splits`\r\n```lean\r\ntheorem mem_maximalSubfieldWithHom_of_splits (hL : Algebra.IsAlgebraic K L) (x : L)\r\n    (hsplit : Splits (algebraMap K M) (minpoly K x)) :\r\n    x ‚àà (maximalSubfieldWithHom K L M).carrier := by\r\n```\r\nand is added in #6670.",
              "createdAt": "2023-11-04T02:22:59Z",
              "author": {
                "login": "acmepjz"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5q48j4",
              "body": "Yeah, extracting that lemma seems useful! I think I've seen that PR but forgot about it, and I'll give it a review soon.",
              "createdAt": "2023-11-04T02:43:36Z",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5q8EP1",
              "body": "I just found [algHomEquivSigma](https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/AlgebraTower.html#algHomEquivSigma) which is probably useful for the induction.",
              "createdAt": "2023-11-06T05:49:47Z",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5rFaHn",
              "body": "I looked at where [algHomEquivSigma](https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/AlgebraTower.html#algHomEquivSigma) was used and found [IsGalois.of_separable_splitting_field_aux](https://leanprover-community.github.io/mathlib4_docs/Mathlib/FieldTheory/Galois.html#IsGalois.of_separable_splitting_field_aux), which looks even closer to the task at hand ...",
              "createdAt": "2023-11-06T21:43:19Z",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5rieod",
              "body": "```\r\nCheck failure on line 267 in Mathlib/FieldTheory/SeparableDegree.lean\r\n\r\nunknown constant 'Algebra.IsAlgebraic.algHom_bijective‚ÇÇ'\r\n```\r\n\r\nOops. Does it renamed?",
              "createdAt": "2023-11-09T16:54:49Z",
              "author": {
                "login": "acmepjz"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5riokS",
              "body": "I don't think so? [Algebra.IsAlgebraic.algHom_bijective‚ÇÇ](https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/Algebraic.html#Algebra.IsAlgebraic.algHom_bijective%E2%82%82) Maybe you just need to merge master.",
              "createdAt": "2023-11-09T17:17:36Z",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5sAAqD",
              "body": "My normal closure PR #8418 is finally up. Sorry for the delay! Can you try to adapt this PR to use the API? I didn't check but maybe you can use some proofs here to golf proofs there.",
              "createdAt": "2023-11-15T07:32:57Z",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5sUfAX",
              "body": "This PR/issue depends on:\n* ~~leanprover-community/mathlib4#8221~~\n* ~~leanprover-community/mathlib4#8418~~\nBy **[Dependent Issues](https://github.com/z0al/dependent-issues)** (ü§ñ). Happy coding!\n<!-- By Dependent Issues (Action) - DO NOT REMOVE -->",
              "createdAt": "2023-11-18T01:25:53Z",
              "author": {
                "login": "leanprover-community-mathlib4-bot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5sV_Id",
              "body": "> My normal closure PR #8418 is finally up. Sorry for the delay! Can you try to adapt this PR to use the API? I didn't check but maybe you can use some proofs here to golf proofs there.\r\n\r\nNow only `algHomEquivNormalClosure` and `embEquivOfAdjoinSplits` is left, and I used your `IsNormalClosure.equiv` and `Algebra.IsAlgebraic.isNormalClosure_normalClosure`.\r\n\r\nPerhaps `algHomEquivNormalClosure` should also move to the normal closure file?",
              "createdAt": "2023-11-19T00:45:02Z",
              "author": {
                "login": "acmepjz"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5scy1k",
              "body": "üöÄ Pull request has been placed on the maintainer queue by alreadydone.",
              "createdAt": "2023-11-20T17:14:18Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5sq2QI",
              "body": "Thanks :tada:\r\n\r\nbors merge",
              "createdAt": "2023-11-22T17:11:28Z",
              "author": {
                "login": "jcommelin"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5tFcMn",
              "body": "bors merge",
              "createdAt": "2023-11-28T15:54:59Z",
              "author": {
                "login": "jcommelin"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5tFs-V",
              "body": "Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/7021319489/job/19103095214)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/7021319489/job/19103094606)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/7021319489/job/19103094303)",
              "createdAt": "2023-11-28T16:18:00Z",
              "author": {
                "login": "mathlib-bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "6c6642e6faf5a59e2511fd9ed5f915f2a8876db3",
                "additions": 182,
                "deletions": 125,
                "committedDate": "2023-11-02T13:32:24Z",
                "author": {
                  "name": "acmepjz",
                  "email": "acme_pjz@hotmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "f164e1fcfe48b23e88aa6000cf8b87b97af86d1c",
                "additions": 4,
                "deletions": 4,
                "committedDate": "2023-11-02T17:45:43Z",
                "author": {
                  "name": "acmepjz",
                  "email": "acme_pjz@hotmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "acc2d1670fb2b8e195d24ff66fdf33e18d2af68c",
                "additions": 125,
                "deletions": 2,
                "committedDate": "2023-11-03T00:31:37Z",
                "author": {
                  "name": "acmepjz",
                  "email": "acme_pjz@hotmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "22df0e0a84e1fc2e1fc4f840dbdc07c3c10d9ed9",
                "additions": 146,
                "deletions": 0,
                "committedDate": "2023-11-03T12:44:09Z",
                "author": {
                  "name": "acmepjz",
                  "email": "acme_pjz@hotmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "11e9584d13a1d3445c651f93f4fadeddb6ec9263",
                "additions": 2,
                "deletions": 10,
                "committedDate": "2023-11-07T12:49:20Z",
                "author": {
                  "name": "acmepjz",
                  "email": "acme_pjz@hotmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "18aa64dfec89f49339bc30154d798ddb42ad9bda",
                "additions": 8,
                "deletions": 9,
                "committedDate": "2023-11-07T12:52:46Z",
                "author": {
                  "name": "acmepjz",
                  "email": "acme_pjz@hotmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "1bdfa6172eb6f357f21f6efdb590b7b8421e69d7",
                "additions": 95,
                "deletions": 7,
                "committedDate": "2023-11-08T02:02:41Z",
                "author": {
                  "name": "acmepjz",
                  "email": "acme_pjz@hotmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "1c6c6b151e2413d4ab39eb15092ee3969bc2ebd7",
                "additions": 38,
                "deletions": 38,
                "committedDate": "2023-11-09T01:12:51Z",
                "author": {
                  "name": "acmepjz",
                  "email": "acme_pjz@hotmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "6f503d4e8eb24e29a58b10a52b600e49b3576a41",
                "additions": 27,
                "deletions": 1,
                "committedDate": "2023-11-09T14:07:49Z",
                "author": {
                  "name": "acmepjz",
                  "email": "acme_pjz@hotmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "5c4f9c3b83cf902755c4de237eb0718e024224c6",
                "additions": 62,
                "deletions": 182,
                "committedDate": "2023-11-09T16:40:59Z",
                "author": {
                  "name": "acmepjz",
                  "email": "acme_pjz@hotmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "38be3929ffeade4dac3c636250fb1203dd1425fc",
                "additions": 10761,
                "deletions": 4303,
                "committedDate": "2023-11-09T17:34:11Z",
                "author": {
                  "name": "acmepjz",
                  "email": "acme_pjz@hotmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "4eee7baa0d0eaa1ced899a83f297d398ab3eeabd",
                "additions": 2,
                "deletions": 1,
                "committedDate": "2023-11-09T17:58:50Z",
                "author": {
                  "name": "acmepjz",
                  "email": "acme_pjz@hotmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "99602cbc85e44c1ae9bc79c1d4ecd9dbb397a57f",
                "additions": 86,
                "deletions": 14,
                "committedDate": "2023-11-10T00:19:03Z",
                "author": {
                  "name": "acmepjz",
                  "email": "acme_pjz@hotmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "6eb651dce5d1a6bcb56b91ad7c1fe29b5d8aa537",
                "additions": 3268,
                "deletions": 1704,
                "committedDate": "2023-11-10T22:59:53Z",
                "author": {
                  "name": "acmepjz",
                  "email": "acme_pjz@hotmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "d856cff70827341cc0414782b60002cd161071cc",
                "additions": 2,
                "deletions": 10,
                "committedDate": "2023-11-10T23:31:57Z",
                "author": {
                  "name": "acmepjz",
                  "email": "acme_pjz@hotmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "c218b94f6f47cdc94c039877eed3ada7d73c9ded",
                "additions": 30,
                "deletions": 6,
                "committedDate": "2023-11-10T23:32:34Z",
                "author": {
                  "name": "acmepjz",
                  "email": "acme_pjz@hotmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "467a478c849bde39731bb20e01b4e3fee83c9afc",
                "additions": 17005,
                "deletions": 11809,
                "committedDate": "2023-11-19T00:32:37Z",
                "author": {
                  "name": "acmepjz",
                  "email": "acme_pjz@hotmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "2e231b020d61af7b8f05a0fee65f0a50f37c3710",
                "additions": 16,
                "deletions": 92,
                "committedDate": "2023-11-19T00:35:58Z",
                "author": {
                  "name": "acmepjz",
                  "email": "acme_pjz@hotmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYdhKtw",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6918795606/job/18821434039"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYdhLhw",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6918795819/job/18821434247"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYg5uwg",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6920459573/job/18824982210"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYdhJrw",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6918795604/job/18821433775"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYdhKWA",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6918795605/job/18821433944"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYdhLjw",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6918795823/job/18821434255"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYg5u1Q",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6920459574/job/18824982229"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYacDpg",
                        "name": "Add annotations",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6917238018/job/18818204582"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYacBzQ",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6917237823/job/18818204109"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYacCCA",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6917237821/job/18818204168"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYacD1w",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6917238017/job/18818204631"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYdhJ1g",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6918795606/job/18821433814"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYdhL3Q",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6918795819/job/18821434333"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYg5vLw",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6920459573/job/18824982319"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYacCyg",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6917237823/job/18818204362"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYacBzg",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6917237821/job/18818204110"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYacDjg",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6917238017/job/18818204558"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYacCPQ",
                        "name": "Check all files imported (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6917237823/job/18818204221"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYacCgA",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6917237821/job/18818204288"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYacChQ",
                        "name": "check workflows (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6917237823/job/18818204293"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYacCPw",
                        "name": "check workflows",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6917237821/job/18818204223"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYacCBA",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6917237823/job/18818204164"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYacCtg",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6917237821/job/18818204342"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYacDEg",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6917237823/job/18818204434"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYaso6A",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6917237821/job/18818476264"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "ea27a0beb276ad3a86c21b9db6705165896c4275",
                "additions": 66,
                "deletions": 92,
                "committedDate": "2023-11-19T13:42:01Z",
                "author": {
                  "name": "acmepjz",
                  "email": "acme_pjz@hotmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYtqFSg",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6926342859/job/18838357322"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYt0TgA",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6926409239/job/18838524800"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYtqGwA",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6926342869/job/18838357696"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYtqFEw",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6926342870/job/18838357267"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYt0S7w",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6926409252/job/18838524655"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYhsjdA",
                        "name": "Add annotations",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6920868547/job/18825814900"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYhsiNA",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6920868398/job/18825814580"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYhsh8A",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6920868399/job/18825814512"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYhsjtw",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6920868551/job/18825814967"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYtqG9A",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6926342859/job/18838357748"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYt0S5w",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6926409239/job/18838524647"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYhsiXw",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6920868398/job/18825814623"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYhsiVQ",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6920868399/job/18825814613"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYhsjew",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6920868551/job/18825814907"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYhsh7g",
                        "name": "Check all files imported (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6920868398/job/18825814510"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYhsiJQ",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6920868399/job/18825814565"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYhsilg",
                        "name": "check workflows (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6920868398/job/18825814678"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYhsiug",
                        "name": "check workflows",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6920868399/job/18825814714"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYhsi4A",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6920868398/job/18825814752"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYhsihw",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6920868399/job/18825814663"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYhsjGg",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6920868398/job/18825814810"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEYh5GtQ",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6920868399/job/18826020533"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "5d9ebc218421bd133b829dad5885c3cfbc147e1c",
                "additions": 1137,
                "deletions": 983,
                "committedDate": "2023-11-20T12:24:03Z",
                "author": {
                  "name": "acmepjz",
                  "email": "acme_pjz@hotmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "b0254402a12508d8b4b582b4d033025c33736200",
                "additions": 15,
                "deletions": 15,
                "committedDate": "2023-11-20T12:37:13Z",
                "author": {
                  "name": "acmepjz",
                  "email": "acme_pjz@hotmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEZCFUjA",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6933501022/job/18859775116"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEZCmfTg",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6933680847/job/18860318542"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEZCmfCw",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6933680851/job/18860318475"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEY4L1hg",
                        "name": "Add annotations",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6930193842/job/18849396102"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEZCFTFQ",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6933501018/job/18859774741"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEY4Lu1w",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6930193285/job/18849394391"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEY4LyDg",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6930193414/job/18849395214"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEY4L1kQ",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6930193847/job/18849396113"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEZCFTHA",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6933501022/job/18859774748"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEZCmgqg",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6933680847/job/18860318890"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEY4LxPA",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6930193285/job/18849395004"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEY4Lw7Q",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6930193414/job/18849394925"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEY4L2kg",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6930193847/job/18849396370"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEY4Lv7g",
                        "name": "Check all files imported (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6930193285/job/18849394670"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEY4Ly2A",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6930193414/job/18849395416"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEY4Lzmg",
                        "name": "check workflows (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6930193285/job/18849395610"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEY4LztQ",
                        "name": "check workflows",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6930193414/job/18849395637"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEY4LyaA",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6930193285/job/18849395304"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEY4L1dA",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6930193414/job/18849396084"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEY4L0ow",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6930193285/job/18849395875"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEY490Jg",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6930193414/job/18850214950"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "4daabffc271780e7a4ed5d34c0b8853e647d7058",
                "additions": 33,
                "deletions": 32,
                "committedDate": "2023-11-20T18:44:32Z",
                "author": {
                  "name": "acmepjz",
                  "email": "acme_pjz@hotmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEZE-RqQ",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6934524717/job/18862805417"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEZE-Row",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6934524711/job/18862805411"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEZEzNew",
                        "name": "Add annotations",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6934467850/job/18862624123"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEZEzJRg",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6934467483/job/18862623046"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEZEzJgg",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6934467482/job/18862623106"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEZEzNWg",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6934467848/job/18862624090"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEZE-SpA",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6934524717/job/18862805668"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEZEzKNQ",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6934467483/job/18862623285"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEZEzM1g",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6934467482/job/18862623958"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEZEzOdg",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6934467848/job/18862624374"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEZEzL7w",
                        "name": "Check all files imported (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6934467483/job/18862623727"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEZEzLMw",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6934467482/job/18862623539"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEZEzLCw",
                        "name": "check workflows (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6934467483/job/18862623499"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEZEzL-w",
                        "name": "check workflows",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6934467482/job/18862623739"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEZEzNFg",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6934467483/job/18862624022"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEZEzKSQ",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6934467482/job/18862623305"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEZEzOWQ",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6934467483/job/18862624345"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEZFihFw",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6934467482/job/18863399191"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "createdAt": "2023-11-02T13:34:37Z",
        "deletions": 125,
        "files": {
          "nodes": [
            {
              "path": "Mathlib.lean",
              "additions": 1,
              "deletions": 0
            },
            {
              "path": "Mathlib/FieldTheory/SeparableDegree.lean",
              "additions": 276,
              "deletions": 125
            },
            {
              "path": "Mathlib/RingTheory/Polynomial/SeparableDegree.lean",
              "additions": 147,
              "deletions": 0
            }
          ]
        },
        "headRefName": "acmepjz_sep_degree",
        "headRefOid": "4daabffc271780e7a4ed5d34c0b8853e647d7058",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5ebycY",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
              "color": "06e039",
              "name": "ready-to-merge"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJjTQ",
              "color": "33DBEC",
              "name": "t-algebra"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5nu52D",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "jcommelin"
              },
              "submittedAt": "2023-11-20T17:30:13Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5nuzjW",
              "body": "Thanks!\r\n\r\nmaintainer merge",
              "state": "APPROVED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2023-11-20T17:14:06Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 8117,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": "APPROVED",
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5mA6yJ",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2023-11-03T01:05:32Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mB4NP",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2023-11-03T02:59:29Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mEYTG",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "acmepjz"
              },
              "submittedAt": "2023-11-03T11:27:21Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mFd0i",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2023-11-03T13:41:36Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mFeoa",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2023-11-03T13:42:56Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mGpFf",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "acmepjz"
              },
              "submittedAt": "2023-11-03T15:35:23Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mJN4Z",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2023-11-04T02:34:16Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5meMMO",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "acmepjz"
              },
              "submittedAt": "2023-11-08T02:07:56Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mgpMS",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2023-11-08T09:46:29Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mhQyr",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "acmepjz"
              },
              "submittedAt": "2023-11-08T10:31:02Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mkYSF",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2023-11-08T16:41:13Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mmsWJ",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2023-11-08T23:01:50Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mrWei",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "acmepjz"
              },
              "submittedAt": "2023-11-09T14:12:37Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5msoHb",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2023-11-09T16:23:41Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5ms9oI",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "acmepjz"
              },
              "submittedAt": "2023-11-09T16:52:23Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5noASw",
              "body": "Looks pretty nice, just a few minor issues",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2023-11-19T06:14:22Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5noCSo",
              "body": "Looks pretty nice, just a few minor issues",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2023-11-19T06:14:25Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5noR60",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "acmepjz"
              },
              "submittedAt": "2023-11-19T12:27:11Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5npx-O",
              "body": "Thanks!",
              "state": "APPROVED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2023-11-20T06:23:46Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5np5wt",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2023-11-20T06:32:39Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5nuzjW",
              "body": "Thanks!\r\n\r\nmaintainer merge",
              "state": "APPROVED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2023-11-20T17:14:06Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5nu52D",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "jcommelin"
              },
              "submittedAt": "2023-11-20T17:30:13Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5nvZC8",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "acmepjz"
              },
              "submittedAt": "2023-11-20T18:50:55Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ST6x5",
                    "body": "I'm not sure how much you really need to talk about `Emb F E` as opposed to `E ‚Üí‚Çê[F] K` for a general (or algebraically closed) `K`. It would be of some general interest to prove results about such AlgHoms.\r\n\r\nI think one thing we should show is that the cardinality of `E ‚Üí‚Çê[F] K` is independent of `K` as long as the `F`-minimal polynomial of every element of `E` splits in `K`. Quite a few results in mathlib are stated with such conditions, e.g. [Polynomial.lift_of_splits](https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/Adjoin/Field.html#Polynomial.lift_of_splits). We could show this by showing that `E ‚Üí‚Çê[F] K` is canonically in bijection with `E ‚Üí‚Çê[F] normalClosure F E K`, and that the `normalClosure` in two different `K`s are isomorphic as long as `K` satisfies the splitting condition.\r\n\r\nRegarding\r\n> Mathematically, it should be the algebraic closure of F, but in order to make the type compatible with Module.rank F E, we use the algebraic closure of E.\r\n\r\nI don't quite understand the difficulty of working with `AlgebraicClosure F`. I think it would make the inductive step to show multiplicativity of separable degree slightly easier.",
                    "createdAt": "2023-11-03T01:05:32Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SUjSB",
                    "body": "Addendum: I think we should define a predicate `IsNormalClosure F E K` to mean that (1) `K` is normal over `F`, and (2) `K` is generated by roots of minimal polynomials of elements of `E` over `F`. This is equivalent to (2) + (3) every minimal polynomial of an element of `E` over `F` splits in `K`. ~~A stronger condition (4), that every element of `K` shares minimal polynomial with some element of `E`, also holds, and make it easy to see (1) and (3) are equivalent. (this is wrong)~~ We then show that `IsNormalClosure F E (normalClosure F E K)` if (3) holds, and that any two `K` that satisfy `IsNormalClosure F E K` are `F`-AlgEquiv (similar to [Polynomial.IsSplittingField.algEquiv](https://leanprover-community.github.io/mathlib4_docs/Mathlib/FieldTheory/SplittingField/Construction.html#Polynomial.IsSplittingField.algEquiv)). A way to show the latter is to embed one `K` into the algebraic closure of the other `K`, and show the image must lie within the other `K`. Such an AlgHom also exists in the reverse direction, which allows you to conclude both AlgHoms are bijective using a proof similar to [Algebra.IsAlgebraic.bijective_of_isScalarTower](https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/Algebraic.html#Algebra.IsAlgebraic.bijective_of_isScalarTower).",
                    "createdAt": "2023-11-03T02:59:29Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SWI0t",
                    "body": "> I'm not sure how much you really need to talk about `Emb F E`\r\n\r\nBecause I want to make the definition of `sepDegree` depends only on `F` and `E`. Originally it was\r\n```lean\r\ndef sepDegree := Cardinal.mk (E ‚Üí‚Çê[F] (AlgebraicClosure E))\r\n```\r\nbut then I need to copy `E ‚Üí‚Çê[F] (AlgebraicClosure E)` over and over again. I saw the notation `Emb_F(E)` in several textbooks, so I propose the notation `Emb F E`.\r\n\r\n> ... as opposed to `E ‚Üí‚Çê[F] K` for a general (or algebraically closed) `K`. It would be of some general interest to prove results about such AlgHoms.\r\n>\r\n> I think one thing we should show is that the cardinality of `E ‚Üí‚Çê[F] K` is independent of `K` as long as the `F`-minimal polynomial of every element of `E` splits in `K`. Quite a few results in mathlib are stated with such conditions, e.g. [Polynomial.lift_of_splits](https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/Adjoin/Field.html#Polynomial.lift_of_splits). We could show this by showing that `E ‚Üí‚Çê[F] K` is canonically in bijection with `E ‚Üí‚Çê[F] normalClosure F E K`, and that the `normalClosure` in two different `K`s are isomorphic as long as `K` satisfies the splitting condition. \r\n\r\nYou're right. Currently I only have the (messy) proof of the following result:\r\n```lean\r\ndef emb_equiv_of_isAlgClosed (halg : Algebra.IsAlgebraic F E)\r\n    (K : Type w) [Field K] [Algebra F K] [IsAlgClosed K] :\r\n    Emb F E ‚âÉ (E ‚Üí‚Çê[F] K) := by ...\r\n```\r\nThe `[IsAlgClosed K]` could be replaced by the condition that the `F`-minimal polynomial of every element of `E` splits in `K`.\r\n\r\n> Regarding\r\n> \r\n> > Mathematically, it should be the algebraic closure of F, but in order to make the type compatible with Module.rank F E, we use the algebraic closure of E.\r\n> \r\n> I don't quite understand the difficulty of working with `AlgebraicClosure F`. I think it would make the inductive step to show multiplicativity of separable degree slightly easier.\r\n\r\nBecause the type of `Cardinal.mk (E ‚Üí‚Çê[F] (AlgebraicClosure F))` is `Cardinal.{max u v}`, while the type of `Cardinal.mk (E ‚Üí‚Çê[F] (AlgebraicClosure E))` is `Cardinal.{v}`, which is the same as `Module.rank F E`. This allows us to write `sepDegree F E = Module.rank F E` without mentioning `Cardinal.lift`.\r\n\r\n> Addendum: I think we should define a predicate `IsNormalClosure F E K` to mean that (1) `K` is normal over `F`, and (2) `K` is generated by roots of minimal polynomials of elements of `E` over `F`. This is equivalent to (2) + (3) every minimal polynomial of an element of `E` over `F` splits in `K`. ~A stronger condition (4), that every element of `K` shares minimal polynomial with some element of `E`, also holds, and make it easy to see (1) and (3) are equivalent. (this is wrong)~ We then show that `IsNormalClosure F E (normalClosure F E K)` if (3) holds, and that any two `K` that satisfy `IsNormalClosure F E K` are `F`-AlgEquiv (similar to [Polynomial.IsSplittingField.algEquiv](https://leanprover-community.github.io/mathlib4_docs/Mathlib/FieldTheory/SplittingField/Construction.html#Polynomial.IsSplittingField.algEquiv)). A way to show the latter is to embed one `K` into the algebraic closure of the other `K`, and show the image must lie within the other `K`. Such an AlgHom also exists in the reverse direction, which allows you to conclude both AlgHoms are bijective using a proof similar to [Algebra.IsAlgebraic.bijective_of_isScalarTower](https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/Algebraic.html#Algebra.IsAlgebraic.bijective_of_isScalarTower).\r\n\r\nMaybe `IsNormalClosed F E K` (or more precisely, `IsSplitIn F E K`) is enough, i.e. we allow `K` to be larger than the normal closure.\r\n\r\nUnrelated: I found the capital letter inconsistency: `AlgebraicClosure` is PascalCase while `normalClosure` is camelCase. Does that have a reason?",
                    "createdAt": "2023-11-03T11:27:21Z",
                    "author": {
                      "login": "acmepjz"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SWwjm",
                    "body": "> Because the type of Cardinal.mk (E ‚Üí‚Çê[F] (AlgebraicClosure F)) is Cardinal.{max u v}, while the type of Cardinal.mk (E ‚Üí‚Çê[F] (AlgebraicClosure E)) is Cardinal.{v}\r\n\r\nI see!\r\n\r\n> Maybe IsNormalClosed F E K (or more precisely, IsSplitIn F E K) is enough, i.e. we allow K to be larger than the normal closure.\r\n\r\nIsSplitIn is a single condition so I wouldn't introduce a def for it. IsNormalClosure is a combination of two conditions and hace an equivalent characterization so I'd introduce a def. Of course, IsSplitIn isn't sufficient for uniqueness (up to AlgEquiv), but we need an AlgEquiv to show the embeddings into two normalClosures are of equal cardinality. I'll submit a PR adding IsNormalClosure during the weekend unless you beat me :)\r\n",
                    "createdAt": "2023-11-03T13:41:36Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SWxGy",
                    "body": "> Unrelated: I found the capital letter inconsistency: AlgebraicClosure is PascalCase while normalClosure is camelCase. Does that have a reason?\r\n\r\nnormalClosure is an IntermediateField while AlgebraicClosure is a type; only types or Props get PascalCase.\r\n",
                    "createdAt": "2023-11-03T13:42:56Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SXfdB",
                    "body": "> Of course, IsSplitIn isn't sufficient for uniqueness (up to AlgEquiv), but we need an AlgEquiv to show the embeddings into two normalClosures are of equal cardinality.\r\n\r\nLet me think a bit. I suspect that we don't need the uniqueness to prove the equal cardinality (see the newly added `emb_equiv_of_isAlgClosed` at L288), so I think `IsSplitIn` is enough.\r\n\r\n> I'll submit a PR adding IsNormalClosure during the weekend unless you beat me :)\r\n\r\nOf course `IsNormalClosure` is an important concept. I'll not touch it since you self-assigned the task :) ",
                    "createdAt": "2023-11-03T15:35:22Z",
                    "author": {
                      "login": "acmepjz"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SZIpJ",
                    "body": "> I suspect that we don't need the uniqueness to prove the equal cardinality \r\n\r\nYeah I think that's true, but *my* proof consists of two steps: first show that restriction to the `normalClosure` doesn't change the cardinality (which is obvious, since `normalClosure` is defined to be the intermediate field generated by the images of embeddings), and second show that all `normalClosure`s are the same up to AlgEquiv assuming my condition (3) (i.e. your IsSplitIn); these `normalClosure`s satisfy (2) + (3) and I'll show it also satisfies (1) (normality) using Normal.ofIsSplittingField.",
                    "createdAt": "2023-11-04T02:34:15Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SmrBi",
                    "body": "I don't know how to prove this result in a simple way. I believe it's correct, but my plan is divide it into 3 steps:\r\n\r\n- First is to prove the case that `K = AlgebraicClosure F` and `E` is an intermediate field of these two fields. Then I can use the fact that `K / F` is normal.\r\n- Second step is `K / F` algebraic case. In this case one can show that the normal closure of `E` in `AlgebraicClosure F` is in fact equal to the normal closure of `E` in `K`.\r\n- Third step is for general case, in this case consider the maximal algebraic subextension of `K / F` (do we have this in mathlib yet?)",
                    "createdAt": "2023-11-08T02:07:56Z",
                    "author": {
                      "login": "acmepjz"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SoS9i",
                    "body": "I'm planning to use this [refined version](https://github.com/leanprover-community/mathlib4/pull/8221/commits/dbe017bf8de59e5bcff758aec2a988f202e339fd#diff-155a98da5b1e87cf16b3ed92d347e59836382af78331f95e267d330a7b85f782R1145) of `algHom_mk_adjoin_splits` to prove [this](https://github.com/leanprover-community/mathlib4/compare/IsNormalClosure?expand=1#diff-d1090b16dffcfbd351531a9ffbd5909e1a2ec8075f6893ee523df3a9d5326dd3R56-R57) which implies the roots all lie in the normalClosure.\r\n\r\nRe: your 3rd step, you can simply use [integralClosure](https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/IntegralClosure.html#integralClosure). (Actually I don't know whether the algebraic elements over a CommRing always form a ring; maybe you can show that using ~~resolvents~~ resultants?)",
                    "createdAt": "2023-11-08T09:46:23Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SouIB",
                    "body": "> Actually I don't know whether the algebraic elements over a CommRing always form a ring; maybe you can show that using resolvents?\r\n\r\nAt least for field case it's true. For example the `Qbar` in `C` is a field. The proof is quite standard, and I think it must be already in mathlib.\r\n\r\n[EDIT] It is `adjoin F { x : E | IsAlgebraic F x }`, it's algebraic over F by `isAlgebraic_iSup...` or something, and clearly it's maximal.\r\n\r\nPS: By the same way I can write down the definition of maximal separable subextension, but to prove it's indeed separable is another thing.",
                    "createdAt": "2023-11-08T10:31:01Z",
                    "author": {
                      "login": "acmepjz"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SqqdZ",
                    "body": "[integralClosure](https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/IntegralClosure.html#integralClosure) by definition consists of exactly the integral elements, which are the same as the algebraic elements over a field, right? I'm just curious about the general (non-field) case.",
                    "createdAt": "2023-11-08T16:41:13Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SsGTu",
                    "body": "We're apparently lacking a constructor that takes a Subalgebra in a field extension and an assumption that it's algebraic (equivalently, each element is algebraic in the ambient field), and produces an IntermediateField with the same carrier. I think it could be used to golf lots of stuff, such as [IntermediateField.sup_toSubalgebra](https://leanprover-community.github.io/mathlib4_docs/Mathlib/FieldTheory/Adjoin.html#IntermediateField.sup_toSubalgebra).",
                    "createdAt": "2023-11-08T23:01:50Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SvCxr",
                    "body": "I use your `IntermediateField.algHom_mk_adjoin_splits‚ÇÄ'` and the proof is almost finished. But there are still some gaps:\r\n\r\n- I need `IntermediateField.adjoin.liftSingleton` but there is only `Algebra.adjoin.liftSingleton`\r\n- ... and that although `Algebra.adjoin.liftSingleton` is provided, but there is no any lemma says that `Algebra.adjoin.liftSingleton F s a` maps `s` to `a` ?!?",
                    "createdAt": "2023-11-09T14:12:37Z",
                    "author": {
                      "login": "acmepjz"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5Svv-o",
                    "body": "Thanks! I didn't get much time to work on IsNormalClosure since the week started and you've overtaken me on the development of normalClosure API. Most of your results should be moved to the normalClosure file though. When I open the PR I'll do that and add you as a co-author.\r\n\r\n> I need `IntermediateField.adjoin.liftSingleton` but there is only `Algebra.adjoin.liftSingleton`\r\n\r\nActually there is [IntermediateField.algHomAdjoinIntegralEquiv](https://leanprover-community.github.io/mathlib4_docs/Mathlib/FieldTheory/Adjoin.html#IntermediateField.algHomAdjoinIntegralEquiv), which is what I use in the new convenience lemma [algHom_mk_adjoin_splits_of_aeval](https://github.com/leanprover-community/mathlib4/pull/8221/files#diff-155a98da5b1e87cf16b3ed92d347e59836382af78331f95e267d330a7b85f782R1162-R1168) I added in #8221. It should be easier to use `algHom_mk_of_splits_of_aeval` there.\r\n\r\n- ... and that although `Algebra.adjoin.liftSingleton` is provided, but there is no any lemma says that `Algebra.adjoin.liftSingleton F s a` maps `s` to `a` ?!?\r\n\r\nYeah that seems to be a one-off construction and only used in `maximalSubfieldWithHom_eq_top` which is to be removed.\r\n\r\nThe current APIs can be incomplete at places (`algHomAdjoinIntegralEquiv_symm_apply_gen` was added by me recently), but this will no longer be the case once we address #8075. In the short term, we may add IsAdjoinRoot \"instances\" for Algebra.adjoin (assuming integrality) and IntermediateField.adjoin to be able to use the IsAdjoinRoot API.",
                    "createdAt": "2023-11-09T16:23:41Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5Sv5OQ",
                    "body": "> Actually there is [IntermediateField.algHomAdjoinIntegralEquiv](https://leanprover-community.github.io/mathlib4_docs/Mathlib/FieldTheory/Adjoin.html#IntermediateField.algHomAdjoinIntegralEquiv) ... (`algHomAdjoinIntegralEquiv_symm_apply_gen` was added by me recently) ...\r\n\r\nThanks, I use these two to finally make the proof sorry-free.\r\n\r\n> Thanks! I didn't get much time to work on IsNormalClosure since the week started and you've overtaken me on the development of normalClosure API. Most of your results should be moved to the normalClosure file though. When I open the PR I'll do that and add you as a co-author.\r\n \r\nYou're welcome. Feel free to take the relevant part to the normal closure file. After that I'll make corresponding changes in this file. :)",
                    "createdAt": "2023-11-09T16:52:23Z",
                    "author": {
                      "login": "acmepjz"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5TWKj3",
                    "body": "I think no one would object if you use the anonymous constructor ‚ü® ‚ü© here :)\r\nAlso, maybe we should add a `[Nonempty X] : NeZero #X` instance?",
                    "createdAt": "2023-11-19T04:11:03Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5TWcCJ",
                    "body": "You mean the instance version of `Cardinal.mk_ne_zero`?\r\n\r\nBTW, should these 3 lemmas be `instance`s?",
                    "createdAt": "2023-11-19T12:27:11Z",
                    "author": {
                      "login": "acmepjz"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5TXqhM",
                    "body": "> You mean the instance version of `Cardinal.mk_ne_zero`?\r\n\r\nYes; probably out of scope of this PR though.\r\n\r\n> BTW, should these 3 lemmas be `instance`s?\r\n\r\nI see you've made them instances, which is fine with me. There is probably no point to state lemmas using `NeZero` if not to make them instances ...\r\n\r\n",
                    "createdAt": "2023-11-20T06:32:39Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5TWLLd",
                    "body": "Several declarations around `minpoly.AlgHom.fintype` are mis-namespaced and should be fixed in the future ...\r\n\r\nand can't you just use [Nat.card_ne_zero](https://leanprover-community.github.io/mathlib4_docs/Mathlib/SetTheory/Cardinal/Finite.html#Nat.card_ne_zero)?",
                    "createdAt": "2023-11-19T04:41:46Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5TWLiR",
                    "body": "Personally I only indent the next line if the previous line is a function applied to the next line.\r\n```suggestion\r\ntheorem sepDegree_self : sepDegree F F = 1 :=\r\n  le_antisymm\r\n    (show sepDegree F F ‚â§ 1 from Cardinal.le_one_iff_subsingleton.2 AlgHom.subsingleton)\r\n    (Cardinal.one_le_iff_ne_zero.2 (sepDegree_nezero F F).out)\r\n```",
                    "createdAt": "2023-11-19T04:56:59Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5TWNFo",
                    "body": "Can you please extract `variable` from everything below?",
                    "createdAt": "2023-11-19T06:04:44Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5TWNH7",
                    "body": "This is already merged as [normalClosure.algHomEquiv](https://leanprover-community.github.io/mathlib4_docs/Mathlib/FieldTheory/NormalClosure.html#normalClosure.algHomEquiv)",
                    "createdAt": "2023-11-19T06:07:03Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5TWNQ0",
                    "body": "Using [Algebra.IsAlgebraic.algHomEmbeddingOfSplits](https://leanprover-community.github.io/mathlib4_docs/Mathlib/FieldTheory/NormalClosure.html#Algebra.IsAlgebraic.algHomEmbeddingOfSplits) and [Function.Embedding.antisymm](https://leanprover-community.github.io/mathlib4_docs/Mathlib/SetTheory/Cardinal/SchroederBernstein.html#Function.Embedding.antisymm) will probably make a shorter proof. Having an explicit bijection is nice, but it's not like we provide good APIs for it to be useful ...",
                    "createdAt": "2023-11-19T06:12:54Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5TWNQ6",
                    "body": "```suggestion\r\n/-- A random bijection between `Emb F E` and `E ‚Üí‚Çê[F] K` if `E = F(S)` such that every element\r\n```",
                    "createdAt": "2023-11-19T06:13:03Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5TXlnt",
                    "body": "Please rename this: √ó is called `Prod`, not `Mul`.",
                    "createdAt": "2023-11-20T05:56:56Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5TXl0U",
                    "body": "```suggestion\r\n  let e : ‚àÄ f : E ‚Üí‚Çê[F] AlgebraicClosure K, \r\n    (@AlgHom E K _ _ _ _ _ f.toRingHom.toAlgebra) ‚âÉ (Emb E K) := fun f ‚Ü¶\r\n```\r\n(untested)",
                    "createdAt": "2023-11-20T05:58:33Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5TXl-5",
                    "body": "You can leave out the parentheses, as you do for `finSepDegree` below, right?",
                    "createdAt": "2023-11-20T05:59:59Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5TXmLu",
                    "body": "```suggestion\r\n    ‚ü®(halg s).isIntegral, IsAlgClosed.splits_codomain _‚ü©\r\n```\r\nshould work now.",
                    "createdAt": "2023-11-20T06:01:37Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5TXmqx",
                    "body": "```suggestion\r\ndef Emb := E ‚Üí‚Çê[F] AlgebraicClosure E\r\n```\r\n(untested)",
                    "createdAt": "2023-11-20T06:04:59Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5TXnT6",
                    "body": "apparently you already opened `Polynomial`; in any case you can at least use dot notation",
                    "createdAt": "2023-11-20T06:09:56Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5TayIs",
                    "body": "```suggestion\r\n- `Field.Emb F E`: the type of `F`-algebra homomorphisms from `E` to the algebraic closure of `E`.\r\n```\r\nAre other names in this list also namespaced? If so, please add the namespace, so that documentation will linkify them.",
                    "createdAt": "2023-11-20T17:30:13Z",
                    "author": {
                      "login": "jcommelin"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5TbGVe",
                    "body": "Namespaces added. But I assume that it's not necessary? In the old `SeparableDegree` file the `IsSeparableContraction` etc. is inside the `Polynomial` namespace. It's not prefixed in the docstring, but the link in the doc still works.",
                    "createdAt": "2023-11-20T18:50:55Z",
                    "author": {
                      "login": "acmepjz"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjMzOTc3Nzk=",
              "login": "acmepjz"
            },
            {
              "id": "MDQ6VXNlcjMwNjQxNDU=",
              "login": "alreadydone"
            },
            {
              "id": "U_kgDOB75MNQ",
              "login": "leanprover-community-mathlib4-bot"
            },
            {
              "id": "MDQ6VXNlcjU2MzY3MDU=",
              "login": "jcommelin"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEZE-RqQ",
                "name": "Add ready-to-merge label",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6934524717/job/18862805417"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEZE-Row",
                "name": "Ping maintainers on Zulip",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6934524711/job/18862805411"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEZEzNew",
                "name": "Add annotations",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6934467850/job/18862624123"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEZEzJRg",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6934467483/job/18862623046"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEZEzJgg",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6934467482/job/18862623106"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEZEzNWg",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6934467848/job/18862624090"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEZE-SpA",
                "name": "Add delegated label",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6934524717/job/18862805668"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEZEzKNQ",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6934467483/job/18862623285"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEZEzM1g",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6934467482/job/18862623958"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEZEzOdg",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6934467848/job/18862624374"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEZEzL7w",
                "name": "Check all files imported (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6934467483/job/18862623727"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEZEzLMw",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6934467482/job/18862623539"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEZEzLCw",
                "name": "check workflows (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6934467483/job/18862623499"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEZEzL-w",
                "name": "check workflows",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6934467482/job/18862623739"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEZEzNFg",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6934467483/job/18862624022"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEZEzKSQ",
                "name": "Build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6934467482/job/18862623305"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEZEzOWQ",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6934467483/job/18862624345"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEZFihFw",
                "name": "Post-CI job",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6934467482/job/18863399191"
              }
            ]
          }
        },
        "title": "[Merged by Bors] - feat(FieldTheory/SeparableDegree): basic definition of separable degree of field extension",
        "updatedAt": "2023-11-28T16:18:05Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/8117",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "6c6642e6faf5a59e2511fd9ed5f915f2a8876db3"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "f164e1fcfe48b23e88aa6000cf8b87b97af86d1c"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "acc2d1670fb2b8e195d24ff66fdf33e18d2af68c"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5mA6yJ",
              "createdAt": "2023-11-03T01:05:32Z",
              "body": "",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "22df0e0a84e1fc2e1fc4f840dbdc07c3c10d9ed9"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5q4iX7",
              "createdAt": "2023-11-03T22:43:30Z",
              "body": "Ah, I come up with a key lemma: if `E / F` and `K / F` are field extensions, `S : Set E` is such that for all element `x` in `S`, `x` is algebraic over `F`, and the minimal polynomial of `x` over `F` splits in `K`, then there exists an `F`-algebra homomorphism from `F(S)` to `K`. I think the proof is similar to `IsAlgClosed.lift`, and this key lemma can be used to prove `IsAlgClosed.lift` and `IsSepClosed.lift`.",
              "author": {
                "login": "acmepjz"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5q47Ps",
              "createdAt": "2023-11-04T02:22:59Z",
              "body": "It's called `mem_maximalSubfieldWithHom_of_splits`\r\n```lean\r\ntheorem mem_maximalSubfieldWithHom_of_splits (hL : Algebra.IsAlgebraic K L) (x : L)\r\n    (hsplit : Splits (algebraMap K M) (minpoly K x)) :\r\n    x ‚àà (maximalSubfieldWithHom K L M).carrier := by\r\n```\r\nand is added in #6670.",
              "author": {
                "login": "acmepjz"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5q48j4",
              "createdAt": "2023-11-04T02:43:36Z",
              "body": "Yeah, extracting that lemma seems useful! I think I've seen that PR but forgot about it, and I'll give it a review soon.",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5q8EP1",
              "createdAt": "2023-11-06T05:49:47Z",
              "body": "I just found [algHomEquivSigma](https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/AlgebraTower.html#algHomEquivSigma) which is probably useful for the induction.",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5rFaHn",
              "createdAt": "2023-11-06T21:43:19Z",
              "body": "I looked at where [algHomEquivSigma](https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/AlgebraTower.html#algHomEquivSigma) was used and found [IsGalois.of_separable_splitting_field_aux](https://leanprover-community.github.io/mathlib4_docs/Mathlib/FieldTheory/Galois.html#IsGalois.of_separable_splitting_field_aux), which looks even closer to the task at hand ...",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "11e9584d13a1d3445c651f93f4fadeddb6ec9263"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "18aa64dfec89f49339bc30154d798ddb42ad9bda"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "1bdfa6172eb6f357f21f6efdb590b7b8421e69d7"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5meMMO",
              "createdAt": "2023-11-08T02:07:56Z",
              "body": "",
              "author": {
                "login": "acmepjz"
              }
            },
            {
              "__typename": "UnsubscribedEvent"
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "1c6c6b151e2413d4ab39eb15092ee3969bc2ebd7"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "6f503d4e8eb24e29a58b10a52b600e49b3576a41"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c51rPhyzwAAAAKKhEg9",
              "createdAt": "2023-11-09T14:20:01Z",
              "label": {
                "id": "MDU6TGFiZWwzMjg4OTQyMDg2",
                "name": "blocked-by-other-PR"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "5c4f9c3b83cf902755c4de237eb0718e024224c6"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5rieod",
              "createdAt": "2023-11-09T16:54:49Z",
              "body": "```\r\nCheck failure on line 267 in Mathlib/FieldTheory/SeparableDegree.lean\r\n\r\nunknown constant 'Algebra.IsAlgebraic.algHom_bijective‚ÇÇ'\r\n```\r\n\r\nOops. Does it renamed?",
              "author": {
                "login": "acmepjz"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5riokS",
              "createdAt": "2023-11-09T17:17:36Z",
              "body": "I don't think so? [Algebra.IsAlgebraic.algHom_bijective‚ÇÇ](https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/Algebraic.html#Algebra.IsAlgebraic.algHom_bijective%E2%82%82) Maybe you just need to merge master.",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "38be3929ffeade4dac3c636250fb1203dd1425fc"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "4eee7baa0d0eaa1ced899a83f297d398ab3eeabd"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "99602cbc85e44c1ae9bc79c1d4ecd9dbb397a57f"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c51rPhyzwAAAAKLeVp2",
              "createdAt": "2023-11-10T21:47:01Z",
              "label": {
                "id": "MDU6TGFiZWwzMjg4OTQyMDg2",
                "name": "blocked-by-other-PR"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "6eb651dce5d1a6bcb56b91ad7c1fe29b5d8aa537"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "d856cff70827341cc0414782b60002cd161071cc"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "c218b94f6f47cdc94c039877eed3ada7d73c9ded"
              }
            },
            {
              "__typename": "ReadyForReviewEvent",
              "id": "RFRE_lADOFcwZ1c51rPhyzwAAAAKMFCsL",
              "createdAt": "2023-11-13T10:43:57Z"
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c51rPhyzwAAAAKMFDoA",
              "createdAt": "2023-11-13T10:44:19Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c51rPhyzwAAAAKMFDoG",
              "createdAt": "2023-11-13T10:44:19Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJjTQ",
                "name": "t-algebra"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5sAAqD",
              "createdAt": "2023-11-15T07:32:57Z",
              "body": "My normal closure PR #8418 is finally up. Sorry for the delay! Can you try to adapt this PR to use the API? I didn't check but maybe you can use some proofs here to golf proofs there.",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c51rPhyzwAAAAKNxw3z",
              "createdAt": "2023-11-15T15:02:43Z",
              "label": {
                "id": "MDU6TGFiZWwzMjg4OTQyMDg2",
                "name": "blocked-by-other-PR"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c51rPhyzwAAAAKPrJa6",
              "createdAt": "2023-11-18T01:25:52Z",
              "label": {
                "id": "MDU6TGFiZWwzMjg4OTQyMDg2",
                "name": "blocked-by-other-PR"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5sUfAX",
              "createdAt": "2023-11-18T01:25:53Z",
              "body": "This PR/issue depends on:\n* ~~leanprover-community/mathlib4#8221~~\n* ~~leanprover-community/mathlib4#8418~~\nBy **[Dependent Issues](https://github.com/z0al/dependent-issues)** (ü§ñ). Happy coding!\n<!-- By Dependent Issues (Action) - DO NOT REMOVE -->",
              "author": {
                "login": "leanprover-community-mathlib4-bot"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "467a478c849bde39731bb20e01b4e3fee83c9afc"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "2e231b020d61af7b8f05a0fee65f0a50f37c3710"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5sV_Id",
              "createdAt": "2023-11-19T00:45:02Z",
              "body": "> My normal closure PR #8418 is finally up. Sorry for the delay! Can you try to adapt this PR to use the API? I didn't check but maybe you can use some proofs here to golf proofs there.\r\n\r\nNow only `algHomEquivNormalClosure` and `embEquivOfAdjoinSplits` is left, and I used your `IsNormalClosure.equiv` and `Algebra.IsAlgebraic.isNormalClosure_normalClosure`.\r\n\r\nPerhaps `algHomEquivNormalClosure` should also move to the normal closure file?",
              "author": {
                "login": "acmepjz"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5noASw",
              "createdAt": "2023-11-19T04:10:27Z",
              "body": "Looks pretty nice, just a few minor issues",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5noCSo",
              "createdAt": "2023-11-19T06:14:25Z",
              "body": "Looks pretty nice, just a few minor issues",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "ea27a0beb276ad3a86c21b9db6705165896c4275"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5npx-O",
              "createdAt": "2023-11-20T05:56:56Z",
              "body": "Thanks!",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "5d9ebc218421bd133b829dad5885c3cfbc147e1c"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "b0254402a12508d8b4b582b4d033025c33736200"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5nuzjW",
              "createdAt": "2023-11-20T17:14:06Z",
              "body": "Thanks!\r\n\r\nmaintainer merge",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5scy1k",
              "createdAt": "2023-11-20T17:14:18Z",
              "body": "üöÄ Pull request has been placed on the maintainer queue by alreadydone.",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5nu52D",
              "createdAt": "2023-11-20T17:30:13Z",
              "body": "",
              "author": {
                "login": "jcommelin"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "4daabffc271780e7a4ed5d34c0b8853e647d7058"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5sq2QI",
              "createdAt": "2023-11-22T17:11:28Z",
              "body": "Thanks :tada:\r\n\r\nbors merge",
              "author": {
                "login": "jcommelin"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c51rPhyzwAAAAKR_NZA",
              "createdAt": "2023-11-22T17:11:41Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
                "name": "ready-to-merge"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c51rPhyzwAAAAKR_Nbp",
              "createdAt": "2023-11-22T17:11:41Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5tFcMn",
              "createdAt": "2023-11-28T15:54:59Z",
              "body": "bors merge",
              "author": {
                "login": "jcommelin"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5tFs-V",
              "createdAt": "2023-11-28T16:18:00Z",
              "body": "Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/7021319489/job/19103095214)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/7021319489/job/19103094606)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/7021319489/job/19103094303)",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c51rPhyzwAAAAKUxNTy",
              "createdAt": "2023-11-28T16:18:01Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c51rPhyzwAAAAKUxNe3",
              "createdAt": "2023-11-28T16:18:05Z"
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5PseSc",
              "createdAt": "2023-12-04T17:59:28Z",
              "source": {
                "id": "PR_kwDOFcwZ1c5gTXZ0",
                "title": "[Merged by Bors] - feat: Add some equivalent characterisations of primitive elements in finite extensions of fields",
                "url": "https://github.com/leanprover-community/mathlib4/pull/8609"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5P_qqW",
              "createdAt": "2023-12-21T16:01:30Z",
              "source": {
                "id": "PR_kwDOFcwZ1c5h8j6E",
                "title": "[Merged by Bors] - feat(FieldTheory/SeparableDegree): further properties of separable degree of fields and polynomials",
                "url": "https://github.com/leanprover-community/mathlib4/pull/9041"
              }
            }
          ]
        }
      }
    }
  }
}
