{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 343,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "qawbecrdtey"
        },
        "baseRefName": "master",
        "body": "---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n\r\nThe ~~working~~ old branch for this project is [greedoid-defs](https://github.com/leanprover-community/mathlib4/tree/greedoid-defs). This branch does not contain all features of the ~~working~~ old branch, and is for real contribution to Mathlib.\r\n\r\nThe current branch have three files `Accessible.lean`, `Exchange.lean` and `Basic.lean`.\r\n\r\nBefore greedoid is properly defined, it defines two concepts on set systems, namely `ExchangeProperty` in `Exchange.lean` and `AccessibleProperty` and `Accessible` in `Accessible.lean`.\r\n\r\n`Greedoid` is a structure of set systems containing empty set, which satisfies an `ExchangeProperty`, and is defined in `Basic.lean`.\r\n\r\n- Edit(4de12f4e7a4fb883e23b3447ed648d2bff6ac87d): Removed `Basic.lean` (will be added later), changed pull request title.\r\n- Edit(31f82971f047caa60bc9dc48116cc07dc1d307fc): Restored `Basic.lean`, but removed theorems related to `exchangeProperty` and `accessibleProperty`. Removed theorems are likely to be added in the next commit.\r\n- Edit(9494d7b05f1d2cf517cb7816e0a02c4d23aa4520): Splitted into three files (Accessible/Exchange/Basic). Now `Greedoid` uses `Finset α → Prop` as a feasible set. `ground_set` is present as there are some appearance of minors in the literature.",
        "changedFiles": 4,
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c56--kB",
              "body": "Currently it seems we can't find a technical reviewer for this one. If Mathlib is going to grow in this direction, we're going to need help from people who are already familiar with this, or adjacent, material. @apnelson1, would you be able to give this a review?",
              "createdAt": "2024-04-18T08:35:43Z",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c57njqG",
              "body": "@qawbecrdtey, it's helpful if you can mark the conversations with Yury above as \"resolved\" if you've followed the suggestions there. It makes it easier for other reviews coming in to see what has been dealt with, and what is still active.",
              "createdAt": "2024-04-24T03:45:30Z",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6B65i6",
              "body": "### PR summary [6888731ed0](https://github.com/leanprover-community/mathlib4/pull/10186/commits/6888731ed080797ec4ee55ca17a03be64d5448b3)\n\n#### Import changes for modified files\n\nNo significant changes to the import graph\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n| `Mathlib.Data.Greedoid.Accessible` (new file) `Mathlib.Data.Greedoid.Exchange` (new file)|443|\n| `Mathlib.Data.Greedoid.Basic` (new file)|445|\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ Accessible`\n`+ AccessibleProperty`\n`+ Bases`\n`+ Basis`\n`+ ExchangeProperty`\n`+ Greedoid`\n`+ accessible_property`\n`+ bases_card_eq`\n`+ bases_eq_basis_ground`\n`+ bases_feasible`\n`+ bases_maximal`\n`+ bases_subset_ground`\n`+ basis_card_eq`\n`+ basis_feasible`\n`+ basis_maximal`\n`+ basis_subset`\n`+ basis_subset_ground`\n`+ construction_on_accessible`\n`+ eq_of_veq`\n`+ exists_feasible_superset_add_element_feasible`\n`+ exists_superset_of_card_le`\n`+ feasible_inj`\n`+ feasible_injective`\n`+ induction_on_accessible`\n`+ instance : Accessible G.Feasible`\n`+ nonempty_contains_empty`\n`+ nonempty_contains_empty_iff`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n</details>\n\n---\n\n<details><summary>No changes to technical debt.</summary>\n\nYou can run this locally as\n```\n./scripts/technical-debt-metrics.sh pr_summary\n```\n* The `relative` value is the weighted *sum* of the differences with weight given by the *inverse* of the current value of the statistic.\n* The `absolute` value is the `relative` value divided by the total sum of the inverses of the current values (i.e. the weighted *average* of the differences).\n</details>",
              "createdAt": "2024-06-20T02:31:21Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6FEzc6",
              "body": "There are a few things to review:\r\n1. `Finset (Finset α)` or `Finset α -> Prop` or `Set α -> Prop`: Currently it uses `Finset (Finset α)`, as many lemmas on finite family of finite sets in the Combinatorics directory used it. Still I agree there are some conveniences which follow when the family of sets is implemented as `Set α -> Prop` just like `Matroid`, only if we discard computability. `Finset α -> Prop` is an option between those two.\r\n2. Use of `lemma` instead of `theorem`: I could see a new keyword `lemma` in many other files. I wonder if this can be also applied to this file and afterwards.",
              "createdAt": "2024-07-17T07:33:52Z",
              "author": {
                "login": "qawbecrdtey"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6FltzB",
              "body": "I've never heard of a greedoid, so this is out of ignorance, but I don't see any reason to mention `Finset` in this file. Switching to `Set a -> Prop` seems a good idea.",
              "createdAt": "2024-07-20T18:36:16Z",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6FmBQ_",
              "body": "> I've never heard of a greedoid, so this is out of ignorance, but I don't see any reason to mention `Finset` in this file. Switching to `Set a -> Prop` seems a good idea.\r\n\r\nI can see the reason for feasible sets being `Finset`s; you are in a setting where everything is finite by nature, and you get some computability consequences (being able to use `cons` for example) but I can't understand why `feasible` should itself be a `Finset`. \r\n\r\nPresumably since with your setup there can only be finitely many feasible sets, you will never be considering a greedoid on an infinite type? If not, then why not just use `Fintype a` where it may be needed, and have `Feasible : Finset a -> Prop` in the definition. 'feasible' is an adjective rather than a noun, after all. ",
              "createdAt": "2024-07-20T23:43:52Z",
              "author": {
                "login": "apnelson1"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6Fm3Ud",
              "body": "Let me state again that I couldn't find any appearance of greedoids elaborating infinite sets. So for now it should be okay to state it as a family of finite sets. Even if we consider infinite greedoid of any type, the generalization of greedoids will probably not be what we were expecting, thus rewriting the library is a must in any case of generalization.\r\n\r\nThe reason I used `Finset (Finset α)` is simply because I referenced some files in Combinatorics/SetFamily ([1](https://github.com/leanprover-community/mathlib4/blob/7fd56cf8f139d774bfa51062f243c999d34f6903/Mathlib/Combinatorics/SetFamily/Shatter.lean#L31), [2](https://github.com/leanprover-community/mathlib4/blob/7fd56cf8f139d774bfa51062f243c999d34f6903/Mathlib/Combinatorics/SetFamily/Kleitman.lean#L35)) while writing the first draft. This way we can easily know the feasible set of greedoid is also finite. However, the major problem with this approach which I noticed while implementing the draft is that it consumes too much memory. For matroids there is a method of converting a family of bases to a family of independent sets, but the similar thing doesn't work for greedoids. So we should store all the feasible sets, including the basis, if we're not dealing with ranks or closures. This should grow exponentially in most cases, so I also think that `Finset (Finset α)` is not a great idea in this sense. Although it is already implemented, and it was easy to take care of the structure using `Finset` of `Finset`s up to now, I think this should be replaced as it is not really 'computable'.\r\n\r\n`Set α -> Prop` should work great as in matroids. As mentioned above we can restrict `α` as a `Fintype`, or we may simply restrict the feasibility to be `True` only if the set is finite. Of course there may be several other options, but all these can be simply managed using `Finset α -> Prop` (and probably assuming `DecidableEq α`?). Also,\r\n\r\n>  'feasible' is an adjective rather than a noun, after all.\r\n\r\nSo maybe I should work on implementing again with family of feasible sets being `Finset α -> Prop`, with possible improvements. I'll bring the update at around mid-August. Thanks!",
              "createdAt": "2024-07-21T10:24:34Z",
              "author": {
                "login": "qawbecrdtey"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6FnY4P",
              "body": "> Let me state again that I couldn't find any appearance of greedoids elaborating infinite sets. So for now it should be okay to state it as a family of finite sets. Even if we consider infinite greedoid of any type, the generalization of greedoids will probably not be what we were expecting, thus rewriting the library is a must in any case of generalization.\r\n> \r\n> The reason I used `Finset (Finset α)` is simply because I referenced some files in Combinatorics/SetFamily ([1](https://github.com/leanprover-community/mathlib4/blob/7fd56cf8f139d774bfa51062f243c999d34f6903/Mathlib/Combinatorics/SetFamily/Shatter.lean#L31), [2](https://github.com/leanprover-community/mathlib4/blob/7fd56cf8f139d774bfa51062f243c999d34f6903/Mathlib/Combinatorics/SetFamily/Kleitman.lean#L35)) while writing the first draft. This way we can easily know the feasible set of greedoid is also finite. However, the major problem with this approach which I noticed while implementing the draft is that it consumes too much memory. For matroids there is a method of converting a family of bases to a family of independent sets, but the similar thing doesn't work for greedoids. So we should store all the feasible sets, including the basis, if we're not dealing with ranks or closures. This should grow exponentially in most cases, so I also think that `Finset (Finset α)` is not a great idea in this sense. Although it is already implemented, and it was easy to take care of the structure using `Finset` of `Finset`s up to now, I think this should be replaced as it is not really 'computable'.\r\n> \r\n> `Set α -> Prop` should work great as in matroids. As mentioned above we can restrict `α` as a `Fintype`, or we may simply restrict the feasibility to be `True` only if the set is finite. Of course there may be several other options, but all these can be simply managed using `Finset α -> Prop` (and probably assuming `DecidableEq α`?). Also,\r\n> \r\n> > 'feasible' is an adjective rather than a noun, after all.\r\n> \r\n> So maybe I should work on implementing again with family of feasible sets being `Finset α -> Prop`, with possible improvements. I'll bring the update at around mid-August. Thanks!\r\n\r\n\r\n\r\n> Let me state again that I couldn't find any appearance of greedoids elaborating infinite sets. So for now it should be okay to state it as a family of finite sets. Even if we consider infinite greedoid of any type, the generalization of greedoids will probably not be what we were expecting, thus rewriting the library is a must in any case of generalization.\r\n> \r\n> The reason I used `Finset (Finset α)` is simply because I referenced some files in Combinatorics/SetFamily ([1](https://github.com/leanprover-community/mathlib4/blob/7fd56cf8f139d774bfa51062f243c999d34f6903/Mathlib/Combinatorics/SetFamily/Shatter.lean#L31), [2](https://github.com/leanprover-community/mathlib4/blob/7fd56cf8f139d774bfa51062f243c999d34f6903/Mathlib/Combinatorics/SetFamily/Kleitman.lean#L35)) while writing the first draft. This way we can easily know the feasible set of greedoid is also finite. However, the major problem with this approach which I noticed while implementing the draft is that it consumes too much memory. For matroids there is a method of converting a family of bases to a family of independent sets, but the similar thing doesn't work for greedoids. So we should store all the feasible sets, including the basis, if we're not dealing with ranks or closures. This should grow exponentially in most cases, so I also think that `Finset (Finset α)` is not a great idea in this sense. Although it is already implemented, and it was easy to take care of the structure using `Finset` of `Finset`s up to now, I think this should be replaced as it is not really 'computable'.\r\n> \r\n> `Set α -> Prop` should work great as in matroids. As mentioned above we can restrict `α` as a `Fintype`, or we may simply restrict the feasibility to be `True` only if the set is finite. Of course there may be several other options, but all these can be simply managed using `Finset α -> Prop` (and probably assuming `DecidableEq α`?). Also,\r\n> \r\n> > 'feasible' is an adjective rather than a noun, after all.\r\n> \r\n> So maybe I should work on implementing again with family of feasible sets being `Finset α -> Prop`, with possible improvements. I'll bring the update at around mid-August. Thanks!\r\n\r\nIt feels to me like you are mixing ideas about computation and ideas about reasoning in a way that is causing confusion. What exactly are you hoping to achieve with greedoids in lean, computation-wise? ",
              "createdAt": "2024-07-21T15:53:34Z",
              "author": {
                "login": "apnelson1"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6FnZlP",
              "body": "> > Let me state again that I couldn't find any appearance of greedoids elaborating infinite sets. So for now it should be okay to state it as a family of finite sets. Even if we consider infinite greedoid of any type, the generalization of greedoids will probably not be what we were expecting, thus rewriting the library is a must in any case of generalization.\r\n> > The reason I used `Finset (Finset α)` is simply because I referenced some files in Combinatorics/SetFamily ([1](https://github.com/leanprover-community/mathlib4/blob/7fd56cf8f139d774bfa51062f243c999d34f6903/Mathlib/Combinatorics/SetFamily/Shatter.lean#L31), [2](https://github.com/leanprover-community/mathlib4/blob/7fd56cf8f139d774bfa51062f243c999d34f6903/Mathlib/Combinatorics/SetFamily/Kleitman.lean#L35)) while writing the first draft. This way we can easily know the feasible set of greedoid is also finite. However, the major problem with this approach which I noticed while implementing the draft is that it consumes too much memory. For matroids there is a method of converting a family of bases to a family of independent sets, but the similar thing doesn't work for greedoids. So we should store all the feasible sets, including the basis, if we're not dealing with ranks or closures. This should grow exponentially in most cases, so I also think that `Finset (Finset α)` is not a great idea in this sense. Although it is already implemented, and it was easy to take care of the structure using `Finset` of `Finset`s up to now, I think this should be replaced as it is not really 'computable'.\r\n> > `Set α -> Prop` should work great as in matroids. As mentioned above we can restrict `α` as a `Fintype`, or we may simply restrict the feasibility to be `True` only if the set is finite. Of course there may be several other options, but all these can be simply managed using `Finset α -> Prop` (and probably assuming `DecidableEq α`?). Also,\r\n> > > 'feasible' is an adjective rather than a noun, after all.\r\n> > \r\n> > \r\n> > So maybe I should work on implementing again with family of feasible sets being `Finset α -> Prop`, with possible improvements. I'll bring the update at around mid-August. Thanks!\r\n> \r\n> > Let me state again that I couldn't find any appearance of greedoids elaborating infinite sets. So for now it should be okay to state it as a family of finite sets. Even if we consider infinite greedoid of any type, the generalization of greedoids will probably not be what we were expecting, thus rewriting the library is a must in any case of generalization.\r\n> > The reason I used `Finset (Finset α)` is simply because I referenced some files in Combinatorics/SetFamily ([1](https://github.com/leanprover-community/mathlib4/blob/7fd56cf8f139d774bfa51062f243c999d34f6903/Mathlib/Combinatorics/SetFamily/Shatter.lean#L31), [2](https://github.com/leanprover-community/mathlib4/blob/7fd56cf8f139d774bfa51062f243c999d34f6903/Mathlib/Combinatorics/SetFamily/Kleitman.lean#L35)) while writing the first draft. This way we can easily know the feasible set of greedoid is also finite. However, the major problem with this approach which I noticed while implementing the draft is that it consumes too much memory. For matroids there is a method of converting a family of bases to a family of independent sets, but the similar thing doesn't work for greedoids. So we should store all the feasible sets, including the basis, if we're not dealing with ranks or closures. This should grow exponentially in most cases, so I also think that `Finset (Finset α)` is not a great idea in this sense. Although it is already implemented, and it was easy to take care of the structure using `Finset` of `Finset`s up to now, I think this should be replaced as it is not really 'computable'.\r\n> > `Set α -> Prop` should work great as in matroids. As mentioned above we can restrict `α` as a `Fintype`, or we may simply restrict the feasibility to be `True` only if the set is finite. Of course there may be several other options, but all these can be simply managed using `Finset α -> Prop` (and probably assuming `DecidableEq α`?). Also,\r\n> > > 'feasible' is an adjective rather than a noun, after all.\r\n> > \r\n> > \r\n> > So maybe I should work on implementing again with family of feasible sets being `Finset α -> Prop`, with possible improvements. I'll bring the update at around mid-August. Thanks!\r\n> \r\n> It feels to me like you are mixing ideas about computation and ideas about reasoning in a way that is causing confusion. What exactly are you hoping to achieve with greedoids in lean, computation-wise?\r\n\r\nBy the way, am I right in deducing that you are at Kaist? I will be giving a talk about matroid formalization on August 13 - see https://dimag.ibs.re.kr/event/2024-08-13/ . I'd be happy to discuss this in person. ",
              "createdAt": "2024-07-21T16:04:17Z",
              "author": {
                "login": "apnelson1"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6Fnyvf",
              "body": "> By the way, am I right in deducing that you are at Kaist? I will be giving a talk about matroid formalization on August 13 - see https://dimag.ibs.re.kr/event/2024-08-13/ . I'd be happy to discuss this in person. \n\nWhat a coincidence! I'll be looking forward to meeting you then!",
              "createdAt": "2024-07-21T22:54:40Z",
              "author": {
                "login": "qawbecrdtey"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6clZNy",
              "body": "Sadly we can find nobody to review or maintain this theory so I think it's best if we close this PR.",
              "createdAt": "2025-01-31T12:04:06Z",
              "author": {
                "login": "kbuzzard"
              }
            }
          ]
        },
        "closed": true,
        "closedAt": "2025-01-31T12:04:06Z",
        "createdAt": "2024-02-02T12:53:15Z",
        "deletions": 0,
        "files": {
          "nodes": [
            {
              "path": "Mathlib.lean",
              "additions": 3,
              "deletions": 0
            },
            {
              "path": "Mathlib/Data/Greedoid/Accessible.lean",
              "additions": 108,
              "deletions": 0
            },
            {
              "path": "Mathlib/Data/Greedoid/Basic.lean",
              "additions": 152,
              "deletions": 0
            },
            {
              "path": "Mathlib/Data/Greedoid/Exchange.lean",
              "additions": 80,
              "deletions": 0
            }
          ]
        },
        "headRefName": "greedoid-for-contrib",
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5l0_-0",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJPeA",
              "color": "33dbec",
              "name": "t-combinatorics"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABtNO8rw",
              "color": "33DBEC",
              "name": "t-data"
            }
          ]
        },
        "number": 10186,
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5u0wpg",
              "state": "COMMENTED",
              "author": {
                "login": "ericrbg"
              },
              "submittedAt": "2024-02-02T14:00:56Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5u00mi",
              "state": "COMMENTED",
              "author": {
                "login": "qawbecrdtey"
              },
              "submittedAt": "2024-02-02T14:07:08Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5u02Oj",
              "state": "COMMENTED",
              "author": {
                "login": "ericrbg"
              },
              "submittedAt": "2024-02-02T14:09:27Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5u04Pu",
              "state": "COMMENTED",
              "author": {
                "login": "qawbecrdtey"
              },
              "submittedAt": "2024-02-02T14:12:33Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c53rfJQ",
              "state": "COMMENTED",
              "author": {
                "login": "urkud"
              },
              "submittedAt": "2024-04-18T05:35:05Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c53rgu4",
              "state": "COMMENTED",
              "author": {
                "login": "urkud"
              },
              "submittedAt": "2024-04-18T05:41:38Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c53rhdq",
              "state": "COMMENTED",
              "author": {
                "login": "urkud"
              },
              "submittedAt": "2024-04-18T05:44:22Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c53rh13",
              "state": "COMMENTED",
              "author": {
                "login": "urkud"
              },
              "submittedAt": "2024-04-18T05:45:52Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c53rlVr",
              "state": "COMMENTED",
              "author": {
                "login": "urkud"
              },
              "submittedAt": "2024-04-18T05:56:48Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c53rnQh",
              "state": "COMMENTED",
              "author": {
                "login": "urkud"
              },
              "submittedAt": "2024-04-18T06:02:08Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c53rr7k",
              "state": "COMMENTED",
              "author": {
                "login": "urkud"
              },
              "submittedAt": "2024-04-18T06:16:00Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c530F0d",
              "state": "COMMENTED",
              "author": {
                "login": "qawbecrdtey"
              },
              "submittedAt": "2024-04-18T23:57:35Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c532H6q",
              "state": "COMMENTED",
              "author": {
                "login": "github-actions"
              },
              "submittedAt": "2024-04-19T07:05:48Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c54RqLE",
              "state": "COMMENTED",
              "author": {
                "login": "apnelson1"
              },
              "submittedAt": "2024-04-23T17:41:56Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c54UQMt",
              "state": "COMMENTED",
              "author": {
                "login": "qawbecrdtey"
              },
              "submittedAt": "2024-04-24T00:52:46Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c56z47s",
              "state": "COMMENTED",
              "author": {
                "login": "github-actions"
              },
              "submittedAt": "2024-05-16T11:11:48Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c56z6Hs",
              "state": "COMMENTED",
              "author": {
                "login": "github-actions"
              },
              "submittedAt": "2024-05-16T11:14:24Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c561ewc",
              "state": "COMMENTED",
              "author": {
                "login": "qawbecrdtey"
              },
              "submittedAt": "2024-05-16T13:50:03Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6A8otO",
              "state": "COMMENTED",
              "author": {
                "login": "qawbecrdtey"
              },
              "submittedAt": "2024-07-08T13:47:20Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6B3fdK",
              "state": "COMMENTED",
              "author": {
                "login": "apnelson1"
              },
              "submittedAt": "2024-07-15T22:42:30Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6FV8zX",
              "state": "COMMENTED",
              "author": {
                "login": "github-actions"
              },
              "submittedAt": "2024-08-14T04:02:10Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6PuQal",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2024-11-02T15:23:56Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6UNEtB",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2024-12-07T08:51:16Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6YvAaW",
              "state": "COMMENTED",
              "author": {
                "login": "madvorak"
              },
              "submittedAt": "2025-01-20T13:56:16Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6YvBoM",
              "state": "COMMENTED",
              "author": {
                "login": "madvorak"
              },
              "submittedAt": "2025-01-20T13:58:19Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6YvDYu",
              "state": "COMMENTED",
              "author": {
                "login": "madvorak"
              },
              "submittedAt": "2025-01-20T14:01:23Z"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIfixPoA",
                "name": "Add closed-pr emoji in Zulip",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13072348167/job/36476571552"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIWojuzg",
                "name": "Add ready-to-merge or delegated label",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12869565635/job/35878661838"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIWoqWVg",
                "name": "Add ready-to-merge or delegated label",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12869596894/job/35878770262"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIWo07wg",
                "name": "Add ready-to-merge or delegated label",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12869649996/job/35878943682"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIfixPmA",
                "name": "Cross off linked issues",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13072348168/job/36476571544"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAICb9odA",
                "name": "label-and-report-new-contributor",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12370075469/job/34523277428"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIWoju7g",
                "name": "Ping maintainers on Zulip",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12869565633/job/35878661870"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIWoqU4Q",
                "name": "Ping maintainers on Zulip",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12869596892/job/35878769889"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIWo082A",
                "name": "Ping maintainers on Zulip",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12869650020/job/35878943960"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAICb9n6A",
                "name": "post-or-update-summary-comment",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12370075461/job/34523277288"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIWojv8g",
                "name": "Fix style issues from lint",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12869565647/job/35878662130"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIWoqViA",
                "name": "Fix style issues from lint",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12869596899/job/35878770056"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIWo07ug",
                "name": "Fix style issues from lint",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12869649985/job/35878943674"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAICb9YZA",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12370074078/job/34523273316"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAICb9YtA",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12370074068/job/34523273396"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAICb9qDg",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12370075471/job/34523277838"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAICb9aQg",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12370074078/job/34523273794"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAICb9bQA",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12370074068/job/34523274048"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAICb9ouA",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12370075471/job/34523277496"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAICb9btQ",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12370074078/job/34523274165"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAICb9aAg",
                "name": "Build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12370074068/job/34523273730"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAICb9dKw",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12370074078/job/34523274539"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAICcZEow",
                "name": "Post-CI job",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12370074068/job/34523727011"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAICb-Bfw",
                "name": "New Contributor Check",
                "conclusion": "NEUTRAL",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/34523283839"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAICb_ufw",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=10186&login=leanprover-community&repository=mathlib4"
              }
            ]
          }
        },
        "title": "feat: Defining Greedoid",
        "updatedAt": "2025-01-31T12:04:06Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/10186"
      }
    }
  }
}
