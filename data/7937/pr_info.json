{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 113,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "newell"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "Feat: Add the Klein four-group to specific groups.\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 2,
        "closed": true,
        "closedAt": "2023-11-10T19:51:22Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5qIWdj",
              "body": "Do you plan to use this for anything? I think `(ZMod 2) Ã— (ZMod 2)` is enough for most applications?",
              "createdAt": "2023-10-26T07:37:33Z",
              "author": {
                "login": "erdOne"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qMVCh",
              "body": "> Do you plan to use this for anything? I think `(ZMod 2) Ã— (ZMod 2)` is enough for most applications?\r\n\r\nI believe so.  One could ask the same question of the `DihedralGroup` that is already in mathlib since it is equivalent to `Sum (ZMod n) (ZMod n)` but I think as mathlib grows it will be nice to have more maths such as this formalized even if underneath they are equivalent to something else.  \r\n\r\nThere are also more things that could be proved about the Klein four-group such as the isomorphism to the normal subgroup $V = { (), (1,2)(3,4), (1,3)(2,4), (1,4)(2,3) }$ of the alternating group $A_4$.  I tried proving this but ran into some difficulties (I could add a TODO note in the top docstring if needed).",
              "createdAt": "2023-10-26T18:18:16Z",
              "author": {
                "login": "newell"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qNX0-",
              "body": "I don't think `Sum (ZMod n) (ZMod n)` has an `AddGroup` structure on it? `ZMod 2 Ã— ZMod 2` on the other hand automatically gets one from typeclass inference. If you want to prove things about the Klein four group, why not prove the same for `Multiplicative (ZMod 2 Ã— ZMod 2)` instead? It would be fine to me if you introduce an `abbrev KleinFourGroup := Multiplicative (ZMod 2 Ã— ZMod 2)`. ~~By the way, `DihedralGroup 2` is also isomorphic to the Klein four group.~~ (Edit: I see you already showed that.)",
              "createdAt": "2023-10-26T21:02:41Z",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qNhoF",
              "body": "> I don't think `Sum (ZMod n) (ZMod n)` has an `AddGroup` structure on it? `ZMod 2 Ã— ZMod 2` on the other hand automatically gets one from typeclass inference. If you want to prove things about the Klein four group, why not prove the same for `Multiplicative (ZMod 2 Ã— ZMod 2)` instead? It would be fine to me if you introduce an `abbrev KleinFourGroup := Multiplicative (ZMod 2 Ã— ZMod 2)`. ~By the way, `DihedralGroup 2` is also isomorphic to the Klein four group.~ (Edit: I see you already showed that.)\r\n\r\nI am not necessarily against that and ultimately want to do what is best.  I have a question:\r\n\r\nWhat are the main advantages of using `(ZMod 2) x (ZMod 2)`  instead of the inductive definition that `KleinFourGroup` currently has?  \r\n\r\nThe answer may be as simple as \"this builds on definitions that are already in Mathlib\" but maybe there are more reasons.\r\n",
              "createdAt": "2023-10-26T21:38:43Z",
              "author": {
                "login": "newell"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qNjVz",
              "body": "Many results you stated here also hold for `(ZMod n) x (ZMod n)`. If `KleinFourGroup` is defined as `(ZMod 2) x (ZMod 2)` you may obtain the lemmas easily from the general case. ",
              "createdAt": "2023-10-26T21:45:57Z",
              "author": {
                "login": "erdOne"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qOFQP",
              "body": "Do you guys know if there is a way to use `(ZMod 2) x (ZMod 2)` with multiplicative notation that would work?  From what I see I would have to use `+` to get things to work properly (i.e. `(0, 1) + (0, 1) = (0, 0)`, where `a = (0, 1)` and `1 = (0, 0)` from the relation `a^2 = 1`.  I am just used to using `*` and curious if there is a work around for this somewhere (I suppose I could define local notation but this seems rather hackish).",
              "createdAt": "2023-10-26T23:39:39Z",
              "author": {
                "login": "newell"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qOFnA",
              "body": "The `Multiplicative` function that Junyan mentioned above does it.",
              "createdAt": "2023-10-26T23:41:34Z",
              "author": {
                "login": "erdOne"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qOH2d",
              "body": "I tried that but it wasn't working for me.  Will see if I can figure out why.",
              "createdAt": "2023-10-26T23:55:18Z",
              "author": {
                "login": "newell"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qPNmR",
              "body": "@erdOne @alreadydone I updated the definition.  Any other suggestions, let me know.  Thanks for the feedback.",
              "createdAt": "2023-10-27T06:32:42Z",
              "author": {
                "login": "newell"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qeIoV",
              "body": "@alreadydone  Added fixes, thanks for the review.",
              "createdAt": "2023-10-31T01:19:02Z",
              "author": {
                "login": "newell"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qjYTr",
              "body": "> It would be nice if you proved that any group of order 4 which is not cyclic is isomorphic to the `KleinFourGroup`. Also, I would be tempted to name it simply `KleinFour`, but that's just bikeshedding.\r\n\r\nYes, the branch currently is a little thin so I agree getting another meaningful theorem in there would be good.  Will work on that when I get some cycles.",
              "createdAt": "2023-10-31T17:24:32Z",
              "author": {
                "login": "newell"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5rWHwa",
              "body": "I'm a bit concerned about calling the elements `a`, `b`, `c`, despite the namespace, but I don't have a better idea right now. Maybe another maintainer will.\n\nmaintainer merge",
              "createdAt": "2023-11-08T03:40:02Z",
              "author": {
                "login": "j-loreaux"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5rWk7u",
              "body": "maintainer merge",
              "createdAt": "2023-11-08T04:49:51Z",
              "author": {
                "login": "j-loreaux"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5rWk-K",
              "body": "ðŸš€ Pull request has been placed on the maintainer queue by j-loreaux.",
              "createdAt": "2023-11-08T04:50:05Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5rniMi",
              "body": ":v: newell can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests).",
              "createdAt": "2023-11-10T11:08:14Z",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5rniM9",
              "body": "Canceled.",
              "createdAt": "2023-11-10T11:08:15Z",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5rqY5z",
              "body": "bors r+\r\n",
              "createdAt": "2023-11-10T18:53:13Z",
              "author": {
                "login": "newell"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5rqrgI",
              "body": "Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6828798892/job/18573659404)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6828798892/job/18573659095)\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6828798892/job/18573659724)",
              "createdAt": "2023-11-10T19:51:20Z",
              "author": {
                "login": "mathlib-bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "817866430616a486273b6e68e13c8a48b439c69b",
                "additions": 183,
                "deletions": 0,
                "committedDate": "2023-10-26T00:41:24Z",
                "author": {
                  "name": "newell",
                  "email": "newell.jensen@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "fb9f4838e1dd04268aba6a3a6f06591f93ac19ce",
                "additions": 1,
                "deletions": 0,
                "committedDate": "2023-10-26T00:46:27Z",
                "author": {
                  "name": "newell",
                  "email": "newell.jensen@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "25b95b47ae6fc2ca161fe9f7fb442414a24c901f",
                "additions": 0,
                "deletions": 1,
                "committedDate": "2023-10-26T00:51:07Z",
                "author": {
                  "name": "newell",
                  "email": "newell.jensen@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "23e618a5dbfb45b148ea5665e889b35999b14c8d",
                "additions": 2,
                "deletions": 5,
                "committedDate": "2023-10-26T02:44:55Z",
                "author": {
                  "name": "newell",
                  "email": "newell.jensen@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "24f21185ef985c7a29767bf676f3661b5d3147a0",
                "additions": 70,
                "deletions": 84,
                "committedDate": "2023-10-27T06:28:40Z",
                "author": {
                  "name": "newell",
                  "email": "newell.jensen@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "9f10611409f97e3e149ec7f1dbfc5f9ecf1f22b1",
                "additions": 7,
                "deletions": 1,
                "committedDate": "2023-10-27T18:24:48Z",
                "author": {
                  "name": "newell",
                  "email": "newell.jensen@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "be8deef1ef6d67bab01c21b44f820ae6160efa2b",
                "additions": 16,
                "deletions": 39,
                "committedDate": "2023-10-29T21:45:50Z",
                "author": {
                  "name": "newell",
                  "email": "newell.jensen@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "9c1b35c4c48f33c3ea03789d220a1368047b611f",
                "additions": 0,
                "deletions": 3,
                "committedDate": "2023-10-29T21:56:56Z",
                "author": {
                  "name": "newell",
                  "email": "newell.jensen@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "f59bcd3c99ba74f4af263b7b4fb9878c28746542",
                "additions": 29194,
                "deletions": 10847,
                "committedDate": "2023-11-08T01:11:12Z",
                "author": {
                  "name": "newell",
                  "email": "newell.jensen@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "e4e3fde6c8ab91f2c6013130ff0ed564ea4fa357",
                "additions": 29,
                "deletions": 59,
                "committedDate": "2023-11-08T01:26:53Z",
                "author": {
                  "name": "newell",
                  "email": "newell.jensen@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "43b31dd4a5e466f4a7e61e445c47d42ab4f90d27",
                "additions": 3,
                "deletions": 7,
                "committedDate": "2023-11-08T01:31:15Z",
                "author": {
                  "name": "newell",
                  "email": "newell.jensen@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "861c7a8cab2047c02a565c7f08c53eb70e50c3f7",
                "additions": 5,
                "deletions": 4,
                "committedDate": "2023-11-10T18:09:09Z",
                "author": {
                  "name": "Newell Jensen",
                  "email": "newell@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "3195eb541e17e87cb21ef5be02c3e0d1d8e530e4",
                "additions": 3,
                "deletions": 3,
                "committedDate": "2023-11-10T18:23:19Z",
                "author": {
                  "name": "newell",
                  "email": "newell.jensen@gmail.com"
                },
                "statusCheckRollup": null
              }
            }
          ]
        },
        "createdAt": "2023-10-26T00:42:48Z",
        "deletions": 0,
        "files": {
          "nodes": [
            {
              "path": "Mathlib.lean",
              "additions": 1,
              "deletions": 0
            },
            {
              "path": "Mathlib/GroupTheory/SpecificGroups/KleinFour.lean",
              "additions": 112,
              "deletions": 0
            }
          ]
        },
        "headRefName": "newell/klein-four-group",
        "headRefOid": "3195eb541e17e87cb21ef5be02c3e0d1d8e530e4",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5d0Bim",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABAt13Ow",
              "color": "bfd4f2",
              "name": "delegated"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
              "color": "06e039",
              "name": "ready-to-merge"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJjTQ",
              "color": "33DBEC",
              "name": "t-algebra"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5lgFXc",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2023-10-29T07:44:11Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5myp7h",
              "body": "Let's merge this now. But if the API surface grows, we should consider refactoring it to build on top of a characteristic predicate. Because we'll see many Klein four groups that are not defeq to the one chosen in this PR. And it will be ncie if the API applies transparently to all those cases.\r\n\r\nbors merge",
              "state": "COMMENTED",
              "author": {
                "login": "jcommelin"
              },
              "submittedAt": "2023-11-10T11:06:28Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mJkCk",
              "body": "You'll need to merge master for these suggestions to work. I've added a few PRs in the past few days to make life much easier here. In case you're wondering what I did: (#8066, #8072, #8093, #8094).\r\n\r\nAlso, note that my suggestion before about showing any non-cyclic group of order 4 is isomorphic to the Klein four group is probably scope creep, and that should just be a new PR.",
              "state": "COMMENTED",
              "author": {
                "login": "j-loreaux"
              },
              "submittedAt": "2023-11-04T14:15:42Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5myY6U",
              "body": "bors r-\r\n\r\nbors d+\r\n\r\nWhoops, I forgot to submit these small comments",
              "state": "APPROVED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-11-10T11:08:13Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 7937,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": "APPROVED",
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5lgFXc",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2023-10-29T07:44:11Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5lumlZ",
              "body": "It would be nice if you proved that any group of order 4 which is not cyclic is isomorphic to the `KleinFourGroup`. Also, I would be tempted to name it simply `KleinFour`, but that's just bikeshedding.",
              "state": "COMMENTED",
              "author": {
                "login": "j-loreaux"
              },
              "submittedAt": "2023-10-31T16:09:29Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mJkCk",
              "body": "You'll need to merge master for these suggestions to work. I've added a few PRs in the past few days to make life much easier here. In case you're wondering what I did: (#8066, #8072, #8093, #8094).\r\n\r\nAlso, note that my suggestion before about showing any non-cyclic group of order 4 is isomorphic to the Klein four group is probably scope creep, and that should just be a new PR.",
              "state": "COMMENTED",
              "author": {
                "login": "j-loreaux"
              },
              "submittedAt": "2023-11-04T14:15:42Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5myp7h",
              "body": "Let's merge this now. But if the API surface grows, we should consider refactoring it to build on top of a characteristic predicate. Because we'll see many Klein four groups that are not defeq to the one chosen in this PR. And it will be ncie if the API applies transparently to all those cases.\r\n\r\nbors merge",
              "state": "COMMENTED",
              "author": {
                "login": "jcommelin"
              },
              "submittedAt": "2023-11-10T11:06:28Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5myY6U",
              "body": "bors r-\r\n\r\nbors d+\r\n\r\nWhoops, I forgot to submit these small comments",
              "state": "APPROVED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-11-10T11:08:13Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5R-rQr",
                    "body": "Should be\r\n```suggestion\r\ndef e : KleinFourGroup := 1\r\n\r\n/-- Element `a` of Klein four-group. -/\r\ndef a : KleinFourGroup := Multiplicative.ofAdd (0, 1)\r\n```\r\netc.",
                    "createdAt": "2023-10-29T07:38:36Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5R-rRo",
                    "body": "Why do you need `one`? Can't you do\r\n```suggestion\r\ninstance : Inhabited (KleinFourGroup) :=\r\n  âŸ¨eâŸ©\r\n```",
                    "createdAt": "2023-10-29T07:39:02Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5R-rTB",
                    "body": "I don't think you need these as you made `KleinFourGroup` an abbrev.",
                    "createdAt": "2023-10-29T07:39:42Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5R-rWf",
                    "body": "forgot `Multiplicative.ofAdd` here?",
                    "createdAt": "2023-10-29T07:41:18Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5R-rZe",
                    "body": "```suggestion\r\ntheorem exponent : Monoid.exponent KleinFourGroup = 2 := by\r\n  have : Monoid.exponent KleinFourGroup = lcm 2 2 := by\r\n```",
                    "createdAt": "2023-10-29T07:42:58Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5R-rZt",
                    "body": "```suggestion\r\ntheorem notIsCyclic : Â¬ IsCyclic KleinFourGroup := by\r\n```",
                    "createdAt": "2023-10-29T07:43:09Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SICm4",
                    "body": "This (the `have` in the proof) was missing API in `Monoid.exponent` which I've just added in #8066. After that you should just be able to do something like: `rw [KleinFourGroup, Monoid.exponent_prod]; norm_num` or similar.",
                    "createdAt": "2023-10-31T16:07:52Z",
                    "author": {
                      "login": "j-loreaux"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SZcVI",
                    "body": "```suggestion\r\n@[simp] theorem orderOf_a : orderOf a = 2 := orderOf_eq_prime a_order_two (by decide)\r\n```\r\nand similarly for the others",
                    "createdAt": "2023-11-04T14:04:23Z",
                    "author": {
                      "login": "j-loreaux"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SZcY4",
                    "body": "Marked `simp` as `high` because `KleinFourGroup` is an abbreviation, so otherwise `simp` sees through the abbreviation and simplifies using another lemma.\r\n```suggestion\r\n@[simp high]\r\ntheorem exponent : Monoid.exponent KleinFourGroup = 2 := by simp [AddMonoid.exponent_prod]\r\n```",
                    "createdAt": "2023-11-04T14:05:47Z",
                    "author": {
                      "login": "j-loreaux"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SZca8",
                    "body": "With the namespace this is redundant, and we shouldn't say `eq`, because it's not equality.\r\n```suggestion\r\ndef mulEquivDihedralGroup2 : KleinFourGroup â‰ƒ* DihedralGroup 2 where\r\n```",
                    "createdAt": "2023-11-04T14:06:57Z",
                    "author": {
                      "login": "j-loreaux"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SZceY",
                    "body": "When you want to pattern match immediately upon introducing a variable, you don't need to introduce it, just use the `fun` syntax. (Here and below)\r\n```suggestion\r\n  toFun := fun\r\n```",
                    "createdAt": "2023-11-04T14:08:07Z",
                    "author": {
                      "login": "j-loreaux"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SZcim",
                    "body": "```suggestion\r\n  left_inv k := by decide\r\n  right_inv := by decide\r\n```",
                    "createdAt": "2023-11-04T14:09:46Z",
                    "author": {
                      "login": "j-loreaux"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SZcs2",
                    "body": "I don't think this is ambiguous. Note that you would need to search and replace `KleinFourGroup` with `KleinFour`\r\n```suggestion\r\nabbrev KleinFour := Multiplicative (ZMod 2 Ã— ZMod 2)\r\n```",
                    "createdAt": "2023-11-04T14:14:18Z",
                    "author": {
                      "login": "j-loreaux"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SzbLh",
                    "body": "The naming convention asks for:\r\n```suggestion\r\n@[simp] theorem a_sq : a ^ 2 = 1 :=\r\n  rfl\r\n\r\n@[simp] theorem b_sq : b ^ 2 = 1 :=\r\n  rfl\r\n\r\n@[simp] theorem c_sq : c ^ 2 = 1 :=\r\n  rfl\r\n```",
                    "createdAt": "2023-11-10T10:23:27Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SzbUA",
                    "body": "```suggestion\r\n@[simps]\r\ndef mulEquivDihedralGroupTwo : KleinFour â‰ƒ* DihedralGroup 2 where\r\n```",
                    "createdAt": "2023-11-10T10:23:59Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjQxNjMzNTY=",
              "login": "newell"
            },
            {
              "id": "MDQ6VXNlcjM2NDE0Mjcw",
              "login": "erdOne"
            },
            {
              "id": "MDQ6VXNlcjMwNjQxNDU=",
              "login": "alreadydone"
            },
            {
              "id": "MDQ6VXNlcjg5MjA1OTg=",
              "login": "j-loreaux"
            },
            {
              "id": "MDQ6VXNlcjQyNTI2MA==",
              "login": "eric-wieser"
            },
            {
              "id": "MDQ6VXNlcjU2MzY3MDU=",
              "login": "jcommelin"
            },
            {
              "id": "U_kgDOB75MNQ",
              "login": "leanprover-community-mathlib4-bot"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": null,
        "title": "[Merged by Bors] - Feat (GroupTheory.SpecificGroups.KleinFour): Add the Klein four-group to specific groups.",
        "updatedAt": "2023-11-10T19:51:26Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/7937",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "817866430616a486273b6e68e13c8a48b439c69b"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "fb9f4838e1dd04268aba6a3a6f06591f93ac19ce"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c50-Y_WzwAAAAKCKMfS",
              "createdAt": "2023-10-26T00:49:50Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "25b95b47ae6fc2ca161fe9f7fb442414a24c901f"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "23e618a5dbfb45b148ea5665e889b35999b14c8d"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qIWdj",
              "createdAt": "2023-10-26T07:37:33Z",
              "body": "Do you plan to use this for anything? I think `(ZMod 2) Ã— (ZMod 2)` is enough for most applications?",
              "author": {
                "login": "erdOne"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qMVCh",
              "createdAt": "2023-10-26T18:18:16Z",
              "body": "> Do you plan to use this for anything? I think `(ZMod 2) Ã— (ZMod 2)` is enough for most applications?\r\n\r\nI believe so.  One could ask the same question of the `DihedralGroup` that is already in mathlib since it is equivalent to `Sum (ZMod n) (ZMod n)` but I think as mathlib grows it will be nice to have more maths such as this formalized even if underneath they are equivalent to something else.  \r\n\r\nThere are also more things that could be proved about the Klein four-group such as the isomorphism to the normal subgroup $V = { (), (1,2)(3,4), (1,3)(2,4), (1,4)(2,3) }$ of the alternating group $A_4$.  I tried proving this but ran into some difficulties (I could add a TODO note in the top docstring if needed).",
              "author": {
                "login": "newell"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qNX0-",
              "createdAt": "2023-10-26T21:02:41Z",
              "body": "I don't think `Sum (ZMod n) (ZMod n)` has an `AddGroup` structure on it? `ZMod 2 Ã— ZMod 2` on the other hand automatically gets one from typeclass inference. If you want to prove things about the Klein four group, why not prove the same for `Multiplicative (ZMod 2 Ã— ZMod 2)` instead? It would be fine to me if you introduce an `abbrev KleinFourGroup := Multiplicative (ZMod 2 Ã— ZMod 2)`. ~~By the way, `DihedralGroup 2` is also isomorphic to the Klein four group.~~ (Edit: I see you already showed that.)",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qNhoF",
              "createdAt": "2023-10-26T21:38:43Z",
              "body": "> I don't think `Sum (ZMod n) (ZMod n)` has an `AddGroup` structure on it? `ZMod 2 Ã— ZMod 2` on the other hand automatically gets one from typeclass inference. If you want to prove things about the Klein four group, why not prove the same for `Multiplicative (ZMod 2 Ã— ZMod 2)` instead? It would be fine to me if you introduce an `abbrev KleinFourGroup := Multiplicative (ZMod 2 Ã— ZMod 2)`. ~By the way, `DihedralGroup 2` is also isomorphic to the Klein four group.~ (Edit: I see you already showed that.)\r\n\r\nI am not necessarily against that and ultimately want to do what is best.  I have a question:\r\n\r\nWhat are the main advantages of using `(ZMod 2) x (ZMod 2)`  instead of the inductive definition that `KleinFourGroup` currently has?  \r\n\r\nThe answer may be as simple as \"this builds on definitions that are already in Mathlib\" but maybe there are more reasons.\r\n",
              "author": {
                "login": "newell"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qNjVz",
              "createdAt": "2023-10-26T21:45:57Z",
              "body": "Many results you stated here also hold for `(ZMod n) x (ZMod n)`. If `KleinFourGroup` is defined as `(ZMod 2) x (ZMod 2)` you may obtain the lemmas easily from the general case. ",
              "author": {
                "login": "erdOne"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c50-Y_WzwAAAAKC17CY",
              "createdAt": "2023-10-26T21:48:42Z",
              "label": {
                "id": "MDU6TGFiZWwzMjcxMjQ0NzU5",
                "name": "WIP"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c50-Y_WzwAAAAKC17U2",
              "createdAt": "2023-10-26T21:48:55Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qOFQP",
              "createdAt": "2023-10-26T23:39:39Z",
              "body": "Do you guys know if there is a way to use `(ZMod 2) x (ZMod 2)` with multiplicative notation that would work?  From what I see I would have to use `+` to get things to work properly (i.e. `(0, 1) + (0, 1) = (0, 0)`, where `a = (0, 1)` and `1 = (0, 0)` from the relation `a^2 = 1`.  I am just used to using `*` and curious if there is a work around for this somewhere (I suppose I could define local notation but this seems rather hackish).",
              "author": {
                "login": "newell"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qOFnA",
              "createdAt": "2023-10-26T23:41:34Z",
              "body": "The `Multiplicative` function that Junyan mentioned above does it.",
              "author": {
                "login": "erdOne"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qOH2d",
              "createdAt": "2023-10-26T23:55:18Z",
              "body": "I tried that but it wasn't working for me.  Will see if I can figure out why.",
              "author": {
                "login": "newell"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "24f21185ef985c7a29767bf676f3661b5d3147a0"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qPNmR",
              "createdAt": "2023-10-27T06:32:42Z",
              "body": "@erdOne @alreadydone I updated the definition.  Any other suggestions, let me know.  Thanks for the feedback.",
              "author": {
                "login": "newell"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "9f10611409f97e3e149ec7f1dbfc5f9ecf1f22b1"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c50-Y_WzwAAAAKDohlK",
              "createdAt": "2023-10-28T18:41:07Z",
              "label": {
                "id": "MDU6TGFiZWwzMjcxMjQ0NzU5",
                "name": "WIP"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c50-Y_WzwAAAAKDohlL",
              "createdAt": "2023-10-28T18:41:08Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5lgFXc",
              "createdAt": "2023-10-29T07:38:35Z",
              "body": "",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "be8deef1ef6d67bab01c21b44f820ae6160efa2b"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "9c1b35c4c48f33c3ea03789d220a1368047b611f"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qeIoV",
              "createdAt": "2023-10-31T01:19:02Z",
              "body": "@alreadydone  Added fixes, thanks for the review.",
              "author": {
                "login": "newell"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5lumlZ",
              "createdAt": "2023-10-31T16:07:51Z",
              "body": "It would be nice if you proved that any group of order 4 which is not cyclic is isomorphic to the `KleinFourGroup`. Also, I would be tempted to name it simply `KleinFour`, but that's just bikeshedding.",
              "author": {
                "login": "j-loreaux"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c50-Y_WzwAAAAKFG34k",
              "createdAt": "2023-10-31T16:11:18Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c50-Y_WzwAAAAKFG343",
              "createdAt": "2023-10-31T16:11:18Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c50-Y_WzwAAAAKFG4SO",
              "createdAt": "2023-10-31T16:11:26Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJjTQ",
                "name": "t-algebra"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qjYTr",
              "createdAt": "2023-10-31T17:24:32Z",
              "body": "> It would be nice if you proved that any group of order 4 which is not cyclic is isomorphic to the `KleinFourGroup`. Also, I would be tempted to name it simply `KleinFour`, but that's just bikeshedding.\r\n\r\nYes, the branch currently is a little thin so I agree getting another meaningful theorem in there would be good.  Will work on that when I get some cycles.",
              "author": {
                "login": "newell"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c50-Y_WzwAAAAKFKLz1",
              "createdAt": "2023-10-31T17:26:35Z",
              "label": {
                "id": "MDU6TGFiZWwzMjcxMjQ0NzU5",
                "name": "WIP"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5mJkCk",
              "createdAt": "2023-11-04T14:04:23Z",
              "body": "You'll need to merge master for these suggestions to work. I've added a few PRs in the past few days to make life much easier here. In case you're wondering what I did: (#8066, #8072, #8093, #8094).\r\n\r\nAlso, note that my suggestion before about showing any non-cyclic group of order 4 is isomorphic to the Klein four group is probably scope creep, and that should just be a new PR.",
              "author": {
                "login": "j-loreaux"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "f59bcd3c99ba74f4af263b7b4fb9878c28746542"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "e4e3fde6c8ab91f2c6013130ff0ed564ea4fa357"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "43b31dd4a5e466f4a7e61e445c47d42ab4f90d27"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c50-Y_WzwAAAAKJW_rp",
              "createdAt": "2023-11-08T01:41:12Z",
              "label": {
                "id": "MDU6TGFiZWwzMjcxMjQ0NzU5",
                "name": "WIP"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c50-Y_WzwAAAAKJW_rt",
              "createdAt": "2023-11-08T01:41:12Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c50-Y_WzwAAAAKJW_ry",
              "createdAt": "2023-11-08T01:41:12Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5rWHwa",
              "createdAt": "2023-11-08T03:40:02Z",
              "body": "I'm a bit concerned about calling the elements `a`, `b`, `c`, despite the namespace, but I don't have a better idea right now. Maybe another maintainer will.\n\nmaintainer merge",
              "author": {
                "login": "j-loreaux"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5rWk7u",
              "createdAt": "2023-11-08T04:49:51Z",
              "body": "maintainer merge",
              "author": {
                "login": "j-loreaux"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5rWk-K",
              "createdAt": "2023-11-08T04:50:05Z",
              "body": "ðŸš€ Pull request has been placed on the maintainer queue by j-loreaux.",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5myp7h",
              "createdAt": "2023-11-10T11:06:28Z",
              "body": "Let's merge this now. But if the API surface grows, we should consider refactoring it to build on top of a characteristic predicate. Because we'll see many Klein four groups that are not defeq to the one chosen in this PR. And it will be ncie if the API applies transparently to all those cases.\r\n\r\nbors merge",
              "author": {
                "login": "jcommelin"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c50-Y_WzwAAAAKLHPn9",
              "createdAt": "2023-11-10T11:06:41Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
                "name": "ready-to-merge"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c50-Y_WzwAAAAKLHPqV",
              "createdAt": "2023-11-10T11:06:42Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5myY6U",
              "createdAt": "2023-11-10T10:23:27Z",
              "body": "bors r-\r\n\r\nbors d+\r\n\r\nWhoops, I forgot to submit these small comments",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5rniMi",
              "createdAt": "2023-11-10T11:08:14Z",
              "body": ":v: newell can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests).",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5rniM9",
              "createdAt": "2023-11-10T11:08:15Z",
              "body": "Canceled.",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c50-Y_WzwAAAAKLHTrd",
              "createdAt": "2023-11-10T11:08:25Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABAt13Ow",
                "name": "delegated"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "861c7a8cab2047c02a565c7f08c53eb70e50c3f7"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "3195eb541e17e87cb21ef5be02c3e0d1d8e530e4"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5rqY5z",
              "createdAt": "2023-11-10T18:53:13Z",
              "body": "bors r+\r\n",
              "author": {
                "login": "newell"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5rqrgI",
              "createdAt": "2023-11-10T19:51:20Z",
              "body": "Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6828798892/job/18573659404)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6828798892/job/18573659095)\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6828798892/job/18573659724)",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c50-Y_WzwAAAAKLbBZn",
              "createdAt": "2023-11-10T19:51:22Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c50-Y_WzwAAAAKLbBnk",
              "createdAt": "2023-11-10T19:51:26Z"
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5PUoeP",
              "createdAt": "2023-11-12T02:31:27Z",
              "source": {
                "id": "PR_kwDOFcwZ1c5fOXsb",
                "title": "feat(GroupTheory/SpecificGroups): define an isomorphism between a non-cyclic group of order 4 and the dihedral group of order 4",
                "url": "https://github.com/leanprover-community/mathlib4/pull/8360"
              }
            },
            {
              "__typename": "ReferencedEvent"
            }
          ]
        }
      }
    }
  }
}
