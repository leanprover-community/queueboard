{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 64,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "kim-em"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "---\r\n\r\n- [x] depends on: #6297\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 17,
        "closed": true,
        "closedAt": "2023-09-05T10:31:51Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5jE9qG",
              "body": "This PR/issue depends on:\n* ~~leanprover-community/mathlib4#6297~~\nBy **[Dependent Issues](https://github.com/z0al/dependent-issues)** (ðŸ¤–). Happy coding!\n<!-- By Dependent Issues (Action) - DO NOT REMOVE -->",
              "createdAt": "2023-08-02T13:46:43Z",
              "author": {
                "login": "leanprover-community-mathlib4-bot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5jI_dY",
              "body": "!bench",
              "createdAt": "2023-08-03T05:14:00Z",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5jMBFA",
              "body": "Here are the [benchmark results](http://speedcenter.informatik.kit.edu/mathlib4/run-detail/593164a5-6a58-46fe-a2ea-3c0292f579ed) for commit d63c23490b059e51a952cfb6ffc758bbd57c34ea.\nThere were [significant changes](http://speedcenter.informatik.kit.edu/mathlib4/compare/d53699fb-1167-472c-8d23-5136f8e44eef/to/593164a5-6a58-46fe-a2ea-3c0292f579ed) against commit 68a37cd35e05cc51a0f1e5c9ea30473009f881ab:\n```diff\n  Benchmark                                                           Metric         Change\n  =========================================================================================\n- ~Mathlib.CategoryTheory.Limits.FilteredColimitCommutesFiniteLimit   instructions     5.9%\n```",
              "createdAt": "2023-08-03T14:30:44Z",
              "author": {
                "login": "leanprover-bot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5jOase",
              "body": "One file got slower, but overall wall-clock is identical (epsilon faster), so I propose not worrying.",
              "createdAt": "2023-08-03T22:34:19Z",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5jrT9E",
              "body": "I don't understand: how will the simplifier find these injectivity/surjectivity assumptions?",
              "createdAt": "2023-08-09T23:11:09Z",
              "author": {
                "login": "kbuzzard"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5j-NDQ",
              "body": "What is the motivation for this PR? Are you planning to golf some proofs in mathlib? Or some others?",
              "createdAt": "2023-08-14T12:46:04Z",
              "author": {
                "login": "jcommelin"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5kDlVv",
              "body": "This was motivated by @jakelev and I working on our [`transport`](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/status.20of.20.60tactic.2Ftransfer.2Elean.60/near/380967084) tactic, where we often have `Injective` or `Surjective` in the context and would like `simp_all` to just close obvious goals. Adding lemmas like this are very helpful for this.\r\n\r\nSo, no, not planning on golfing specific goals, we just wanted `simp_all` to be more powerful when there was already an `Injective` hypothesis available.\r\n\r\nNot sure I'm going to have much opportunity to work on `transport` in the near future, so this isn't urgent.\r\n\r\n",
              "createdAt": "2023-08-15T09:33:39Z",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5kt5TM",
              "body": "> I don't understand: how will the simplifier find these injectivity/surjectivity assumptions?\r\n\r\nThese can be triggered if `simp` figures out the injectivity hypothesis (say) some other way. For example if we added `simp` to `RingHom.injective` (and I'd argue we should) then the changes here should ensure that `RingHom.cancel_left` fires when the source is a division ring.\r\n\r\nMostly though the huge amount of repetition in the library that this PR highlights makes me wonder if `cancel_left` and `cancel_right` could be folder into the `FunLike` API.",
              "createdAt": "2023-08-23T10:57:50Z",
              "author": {
                "login": "ocfnash"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5kzDxu",
              "body": "> I don't understand: how will the simplifier find these injectivity/surjectivity assumptions?\r\n\r\n@kbuzzard, e.g. `aesop` will use `simp_all`, so injectivity hypotheses in the local context are useful.\r\n\r\nIf you have an injectivity hypotheses `h`, it's also nice to just be able to write `simp [h]`, without having to go find the names of the lemmas that use `h`.",
              "createdAt": "2023-08-24T06:53:16Z",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5lsvaM",
              "body": "Let's get this in. Thanks!\r\nbors r+",
              "createdAt": "2023-09-05T09:04:13Z",
              "author": {
                "login": "sgouezel"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5ltQQp",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6082600439/job/16500717796)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6082600439/job/16500718007)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6082600439/job/16500718233)",
              "createdAt": "2023-09-05T10:31:50Z",
              "author": {
                "login": "bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "d63c23490b059e51a952cfb6ffc758bbd57c34ea",
                "additions": 64,
                "deletions": 6,
                "committedDate": "2023-08-03T05:12:32Z",
                "author": {
                  "name": "Scott Morrison",
                  "email": "scott.morrison@gmail.com"
                },
                "statusCheckRollup": null
              }
            }
          ]
        },
        "createdAt": "2023-08-02T11:03:45Z",
        "deletions": 6,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/Algebra/Hom/Centroid.lean",
              "additions": 2,
              "deletions": 0
            },
            {
              "path": "Mathlib/Algebra/Hom/Freiman.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Algebra/Hom/Ring.lean",
              "additions": 4,
              "deletions": 0
            },
            {
              "path": "Mathlib/Algebra/Module/LinearMap.lean",
              "additions": 2,
              "deletions": 0
            },
            {
              "path": "Mathlib/Algebra/Order/Hom/Monoid.lean",
              "additions": 4,
              "deletions": 2
            },
            {
              "path": "Mathlib/Algebra/Order/Hom/Ring.lean",
              "additions": 3,
              "deletions": 0
            },
            {
              "path": "Mathlib/Order/Heyting/Hom.lean",
              "additions": 6,
              "deletions": 0
            },
            {
              "path": "Mathlib/Order/Hom/Bounded.lean",
              "additions": 6,
              "deletions": 0
            },
            {
              "path": "Mathlib/Order/Hom/CompleteLattice.lean",
              "additions": 8,
              "deletions": 0
            },
            {
              "path": "Mathlib/Order/Hom/Lattice.lean",
              "additions": 12,
              "deletions": 0
            },
            {
              "path": "Mathlib/Topology/Bornology/Hom.lean",
              "additions": 2,
              "deletions": 0
            },
            {
              "path": "Mathlib/Topology/ContinuousFunction/Basic.lean",
              "additions": 2,
              "deletions": 0
            },
            {
              "path": "Mathlib/Topology/Hom/Open.lean",
              "additions": 2,
              "deletions": 1
            },
            {
              "path": "Mathlib/Topology/MetricSpace/Dilation.lean",
              "additions": 2,
              "deletions": 0
            },
            {
              "path": "Mathlib/Topology/Order/Hom/Basic.lean",
              "additions": 2,
              "deletions": 1
            },
            {
              "path": "Mathlib/Topology/Order/Hom/Esakia.lean",
              "additions": 4,
              "deletions": 1
            },
            {
              "path": "Mathlib/Topology/Spectral/Hom.lean",
              "additions": 2,
              "deletions": 0
            }
          ]
        },
        "headRefName": "cancel_simps",
        "headRefOid": "d63c23490b059e51a952cfb6ffc758bbd57c34ea",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5W_4t6",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
              "color": "06e039",
              "name": "ready-to-merge"
            }
          ]
        },
        "latestReviews": {
          "nodes": []
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 6300,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": []
        },
        "reviewThreads": {
          "nodes": []
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjQ3Nzk1Ng==",
              "login": "kim-em"
            },
            {
              "id": "U_kgDOB75MNQ",
              "login": "leanprover-community-mathlib4-bot"
            },
            {
              "id": "MDQ6VXNlcjg1NjY4Mzk0",
              "login": "leanprover-bot"
            },
            {
              "id": "MDQ6VXNlcjMxODY3ODI3",
              "login": "kbuzzard"
            },
            {
              "id": "MDQ6VXNlcjU2MzY3MDU=",
              "login": "jcommelin"
            },
            {
              "id": "MDQ6VXNlcjc3MzQzNjQ=",
              "login": "ocfnash"
            },
            {
              "id": "MDQ6VXNlcjEwODE4NDM0",
              "login": "sgouezel"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": null,
        "title": "[Merged by Bors] - chore: @[simp] cancel_(right|left)",
        "updatedAt": "2023-09-05T10:31:59Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/6300",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5tQMBhzwAAAAJTQbCZ",
              "createdAt": "2023-08-02T11:03:46Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5tQMBhzwAAAAJTQ29C",
              "createdAt": "2023-08-02T11:17:06Z",
              "label": {
                "id": "MDU6TGFiZWwzMjg4OTQyMDg2",
                "name": "blocked-by-other-PR"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5tQMBhzwAAAAJTWp4f",
              "createdAt": "2023-08-02T13:46:42Z",
              "label": {
                "id": "MDU6TGFiZWwzMjg4OTQyMDg2",
                "name": "blocked-by-other-PR"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5jE9qG",
              "createdAt": "2023-08-02T13:46:43Z",
              "body": "This PR/issue depends on:\n* ~~leanprover-community/mathlib4#6297~~\nBy **[Dependent Issues](https://github.com/z0al/dependent-issues)** (ðŸ¤–). Happy coding!\n<!-- By Dependent Issues (Action) - DO NOT REMOVE -->",
              "author": {
                "login": "leanprover-community-mathlib4-bot"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5tQMBhzwAAAAJTtq2t",
              "createdAt": "2023-08-03T04:55:04Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c5tQMBhzwAAAAJTt8jK",
              "createdAt": "2023-08-03T05:10:44Z"
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "d63c23490b059e51a952cfb6ffc758bbd57c34ea"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c5tQMBhzwAAAAJTt_HQ",
              "createdAt": "2023-08-03T05:12:48Z"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5jI_dY",
              "createdAt": "2023-08-03T05:14:00Z",
              "body": "!bench",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5jMBFA",
              "createdAt": "2023-08-03T14:30:44Z",
              "body": "Here are the [benchmark results](http://speedcenter.informatik.kit.edu/mathlib4/run-detail/593164a5-6a58-46fe-a2ea-3c0292f579ed) for commit d63c23490b059e51a952cfb6ffc758bbd57c34ea.\nThere were [significant changes](http://speedcenter.informatik.kit.edu/mathlib4/compare/d53699fb-1167-472c-8d23-5136f8e44eef/to/593164a5-6a58-46fe-a2ea-3c0292f579ed) against commit 68a37cd35e05cc51a0f1e5c9ea30473009f881ab:\n```diff\n  Benchmark                                                           Metric         Change\n  =========================================================================================\n- ~Mathlib.CategoryTheory.Limits.FilteredColimitCommutesFiniteLimit   instructions     5.9%\n```",
              "author": {
                "login": "leanprover-bot"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5jOase",
              "createdAt": "2023-08-03T22:34:19Z",
              "body": "One file got slower, but overall wall-clock is identical (epsilon faster), so I propose not worrying.",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5tQMBhzwAAAAJVBEWd",
              "createdAt": "2023-08-06T00:05:24Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5jrT9E",
              "createdAt": "2023-08-09T23:11:09Z",
              "body": "I don't understand: how will the simplifier find these injectivity/surjectivity assumptions?",
              "author": {
                "login": "kbuzzard"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5j-NDQ",
              "createdAt": "2023-08-14T12:46:04Z",
              "body": "What is the motivation for this PR? Are you planning to golf some proofs in mathlib? Or some others?",
              "author": {
                "login": "jcommelin"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5kDlVv",
              "createdAt": "2023-08-15T09:33:39Z",
              "body": "This was motivated by @jakelev and I working on our [`transport`](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/status.20of.20.60tactic.2Ftransfer.2Elean.60/near/380967084) tactic, where we often have `Injective` or `Surjective` in the context and would like `simp_all` to just close obvious goals. Adding lemmas like this are very helpful for this.\r\n\r\nSo, no, not planning on golfing specific goals, we just wanted `simp_all` to be more powerful when there was already an `Injective` hypothesis available.\r\n\r\nNot sure I'm going to have much opportunity to work on `transport` in the near future, so this isn't urgent.\r\n\r\n",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5kt5TM",
              "createdAt": "2023-08-23T10:57:50Z",
              "body": "> I don't understand: how will the simplifier find these injectivity/surjectivity assumptions?\r\n\r\nThese can be triggered if `simp` figures out the injectivity hypothesis (say) some other way. For example if we added `simp` to `RingHom.injective` (and I'd argue we should) then the changes here should ensure that `RingHom.cancel_left` fires when the source is a division ring.\r\n\r\nMostly though the huge amount of repetition in the library that this PR highlights makes me wonder if `cancel_left` and `cancel_right` could be folder into the `FunLike` API.",
              "author": {
                "login": "ocfnash"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5kzDxu",
              "createdAt": "2023-08-24T06:53:16Z",
              "body": "> I don't understand: how will the simplifier find these injectivity/surjectivity assumptions?\r\n\r\n@kbuzzard, e.g. `aesop` will use `simp_all`, so injectivity hypotheses in the local context are useful.\r\n\r\nIf you have an injectivity hypotheses `h`, it's also nice to just be able to write `simp [h]`, without having to go find the names of the lemmas that use `h`.",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5lsvaM",
              "createdAt": "2023-09-05T09:04:13Z",
              "body": "Let's get this in. Thanks!\r\nbors r+",
              "author": {
                "login": "sgouezel"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5tQMBhzwAAAAJkyyMB",
              "createdAt": "2023-09-05T09:04:53Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
                "name": "ready-to-merge"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5tQMBhzwAAAAJkyyOw",
              "createdAt": "2023-09-05T09:04:54Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5ltQQp",
              "createdAt": "2023-09-05T10:31:50Z",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6082600439/job/16500717796)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6082600439/job/16500718007)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6082600439/job/16500718233)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c5tQMBhzwAAAAJk2RpG",
              "createdAt": "2023-09-05T10:31:52Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c5tQMBhzwAAAAJk2R6s",
              "createdAt": "2023-09-05T10:31:59Z"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            }
          ]
        }
      }
    }
  }
}
