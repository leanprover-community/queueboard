{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 419,
        "assignees": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjY2ODQ3MjYy",
              "login": "EtienneC30"
            }
          ]
        },
        "author": {
          "login": "rudynicolop"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "Add the closure properties union and intersection for DFA and NFA, complement for DFA, and reversal for NFA.\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nFor details on the \"pull request lifecycle\" in mathlib, please see:\r\nhttps://leanprover-community.github.io/contribute/index.html\r\n\r\nIn particular, note that most reviewers will only notice your PR\r\nif it passes the continuous integration checks.\r\nPlease ask for help on https://leanprover.zulipchat.com if needed.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nIf you are moving or deleting declarations, please include these lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nMoves:\r\n- Vector.* -> List.Vector.*\r\n- ...\r\n\r\nDeletions:\r\n- Nat.bit1_add_bit1\r\n- ...\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 2,
        "closed": true,
        "closedAt": "2025-02-27T09:07:51Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c6f7Ekx",
              "body": "### PR summary [3073165533](https://github.com/leanprover-community/mathlib4/pull/22298/commits/3073165533b9b7e20f701891498c08ce96d8d675)\n\n#### Import changes for modified files\n\nNo significant changes to the import graph\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ acceptsFrom`\n`+ accepts_acceptsFrom`\n`+ complement.Spec`\n`+ complement.SpecFrom`\n`+ instance : HasCompl (DFA α σ)`\n`+ intersect.biUnionSpec`\n`+ intersect.startSpec`\n`+ mem_acceptsFrom`\n`+ mem_startsTo`\n`+ mem_unstep`\n`+ mem_unstepSet`\n`+ mem_unstepSet_step`\n`+ reverse`\n`+ reverse.Spec`\n`+ reverse.SpecFrom`\n`+ reverse.rewindFromSpec`\n`+ reverse.startsToSpec`\n`+ rewind`\n`+ rewindFrom`\n`+ startsTo`\n`+ stepProd`\n`+ stepSum`\n`+ union.biUnionSpec`\n`+ union.startSpec`\n`+ unstep`\n`+ unstepSet`\n`++ intersect`\n`++ intersect.Spec`\n`++ intersect.SpecFrom`\n`++ union`\n`++ union.Spec`\n`++ union.SpecFrom`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n</details>\n\n---\n\n<details><summary>No changes to technical debt.</summary>\n\nYou can run this locally as\n```\n./scripts/technical-debt-metrics.sh pr_summary\n```\n* The `relative` value is the weighted *sum* of the differences with weight given by the *inverse* of the current value of the statistic.\n* The `absolute` value is the `relative` value divided by the total sum of the inverses of the current values (i.e. the weighted *average* of the differences).\n</details>\n",
              "createdAt": "2025-02-25T19:27:37Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6f8X1x",
              "body": "Mentioning #20238 by @maemre which is also about that",
              "createdAt": "2025-02-25T22:07:25Z",
              "author": {
                "login": "EtienneC30"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6f_mjC",
              "body": "> Mentioning #20238 by @maemre which is also about that\r\n\r\nTo avoid collisions, would it make sense if I broke up my pull request into one for DFAs, and another for NFAs?\r\nFor the DFA one, can I just include union, since #20238 already includes complement and intersection.",
              "createdAt": "2025-02-26T08:19:58Z",
              "author": {
                "login": "rudynicolop"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6gD1IU",
              "body": "Yes that would be great, thanks!",
              "createdAt": "2025-02-26T15:10:14Z",
              "author": {
                "login": "EtienneC30"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6gGfL_",
              "body": "I can add union to #20238, the structure of the construction there allows adding it easily. I will fix the style issues from the code review and add that by tomorrow.\r\n\r\nThere is one difference between the two PRs (w.r.t. the DFA part) about how the correctness theorem is stated: This PR states  the correctness theorem in terms of set operations, and #20238 states it using logical connectives. I am happy with either way of stating it. The set operator-based one is more intuitive in my opinion, but the logical connective-based statement is how [the analogous theorem in regular expression](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Computability/RegularExpressions.html#RegularExpression.add_rmatch_iff) is stated.\r\n\r\nHere is the set operator-based one:\r\n\r\n```lean\r\ntheorem intersect.Spec\r\n  (M1 : DFA α σ1) (M2 : DFA α σ2) :\r\n  accepts (intersect M1 M2) = M1.accepts ∩ M2.accepts := by\r\n```\r\n\r\nHere is the logical connective one:\r\n\r\n```lean\r\ntheorem intersect_accepts_iff\r\n  (M₁ : DFA α σ) (M₂ : DFA α σ') (x : List α) :\r\n    x ∈ (intersect M₁ M₂).accepts ↔ x ∈ M₁.accepts ∧ x ∈ M₂.accepts := by\r\n```",
              "createdAt": "2025-02-26T19:55:58Z",
              "author": {
                "login": "maemre"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6gLTWV",
              "body": "> I can add union to #20238, the structure of the construction there allows adding it easily. I will fix the style issues from the code review and add that by tomorrow.\r\n\r\nGreat! I will then make this PR only about NFAs.\r\n\r\n",
              "createdAt": "2025-02-27T09:02:15Z",
              "author": {
                "login": "rudynicolop"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6gLVlj",
              "body": "> There is one difference between the two PRs (w.r.t. the DFA part) about how the correctness theorem is stated: This PR states the correctness theorem in terms of set operations, and #20238 states it using logical connectives. I am happy with either way of stating it. The set operator-based one is more intuitive in my opinion, but the logical connective-based statement is how [the analogous theorem in regular expression](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Computability/RegularExpressions.html#RegularExpression.add_rmatch_iff) is stated.\r\n> \r\n> Here is the set operator-based one:\r\n> \r\n> ```lean\r\n> theorem intersect.Spec\r\n>   (M1 : DFA α σ1) (M2 : DFA α σ2) :\r\n>   accepts (intersect M1 M2) = M1.accepts ∩ M2.accepts := by\r\n> ```\r\n> \r\n> Here is the logical connective one:\r\n> \r\n> ```lean\r\n> theorem intersect_accepts_iff\r\n>   (M₁ : DFA α σ) (M₂ : DFA α σ') (x : List α) :\r\n>     x ∈ (intersect M₁ M₂).accepts ↔ x ∈ M₁.accepts ∧ x ∈ M₂.accepts := by\r\n> ```\r\n\r\nGood point! Since Lean admits set extensionality, and since (from what I've seen) many formal language proofs like to use set-based statements I used the set operator way. \r\n",
              "createdAt": "2025-02-27T09:06:04Z",
              "author": {
                "login": "rudynicolop"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "3073165533b9b7e20f701891498c08ce96d8d675",
                "additions": 419,
                "deletions": 0,
                "committedDate": "2025-02-24T20:35:46Z",
                "author": {
                  "name": "rudynicolop",
                  "email": "rudypotamia@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIzYDWUg",
                        "name": "set_pr_emoji",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13529332653/job/37807511122"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIyXhHHw",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13507334858/job/37739841311"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI040slg",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13562721338/job/37908982934"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI040seQ",
                        "name": "Add closed-pr emoji in Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13562721663/job/37908982905"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIzYDWBQ",
                        "name": "Add topic label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13529332619/job/37807511045"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI040sew",
                        "name": "Cross off linked issues",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13562721667/job/37908982907"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIzYDWUQ",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13529332618/job/37807511121"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIzYDVwA",
                        "name": "post-or-update-summary-comment",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13529332607/job/37807510976"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIyXhG_Q",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13507334856/job/37739841277"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI040sFQ",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13562721322/job/37908982805"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIzYDYkQ",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13529332616/job/37807511697"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIyXhJBw",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13507334858/job/37739841799"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI040uvA",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13562721338/job/37908983484"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIyXhFiw",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13507334856/job/37739840907"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI040uOw",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13562721322/job/37908983355"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIzYDW8A",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13529332616/job/37807511280"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIyXhMpw",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13507334858/job/37739842727"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI040wTA",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13562721338/job/37908983884"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIyX7k6Q",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13507334856/job/37740274921"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI05Tmkw",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13562721322/job/37909489299"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIzYDvpA",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/37807517604"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIzYE3JA",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=22298&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "createdAt": "2025-02-25T19:26:33Z",
        "deletions": 0,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/Computability/DFA.lean",
              "additions": 104,
              "deletions": 0
            },
            {
              "path": "Mathlib/Computability/NFA.lean",
              "additions": 315,
              "deletions": 0
            }
          ]
        },
        "headRefName": "DFA-transform",
        "headRefOid": "3073165533b9b7e20f701891498c08ce96d8d675",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c6MhagF",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABb5aSCQ",
              "color": "8BBA68",
              "name": "new-contributor"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABgS7AmA",
              "color": "33DBEC",
              "name": "t-computability"
            }
          ]
        },
        "latestReviews": {
          "nodes": []
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "BLOCKED",
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 22298,
        "potentialMergeCommit": {
          "oid": "eed354df19dbab5c7fe8de8e7f34da6ead8e1d37"
        },
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": []
        },
        "reviewThreads": {
          "nodes": []
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjQ3NTc3MDEw",
              "login": "rudynicolop"
            },
            {
              "id": "MDQ6VXNlcjY2ODQ3MjYy",
              "login": "EtienneC30"
            },
            {
              "id": "MDQ6VXNlcjU2MjkxMA==",
              "login": "maemre"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIzYDWUg",
                "name": "set_pr_emoji",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13529332653/job/37807511122"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIyXhHHw",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13507334858/job/37739841311"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI040slg",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13562721338/job/37908982934"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI040seQ",
                "name": "Add closed-pr emoji in Zulip",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13562721663/job/37908982905"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIzYDWBQ",
                "name": "Add topic label",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13529332619/job/37807511045"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI040sew",
                "name": "Cross off linked issues",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13562721667/job/37908982907"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIzYDWUQ",
                "name": "label-and-report-new-contributor",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13529332618/job/37807511121"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIzYDVwA",
                "name": "post-or-update-summary-comment",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13529332607/job/37807510976"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIyXhG_Q",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13507334856/job/37739841277"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI040sFQ",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13562721322/job/37908982805"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIzYDYkQ",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13529332616/job/37807511697"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIyXhJBw",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13507334858/job/37739841799"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI040uvA",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13562721338/job/37908983484"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIyXhFiw",
                "name": "Build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13507334856/job/37739840907"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI040uOw",
                "name": "Build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13562721322/job/37908983355"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIzYDW8A",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13529332616/job/37807511280"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIyXhMpw",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13507334858/job/37739842727"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI040wTA",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13562721338/job/37908983884"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIyX7k6Q",
                "name": "Post-CI job",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13507334856/job/37740274921"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI05Tmkw",
                "name": "Post-CI job",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13562721322/job/37909489299"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIzYDvpA",
                "name": "New Contributor Check",
                "conclusion": "NEUTRAL",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/37807517604"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIzYE3JA",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=22298&login=leanprover-community&repository=mathlib4"
              }
            ]
          }
        },
        "title": "feat(Computability/DFA, NFA): dfa and nfa closure properties",
        "updatedAt": "2025-02-27T09:07:52Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/22298",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "3073165533b9b7e20f701891498c08ce96d8d675"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6rn3wszwAAAAPVgcLv",
              "createdAt": "2025-02-25T19:26:33Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABb5aSCQ",
                "name": "new-contributor"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6f7Ekx",
              "createdAt": "2025-02-25T19:27:37Z",
              "body": "### PR summary [3073165533](https://github.com/leanprover-community/mathlib4/pull/22298/commits/3073165533b9b7e20f701891498c08ce96d8d675)\n\n#### Import changes for modified files\n\nNo significant changes to the import graph\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ acceptsFrom`\n`+ accepts_acceptsFrom`\n`+ complement.Spec`\n`+ complement.SpecFrom`\n`+ instance : HasCompl (DFA α σ)`\n`+ intersect.biUnionSpec`\n`+ intersect.startSpec`\n`+ mem_acceptsFrom`\n`+ mem_startsTo`\n`+ mem_unstep`\n`+ mem_unstepSet`\n`+ mem_unstepSet_step`\n`+ reverse`\n`+ reverse.Spec`\n`+ reverse.SpecFrom`\n`+ reverse.rewindFromSpec`\n`+ reverse.startsToSpec`\n`+ rewind`\n`+ rewindFrom`\n`+ startsTo`\n`+ stepProd`\n`+ stepSum`\n`+ union.biUnionSpec`\n`+ union.startSpec`\n`+ unstep`\n`+ unstepSet`\n`++ intersect`\n`++ intersect.Spec`\n`++ intersect.SpecFrom`\n`++ union`\n`++ union.Spec`\n`++ union.SpecFrom`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n</details>\n\n---\n\n<details><summary>No changes to technical debt.</summary>\n\nYou can run this locally as\n```\n./scripts/technical-debt-metrics.sh pr_summary\n```\n* The `relative` value is the weighted *sum* of the differences with weight given by the *inverse* of the current value of the statistic.\n* The `absolute` value is the `relative` value divided by the total sum of the inverses of the current values (i.e. the weighted *average* of the differences).\n</details>\n",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6rn3wszwAAAAPVgfsi",
              "createdAt": "2025-02-25T19:27:38Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABgS7AmA",
                "name": "t-computability"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6f8X1x",
              "createdAt": "2025-02-25T22:07:25Z",
              "body": "Mentioning #20238 by @maemre which is also about that",
              "author": {
                "login": "EtienneC30"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6f_mjC",
              "createdAt": "2025-02-26T08:19:58Z",
              "body": "> Mentioning #20238 by @maemre which is also about that\r\n\r\nTo avoid collisions, would it make sense if I broke up my pull request into one for DFAs, and another for NFAs?\r\nFor the DFA one, can I just include union, since #20238 already includes complement and intersection.",
              "author": {
                "login": "rudynicolop"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6gD1IU",
              "createdAt": "2025-02-26T15:10:14Z",
              "body": "Yes that would be great, thanks!",
              "author": {
                "login": "EtienneC30"
              }
            },
            {
              "__typename": "AssignedEvent",
              "id": "AE_lADOFcwZ1c6rn3wszwAAAAPWZJ19",
              "createdAt": "2025-02-26T15:10:31Z",
              "assignee": {
                "id": "MDQ6VXNlcjY2ODQ3MjYy",
                "login": "EtienneC30"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6gGfL_",
              "createdAt": "2025-02-26T19:55:58Z",
              "body": "I can add union to #20238, the structure of the construction there allows adding it easily. I will fix the style issues from the code review and add that by tomorrow.\r\n\r\nThere is one difference between the two PRs (w.r.t. the DFA part) about how the correctness theorem is stated: This PR states  the correctness theorem in terms of set operations, and #20238 states it using logical connectives. I am happy with either way of stating it. The set operator-based one is more intuitive in my opinion, but the logical connective-based statement is how [the analogous theorem in regular expression](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Computability/RegularExpressions.html#RegularExpression.add_rmatch_iff) is stated.\r\n\r\nHere is the set operator-based one:\r\n\r\n```lean\r\ntheorem intersect.Spec\r\n  (M1 : DFA α σ1) (M2 : DFA α σ2) :\r\n  accepts (intersect M1 M2) = M1.accepts ∩ M2.accepts := by\r\n```\r\n\r\nHere is the logical connective one:\r\n\r\n```lean\r\ntheorem intersect_accepts_iff\r\n  (M₁ : DFA α σ) (M₂ : DFA α σ') (x : List α) :\r\n    x ∈ (intersect M₁ M₂).accepts ↔ x ∈ M₁.accepts ∧ x ∈ M₂.accepts := by\r\n```",
              "author": {
                "login": "maemre"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6gLTWV",
              "createdAt": "2025-02-27T09:02:15Z",
              "body": "> I can add union to #20238, the structure of the construction there allows adding it easily. I will fix the style issues from the code review and add that by tomorrow.\r\n\r\nGreat! I will then make this PR only about NFAs.\r\n\r\n",
              "author": {
                "login": "rudynicolop"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6gLVlj",
              "createdAt": "2025-02-27T09:06:04Z",
              "body": "> There is one difference between the two PRs (w.r.t. the DFA part) about how the correctness theorem is stated: This PR states the correctness theorem in terms of set operations, and #20238 states it using logical connectives. I am happy with either way of stating it. The set operator-based one is more intuitive in my opinion, but the logical connective-based statement is how [the analogous theorem in regular expression](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Computability/RegularExpressions.html#RegularExpression.add_rmatch_iff) is stated.\r\n> \r\n> Here is the set operator-based one:\r\n> \r\n> ```lean\r\n> theorem intersect.Spec\r\n>   (M1 : DFA α σ1) (M2 : DFA α σ2) :\r\n>   accepts (intersect M1 M2) = M1.accepts ∩ M2.accepts := by\r\n> ```\r\n> \r\n> Here is the logical connective one:\r\n> \r\n> ```lean\r\n> theorem intersect_accepts_iff\r\n>   (M₁ : DFA α σ) (M₂ : DFA α σ') (x : List α) :\r\n>     x ∈ (intersect M₁ M₂).accepts ↔ x ∈ M₁.accepts ∧ x ∈ M₂.accepts := by\r\n> ```\r\n\r\nGood point! Since Lean admits set extensionality, and since (from what I've seen) many formal language proofs like to use set-based statements I used the set operator way. \r\n",
              "author": {
                "login": "rudynicolop"
              }
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c6rn3wszwAAAAPXEiNn",
              "createdAt": "2025-02-27T09:07:51Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c6rn3wszwAAAAPXEiOg",
              "createdAt": "2025-02-27T09:07:52Z"
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c59h_iY",
              "createdAt": "2025-02-27T09:25:18Z",
              "source": {
                "id": "PR_kwDOFcwZ1c6MxEam",
                "title": "feat(Computability/NFA): nfa closure properties",
                "url": "https://github.com/leanprover-community/mathlib4/pull/22361"
              }
            }
          ]
        }
      }
    }
  }
}
