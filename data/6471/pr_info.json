{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 75,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "adomani"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "Writing `change? (some term)` tries to unify the given term with the current goal and prints the result of unification (and instantiation of meta-variables).  This is useful to replace a `dsimp` by a `change ...`, when you already know what you would like the end defeq expression to look like.\r\n\r\n[Zulip discussion](https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Copying.20from.20the.20widget.20view)\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 4,
        "closed": true,
        "closedAt": "2023-08-27T10:43:26Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5j6R-U",
              "body": "@thorimur thank you very much for your suggestions: the new code looks so much better!",
              "createdAt": "2023-08-13T04:33:52Z",
              "author": {
                "login": "adomani"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5j6Syt",
              "body": "LGTM! :) Thanks for being so responsive! At some point we will also want to add `at` syntax as well, but this is a very nice PR as-is. Thanks for writing it! :)",
              "createdAt": "2023-08-13T04:50:03Z",
              "author": {
                "login": "thorimur"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5j6UAm",
              "body": "Yes, `at`-syntax is next!  It would be nice if there were a tactic for converting a tactic to `at`-syntax... 🙃",
              "createdAt": "2023-08-13T05:13:32Z",
              "author": {
                "login": "adomani"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5lAMmz",
              "body": "bors d+",
              "createdAt": "2023-08-27T02:21:26Z",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5lAMm3",
              "body": ":v: adomani can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests).",
              "createdAt": "2023-08-27T02:21:27Z",
              "author": {
                "login": "bors"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5lAQLY",
              "body": "bors r+",
              "createdAt": "2023-08-27T04:12:50Z",
              "author": {
                "login": "adomani"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5lATUE",
              "body": "Build failed (retrying...):\n  * Build",
              "createdAt": "2023-08-27T05:46:21Z",
              "author": {
                "login": "bors"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5lAaEb",
              "body": "Build failed (retrying...):\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/5989503558/job/16245762547)",
              "createdAt": "2023-08-27T08:28:18Z",
              "author": {
                "login": "bors"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5lAgtj",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/5990184745/job/16247228677)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/5990184745/job/16247228816)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/5990184745/job/16247228750)",
              "createdAt": "2023-08-27T10:43:23Z",
              "author": {
                "login": "bors"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5lBKu-",
              "body": "@adomani, the repo now contains files \"test/Change.lean\" and \"test/change.lean\". One overwrites the other when the repo is checked out on a case-insensitive filesystem.",
              "createdAt": "2023-08-28T00:07:12Z",
              "author": {
                "login": "bustercopley"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "5b0a422baae867fc2c78c3661e15bb893b03dcf7",
                "additions": 49,
                "deletions": 0,
                "committedDate": "2023-08-09T12:53:32Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "6fcce49028b8ba3b2689b4913b33aaf179a2c244",
                "additions": 2,
                "deletions": 0,
                "committedDate": "2023-08-09T12:57:28Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "47f968724037e0ab1a32843f492f7724bef7327d",
                "additions": 9,
                "deletions": 0,
                "committedDate": "2023-08-09T14:19:57Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "a85f57cfc6136b6a880f0719049fd04b24c35385",
                "additions": 5,
                "deletions": 3,
                "committedDate": "2023-08-09T15:08:55Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "42fc45042ab3c2aaac1f16c4e63a819614266142",
                "additions": 241,
                "deletions": 179,
                "committedDate": "2023-08-09T18:15:19Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "0ea71069d6b173f1e798589594b6e294910d9c76",
                "additions": 11,
                "deletions": 12,
                "committedDate": "2023-08-10T02:14:10Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "c15989ee88b8c0a58c874d2bda61a3132c37c31b",
                "additions": 10,
                "deletions": 9,
                "committedDate": "2023-08-12T22:29:42Z",
                "author": {
                  "name": "damiano",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "d24443c0556455503ff717799d7f01e389844efe",
                "additions": 7,
                "deletions": 4,
                "committedDate": "2023-08-12T22:39:17Z",
                "author": {
                  "name": "damiano",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "0c7bd6b22d52a0083fb65a3438e2ccc92d188817",
                "additions": 7,
                "deletions": 5,
                "committedDate": "2023-08-12T22:39:26Z",
                "author": {
                  "name": "damiano",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "c1188bc3da8e2406121a6671459b4ad10c42c0d2",
                "additions": 3,
                "deletions": 2,
                "committedDate": "2023-08-12T22:39:36Z",
                "author": {
                  "name": "damiano",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "2b6a9293cac605a973a2bcad0335def22f25770b",
                "additions": 14960,
                "deletions": 12494,
                "committedDate": "2023-08-13T04:09:56Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "bbad75524234f1f0d0e29b4cc5860c14d6868628",
                "additions": 11,
                "deletions": 3,
                "committedDate": "2023-08-13T04:17:49Z",
                "author": {
                  "name": "damiano",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "2fc3d89a876afeddb03f62de89e5808e433df557",
                "additions": 11,
                "deletions": 3,
                "committedDate": "2023-08-13T04:18:44Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "0b9f996af9cf6ad41903f1cc7693887a58680ecf",
                "additions": 4,
                "deletions": 4,
                "committedDate": "2023-08-13T04:19:34Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "6bf99dcb86c0d71f1700cb6b8d6b303e1d436eab",
                "additions": 1,
                "deletions": 2,
                "committedDate": "2023-08-27T03:31:29Z",
                "author": {
                  "name": "damiano",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "76942f749b9d63495109261b3603701d997d9198",
                "additions": 17427,
                "deletions": 7588,
                "committedDate": "2023-08-27T03:34:37Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "38baef0f3a2a839d8f2b93195979a64459897472",
                "additions": 1,
                "deletions": 2,
                "committedDate": "2023-08-27T03:35:04Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "1728c57790740b1d4d3ebe0aa480982b90c649b2",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-08-27T03:40:07Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            }
          ]
        },
        "createdAt": "2023-08-09T12:57:47Z",
        "deletions": 0,
        "files": {
          "nodes": [
            {
              "path": "Mathlib.lean",
              "additions": 1,
              "deletions": 0
            },
            {
              "path": "Mathlib/Tactic.lean",
              "additions": 1,
              "deletions": 0
            },
            {
              "path": "Mathlib/Tactic/Change.lean",
              "additions": 46,
              "deletions": 0
            },
            {
              "path": "test/Change.lean",
              "additions": 27,
              "deletions": 0
            }
          ]
        },
        "headRefName": "adomani_changeq",
        "headRefOid": "1728c57790740b1d4d3ebe0aa480982b90c649b2",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5XiIuD",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c7mTAET",
              "color": "DA6D43",
              "name": "modifies-tactic-syntax"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABAt13Ow",
              "color": "bfd4f2",
              "name": "delegated"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABKAKYew",
              "color": "33DBEC",
              "name": "t-meta"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5djJ_e",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-08-09T12:58:45Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5fMUJ5",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kim-em"
              },
              "submittedAt": "2023-08-27T02:19:56Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5d6Jga",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "thorimur"
              },
              "submittedAt": "2023-08-13T00:20:19Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 6471,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5djJ_e",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-08-09T12:58:45Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5dpYNy",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "adomani"
              },
              "submittedAt": "2023-08-10T06:41:12Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5d5wzt",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "thorimur"
              },
              "submittedAt": "2023-08-12T21:01:18Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5d5w4K",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "thorimur"
              },
              "submittedAt": "2023-08-12T21:03:00Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5d5zk_",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "thorimur"
              },
              "submittedAt": "2023-08-12T21:26:45Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5d52Xp",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "thorimur"
              },
              "submittedAt": "2023-08-12T21:49:07Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5d532U",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "adomani"
              },
              "submittedAt": "2023-08-12T21:58:58Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5d539Z",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "thorimur"
              },
              "submittedAt": "2023-08-12T22:00:40Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5d54c2",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "adomani"
              },
              "submittedAt": "2023-08-12T22:03:57Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5d549q",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "adomani"
              },
              "submittedAt": "2023-08-12T22:09:18Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5d55Wi",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "adomani"
              },
              "submittedAt": "2023-08-12T22:10:53Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5d55j9",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "thorimur"
              },
              "submittedAt": "2023-08-12T22:11:24Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5d55qQ",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "adomani"
              },
              "submittedAt": "2023-08-12T22:13:14Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5d57Ai",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "thorimur"
              },
              "submittedAt": "2023-08-12T22:19:20Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5d57M_",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "thorimur"
              },
              "submittedAt": "2023-08-12T22:20:56Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5d57R0",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "thorimur"
              },
              "submittedAt": "2023-08-12T22:22:36Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5d57_N",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "thorimur"
              },
              "submittedAt": "2023-08-12T22:27:30Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5d58ak",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "adomani"
              },
              "submittedAt": "2023-08-12T22:32:19Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5d58k6",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "thorimur"
              },
              "submittedAt": "2023-08-12T22:34:21Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5d59BT",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "adomani"
              },
              "submittedAt": "2023-08-12T22:38:24Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5d59GK",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "thorimur"
              },
              "submittedAt": "2023-08-12T22:39:03Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5d59xa",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "adomani"
              },
              "submittedAt": "2023-08-12T22:41:36Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5d59-_",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "thorimur"
              },
              "submittedAt": "2023-08-12T22:45:14Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5d5-jq",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "adomani"
              },
              "submittedAt": "2023-08-12T22:49:44Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5d5--a",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "adomani"
              },
              "submittedAt": "2023-08-12T22:54:37Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5d6BY-",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "thorimur"
              },
              "submittedAt": "2023-08-12T23:16:41Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5d6BoN",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "thorimur"
              },
              "submittedAt": "2023-08-12T23:18:19Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5d6Jga",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "thorimur"
              },
              "submittedAt": "2023-08-13T00:20:19Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5fMUJ5",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kim-em"
              },
              "submittedAt": "2023-08-27T02:19:56Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5MzBa1",
                    "body": "This should obviously generate a `try this` / code action intead of logging!",
                    "createdAt": "2023-08-09T12:58:45Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5M3jJH",
                    "body": "I figured out how to do it!\n\nAlthough, maybe this tactic is obsolete, given the discussion in the corresponding Zulip thread.",
                    "createdAt": "2023-08-10T06:41:12Z",
                    "author": {
                      "login": "adomani"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5NCeIA",
                    "body": "```suggestion\r\n  let expr ← match sop with\r\n    | none => getMainTarget\r\n    | some ex => do\r\n      let ex ← elabTerm ex none\r\n      let defeq? ← isDefEq ex (← getMainTarget)\r\n      if ! defeq? then throwError \"The given term is not DefEq to the goal\"\r\n      instantiateMVars ex\r\n  let dstx ← delabToRefinableSyntax expr\r\n```",
                    "createdAt": "2023-08-12T21:01:17Z",
                    "author": {
                      "login": "thorimur"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5NCj4y",
                    "body": "Is this just a stylistic change, or is there a difference to omitting the `:=`?",
                    "createdAt": "2023-08-12T22:10:53Z",
                    "author": {
                      "login": "adomani"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5NClDr",
                    "body": "It's purely stylistic. :) At least, I believe so...!",
                    "createdAt": "2023-08-12T22:19:20Z",
                    "author": {
                      "login": "thorimur"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5NCeMZ",
                    "body": "```suggestion\r\n      let ex ← elabTermEnsuringType ex (← inferType <|← getMainTarget)\r\n```\r\nShould we elaborate `ex` while ensuring the type of the main goal (instead of `none`), since we know it has to be defeq to the main goal? (There might be an unexpected reason not to, I'm not completely sure.)",
                    "createdAt": "2023-08-12T21:03:00Z",
                    "author": {
                      "login": "thorimur"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5NCi_v",
                    "body": "This seems like a good idea to me, but then I'd move the error about non-defeq to this step, right?  (I'll do it myself, but I won't get around to it for today.)",
                    "createdAt": "2023-08-12T21:58:58Z",
                    "author": {
                      "login": "adomani"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5NCjRs",
                    "body": "By the way, I wonder if this change would fix what I consider a bug: with the running `fun` example, using `change? _ = 1` seems to ignore the hint and returns `fun ...`.",
                    "createdAt": "2023-08-12T22:03:57Z",
                    "author": {
                      "login": "adomani"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5NCj_c",
                    "body": "I think It might actually be more informative to let `elabTermEnsuringType` report its own error! Then the user knows that the problem is specifically a type mismatch, not a term-level defeq problem.",
                    "createdAt": "2023-08-12T22:11:24Z",
                    "author": {
                      "login": "thorimur"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5NCkEQ",
                    "body": "Ok, in any case, the explicit defeq test and the error then should be removed entirely, right?",
                    "createdAt": "2023-08-12T22:13:14Z",
                    "author": {
                      "login": "adomani"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5NClRq",
                    "body": "Hmm, I don't think so, if I understand correctly—we *do* still want to test that `ex` is defeq to the main target. `elabTermEnsuringType` just checks that these expressions have the same type.",
                    "createdAt": "2023-08-12T22:22:36Z",
                    "author": {
                      "login": "thorimur"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5NCl1N",
                    "body": "Also, if you do opt to click commit suggestion on the larger `elab_rules` suggestion, I'll update my suggestion here, as we should use `withRef` to report the type error on the term syntax specifically: e.g. `withRef sop <| elabTermEnsuringType ...`. Or if you'd like to make changes manually from your local repo, I'd recommend including `withRef` as appropriate (whatever's more convenient). :)",
                    "createdAt": "2023-08-12T22:27:30Z",
                    "author": {
                      "login": "thorimur"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5NCmJq",
                    "body": "I committed your elab_rules suggestion.  I plan to commit all the remaining as well.  I got into the habit of doing it while I am in front of a computer, to catch errors right away, but I'm happy to make exceptions!",
                    "createdAt": "2023-08-12T22:32:19Z",
                    "author": {
                      "login": "adomani"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5NCgMu",
                    "body": "````suggestion\r\n/-- `change? term` unifies `term` with the current goal, then suggests explicit `change` syntax\r\nthat uses the resulting unified term.\r\n\r\nIf `term` is not present, `change?` suggests the current goal itself. This is useful after tactics \r\nwhich transform the goal while maintaining definitional equality, such as `dsimp`; those preceding \r\ntactic calls can then be deleted.\r\n```lean\r\nexample : (fun x : Nat => x) 0 = 1 := by\r\n  change? 0 = _  -- `Try this: change 0 = 1`\r\n```\r\n-/\r\n````",
                    "createdAt": "2023-08-12T21:26:45Z",
                    "author": {
                      "login": "thorimur"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5NCh3f",
                    "body": "```suggestion\r\n# Tactic `change? term`\r\n\r\nThis tactic is used to suggest a replacement of the goal by a definitionally equal term.\r\n`term` is intended to contain holes which get unified with the main goal and filled in explicitly \r\nin the suggestion.\r\n\r\n`term` can also be omitted, in which case `change?` simply suggests `change` with the main goal. \r\nThis is helpful after tactics like `dsimp`, which can then be deleted.\r\n```",
                    "createdAt": "2023-08-12T21:49:07Z",
                    "author": {
                      "login": "thorimur"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5NCjDL",
                    "body": "For ease of maintenance by others, this should probably use `elab_rules` syntax instead of low-level syntax manipulation. Three other misc. changes:\r\n1. It seems to be standard to put the blue squiggle under the initial token instead of the whole thing; we pass `origSpan?` to tell `addSuggestion` to replace the whole thing upon clicking, though. :)\r\n2. I added `throwErrorAt` to report the defeq error on `sop`; this means that we match against `some sop` instead of `some ex`.\r\n3. I added `withMainContext`.\r\n```suggestion\r\nelab_rules : tactic\r\n| `(tactic|change?%$tk $[$sop:term]?) => withMainContext do\r\n  let stx ← getRef\r\n  let expr ← match sop with\r\n    | none => getMainTarget\r\n    | some sop => do\r\n      let ex ← elabTerm sop none\r\n      let defeq? ← isDefEq ex (← getMainTarget)\r\n      if ! defeq? then throwErrorAt sop \"The given term is not DefEq to the goal\"\r\n      instantiateMVars ex\r\n  let dstx ← delabToRefinableSyntax expr\r\n  addSuggestion tk (← `(tactic| change $dstx)) (origSpan? := stx)\r\n```",
                    "createdAt": "2023-08-12T22:00:39Z",
                    "author": {
                      "login": "thorimur"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5NCjlt",
                    "body": "I didn't know about `getRef`, which is why I had used the weird definition.  It was my hacky way of getting my hands on the whole syntax.",
                    "createdAt": "2023-08-12T22:09:18Z",
                    "author": {
                      "login": "adomani"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5NClOe",
                    "body": "Ah, gotcha—I thought that might have been why. It took a second for me to locate it as well.",
                    "createdAt": "2023-08-12T22:20:56Z",
                    "author": {
                      "login": "thorimur"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5NCmPO",
                    "body": "(Since we'd be using `getMainTarget` twice if using `elabTermEnsuringType`, I factored it out.)\r\n```suggestion\r\n      let tgt ← getMainTarget\r\n      let ex ← withRef sop <| elabTermEnsuringType sop (← inferType tgt)\r\n      let defeq? ← isDefEq ex tgt\r\n```",
                    "createdAt": "2023-08-12T22:34:20Z",
                    "author": {
                      "login": "thorimur"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5NCmk5",
                    "body": "Ah, I was confused before about the defeq test, since I was thinking \"these are all Props\", but of course the defeq test is on the term, while the elabTerm is using `inferType`!  I'm normally slow, even in front of a computer, but on mobile, I cannot even test things out!  🙃",
                    "createdAt": "2023-08-12T22:38:24Z",
                    "author": {
                      "login": "adomani"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5NCmov",
                    "body": "The tests work fine for me without this.\r\n```suggestion\r\n```",
                    "createdAt": "2023-08-12T22:39:03Z",
                    "author": {
                      "login": "thorimur"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5NCnJ_",
                    "body": "I thought that this was useful since otherwise the `fun` arrow gives incompatible errors for `guard_msgs`.  Am I wrong?\n\nI was in this situation, where either the error was on my local machine or on CI until Kyle mentioned this option.",
                    "createdAt": "2023-08-12T22:41:36Z",
                    "author": {
                      "login": "adomani"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5NCnUZ",
                    "body": "Oh, maybe CI works differently? I can confirm that locally the `fun` arrows print as `↦` for me (and `#guard_msgs` sees them that way too). I suppose it doesn't hurt to ensure that this option is `true`. :)",
                    "createdAt": "2023-08-12T22:45:14Z",
                    "author": {
                      "login": "thorimur"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5NCnrZ",
                    "body": "If you are curious, try looking at the tests for ExtractGoal: I had to use it there and there I tested it.  Here I just placed it based on memory.",
                    "createdAt": "2023-08-12T22:49:44Z",
                    "author": {
                      "login": "adomani"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5NCn8E",
                    "body": "https://github.com/leanprover-community/mathlib4/pull/4595#issuecomment-1662171855\nand below.",
                    "createdAt": "2023-08-12T22:54:37Z",
                    "author": {
                      "login": "adomani"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5NCvip",
                    "body": "Ah, I see! Thanks for the reference!",
                    "createdAt": "2023-08-13T00:20:19Z",
                    "author": {
                      "login": "thorimur"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5NCphV",
                    "body": "Last thing I can think of, then this LGTM: this error message should probably be more informative:\r\n```suggestion\r\n      if ! defeq? then throwErrorAt sop \"The term{indentD ex}\\nis not defeq to the goal:{\r\n        indentD tgt}\"\r\n```\r\nBy using `ex` instead of `sop`, we can give the user a clue as to what went wrong.\r\n\r\nThe next comment adjusts the tests appropriately.",
                    "createdAt": "2023-08-12T23:16:41Z",
                    "author": {
                      "login": "thorimur"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5NCpuV",
                    "body": "Note: we don't use `_` because it becomes `?m.96`, and that's quite fragile to put in a `#guard_msgs`\r\n```suggestion\r\nerror: The term\r\n  1 = 0\r\nis not defeq to the goal:\r\n  (fun x ↦ x) 0 = 1\r\n-/\r\n#guard_msgs in\r\nexample : (fun x : Nat => x) 0 = 1 := by\r\n  change? 0 = _  -- change 0 = 1\r\n  change?        -- change (fun x ↦ x) 0 = 1\r\n  change? _      -- change (fun x ↦ x) 0 = 1\r\n  change? 1 = 0\r\n    -- The term\r\n    --   1 = 0\r\n    -- is not defeq to the goal:\r\n    --   (fun x ↦ x) 0 = 1\r\n```",
                    "createdAt": "2023-08-12T23:18:19Z",
                    "author": {
                      "login": "thorimur"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5N4PTE",
                    "body": "```suggestion\r\n      let !(← isDefEq ex tgt) then throwErrorAt sop \"The term{indentD ex}\\nis not defeq to the goal:{\r\n        indentD tgt}\"\r\n```",
                    "createdAt": "2023-08-27T02:19:56Z",
                    "author": {
                      "login": "kim-em"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjI5NDY3NzQ1",
              "login": "adomani"
            },
            {
              "id": "MDQ6VXNlcjY4NDEwNDY4",
              "login": "thorimur"
            },
            {
              "id": "MDQ6VXNlcjQ3Nzk1Ng==",
              "login": "kim-em"
            },
            {
              "id": "MDQ6VXNlcjg0ODM0MTQ=",
              "login": "bustercopley"
            },
            {
              "id": "MDQ6VXNlcjQyNTI2MA==",
              "login": "eric-wieser"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": null,
        "title": "[Merged by Bors] - feat: tactic `change? _`",
        "updatedAt": "2023-08-28T00:07:12Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/6471",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "5b0a422baae867fc2c78c3661e15bb893b03dcf7"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "6fcce49028b8ba3b2689b4913b33aaf179a2c244"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5djJ_e",
              "createdAt": "2023-08-09T12:58:45Z",
              "body": "",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "47f968724037e0ab1a32843f492f7724bef7327d"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "a85f57cfc6136b6a880f0719049fd04b24c35385"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "42fc45042ab3c2aaac1f16c4e63a819614266142"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "0ea71069d6b173f1e798589594b6e294910d9c76"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5t3MVtzwAAAAJYbDsr",
              "createdAt": "2023-08-11T20:08:49Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5t3MVtzwAAAAJYbDsw",
              "createdAt": "2023-08-11T20:08:49Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7mTAET",
                "name": "modifies-tactic-syntax"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5t3MVtzwAAAAJYbDs0",
              "createdAt": "2023-08-11T20:08:49Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKAKYew",
                "name": "t-meta"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5d5wzt",
              "createdAt": "2023-08-12T21:01:17Z",
              "body": "",
              "author": {
                "login": "thorimur"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5d5w4K",
              "createdAt": "2023-08-12T21:03:00Z",
              "body": "",
              "author": {
                "login": "thorimur"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5d5zk_",
              "createdAt": "2023-08-12T21:26:45Z",
              "body": "",
              "author": {
                "login": "thorimur"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5d52Xp",
              "createdAt": "2023-08-12T21:49:07Z",
              "body": "",
              "author": {
                "login": "thorimur"
              }
            },
            {
              "__typename": "UnsubscribedEvent"
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5d539Z",
              "createdAt": "2023-08-12T22:00:39Z",
              "body": "",
              "author": {
                "login": "thorimur"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "c15989ee88b8c0a58c874d2bda61a3132c37c31b"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5d58k6",
              "createdAt": "2023-08-12T22:34:20Z",
              "body": "",
              "author": {
                "login": "thorimur"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5d59GK",
              "createdAt": "2023-08-12T22:39:03Z",
              "body": "",
              "author": {
                "login": "thorimur"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "d24443c0556455503ff717799d7f01e389844efe"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "0c7bd6b22d52a0083fb65a3438e2ccc92d188817"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "c1188bc3da8e2406121a6671459b4ad10c42c0d2"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5d6BY-",
              "createdAt": "2023-08-12T23:16:41Z",
              "body": "",
              "author": {
                "login": "thorimur"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5d6BoN",
              "createdAt": "2023-08-12T23:18:19Z",
              "body": "",
              "author": {
                "login": "thorimur"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "2b6a9293cac605a973a2bcad0335def22f25770b"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "bbad75524234f1f0d0e29b4cc5860c14d6868628"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "2fc3d89a876afeddb03f62de89e5808e433df557"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "0b9f996af9cf6ad41903f1cc7693887a58680ecf"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5j6R-U",
              "createdAt": "2023-08-13T04:33:52Z",
              "body": "@thorimur thank you very much for your suggestions: the new code looks so much better!",
              "author": {
                "login": "adomani"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5j6Syt",
              "createdAt": "2023-08-13T04:50:03Z",
              "body": "LGTM! :) Thanks for being so responsive! At some point we will also want to add `at` syntax as well, but this is a very nice PR as-is. Thanks for writing it! :)",
              "author": {
                "login": "thorimur"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5j6UAm",
              "createdAt": "2023-08-13T05:13:32Z",
              "body": "Yes, `at`-syntax is next!  It would be nice if there were a tactic for converting a tactic to `at`-syntax... 🙃",
              "author": {
                "login": "adomani"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5fMUJ5",
              "createdAt": "2023-08-27T02:19:56Z",
              "body": "",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5lAMmz",
              "createdAt": "2023-08-27T02:21:26Z",
              "body": "bors d+",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5lAMm3",
              "createdAt": "2023-08-27T02:21:27Z",
              "body": ":v: adomani can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests).",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5t3MVtzwAAAAJgBwLK",
              "createdAt": "2023-08-27T02:21:39Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABAt13Ow",
                "name": "delegated"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5t3MVtzwAAAAJgBwLR",
              "createdAt": "2023-08-27T02:21:40Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "6bf99dcb86c0d71f1700cb6b8d6b303e1d436eab"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "76942f749b9d63495109261b3603701d997d9198"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "38baef0f3a2a839d8f2b93195979a64459897472"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "1728c57790740b1d4d3ebe0aa480982b90c649b2"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5lAQLY",
              "createdAt": "2023-08-27T04:12:50Z",
              "body": "bors r+",
              "author": {
                "login": "adomani"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5lATUE",
              "createdAt": "2023-08-27T05:46:21Z",
              "body": "Build failed (retrying...):\n  * Build",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5lAaEb",
              "createdAt": "2023-08-27T08:28:18Z",
              "body": "Build failed (retrying...):\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/5989503558/job/16245762547)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5lAgtj",
              "createdAt": "2023-08-27T10:43:23Z",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/5990184745/job/16247228677)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/5990184745/job/16247228816)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/5990184745/job/16247228750)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c5t3MVtzwAAAAJgD9-m",
              "createdAt": "2023-08-27T10:43:26Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c5t3MVtzwAAAAJgD-Ao",
              "createdAt": "2023-08-27T10:43:32Z"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5lBKu-",
              "createdAt": "2023-08-28T00:07:12Z",
              "body": "@adomani, the repo now contains files \"test/Change.lean\" and \"test/change.lean\". One overwrites the other when the repo is checked out on a case-insensitive filesystem.",
              "author": {
                "login": "bustercopley"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            }
          ]
        }
      }
    }
  }
}
