{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 334,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "acmepjz"
        },
        "baseRefName": "master",
        "body": "This PR adds basics about the linearly disjoint fields.\r\n\r\nMain definitions:\r\n\r\n- `IntermediateField.LinearDisjoint`: an intermediate field `A` of `E / F`\r\n  and an abstract field `L` between `E / F` are linearly disjoint over `F`,\r\n  if they are linearly disjoint as subalgebras (`Subalgebra.LinearDisjoint`).\r\n\r\nMain results:\r\n\r\nEquivalent characterization of linearly disjointness:\r\n\r\n- `IntermediateField.LinearDisjoint.linearIndependent_left`:\r\n  if `A` and `L` are linearly disjoint, then any `F`-linearly independent family on `A` remains\r\n  linearly independent over `L`.\r\n\r\n- `IntermediateField.LinearDisjoint.of_basis_left`:\r\n  conversely, if there exists an `F`-basis of `A` which remains linearly independent over `L`, then\r\n  `A` and `L` are linearly disjoint.\r\n\r\n- `IntermediateField.LinearDisjoint.linearIndependent_right`:\r\n  if `A` and `L` are linearly disjoint, then any `F`-linearly independent family on `L` remains\r\n  linearly independent over `A`.\r\n\r\n- `IntermediateField.LinearDisjoint.of_basis_right`:\r\n  conversely, if there exists an `F`-basis of `L` which remains linearly independent over `A`, then\r\n  `A` and `L` are linearly disjoint.\r\n\r\n- `IntermediateField.LinearDisjoint.linearIndependent_mul`:\r\n  if `A` and `L` are linearly disjoint, then for any family of\r\n  `F`-linearly independent elements `{ a_i }` of `A`, and any family of\r\n  `F`-linearly independent elements `{ b_j }` of `L`, the family `{ a_i * b_j }` in `S` is\r\n  also `F`-linearly independent.\r\n\r\n- `IntermediateField.LinearDisjoint.of_basis_mul`:\r\n  conversely, if `{ a_i }` is an `F`-basis of `A`, if `{ b_j }` is an `F`-basis of `L`,\r\n  such that the family `{ a_i * b_j }` in `E` is `F`-linearly independent,\r\n  then `A` and `L` are linearly disjoint.\r\n\r\nOther main results:\r\n\r\n- `IntermediateField.LinearDisjoint.symm`, `IntermediateField.linearDisjoint_symm`:\r\n  linearly disjoint is symmetric.\r\n\r\n- `IntermediateField.LinearDisjoint.rank_sup_of_isAlgebraic`,\r\n  `IntermediateField.LinearDisjoint.finrank_sup`:\r\n  if `A` and `B` are linearly disjoint,\r\n  then the rank of `A ⊔ B` is equal to the product of the rank of `A` and `B`.\r\n\r\n  **TODO:** remove the algebraic assumptions (the proof becomes complicated).\r\n\r\n- `IntermediateField.LinearDisjoint.of_finrank_sup`:\r\n  conversely, if `A` and `B` are finite extensions,\r\n  such that rank of `A ⊔ B` is equal to the product of the rank of `A` and `B`,\r\n  then `A` and `B` are linearly disjoint.\r\n\r\n- `IntermediateField.LinearDisjoint.of_finrank_coprime`:\r\n  if the rank of `A` and `B` are coprime,\r\n  then `A` and `B` are linearly disjoint.\r\n\r\n- `IntermediateField.LinearDisjoint.inf_eq_bot`:\r\n  if `A` and `B` are linearly disjoint, then they are disjoint.\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\ndiscussion: <https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Linearly.20disjoint>\r\n\r\n- [x] depends on: #12434 [part one: submodule version]\r\n  - [x] depends on: #11635\r\n  - [x] depends on: #11598 [need `finsuppTensorFinsupp'_symm_single`]\r\n  - [x] depends on: #11731\r\n  - [x] depends on: #11748\r\n  - [x] depends on: #11859\r\n- [x] depends on: #15346 [part two: subalgebra version]\r\n  - [x] depends on: #12025\r\n  - [x] depends on: #13425\r\n  - [x] depends on: #9626\r\n  - [x] depends on: #12846\r\n  - [x] depends on: #12847\r\n  - [x] depends on: #12849\r\n- [x] depends on: #18515\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 4,
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5wgNd4",
              "body": "Personally I'm inclined to use the following as the definition:\r\n```\r\n/-- Two submodules K and L in an algebra S over R are linearly disjoint if the map\r\n  `K ⊗[R] L →ₗ[R] S` induced by multiplication in S is injective. -/\r\ndef Submodule.LinearDisjoint (R S) [CommSemiring R] [Semiring S] [Algebra R S]\r\n    (K L : Submodule R S) : Prop :=\r\n  Injective (TensorProduct.lift <| ((LinearMap.domRestrict' L).comp <| .mul R S).domRestrict K)\r\n```\r\nand we should be able to show\r\n1. it implies that every R-linearly independent set in L is K-linearly independent (your definition), if K is a subalgebra (Edit: K needs to be flat over R). If L/R is free (and the semirings are rings), it's equivalent to it, because the existence of a basis of L/R that is K-linearly independent implies injectivity.\r\n2. it implies that every R-linearly independent set in K is (MulOpposite L)-linearly independent, if L is a subalgebra (flat over R). If K/R is free, it's equivalent to it.\r\n3. it implies that the product of every R-linear independent set in K with one in L is R-linear independent (requires K or L flat over R (?)), if both K/R and L/R are free, it's equivalent to it.\r\n\r\nNote that in general `K ⊗[R] L →ₗ[R] S` isn't an AlgHom, unless every element of K commutes with every element of L. Bourbaki's definition has this additional commutativity requirement. In general the image is the pointwise product KL, which may be a proper submodule of the subalgebra generated by K and L. Even when K and L are both subalgebras the image is exactly `K ⊔ L`, the multiplication may not agree: consider `ℝ + ℝi` and `ℝ + ℝj` in the quaternions.\r\n\r\nI don't know if there are benefits of doing things in this generality; I just think it's better to find out most general statements we can prove. Maybe @AntoineChambert-Loir has thoughts?",
              "createdAt": "2024-01-11T16:08:47Z",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5wjBla",
              "body": "\r\n> I don't know if there are benefits of doing things in this generality; I just think it's better to find out most general statements we can prove. Maybe @AntoineChambert-Loir has thoughts?\r\n\r\nI don't have a clear idea. When the target algebra is not commutative, it does not seem obvious that the `IsLinearlyDisjoint` is symmetric. But maybe it is anyway, I don't know. And maybe it's not so important.",
              "createdAt": "2024-01-12T01:06:49Z",
              "author": {
                "login": "AntoineChambert-Loir"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5wjIbs",
              "body": "I doubt that. In the proof I use `mul_comm` several times.",
              "createdAt": "2024-01-12T01:25:39Z",
              "author": {
                "login": "acmepjz"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5wkWl0",
              "body": "Maybe the right place for this file in mathlib's hierarchy is in Algebra.Algebra, or RingTheory (like `Algebra.TensorProduct`).",
              "createdAt": "2024-01-12T07:43:58Z",
              "author": {
                "login": "AntoineChambert-Loir"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c51IfHC",
              "body": "> it implies that every R-linearly independent set in L is K-linearly independent (your definition), if K is a subalgebra.\r\n\r\nI think that this requires K/R being flat, no?\r\n\r\n[EDIT] Yes, it requires flatness, at least for the items 1 and 2. Otherwise there is a counterexample: let R=Z, S=Z×Fp×Fp×Fp, let K be the submodule generated by (1,1,1,1) and (0,1,1,0), S be the submodule generated by (1,1,1,1) and (0,0,1,1), then they are both subalgebras, not flat over R, isomorphic to Z⊕Fp as R-modules, and they are linearly disjoint if using tensor product definition. On the other hand, (p,0,0,0) is contained in their intersections, which is R-linearly independent, but not K-linearly independent nor L-linearly independent.\r\n\r\nI don't know if there is counterexample for item 3. I can prove it if assuming one of K,L is flat over R.",
              "createdAt": "2024-02-26T20:06:47Z",
              "author": {
                "login": "acmepjz"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c51Qu35",
              "body": "The proof is quite simple without explicit computations (hopefully also in Lean):\r\n\r\n![screenshot1](https://github.com/leanprover-community/mathlib4/assets/3397779/602fb896-eb92-4b7a-b6b1-c2641b87c3bf)\r\n",
              "createdAt": "2024-02-27T18:08:15Z",
              "author": {
                "login": "acmepjz"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c51b3tS",
              "body": "> Yes, it requires flatness, at least for the items 1 and 2. Otherwise there is a counterexample: let R=Z, S=Z×Fp×Fp×Fp, let K be the submodule generated by (1,1,1,1) and (0,1,1,0), S be the submodule generated by (1,1,1,1) and (0,0,1,1), then they are both subalgebras, not flat over R, isomorphic to Z⊕Fp as R-modules, and they are linearly disjoint if using tensor product definition. On the other hand, (p,0,0,0) is contained in their intersections, which is R-linearly independent, but not K-linearly independent nor L-linearly independent.\r\n\r\nYou're right! Thanks for the counterexample and sorry for my mistake. So either we assume flatness or we require R to be a field; both would be fine with me.",
              "createdAt": "2024-02-29T01:41:58Z",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c518N8w",
              "body": "> Personally I'm inclined to use the following as the definition:\r\n> \r\n> ```\r\n> /-- Two submodules K and L in an algebra S over R are linearly disjoint if the map\r\n>   `K ⊗[R] L →ₗ[R] S` induced by multiplication in S is injective. -/\r\n> def Submodule.LinearDisjoint (R S) [CommSemiring R] [Semiring S] [Algebra R S]\r\n>     (K L : Submodule R S) : Prop :=\r\n>   Injective (TensorProduct.lift <| ((LinearMap.domRestrict' L).comp <| .mul R S).domRestrict K)\r\n> ```\r\n\r\nI think it's better to give the map `TensorProduct.lift <| ((LinearMap.domRestrict' L).comp <| .mul R S).domRestrict K` a name, and we can prove some basic properties on it. What about `Submodule.mulMap`?",
              "createdAt": "2024-03-05T12:56:17Z",
              "author": {
                "login": "acmepjz"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6EVlE1",
              "body": "### PR summary [28b8fd499c](https://github.com/leanprover-community/mathlib4/pull/9651/commits/28b8fd499cf6e3b82f5c21f883ff635df28bfdc0)\n\n#### Import changes for modified files\n\nNo significant changes to the import graph\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n| `Mathlib.FieldTheory.LinearDisjoint` (new file)|1754|\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ LinearDisjoint`\n`+ LinearDisjoint.symm`\n`+ bot_left`\n`+ bot_right`\n`+ eq_bot_of_self`\n`+ finrank_sup`\n`+ inf_eq_bot`\n`+ linearDisjoint_iff`\n`+ linearDisjoint_iff'`\n`+ linearIndependent_left`\n`+ linearIndependent_mul`\n`+ linearIndependent_mul'`\n`+ linearIndependent_right`\n`+ linearIndependent_right'`\n`+ of_basis_left`\n`+ of_basis_mul`\n`+ of_basis_mul'`\n`+ of_basis_right`\n`+ of_basis_right'`\n`+ of_finrank_coprime`\n`+ of_finrank_sup`\n`+ of_le`\n`+ of_le'`\n`+ of_le_left`\n`+ of_le_right`\n`+ of_le_right'`\n`+ rank_sup_of_isAlgebraic`\n`+ self_right`\n`++ linearDisjoint_comm_of_commute`\n`+++ linearDisjoint_comm`\n`-- linearDisjoint_symm`\n`-- linearDisjoint_symm_of_commute`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n</details>\n\n---\n\n<details><summary>Decrease in tech debt: (relative, absolute) = (1.00, 0.00)</summary>\n\n|Current number|Change|Type|\n|-:|:-:|:-|\n|219|-1|bare open (scoped) Classical|\n\nCurrent commit [28b8fd499c](https://github.com/leanprover-community/mathlib4/commit/28b8fd499cf6e3b82f5c21f883ff635df28bfdc0)\nReference commit [a2a544ab0c](https://github.com/leanprover-community/mathlib4/commit/a2a544ab0cc7d3e1d2a07cda2e9dedef8dbe0749)\n\nYou can run this locally as\n```\n./scripts/technical-debt-metrics.sh pr_summary\n```\n* The `relative` value is the weighted *sum* of the differences with weight given by the *inverse* of the current value of the statistic.\n* The `absolute` value is the `relative` value divided by the total sum of the inverses of the current values (i.e. the weighted *average* of the differences).\n</details>",
              "createdAt": "2024-07-10T11:18:32Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6TZAIL",
              "body": "This PR/issue depends on:\n* ~~leanprover-community/mathlib4#12434~~\n* ~~leanprover-community/mathlib4#11635~~\n* ~~leanprover-community/mathlib4#11598~~\n* ~~leanprover-community/mathlib4#11731~~\n* ~~leanprover-community/mathlib4#11748~~\n* ~~leanprover-community/mathlib4#11859~~\n* ~~leanprover-community/mathlib4#15346~~\n* ~~leanprover-community/mathlib4#12025~~\n* ~~leanprover-community/mathlib4#13425~~\n* ~~leanprover-community/mathlib4#9626~~\n* ~~leanprover-community/mathlib4#12846~~\n* ~~leanprover-community/mathlib4#12847~~\n* ~~leanprover-community/mathlib4#12849~~\n* ~~leanprover-community/mathlib4#18515~~\nBy **[Dependent Issues](https://github.com/z0al/dependent-issues)** (🤖). Happy coding!\n<!-- By Dependent Issues (Action) - DO NOT REMOVE -->",
              "createdAt": "2024-11-13T08:25:19Z",
              "author": {
                "login": "mathlib4-dependent-issues-bot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6VGjEy",
              "body": "All comments are addressed except for the remaining one.",
              "createdAt": "2024-11-26T17:20:54Z",
              "author": {
                "login": "acmepjz"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6VNHXV",
              "body": "Thanks 🎉 \r\nmaintainer merge",
              "createdAt": "2024-11-27T08:34:40Z",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6VNHhq",
              "body": "🚀 Pull request has been placed on the maintainer queue by alreadydone.",
              "createdAt": "2024-11-27T08:34:59Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6VNWIT",
              "body": "Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/12046859227/job/33588208411)\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/12046859227/job/33588208116)",
              "createdAt": "2024-11-27T09:04:38Z",
              "author": {
                "login": "mathlib-bors"
              }
            }
          ]
        },
        "closed": true,
        "closedAt": "2024-11-27T09:04:38Z",
        "createdAt": "2024-01-11T13:05:46Z",
        "deletions": 23,
        "files": {
          "nodes": [
            {
              "path": "Mathlib.lean",
              "additions": 1,
              "deletions": 0
            },
            {
              "path": "Mathlib/FieldTheory/LinearDisjoint.lean",
              "additions": 310,
              "deletions": 0
            },
            {
              "path": "Mathlib/LinearAlgebra/LinearDisjoint.lean",
              "additions": 13,
              "deletions": 13
            },
            {
              "path": "Mathlib/RingTheory/LinearDisjoint.lean",
              "additions": 10,
              "deletions": 10
            }
          ]
        },
        "headRefName": "acmepjz_lin_disj",
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5jzfXI",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
              "color": "06e039",
              "name": "ready-to-merge"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJjTQ",
              "color": "33DBEC",
              "name": "t-algebra"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABh1mAHA",
              "color": "6BEB7E",
              "name": "maintainer-merge"
            }
          ]
        },
        "number": 9651,
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5sPYOs",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2024-01-11T16:16:22Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5sRcQP",
              "state": "COMMENTED",
              "author": {
                "login": "acmepjz"
              },
              "submittedAt": "2024-01-11T20:01:11Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5sTrAC",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2024-01-12T01:10:02Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5trP6B",
              "state": "COMMENTED",
              "author": {
                "login": "acmepjz"
              },
              "submittedAt": "2024-01-23T22:26:25Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5sT-UC",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2024-11-26T13:19:09Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6SudVN",
              "state": "COMMENTED",
              "author": {
                "login": "acmepjz"
              },
              "submittedAt": "2024-11-26T14:09:25Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6SugND",
              "state": "COMMENTED",
              "author": {
                "login": "acmepjz"
              },
              "submittedAt": "2024-11-26T14:13:46Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6Suiks",
              "state": "COMMENTED",
              "author": {
                "login": "acmepjz"
              },
              "submittedAt": "2024-11-26T14:17:07Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6SujQi",
              "state": "COMMENTED",
              "author": {
                "login": "acmepjz"
              },
              "submittedAt": "2024-11-26T14:18:00Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6SwApG",
              "state": "COMMENTED",
              "author": {
                "login": "acmepjz"
              },
              "submittedAt": "2024-11-26T16:23:49Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6SwB6I",
              "state": "COMMENTED",
              "author": {
                "login": "acmepjz"
              },
              "submittedAt": "2024-11-26T16:25:55Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6SwCe0",
              "state": "COMMENTED",
              "author": {
                "login": "acmepjz"
              },
              "submittedAt": "2024-11-26T16:26:54Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6SwCto",
              "state": "COMMENTED",
              "author": {
                "login": "acmepjz"
              },
              "submittedAt": "2024-11-26T16:27:16Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6SwKWQ",
              "state": "COMMENTED",
              "author": {
                "login": "acmepjz"
              },
              "submittedAt": "2024-11-26T16:36:59Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6SwKal",
              "state": "COMMENTED",
              "author": {
                "login": "acmepjz"
              },
              "submittedAt": "2024-11-26T16:37:06Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6SwM8O",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2024-11-26T16:40:09Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6SwNO1",
              "state": "COMMENTED",
              "author": {
                "login": "acmepjz"
              },
              "submittedAt": "2024-11-26T16:40:27Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6SwPHE",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2024-11-26T16:43:07Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6SwULM",
              "state": "COMMENTED",
              "author": {
                "login": "acmepjz"
              },
              "submittedAt": "2024-11-26T16:47:24Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6SwRSM",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2024-11-26T16:47:46Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6SwYWM",
              "state": "COMMENTED",
              "author": {
                "login": "acmepjz"
              },
              "submittedAt": "2024-11-26T16:52:20Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6Swb6g",
              "state": "COMMENTED",
              "author": {
                "login": "acmepjz"
              },
              "submittedAt": "2024-11-26T16:57:35Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6Swgp8",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2024-11-26T17:01:28Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6SwjtQ",
              "state": "COMMENTED",
              "author": {
                "login": "acmepjz"
              },
              "submittedAt": "2024-11-26T17:04:13Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6SwqWC",
              "state": "COMMENTED",
              "author": {
                "login": "acmepjz"
              },
              "submittedAt": "2024-11-26T17:14:08Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6Swq7D",
              "state": "COMMENTED",
              "author": {
                "login": "acmepjz"
              },
              "submittedAt": "2024-11-26T17:15:14Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6S0XN7",
              "state": "APPROVED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2024-11-27T01:29:45Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6S3Tmp",
              "state": "COMMENTED",
              "author": {
                "login": "acmepjz"
              },
              "submittedAt": "2024-11-27T06:01:13Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6S3cBf",
              "state": "COMMENTED",
              "author": {
                "login": "acmepjz"
              },
              "submittedAt": "2024-11-27T06:28:04Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6S3cE5",
              "state": "COMMENTED",
              "author": {
                "login": "acmepjz"
              },
              "submittedAt": "2024-11-27T06:28:14Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6S4u_w",
              "state": "COMMENTED",
              "author": {
                "login": "jcommelin"
              },
              "submittedAt": "2024-11-27T08:54:47Z"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH0bCBFw",
                "name": "Fix style issues from lint",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12044955645/job/33582776599"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH0bCVAw",
                "name": "Fix style issues from lint",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12044957915/job/33582781699"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH0gMfiw",
                "name": "Fix style issues from lint",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12046853680/job/33588191115"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH0bCBBQ",
                "name": "Add ready-to-merge or delegated label",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12044955642/job/33582776581"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH0bCUVA",
                "name": "Add ready-to-merge or delegated label",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12044957901/job/33582781524"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH0gMfNA",
                "name": "Add ready-to-merge or delegated label",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12046853687/job/33588191028"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH0bBxDw",
                "name": "label-and-report-new-contributor",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12044954001/job/33582772495"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH0bCA9w",
                "name": "Ping maintainers on Zulip",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12044955646/job/33582776567"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH0bCUfg",
                "name": "Ping maintainers on Zulip",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12044957893/job/33582781566"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH0gMezg",
                "name": "Ping maintainers on Zulip",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12046853688/job/33588190926"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH0bBw8A",
                "name": "post-or-update-summary-comment",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12044953998/job/33582772464"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH0bBsQg",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12044953494/job/33582771266"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH0bBtAQ",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12044953488/job/33582771457"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH0bBxAg",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12044954002/job/33582772482"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH0bBtKQ",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12044953494/job/33582771497"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH0bBqwQ",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12044953488/job/33582770881"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH0bBxqg",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12044954002/job/33582772650"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH0bBqww",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12044953494/job/33582770883"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH0bBsJA",
                "name": "Build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12044953488/job/33582771236"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH0bBuRg",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12044953494/job/33582771782"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH0bSdNA",
                "name": "Post-CI job",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12044953488/job/33583045940"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH0bB_nw",
                "name": "New Contributor Check",
                "conclusion": "NEUTRAL",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/33582776223"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH0bCtOQ",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=9651&login=leanprover-community&repository=mathlib4"
              },
              {
                "__typename": "StatusContext",
                "id": "SC_kwDOFcwZ1c8AAAAHpY29zQ",
                "context": "bors",
                "state": "SUCCESS",
                "targetUrl": "https://mathlib-bors-ca18eefec4cb.herokuapp.com/batches/7749",
                "description": "Build succeeded"
              }
            ]
          }
        },
        "title": "[Merged by Bors] - feat(FieldTheory/LinearDisjoint): definition and basic properties of linearly disjoint of fields",
        "updatedAt": "2024-11-27T09:04:42Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/9651"
      }
    }
  }
}
