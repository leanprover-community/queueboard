{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 130,
        "assignees": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjIxMTY1NzA=",
              "login": "Vierkantor"
            }
          ]
        },
        "author": {
          "login": "uniwuni"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "Add lemmas about relation composition with top and bottom elements, conditions under which images under a relation form the whole codomain, and the equivalence between being a functional relation and representable by the graph of a function.\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 1,
        "closed": true,
        "closedAt": "2023-11-02T14:44:38Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5mFB1w",
              "body": "Changes should be resolved, I wasn't too sure when to add lemmas of this kind to the default simps",
              "createdAt": "2023-09-09T20:25:21Z",
              "author": {
                "login": "uniwuni"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qudQA",
              "body": ":v: uniwuni can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests).",
              "createdAt": "2023-11-02T11:37:59Z",
              "author": {
                "login": "bors"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qvHHH",
              "body": "bors r+",
              "createdAt": "2023-11-02T13:32:37Z",
              "author": {
                "login": "uniwuni"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qvoo_",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6733812011/job/18303329692)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6733812011/job/18303330372)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6733812011/job/18303330938)",
              "createdAt": "2023-11-02T14:44:37Z",
              "author": {
                "login": "bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "46073008189519848c7d10596da273176d30f7c6",
                "additions": 40,
                "deletions": 0,
                "committedDate": "2023-08-09T17:48:17Z",
                "author": {
                  "name": "uni",
                  "email": "uniwuni@protonmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "cb11347ac1a01ccf5ce6e193c49a679a8ff37ad8",
                "additions": 79,
                "deletions": 0,
                "committedDate": "2023-08-13T11:19:56Z",
                "author": {
                  "name": "uni",
                  "email": "uniwuni@protonmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "00c51e74eabb730d18a04c3ef37d9b6731c38f7c",
                "additions": 2,
                "deletions": 2,
                "committedDate": "2023-08-13T11:57:32Z",
                "author": {
                  "name": "uni",
                  "email": "uniwuni@protonmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "8338fe10bffe803d570778538d5fea6104c9890c",
                "additions": 8,
                "deletions": 0,
                "committedDate": "2023-09-09T20:23:31Z",
                "author": {
                  "name": "uniwuni",
                  "email": "95649083+uniwuni@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "11893b38d988f3df98d0b35a095fdf3bfb6024e5",
                "additions": 28,
                "deletions": 29,
                "committedDate": "2023-11-02T11:54:06Z",
                "author": {
                  "name": "uniwuni",
                  "email": "95649083+uniwuni@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "4e87d594688a8ac9fa6e7c3662d36bb71513f666",
                "additions": 7,
                "deletions": 6,
                "committedDate": "2023-11-02T12:37:45Z",
                "author": {
                  "name": "uni",
                  "email": "uniwuni@protonmail.com"
                },
                "statusCheckRollup": null
              }
            }
          ]
        },
        "createdAt": "2023-08-13T12:37:17Z",
        "deletions": 3,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/Data/Rel.lean",
              "additions": 130,
              "deletions": 3
            }
          ]
        },
        "headRefName": "uniwuni_relation_identities",
        "headRefOid": "4e87d594688a8ac9fa6e7c3662d36bb71513f666",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5X0cYK",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABAt13Ow",
              "color": "bfd4f2",
              "name": "delegated"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5l7xjc",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "Vierkantor"
              },
              "submittedAt": "2023-11-02T12:53:53Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5gY2m3",
              "body": "Thanks for this PR, and sorry for the delay in reviewing it.",
              "state": "COMMENTED",
              "author": {
                "login": "jcommelin"
              },
              "submittedAt": "2023-09-08T10:06:25Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 6559,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": "APPROVED",
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5gY2m3",
              "body": "Thanks for this PR, and sorry for the delay in reviewing it.",
              "state": "COMMENTED",
              "author": {
                "login": "jcommelin"
              },
              "submittedAt": "2023-09-08T10:06:25Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5lzY6g",
              "body": "Sorry for the long wait! It seems we have a bug somewhere because Github claims this PR was last updated a couple days ago. I have quite a few remarks but don't worry, they are mostly pedantic. Overall this is already very nice work!\r\n\r\nbors d+",
              "state": "APPROVED",
              "author": {
                "login": "Vierkantor"
              },
              "submittedAt": "2023-11-02T11:37:57Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5l7YKH",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "uniwuni"
              },
              "submittedAt": "2023-11-02T11:53:21Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5l7pYr",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "uniwuni"
              },
              "submittedAt": "2023-11-02T12:34:33Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5l7qXs",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "uniwuni"
              },
              "submittedAt": "2023-11-02T12:36:58Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5l7xjc",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "Vierkantor"
              },
              "submittedAt": "2023-11-02T12:53:53Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5OqFLL",
                    "body": "This is a good simp-lemma\r\n```suggestion\r\n@[simp]\r\ntheorem inv_bot : (⊥ : Rel α β).inv = (⊥ : Rel β α) := by simp[Bot.bot, inv, flip]\r\n```",
                    "createdAt": "2023-09-08T10:04:18Z",
                    "author": {
                      "login": "jcommelin"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5OqFPa",
                    "body": "```suggestion\r\n@[simp]\r\ntheorem inv_top : (⊤ : Rel α β).inv = (⊤ : Rel β α) := by simp[Top.top, inv, flip]\r\n```",
                    "createdAt": "2023-09-08T10:04:30Z",
                    "author": {
                      "login": "jcommelin"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5OqFQ9",
                    "body": "```suggestion\r\n@[simp]\r\ntheorem image_empty : r.image ∅ = ∅ := by\r\n```",
                    "createdAt": "2023-09-08T10:04:37Z",
                    "author": {
                      "login": "jcommelin"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5OqFTA",
                    "body": "```suggestion\r\n@[simp]\r\ntheorem image_bot (s : Set α) : (⊥ : Rel α β).image s = ∅ := by\r\n```",
                    "createdAt": "2023-09-08T10:04:43Z",
                    "author": {
                      "login": "jcommelin"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5OqFXf",
                    "body": "```suggestion\r\n@[simp]\r\ntheorem preimage_empty : r.preimage ∅ = ∅ := by rw [preimage, image_empty]\r\n```",
                    "createdAt": "2023-09-08T10:05:00Z",
                    "author": {
                      "login": "jcommelin"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5OqFZy",
                    "body": "```suggestion\r\n@[simp]\r\ntheorem preimage_inv (s : Set α) : r.inv.preimage s = r.image s := by rw [preimage, inv_inv]\r\n```",
                    "createdAt": "2023-09-08T10:05:09Z",
                    "author": {
                      "login": "jcommelin"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5OqFbY",
                    "body": "```suggestion\r\n@[simp]\r\ntheorem preimage_bot (s : Set β) : (⊥ : Rel α β).preimage s = ∅ :=\r\n```",
                    "createdAt": "2023-09-08T10:05:16Z",
                    "author": {
                      "login": "jcommelin"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5OqFwa",
                    "body": "```suggestion\r\n@[simp]\r\ntheorem preimage_inter_codom_eq (s : Set β) : r.preimage (s ∩ r.codom) = r.preimage s := by\r\n```",
                    "createdAt": "2023-09-08T10:06:02Z",
                    "author": {
                      "login": "jcommelin"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SLH8S",
                    "body": "```suggestion\r\ntheorem inv_bot : (⊥ : Rel α β).inv = (⊥ : Rel β α) := by simp [Bot.bot, inv, flip]\r\n\r\n@[simp]\r\ntheorem inv_top : (⊤ : Rel α β).inv = (⊤ : Rel β α) := by simp [Top.top, inv, flip]\r\n```",
                    "createdAt": "2023-11-01T10:51:32Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SLIGq",
                    "body": "```suggestion\r\n  by rw [preimage, inv_bot, image_bot]\r\n```",
                    "createdAt": "2023-11-01T10:52:21Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SLIIH",
                    "body": "```suggestion\r\n    (⊤ : Rel α β).preimage s = Set.univ := by rwa [← inv_top, preimage, inv_inv, image_top]\r\n```",
                    "createdAt": "2023-11-01T10:52:28Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SLIKZ",
                    "body": "```suggestion\r\n  rw [← preimage_univ]\r\n```",
                    "createdAt": "2023-11-01T10:52:38Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SLIM0",
                    "body": "```suggestion\r\n  by apply r.inv.image_eq_dom_of_codomain_subset (by rwa [← codom_inv] at h)\r\n```",
                    "createdAt": "2023-11-01T10:52:48Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SLIPy",
                    "body": "```suggestion\r\n  simp [graph, Rel.comp]\r\n```",
                    "createdAt": "2023-11-01T10:53:01Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SP_RT",
                    "body": "My hobby is sorting imports alphabetically :)\r\n```suggestion\r\nimport Mathlib.Order.GaloisConnection\r\nimport Mathlib.Order.Hom.CompleteLattice\r\n```",
                    "createdAt": "2023-11-02T10:52:57Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SQAPH",
                    "body": "```suggestion\r\n    rw [mem_image] at *\r\n```",
                    "createdAt": "2023-11-02T10:56:22Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SQASz",
                    "body": "```suggestion\r\n  rw [← dom_inv, ← preimage_inv]\r\n```",
                    "createdAt": "2023-11-02T10:56:34Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SQBdF",
                    "body": "```suggestion\r\n  simp [comp, Bot.bot]\r\n```",
                    "createdAt": "2023-11-02T11:01:15Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SQBeh",
                    "body": "```suggestion\r\n  simp [comp, Bot.bot]\r\n```",
                    "createdAt": "2023-11-02T11:01:22Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SQBgQ",
                    "body": "```suggestion\r\n  simp [comp, Top.top, dom]\r\n```",
                    "createdAt": "2023-11-02T11:01:29Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SQBhw",
                    "body": "```suggestion\r\n  simp [comp, Top.top, codom]\r\n```",
                    "createdAt": "2023-11-02T11:01:35Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SQBzs",
                    "body": "It's not so clear to me whether this is indeed a useful `@[simp]` lemma, but I'm going to lean in the direction of more simplification.\r\n```suggestion\r\n@[simp]\r\ntheorem comp_right_top (r : Rel α β) : r • (⊤ : Rel β γ) = λ x _ ↦ x ∈ r.dom := by\r\n```",
                    "createdAt": "2023-11-02T11:02:43Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SQB2v",
                    "body": "```suggestion\r\n@[simp]\r\ntheorem comp_left_top (r : Rel α β) : (⊤ : Rel γ α) • r = λ _ y ↦ y ∈ r.codom := by\r\n```",
                    "createdAt": "2023-11-02T11:02:55Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SQB70",
                    "body": "```suggestion\r\n  rw [Set.eq_empty_iff_forall_not_mem]\r\n  intro x h\r\n  simp [mem_image, Bot.bot] at h\r\n```",
                    "createdAt": "2023-11-02T11:03:15Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SQCO6",
                    "body": "This definitely deserves a `@[simp]` (since `simp` can often figure out whether `Set.Nonempty` is true).\r\n```suggestion\r\n@[simp]\r\ntheorem image_top {s : Set α} (h : Set.Nonempty s) :\r\n```",
                    "createdAt": "2023-11-02T11:04:26Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SQCQf",
                    "body": "```suggestion\r\n  Set.eq_univ_of_forall λ x ↦ ⟨h.some, by simp [h.some_mem, Top.top]⟩\r\n```",
                    "createdAt": "2023-11-02T11:04:34Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SQCTI",
                    "body": "```suggestion\r\n@[simp]\r\ntheorem preimage_top {s : Set β} (h : Set.Nonempty s) :\r\n```",
                    "createdAt": "2023-11-02T11:04:45Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SQDG2",
                    "body": "```suggestion\r\ntheorem Relation.is_graph_iff (r : Rel α β) : (∃! f, Function.graph f = r) ↔ ∀ x, ∃! y, r x y := by\r\n```",
                    "createdAt": "2023-11-02T11:08:10Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SQD9J",
                    "body": "```suggestion\r\ntheorem graph_id : graph id = @Eq α := by simp [graph]\r\n```",
                    "createdAt": "2023-11-02T11:11:35Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SQEKg",
                    "body": "For complicated typeclass reasons, we use `f.symm` instead of `f.invFun` for Equivs, and cast them instead of writing `toFun`:\r\n```suggestion\r\ntheorem Equiv.graph_inv (f : α ≃ β) : (f.symm : β → α).graph = Rel.inv (f : α → β).graph := by\r\n```",
                    "createdAt": "2023-11-02T11:12:21Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SQEsi",
                    "body": "Since we're unfolding the definition of `graph` quite a lot, let's add a lemma to do that for us:\r\n```lean\r\n@[simp] lemma graph_def (f : α → β) (x y) : f.graph x y ↔ (f x = y) := Iff.rfl\r\n```",
                    "createdAt": "2023-11-02T11:14:31Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SQFzO",
                    "body": "We can automate this proof! If we remind `aesop` of the definition of `Rel.inv`:\r\n```suggestion\r\n  aesop (add norm Rel.inv_def)\r\n```",
                    "createdAt": "2023-11-02T11:18:47Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SQP52",
                    "body": "is this really the preferred way? seems more computation-heavy to me",
                    "createdAt": "2023-11-02T11:53:21Z",
                    "author": {
                      "login": "uniwuni"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SQaZM",
                    "body": "It seems to take three times the heartbeats (615 instead 190), but I guess I'll use the aesop proof anyways, looks slicker",
                    "createdAt": "2023-11-02T12:34:33Z",
                    "author": {
                      "login": "uniwuni"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SQfrO",
                    "body": "I don't think that 600 heartbeats is a big issue, since the boundary lies at 200 000. In general I wouldn't worry about efficiency unless you start to notice slowdowns, time for humans to read it is generally worth more than time for computers to check it.\r\n\r\nActually I am surprised that it's just 600 heartbeats! That's nothing :)",
                    "createdAt": "2023-11-02T12:53:53Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SQJOY",
                    "body": "A neat trick is: if you have `hf : f x = r` in your hypotheses, `rcases hf with rfl` will replace `r` with `f x` everywhere. So in `rcases` syntax we get:\r\n```suggestion\r\n  · rintro ⟨f, rfl, _⟩ x\r\n    use f x\r\n    simp only [forall_eq', and_self]\r\n```",
                    "createdAt": "2023-11-02T11:32:46Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SQJgX",
                    "body": "There should probably be an equivalent to the axiom of choice for `ExistsUnique`.",
                    "createdAt": "2023-11-02T11:33:40Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SQbCV",
                    "body": "oh if only there was, ExistsUnique seems a little underdeveloped when it comes to these things",
                    "createdAt": "2023-11-02T12:36:57Z",
                    "author": {
                      "login": "uniwuni"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SQKNP",
                    "body": "Some more `rintro rfl` tricks:\r\n```suggestion\r\n      · rintro rfl\r\n        exact hf x\r\n      · exact (h x).unique (hf x)\r\n    · rintro _ rfl\r\n      exact funext hf\r\n```",
                    "createdAt": "2023-11-02T11:36:35Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "U_kgDOBbN9Ow",
              "login": "uniwuni"
            },
            {
              "id": "MDQ6VXNlcjIxMTY1NzA=",
              "login": "Vierkantor"
            },
            {
              "id": "MDQ6VXNlcjU2MzY3MDU=",
              "login": "jcommelin"
            },
            {
              "id": "U_kgDOB75MNQ",
              "login": "leanprover-community-mathlib4-bot"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": null,
        "title": "[Merged by Bors] - feat(Data/Rel): prove simple propositions about images, preimages and graphs of relations",
        "updatedAt": "2023-11-02T14:44:44Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/6559",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "46073008189519848c7d10596da273176d30f7c6"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "cb11347ac1a01ccf5ce6e193c49a679a8ff37ad8"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "00c51e74eabb730d18a04c3ef37d9b6731c38f7c"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5uLw_2zwAAAAJYzdO1",
              "createdAt": "2023-08-13T12:37:50Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5gY2m3",
              "createdAt": "2023-09-08T10:04:17Z",
              "body": "Thanks for this PR, and sorry for the delay in reviewing it.",
              "author": {
                "login": "jcommelin"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5uLw_2zwAAAAJm5cVt",
              "createdAt": "2023-09-08T10:06:34Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5uLw_2zwAAAAJm5cV3",
              "createdAt": "2023-09-08T10:06:34Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "8338fe10bffe803d570778538d5fea6104c9890c"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5mFB1w",
              "createdAt": "2023-09-09T20:25:21Z",
              "body": "Changes should be resolved, I wasn't too sure when to add lemmas of this kind to the default simps",
              "author": {
                "login": "uniwuni"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5uLw_2zwAAAAJnfbku",
              "createdAt": "2023-09-10T11:55:49Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5uLw_2zwAAAAJnfbkv",
              "createdAt": "2023-09-10T11:55:49Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "BaseRefChangedEvent"
            },
            {
              "__typename": "BaseRefChangedEvent"
            },
            {
              "__typename": "AssignedEvent",
              "id": "AE_lADOFcwZ1c5uLw_2zwAAAAKGQT3X",
              "createdAt": "2023-11-02T10:53:32Z",
              "assignee": {
                "id": "MDQ6VXNlcjIxMTY1NzA=",
                "login": "Vierkantor"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5lzY6g",
              "createdAt": "2023-11-01T10:50:45Z",
              "body": "Sorry for the long wait! It seems we have a bug somewhere because Github claims this PR was last updated a couple days ago. I have quite a few remarks but don't worry, they are mostly pedantic. Overall this is already very nice work!\r\n\r\nbors d+",
              "author": {
                "login": "Vierkantor"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qudQA",
              "createdAt": "2023-11-02T11:37:59Z",
              "body": ":v: uniwuni can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests).",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5uLw_2zwAAAAKGSBCM",
              "createdAt": "2023-11-02T11:38:19Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABAt13Ow",
                "name": "delegated"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5uLw_2zwAAAAKGSBE3",
              "createdAt": "2023-11-02T11:38:20Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "11893b38d988f3df98d0b35a095fdf3bfb6024e5"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "4e87d594688a8ac9fa6e7c3662d36bb71513f666"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qvHHH",
              "createdAt": "2023-11-02T13:32:37Z",
              "body": "bors r+",
              "author": {
                "login": "uniwuni"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qvoo_",
              "createdAt": "2023-11-02T14:44:37Z",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6733812011/job/18303329692)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6733812011/job/18303330372)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6733812011/job/18303330938)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c5uLw_2zwAAAAKGapbw",
              "createdAt": "2023-11-02T14:44:39Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c5uLw_2zwAAAAKGapu8",
              "createdAt": "2023-11-02T14:44:44Z"
            }
          ]
        }
      }
    }
  }
}
