{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 116,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "collares"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "Mathlib.Logic.Unique contains the line `attribute [simp] eq_iff_true_of_subsingleton in ...`:\r\n\r\nhttps://github.com/leanprover-community/mathlib4/blob/96a11c7aac574c00370c2b3dab483cb676405c5d/Mathlib/Logic/Unique.lean#L255-L256\r\n\r\n Despite what the `in` part may imply, this adds the lemma to the simp set \"globally\", including for downstream files; it is likely that `attribute [local simp] eq_iff_true_of_subsingleton in ...` was meant instead (or maybe `scoped simp`, but I think \"scoped\" refers to the current namespace). Indeed, the relevant lemma is not marked with `@[simp]` for possible slowness: https://github.com/leanprover/std4/blob/846e9e1d6bb534774d1acd2dc430e70987da3c18/Std/Logic.lean#L749. Adding it to the simp set causes the example at https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Regression.20in.20simp to slow down.\r\n\r\nThis PR changes this and fixes the relevant downstream `simp`s. There was also one ocurrence of `attribute [simp] FullSubcategory.comp_def FullSubcategory.id_def in` in Mathlib.CategoryTheory.Monoidal.Subcategory but that was much easier to fix.\r\n\r\nhttps://github.com/leanprover-community/mathlib4/blob/bc49eb9ba756a233370b4b68bcdedd60402f71ed/Mathlib/CategoryTheory/Monoidal/Subcategory.lean#L118-L119\r\n\r\n---\r\nThere are other instances of `attribute ... in` in the codebase:\r\n\r\n```\r\nTopology/Category/TopCat/Basic.lean:attribute [instance] ConcreteCategory.funLike in\r\nLinearAlgebra/BilinearForm/TensorProduct.lean:attribute [ext] TensorProduct.ext in\r\nSetTheory/Game/Short.lean:attribute [-instance] subsingleton_short in\r\nRingTheory/Trace.lean:attribute [-instance] Field.toEuclideanDomain\r\nRingTheory/Polynomial/Basic.lean:attribute [-instance] Ring.toNonAssocRing in\r\nRingTheory/Polynomial/Basic.lean:attribute [-instance] Ring.toSemiring in\r\nRingTheory/Polynomial/Basic.lean:attribute [-instance] Polynomial.semiring Polynomial.commSemiring in\r\n```\r\n\r\nI don't know if those are OK. Also, does the `in` in `attribute [local/scoped simp] ... in` do anything, or do they operate on the current file/current namespace (respectively) regardless?\r\n\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 64,
        "closed": true,
        "closedAt": "2023-11-12T12:16:06Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5pRtvw",
              "body": "!bench",
              "createdAt": "2023-10-17T11:45:34Z",
              "author": {
                "login": "sgouezel"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5pRuIS",
              "body": "I'd like to see if it makes a performance difference to disable the simp lemma or not. Since you had to add it back in many places, it looks pretty useful as a simp lemma, so it would be good if we could keep it in the simpset.",
              "createdAt": "2023-10-17T11:46:40Z",
              "author": {
                "login": "sgouezel"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5pR98S",
              "body": "Here are the [benchmark results](http://speed.lean-fro.org/mathlib4/run-detail/e4cdc1ce-e536-4055-8233-a2d3fea7a5ef) for commit 790356f8f794b801e7c02a078a77ac2383ff1962.\nThere were [significant changes](http://speed.lean-fro.org/mathlib4/compare/4be0ab1a-4b0e-4df1-9a3d-4f8b7688c0fd/to/e4cdc1ce-e536-4055-8233-a2d3fea7a5ef) against commit 04245a845816a4f6d44b6e726e349872bd74ac64:\n```diff\n  Benchmark                                                    Metric         Change\n  ==================================================================================\n+ lint                                                         wall-clock      -9.7%\n+ ~Mathlib.Algebra.Homology.DifferentialObject                 instructions   -11.7%\n+ ~Mathlib.CategoryTheory.Abelian.InjectiveResolution          instructions    -3.3%\n- ~Mathlib.CategoryTheory.Abelian.Projective                   instructions     1.5%\n- ~Mathlib.CategoryTheory.Abelian.Transfer                     instructions     9.5%\n+ ~Mathlib.CategoryTheory.Adjunction.Evaluation                instructions    -9.5%\n+ ~Mathlib.CategoryTheory.Functor.Currying                     instructions   -16.5%\n+ ~Mathlib.CategoryTheory.Limits.Constructions.Over.Products   instructions   -13.9%\n+ ~Mathlib.CategoryTheory.Limits.Final                         instructions    -8.2%\n+ ~Mathlib.CategoryTheory.Monoidal.CommMon_                    instructions    -8.2%\n- ~Mathlib.CategoryTheory.Monoidal.Discrete                    instructions    55.2%\n+ ~Mathlib.CategoryTheory.Monoidal.End                         instructions   -15.5%\n+ ~Mathlib.CategoryTheory.Monoidal.Internal.FunctorCategory    instructions   -13.2%\n+ ~Mathlib.CategoryTheory.Monoidal.Mod_                        instructions   -16.8%\n- ~Mathlib.CategoryTheory.Subobject.Lattice                    instructions    10.7%\n- ~Mathlib.CategoryTheory.Subobject.MonoOver                   instructions    19.5%\n- ~Mathlib.CategoryTheory.Subobject.Types                      instructions    34.9%\n- ~Mathlib.CategoryTheory.Subterminal                          instructions    66.1%\n+ ~Mathlib.CategoryTheory.Whiskering                           instructions   -21.8%\n+ ~Mathlib.RepresentationTheory.Action                         instructions    -4.1%\n```",
              "createdAt": "2023-10-17T12:28:23Z",
              "author": {
                "login": "leanprover-bot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5pdcQY",
              "body": "It seems that this being a simp lemma is one of the reasons that [this regression in simp](https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Regression.20in.20simp) occurs. More generally, having this in the global simp set can slow down `simp` calls which are then squeezed away, so I'm not sure that the mathlib benchmark alone is a fair judge.",
              "createdAt": "2023-10-18T21:10:44Z",
              "author": {
                "login": "b-mehta"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5phZQb",
              "body": "> I'm still not completely convinced: the fact that several files are red in the bench show that the lemma is useful even in places where you haven't put it back, as it provides efficient shortcuts. (I'm not really against the change either, just hesitant).\r\n\r\nThat's fair - I'm viewing this as reverting an accidental change, rather than making a deliberate change. Specifically it seems to me like this lemma was never meant to be in the global simp-set",
              "createdAt": "2023-10-19T08:54:58Z",
              "author": {
                "login": "b-mehta"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5pjau7",
              "body": "For reference, the Zulip example is:\r\n\r\n```lean\r\nimport Mathlib\r\n\r\nset_option trace.profiler true\r\n\r\nexample : (fun i : Nat => 3) ≠ fun i : Nat => 4 := by simp (config := {decide := false}) [Function.funext_iff]\r\n```\r\n\r\nBefore this PR:\r\n\r\n```\r\n[Elab.command] [0.233050s] example : (fun i : Nat => 3) ≠ fun i : Nat => 4 := by\r\n      simp (config := { decide := false }) [Function.funext_iff]\r\n  [Elab.step] [0.227674s] simp (config := { decide := false }) [Function.funext_iff]\r\n    [Elab.step] [0.227658s] simp (config := { decide := false }) [Function.funext_iff]\r\n      [Elab.step] [0.227637s] simp (config := { decide := false }) [Function.funext_iff]\r\n        [Meta.synthInstance] [0.173574s] ❌ Subsingleton (ℕ → ℕ)\r\n```\r\n\r\nAfter:\r\n```\r\n[Elab.command] [0.053534s] example : (fun i : Nat => 3) ≠ fun i : Nat => 4 := by\r\n      simp (config := { decide := false }) [Function.funext_iff]\r\n  [Elab.step] [0.048873s] simp (config := { decide := false }) [Function.funext_iff]\r\n    [Elab.step] [0.048855s] simp (config := { decide := false }) [Function.funext_iff]\r\n      [Elab.step] [0.048830s] simp (config := { decide := false }) [Function.funext_iff]\r\n        [Meta.synthInstance] [0.012384s] ✅ CharZero ℕ\r\n```",
              "createdAt": "2023-10-19T12:35:55Z",
              "author": {
                "login": "collares"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5pu_wP",
              "body": "Note: I have pushed an update to the lean toolchain because this PR was on a [buggy version](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Potential.20data.20loss.20from.20.60lake.20clean.60.20with.204.2E2.2E0-rc2.2F3/near/397875701) of the toolchain. **WARNING**: checking out old commits of this PR using v4.2.0-rc2 or v4.2.0-rc3 can cause `lake clean` to delete your mathlib folder! If you need to do so, make sure to delete `lakefile.olean` manually before running any `lake` commands.",
              "createdAt": "2023-10-21T21:32:34Z",
              "author": {
                "login": "digama0"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5q2b1q",
              "body": "!bench",
              "createdAt": "2023-11-03T15:30:53Z",
              "author": {
                "login": "collares"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5q2rT3",
              "body": "Here are the [benchmark results](http://speed.lean-fro.org/mathlib4/run-detail/4e443599-07c1-4ece-95bf-5b3dd0475ae4) for commit 6d74268bb433590d4945a53e45bfb8e26a054881.\nThere were [significant changes](http://speed.lean-fro.org/mathlib4/compare/5372b313-241b-4e4d-b9b6-565fc56863db/to/4e443599-07c1-4ece-95bf-5b3dd0475ae4) against commit a71794241fa0c7d10f3b1ef7c7e919cb07cfd06c:\n```diff\n  Benchmark                                                    Metric         Change\n  ==================================================================================\n+ lint                                                         instructions    -5.3%\n+ lint                                                         wall-clock      -7.3%\n+ ~Mathlib.Algebra.Homology.DifferentialObject                 instructions   -11.6%\n+ ~Mathlib.AlgebraicGeometry.Morphisms.QuasiSeparated          instructions    -2.6%\n- ~Mathlib.CategoryTheory.Abelian.InjectiveResolution          instructions     6.4%\n+ ~Mathlib.CategoryTheory.Abelian.Transfer                     instructions    -8.7%\n+ ~Mathlib.CategoryTheory.Functor.Currying                     instructions   -15.6%\n+ ~Mathlib.CategoryTheory.Limits.Constructions.Over.Products   instructions   -12.4%\n+ ~Mathlib.CategoryTheory.Limits.Final                         instructions    -6.4%\n+ ~Mathlib.CategoryTheory.Monad.Adjunction                     instructions   -11.4%\n+ ~Mathlib.CategoryTheory.Monoidal.CommMon_                    instructions    -4.7%\n- ~Mathlib.CategoryTheory.Monoidal.Discrete                    instructions    49.2%\n+ ~Mathlib.CategoryTheory.Monoidal.End                         instructions   -18.3%\n+ ~Mathlib.CategoryTheory.Monoidal.Internal.FunctorCategory    instructions    -7.8%\n+ ~Mathlib.CategoryTheory.Monoidal.Mod_                        instructions   -21.7%\n+ ~Mathlib.CategoryTheory.Monoidal.Mon_                        instructions    -6.1%\n- ~Mathlib.CategoryTheory.Subobject.Lattice                    instructions    10.7%\n- ~Mathlib.CategoryTheory.Subobject.MonoOver                   instructions    19.0%\n- ~Mathlib.CategoryTheory.Subobject.Types                      instructions    34.7%\n- ~Mathlib.CategoryTheory.Subterminal                          instructions    63.7%\n+ ~Mathlib.CategoryTheory.Whiskering                           instructions   -19.6%\n+ ~Mathlib.RepresentationTheory.Action                         instructions    -4.6%\n```",
              "createdAt": "2023-11-03T16:09:26Z",
              "author": {
                "login": "leanprover-bot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5q3YxY",
              "body": "!bench",
              "createdAt": "2023-11-03T18:05:34Z",
              "author": {
                "login": "collares"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5q3mSl",
              "body": "Here are the [benchmark results](http://speed.lean-fro.org/mathlib4/run-detail/6e9055dd-7615-4748-8309-673c11705110) for commit 053cbbb831e9c96316f584b686b26decbb500e32.\nThere were [significant changes](http://speed.lean-fro.org/mathlib4/compare/5372b313-241b-4e4d-b9b6-565fc56863db/to/6e9055dd-7615-4748-8309-673c11705110) against commit a71794241fa0c7d10f3b1ef7c7e919cb07cfd06c:\n```diff\n  Benchmark                                                   Metric         Change\n  =================================================================================\n- build                                                       aesop            7.8%\n+ lint                                                        instructions    -5.3%\n+ lint                                                        wall-clock      -7.3%\n+ ~Mathlib.AlgebraicGeometry.Morphisms.QuasiSeparated         instructions    -2.6%\n- ~Mathlib.CategoryTheory.Abelian.InjectiveResolution         instructions     6.2%\n+ ~Mathlib.CategoryTheory.Abelian.Transfer                    instructions    -8.3%\n- ~Mathlib.CategoryTheory.Monoidal.Internal.FunctorCategory   instructions     5.9%\n+ ~Mathlib.CategoryTheory.Monoidal.Mon_                       instructions    -3.7%\n+ ~Mathlib.CategoryTheory.Preadditive.FunctorCategory         instructions    -3.6%\n```",
              "createdAt": "2023-11-03T18:46:56Z",
              "author": {
                "login": "leanprover-bot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5q3nUV",
              "body": "Note that `eq_iff_true_of_subsingleton` as a simp lemma causes `simpNF` failures which are currently marked as `nolint`. See, for example, https://github.com/leanprover-community/mathlib4/blob/bf4260cbab0a5be943fe4cfe97a9d54948ddc61a/Mathlib/SetTheory/Game/Short.lean#L43-L48\r\n\r\nAs an experiment, I pushed a commit which adds `eq_iff_true_of_subsingleton`  as a normalization lemma for `aesop_cat`. A single file had longer build times before and after the last commit (`Mathlib.CategoryTheory.Abelian.InjectiveResolution`), but I think it shows that the performance regressions are specific to `aesop_cat`. I can't say if changing the tactic is a good idea, or if the way I did it is the best way of doing so, but at least it helps clarify the situation.\r\n\r\nBelow I will benchmark a new commit adding `attribute [scoped simp] eq_iff_true_of_subsingleton` to Mathlib.CategoryTheory.Category.Basic instead of modifying `aesop_cat` to see how it performs.\r\n",
              "createdAt": "2023-11-03T19:04:38Z",
              "author": {
                "login": "collares"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5q3nuZ",
              "body": "!bench",
              "createdAt": "2023-11-03T19:09:57Z",
              "author": {
                "login": "collares"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5q3z4a",
              "body": "Here are the [benchmark results](http://speed.lean-fro.org/mathlib4/run-detail/ee5b4af6-300b-41a1-8e4c-4f79d16c1380) for commit 06e4e16621cccc67b25ee56433c4248d7dafd62c.\nThere were [significant changes](http://speed.lean-fro.org/mathlib4/compare/5372b313-241b-4e4d-b9b6-565fc56863db/to/ee5b4af6-300b-41a1-8e4c-4f79d16c1380) against commit a71794241fa0c7d10f3b1ef7c7e919cb07cfd06c:\n```diff\n  Benchmark                                                   Metric         Change\n  =================================================================================\n+ lint                                                        instructions    -5.3%\n+ lint                                                        wall-clock      -8.2%\n+ ~Mathlib.CategoryTheory.Monoidal.End                        instructions    -8.0%\n- ~Mathlib.CategoryTheory.Monoidal.Internal.FunctorCategory   instructions     5.6%\n- ~Mathlib.RepresentationTheory.Action                        instructions     2.6%\n```",
              "createdAt": "2023-11-03T19:52:50Z",
              "author": {
                "login": "leanprover-bot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5q338n",
              "body": "To recap:\r\n\r\n* The [first benchmark run I triggered](https://github.com/leanprover-community/mathlib4/pull/7678#issuecomment-1792718071), removing `eq_iff_true_of_subsingleton` from the simp set, reports a few regressions and a few speedups. This corresponds to the first two commits.\r\n* The [second benchmark run](https://github.com/leanprover-community/mathlib4/pull/7678#issuecomment-1792959653) in addition adds `eq_iff_true_of_subsingleton` as an `aesop_cat` normalization simp lemma. Except for one file, the original regressions disappear. This is pretty strong evidence that previous slowdowns were all related to `aesop_cat`. Unfortunately, most of the wins also disappear. This corresponds to the first three commits.\r\n* The [third benchmark run](https://github.com/leanprover-community/mathlib4/pull/7678#issuecomment-1793015322) reverts the `aesop_cat` change, adding `eq_iff_true_of_subsingleton` as a scoped simp lemma in the CategoryTheory namespace. This means `aesop_cat` will use it, but we don't pay a cost to add it to aesop's simp lemma list at each callsite. This corresponds to taking all four commits (the fourth one reverts the third one as well as adding a scoped simp lemma).\r\n\r\nTherefore, there are three solutions with different tradeoffs. What all benchmarks had in common was a 5.3% decreasing in number of instructions during linting. This is probably related to the `nolint`ed `simpNF` failures I described earlier.",
              "createdAt": "2023-11-03T20:07:48Z",
              "author": {
                "login": "collares"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5rBJRg",
              "body": "@mattrobball I'll take the liberty to mention you here since this PR involves both performance and category theory, but feel free to ignore the ping if you want. Thanks!",
              "createdAt": "2023-11-06T16:46:47Z",
              "author": {
                "login": "collares"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5rthZ3",
              "body": "Discussion offline suggests we're going with the first option, and I'm happy with that!\r\n\r\nbors d+",
              "createdAt": "2023-11-12T11:15:32Z",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5rthZ7",
              "body": ":v: collares can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests).",
              "createdAt": "2023-11-12T11:15:35Z",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5rtiH6",
              "body": "bors r+",
              "createdAt": "2023-11-12T11:27:51Z",
              "author": {
                "login": "collares"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5rtk1a",
              "body": "Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6840394072/job/18599605757)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6840394072/job/18599605831)\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6840394072/job/18599605879)",
              "createdAt": "2023-11-12T12:16:05Z",
              "author": {
                "login": "mathlib-bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "d7781a8fbfb6be0c42d488b70060fe3844d68e4d",
                "additions": 111,
                "deletions": 93,
                "committedDate": "2023-11-03T15:26:30Z",
                "author": {
                  "name": "Mauricio Collares",
                  "email": "mauricio@collares.org"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "6d74268bb433590d4945a53e45bfb8e26a054881",
                "additions": 5,
                "deletions": 0,
                "committedDate": "2023-11-03T15:26:30Z",
                "author": {
                  "name": "Mauricio Collares",
                  "email": "mauricio@collares.org"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "053cbbb831e9c96316f584b686b26decbb500e32",
                "additions": 9,
                "deletions": 5,
                "committedDate": "2023-11-03T17:47:55Z",
                "author": {
                  "name": "Mauricio Collares",
                  "email": "mauricio@collares.org"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "06e4e16621cccc67b25ee56433c4248d7dafd62c",
                "additions": 7,
                "deletions": 9,
                "committedDate": "2023-11-03T19:04:01Z",
                "author": {
                  "name": "Mauricio Collares",
                  "email": "mauricio@collares.org"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "29a34d26048dee5a1136a8e3412b6040fb6def2f",
                "additions": 9,
                "deletions": 7,
                "committedDate": "2023-11-12T10:09:24Z",
                "author": {
                  "name": "Mauricio Collares",
                  "email": "mauricio@collares.org"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "4ee9b99406712016488bd3e8ca1ff0c9af7cdd7c",
                "additions": 5,
                "deletions": 9,
                "committedDate": "2023-11-12T10:09:27Z",
                "author": {
                  "name": "Mauricio Collares",
                  "email": "mauricio@collares.org"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "94528539e73e8aacb0c936c517bb8bf9c7f4c13d",
                "additions": 13684,
                "deletions": 6321,
                "committedDate": "2023-11-12T10:09:54Z",
                "author": {
                  "name": "Mauricio Collares",
                  "email": "mauricio@collares.org"
                },
                "statusCheckRollup": null
              }
            }
          ]
        },
        "createdAt": "2023-10-14T20:14:37Z",
        "deletions": 93,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/Algebra/Associated.lean",
              "additions": 4,
              "deletions": 2
            },
            {
              "path": "Mathlib/Algebra/BigOperators/Finprod.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Algebra/GCDMonoid/Basic.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Algebra/Group/UniqueProds.lean",
              "additions": 2,
              "deletions": 1
            },
            {
              "path": "Mathlib/Algebra/Lie/Abelian.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Algebra/Module/Equiv.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Algebra/Ring/Prod.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/Analysis/Calculus/ContDiff/Defs.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Analysis/NormedSpace/lpSpace.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/CategoryTheory/Adjunction/Comma.lean",
              "additions": 2,
              "deletions": 0
            },
            {
              "path": "Mathlib/CategoryTheory/Category/Basic.lean",
              "additions": 5,
              "deletions": 0
            },
            {
              "path": "Mathlib/CategoryTheory/Closed/Zero.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/CategoryTheory/Limits/Shapes/BinaryProducts.lean",
              "additions": 4,
              "deletions": 4
            },
            {
              "path": "Mathlib/CategoryTheory/Limits/Shapes/Biproducts.lean",
              "additions": 1,
              "deletions": 0
            },
            {
              "path": "Mathlib/CategoryTheory/Limits/Shapes/CommSq.lean",
              "additions": 6,
              "deletions": 6
            },
            {
              "path": "Mathlib/CategoryTheory/Limits/Shapes/Pullbacks.lean",
              "additions": 4,
              "deletions": 2
            },
            {
              "path": "Mathlib/CategoryTheory/Limits/Shapes/Terminal.lean",
              "additions": 3,
              "deletions": 2
            },
            {
              "path": "Mathlib/CategoryTheory/Limits/Unit.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/CategoryTheory/Monoidal/Subcategory.lean",
              "additions": 3,
              "deletions": 3
            },
            {
              "path": "Mathlib/CategoryTheory/PUnit.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/CategoryTheory/Subobject/Lattice.lean",
              "additions": 2,
              "deletions": 1
            },
            {
              "path": "Mathlib/Combinatorics/Additive/Behrend.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Combinatorics/Quiver/Path.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Control/EquivFunctor/Instances.lean",
              "additions": 4,
              "deletions": 4
            },
            {
              "path": "Mathlib/Data/Fin/Basic.lean",
              "additions": 3,
              "deletions": 2
            },
            {
              "path": "Mathlib/Data/Fin/VecNotation.lean",
              "additions": 4,
              "deletions": 2
            },
            {
              "path": "Mathlib/Data/Finset/Basic.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Data/Nat/Choose/Multinomial.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Data/Polynomial/Basic.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Data/Polynomial/Div.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/Data/Polynomial/Monic.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Data/Sym/Basic.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Data/ZMod/Basic.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/FieldTheory/Minpoly/Basic.lean",
              "additions": 2,
              "deletions": 1
            },
            {
              "path": "Mathlib/FieldTheory/Separable.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/GroupTheory/Exponent.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/GroupTheory/Solvable.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/GroupTheory/Sylow.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/LinearAlgebra/AffineSpace/Basis.lean",
              "additions": 2,
              "deletions": 1
            },
            {
              "path": "Mathlib/LinearAlgebra/Basis.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/LinearAlgebra/InvariantBasisNumber.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/LinearAlgebra/Matrix/Circulant.lean",
              "additions": 4,
              "deletions": 4
            },
            {
              "path": "Mathlib/LinearAlgebra/Matrix/NonsingularInverse.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/LinearAlgebra/Matrix/Polynomial.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/LinearAlgebra/PiTensorProduct.lean",
              "additions": 1,
              "deletions": 0
            },
            {
              "path": "Mathlib/LinearAlgebra/Trace.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Logic/Unique.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/MeasureTheory/Function/StronglyMeasurable/Basic.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/MeasureTheory/MeasurableSpace/Basic.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/MeasureTheory/Measure/MeasureSpace.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/ModelTheory/Semantics.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/ModelTheory/Syntax.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/NumberTheory/ModularForms/CongruenceSubgroups.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Order/Birkhoff.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/RingTheory/ChainOfDivisors.lean",
              "additions": 1,
              "deletions": 2
            },
            {
              "path": "Mathlib/RingTheory/Ideal/Norm.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/RingTheory/Localization/NormTrace.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/RingTheory/UniqueFactorizationDomain.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/SetTheory/Game/Nim.lean",
              "additions": 4,
              "deletions": 2
            },
            {
              "path": "Mathlib/SetTheory/Game/Ordinal.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Tactic/Nontriviality/Core.lean",
              "additions": 1,
              "deletions": 0
            },
            {
              "path": "Mathlib/Topology/ContinuousFunction/Algebra.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Topology/Sheaves/Presheaf.lean",
              "additions": 3,
              "deletions": 3
            },
            {
              "path": "Mathlib/Topology/Sheaves/SheafCondition/Sites.lean",
              "additions": 1,
              "deletions": 1
            }
          ]
        },
        "headRefName": "collares/local-simp",
        "headRefOid": "94528539e73e8aacb0c936c517bb8bf9c7f4c13d",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5cz_1h",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABAt13Ow",
              "color": "bfd4f2",
              "name": "delegated"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5ki-fh",
              "body": "I'm still not completely convinced: the fact that several files are red in the bench show that the lemma is useful even in places where you haven't put it back, as it provides efficient shortcuts. (I'm not really against the change either, just hesitant).",
              "state": "COMMENTED",
              "author": {
                "login": "sgouezel"
              },
              "submittedAt": "2023-10-19T07:14:28Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 7678,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5ki-fh",
              "body": "I'm still not completely convinced: the fact that several files are red in the bench show that the lemma is useful even in places where you haven't put it back, as it provides efficient shortcuts. (I'm not really against the change either, just hesitant).",
              "state": "COMMENTED",
              "author": {
                "login": "sgouezel"
              },
              "submittedAt": "2023-10-19T07:14:28Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5RXInM",
                    "body": "can you mark this one as simp, now that simp alone doesn't prove it?",
                    "createdAt": "2023-10-19T07:10:41Z",
                    "author": {
                      "login": "sgouezel"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjI0NDIzOQ==",
              "login": "collares"
            },
            {
              "id": "MDQ6VXNlcjEwODE4NDM0",
              "login": "sgouezel"
            },
            {
              "id": "MDQ6VXNlcjg1NjY4Mzk0",
              "login": "leanprover-bot"
            },
            {
              "id": "MDQ6VXNlcjI5OTU5MjI2",
              "login": "b-mehta"
            },
            {
              "id": "MDQ6VXNlcjg2ODU4OA==",
              "login": "digama0"
            },
            {
              "id": "MDQ6VXNlcjQ3Nzk1Ng==",
              "login": "kim-em"
            },
            {
              "id": "U_kgDOB75MNQ",
              "login": "leanprover-community-mathlib4-bot"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": null,
        "title": "[Merged by Bors] - fix: `attribute [simp] ... in` -> `attribute [local simp] ... in`",
        "updatedAt": "2023-11-12T12:16:09Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/7678",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5z1__YzwAAAAJ7Ilkz",
              "createdAt": "2023-10-14T20:14:37Z",
              "label": {
                "id": "MDU6TGFiZWwzMjcxMjQ0NzU5",
                "name": "WIP"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5z1__YzwAAAAJ7Ocs7",
              "createdAt": "2023-10-15T09:48:04Z",
              "label": {
                "id": "MDU6TGFiZWwzMjcxMjQ0NzU5",
                "name": "WIP"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5z1__YzwAAAAJ7O81F",
              "createdAt": "2023-10-15T11:16:27Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5pRtvw",
              "createdAt": "2023-10-17T11:45:34Z",
              "body": "!bench",
              "author": {
                "login": "sgouezel"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5pRuIS",
              "createdAt": "2023-10-17T11:46:40Z",
              "body": "I'd like to see if it makes a performance difference to disable the simp lemma or not. Since you had to add it back in many places, it looks pretty useful as a simp lemma, so it would be good if we could keep it in the simpset.",
              "author": {
                "login": "sgouezel"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5pR98S",
              "createdAt": "2023-10-17T12:28:23Z",
              "body": "Here are the [benchmark results](http://speed.lean-fro.org/mathlib4/run-detail/e4cdc1ce-e536-4055-8233-a2d3fea7a5ef) for commit 790356f8f794b801e7c02a078a77ac2383ff1962.\nThere were [significant changes](http://speed.lean-fro.org/mathlib4/compare/4be0ab1a-4b0e-4df1-9a3d-4f8b7688c0fd/to/e4cdc1ce-e536-4055-8233-a2d3fea7a5ef) against commit 04245a845816a4f6d44b6e726e349872bd74ac64:\n```diff\n  Benchmark                                                    Metric         Change\n  ==================================================================================\n+ lint                                                         wall-clock      -9.7%\n+ ~Mathlib.Algebra.Homology.DifferentialObject                 instructions   -11.7%\n+ ~Mathlib.CategoryTheory.Abelian.InjectiveResolution          instructions    -3.3%\n- ~Mathlib.CategoryTheory.Abelian.Projective                   instructions     1.5%\n- ~Mathlib.CategoryTheory.Abelian.Transfer                     instructions     9.5%\n+ ~Mathlib.CategoryTheory.Adjunction.Evaluation                instructions    -9.5%\n+ ~Mathlib.CategoryTheory.Functor.Currying                     instructions   -16.5%\n+ ~Mathlib.CategoryTheory.Limits.Constructions.Over.Products   instructions   -13.9%\n+ ~Mathlib.CategoryTheory.Limits.Final                         instructions    -8.2%\n+ ~Mathlib.CategoryTheory.Monoidal.CommMon_                    instructions    -8.2%\n- ~Mathlib.CategoryTheory.Monoidal.Discrete                    instructions    55.2%\n+ ~Mathlib.CategoryTheory.Monoidal.End                         instructions   -15.5%\n+ ~Mathlib.CategoryTheory.Monoidal.Internal.FunctorCategory    instructions   -13.2%\n+ ~Mathlib.CategoryTheory.Monoidal.Mod_                        instructions   -16.8%\n- ~Mathlib.CategoryTheory.Subobject.Lattice                    instructions    10.7%\n- ~Mathlib.CategoryTheory.Subobject.MonoOver                   instructions    19.5%\n- ~Mathlib.CategoryTheory.Subobject.Types                      instructions    34.9%\n- ~Mathlib.CategoryTheory.Subterminal                          instructions    66.1%\n+ ~Mathlib.CategoryTheory.Whiskering                           instructions   -21.8%\n+ ~Mathlib.RepresentationTheory.Action                         instructions    -4.1%\n```",
              "author": {
                "login": "leanprover-bot"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5pdcQY",
              "createdAt": "2023-10-18T21:10:44Z",
              "body": "It seems that this being a simp lemma is one of the reasons that [this regression in simp](https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Regression.20in.20simp) occurs. More generally, having this in the global simp set can slow down `simp` calls which are then squeezed away, so I'm not sure that the mathlib benchmark alone is a fair judge.",
              "author": {
                "login": "b-mehta"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5ki-fh",
              "createdAt": "2023-10-19T07:10:40Z",
              "body": "I'm still not completely convinced: the fact that several files are red in the bench show that the lemma is useful even in places where you haven't put it back, as it provides efficient shortcuts. (I'm not really against the change either, just hesitant).",
              "author": {
                "login": "sgouezel"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5phZQb",
              "createdAt": "2023-10-19T08:54:58Z",
              "body": "> I'm still not completely convinced: the fact that several files are red in the bench show that the lemma is useful even in places where you haven't put it back, as it provides efficient shortcuts. (I'm not really against the change either, just hesitant).\r\n\r\nThat's fair - I'm viewing this as reverting an accidental change, rather than making a deliberate change. Specifically it seems to me like this lemma was never meant to be in the global simp-set",
              "author": {
                "login": "b-mehta"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5pjau7",
              "createdAt": "2023-10-19T12:35:55Z",
              "body": "For reference, the Zulip example is:\r\n\r\n```lean\r\nimport Mathlib\r\n\r\nset_option trace.profiler true\r\n\r\nexample : (fun i : Nat => 3) ≠ fun i : Nat => 4 := by simp (config := {decide := false}) [Function.funext_iff]\r\n```\r\n\r\nBefore this PR:\r\n\r\n```\r\n[Elab.command] [0.233050s] example : (fun i : Nat => 3) ≠ fun i : Nat => 4 := by\r\n      simp (config := { decide := false }) [Function.funext_iff]\r\n  [Elab.step] [0.227674s] simp (config := { decide := false }) [Function.funext_iff]\r\n    [Elab.step] [0.227658s] simp (config := { decide := false }) [Function.funext_iff]\r\n      [Elab.step] [0.227637s] simp (config := { decide := false }) [Function.funext_iff]\r\n        [Meta.synthInstance] [0.173574s] ❌ Subsingleton (ℕ → ℕ)\r\n```\r\n\r\nAfter:\r\n```\r\n[Elab.command] [0.053534s] example : (fun i : Nat => 3) ≠ fun i : Nat => 4 := by\r\n      simp (config := { decide := false }) [Function.funext_iff]\r\n  [Elab.step] [0.048873s] simp (config := { decide := false }) [Function.funext_iff]\r\n    [Elab.step] [0.048855s] simp (config := { decide := false }) [Function.funext_iff]\r\n      [Elab.step] [0.048830s] simp (config := { decide := false }) [Function.funext_iff]\r\n        [Meta.synthInstance] [0.012384s] ✅ CharZero ℕ\r\n```",
              "author": {
                "login": "collares"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5pu_wP",
              "createdAt": "2023-10-21T21:32:34Z",
              "body": "Note: I have pushed an update to the lean toolchain because this PR was on a [buggy version](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Potential.20data.20loss.20from.20.60lake.20clean.60.20with.204.2E2.2E0-rc2.2F3/near/397875701) of the toolchain. **WARNING**: checking out old commits of this PR using v4.2.0-rc2 or v4.2.0-rc3 can cause `lake clean` to delete your mathlib folder! If you need to do so, make sure to delete `lakefile.olean` manually before running any `lake` commands.",
              "author": {
                "login": "digama0"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c5z1__YzwAAAAKHHKFe",
              "createdAt": "2023-11-03T14:20:43Z"
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "d7781a8fbfb6be0c42d488b70060fe3844d68e4d"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "6d74268bb433590d4945a53e45bfb8e26a054881"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c5z1__YzwAAAAKHKiYj",
              "createdAt": "2023-11-03T15:26:38Z"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5q2b1q",
              "createdAt": "2023-11-03T15:30:53Z",
              "body": "!bench",
              "author": {
                "login": "collares"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5q2rT3",
              "createdAt": "2023-11-03T16:09:26Z",
              "body": "Here are the [benchmark results](http://speed.lean-fro.org/mathlib4/run-detail/4e443599-07c1-4ece-95bf-5b3dd0475ae4) for commit 6d74268bb433590d4945a53e45bfb8e26a054881.\nThere were [significant changes](http://speed.lean-fro.org/mathlib4/compare/5372b313-241b-4e4d-b9b6-565fc56863db/to/4e443599-07c1-4ece-95bf-5b3dd0475ae4) against commit a71794241fa0c7d10f3b1ef7c7e919cb07cfd06c:\n```diff\n  Benchmark                                                    Metric         Change\n  ==================================================================================\n+ lint                                                         instructions    -5.3%\n+ lint                                                         wall-clock      -7.3%\n+ ~Mathlib.Algebra.Homology.DifferentialObject                 instructions   -11.6%\n+ ~Mathlib.AlgebraicGeometry.Morphisms.QuasiSeparated          instructions    -2.6%\n- ~Mathlib.CategoryTheory.Abelian.InjectiveResolution          instructions     6.4%\n+ ~Mathlib.CategoryTheory.Abelian.Transfer                     instructions    -8.7%\n+ ~Mathlib.CategoryTheory.Functor.Currying                     instructions   -15.6%\n+ ~Mathlib.CategoryTheory.Limits.Constructions.Over.Products   instructions   -12.4%\n+ ~Mathlib.CategoryTheory.Limits.Final                         instructions    -6.4%\n+ ~Mathlib.CategoryTheory.Monad.Adjunction                     instructions   -11.4%\n+ ~Mathlib.CategoryTheory.Monoidal.CommMon_                    instructions    -4.7%\n- ~Mathlib.CategoryTheory.Monoidal.Discrete                    instructions    49.2%\n+ ~Mathlib.CategoryTheory.Monoidal.End                         instructions   -18.3%\n+ ~Mathlib.CategoryTheory.Monoidal.Internal.FunctorCategory    instructions    -7.8%\n+ ~Mathlib.CategoryTheory.Monoidal.Mod_                        instructions   -21.7%\n+ ~Mathlib.CategoryTheory.Monoidal.Mon_                        instructions    -6.1%\n- ~Mathlib.CategoryTheory.Subobject.Lattice                    instructions    10.7%\n- ~Mathlib.CategoryTheory.Subobject.MonoOver                   instructions    19.0%\n- ~Mathlib.CategoryTheory.Subobject.Types                      instructions    34.7%\n- ~Mathlib.CategoryTheory.Subterminal                          instructions    63.7%\n+ ~Mathlib.CategoryTheory.Whiskering                           instructions   -19.6%\n+ ~Mathlib.RepresentationTheory.Action                         instructions    -4.6%\n```",
              "author": {
                "login": "leanprover-bot"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "053cbbb831e9c96316f584b686b26decbb500e32"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5q3YxY",
              "createdAt": "2023-11-03T18:05:34Z",
              "body": "!bench",
              "author": {
                "login": "collares"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5q3mSl",
              "createdAt": "2023-11-03T18:46:56Z",
              "body": "Here are the [benchmark results](http://speed.lean-fro.org/mathlib4/run-detail/6e9055dd-7615-4748-8309-673c11705110) for commit 053cbbb831e9c96316f584b686b26decbb500e32.\nThere were [significant changes](http://speed.lean-fro.org/mathlib4/compare/5372b313-241b-4e4d-b9b6-565fc56863db/to/6e9055dd-7615-4748-8309-673c11705110) against commit a71794241fa0c7d10f3b1ef7c7e919cb07cfd06c:\n```diff\n  Benchmark                                                   Metric         Change\n  =================================================================================\n- build                                                       aesop            7.8%\n+ lint                                                        instructions    -5.3%\n+ lint                                                        wall-clock      -7.3%\n+ ~Mathlib.AlgebraicGeometry.Morphisms.QuasiSeparated         instructions    -2.6%\n- ~Mathlib.CategoryTheory.Abelian.InjectiveResolution         instructions     6.2%\n+ ~Mathlib.CategoryTheory.Abelian.Transfer                    instructions    -8.3%\n- ~Mathlib.CategoryTheory.Monoidal.Internal.FunctorCategory   instructions     5.9%\n+ ~Mathlib.CategoryTheory.Monoidal.Mon_                       instructions    -3.7%\n+ ~Mathlib.CategoryTheory.Preadditive.FunctorCategory         instructions    -3.6%\n```",
              "author": {
                "login": "leanprover-bot"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "06e4e16621cccc67b25ee56433c4248d7dafd62c"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5q3nUV",
              "createdAt": "2023-11-03T19:04:38Z",
              "body": "Note that `eq_iff_true_of_subsingleton` as a simp lemma causes `simpNF` failures which are currently marked as `nolint`. See, for example, https://github.com/leanprover-community/mathlib4/blob/bf4260cbab0a5be943fe4cfe97a9d54948ddc61a/Mathlib/SetTheory/Game/Short.lean#L43-L48\r\n\r\nAs an experiment, I pushed a commit which adds `eq_iff_true_of_subsingleton`  as a normalization lemma for `aesop_cat`. A single file had longer build times before and after the last commit (`Mathlib.CategoryTheory.Abelian.InjectiveResolution`), but I think it shows that the performance regressions are specific to `aesop_cat`. I can't say if changing the tactic is a good idea, or if the way I did it is the best way of doing so, but at least it helps clarify the situation.\r\n\r\nBelow I will benchmark a new commit adding `attribute [scoped simp] eq_iff_true_of_subsingleton` to Mathlib.CategoryTheory.Category.Basic instead of modifying `aesop_cat` to see how it performs.\r\n",
              "author": {
                "login": "collares"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5q3nuZ",
              "createdAt": "2023-11-03T19:09:57Z",
              "body": "!bench",
              "author": {
                "login": "collares"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5q3z4a",
              "createdAt": "2023-11-03T19:52:50Z",
              "body": "Here are the [benchmark results](http://speed.lean-fro.org/mathlib4/run-detail/ee5b4af6-300b-41a1-8e4c-4f79d16c1380) for commit 06e4e16621cccc67b25ee56433c4248d7dafd62c.\nThere were [significant changes](http://speed.lean-fro.org/mathlib4/compare/5372b313-241b-4e4d-b9b6-565fc56863db/to/ee5b4af6-300b-41a1-8e4c-4f79d16c1380) against commit a71794241fa0c7d10f3b1ef7c7e919cb07cfd06c:\n```diff\n  Benchmark                                                   Metric         Change\n  =================================================================================\n+ lint                                                        instructions    -5.3%\n+ lint                                                        wall-clock      -8.2%\n+ ~Mathlib.CategoryTheory.Monoidal.End                        instructions    -8.0%\n- ~Mathlib.CategoryTheory.Monoidal.Internal.FunctorCategory   instructions     5.6%\n- ~Mathlib.RepresentationTheory.Action                        instructions     2.6%\n```",
              "author": {
                "login": "leanprover-bot"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5q338n",
              "createdAt": "2023-11-03T20:07:48Z",
              "body": "To recap:\r\n\r\n* The [first benchmark run I triggered](https://github.com/leanprover-community/mathlib4/pull/7678#issuecomment-1792718071), removing `eq_iff_true_of_subsingleton` from the simp set, reports a few regressions and a few speedups. This corresponds to the first two commits.\r\n* The [second benchmark run](https://github.com/leanprover-community/mathlib4/pull/7678#issuecomment-1792959653) in addition adds `eq_iff_true_of_subsingleton` as an `aesop_cat` normalization simp lemma. Except for one file, the original regressions disappear. This is pretty strong evidence that previous slowdowns were all related to `aesop_cat`. Unfortunately, most of the wins also disappear. This corresponds to the first three commits.\r\n* The [third benchmark run](https://github.com/leanprover-community/mathlib4/pull/7678#issuecomment-1793015322) reverts the `aesop_cat` change, adding `eq_iff_true_of_subsingleton` as a scoped simp lemma in the CategoryTheory namespace. This means `aesop_cat` will use it, but we don't pay a cost to add it to aesop's simp lemma list at each callsite. This corresponds to taking all four commits (the fourth one reverts the third one as well as adding a scoped simp lemma).\r\n\r\nTherefore, there are three solutions with different tradeoffs. What all benchmarks had in common was a 5.3% decreasing in number of instructions during linting. This is probably related to the `nolint`ed `simpNF` failures I described earlier.",
              "author": {
                "login": "collares"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5rBJRg",
              "createdAt": "2023-11-06T16:46:47Z",
              "body": "@mattrobball I'll take the liberty to mention you here since this PR involves both performance and category theory, but feel free to ignore the ping if you want. Thanks!",
              "author": {
                "login": "collares"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5z1__YzwAAAAKLmrwU",
              "createdAt": "2023-11-11T10:26:16Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "29a34d26048dee5a1136a8e3412b6040fb6def2f"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "4ee9b99406712016488bd3e8ca1ff0c9af7cdd7c"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "94528539e73e8aacb0c936c517bb8bf9c7f4c13d"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5z1__YzwAAAAKLutf1",
              "createdAt": "2023-11-12T10:22:10Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5rthZ3",
              "createdAt": "2023-11-12T11:15:32Z",
              "body": "Discussion offline suggests we're going with the first option, and I'm happy with that!\r\n\r\nbors d+",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5rthZ7",
              "createdAt": "2023-11-12T11:15:35Z",
              "body": ":v: collares can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests).",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5z1__YzwAAAAKLvCv3",
              "createdAt": "2023-11-12T11:15:46Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABAt13Ow",
                "name": "delegated"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5z1__YzwAAAAKLvCwK",
              "createdAt": "2023-11-12T11:15:46Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5rtiH6",
              "createdAt": "2023-11-12T11:27:51Z",
              "body": "bors r+",
              "author": {
                "login": "collares"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5rtk1a",
              "createdAt": "2023-11-12T12:16:05Z",
              "body": "Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6840394072/job/18599605757)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6840394072/job/18599605831)\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6840394072/job/18599605879)",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c5z1__YzwAAAAKLvabE",
              "createdAt": "2023-11-12T12:16:06Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c5z1__YzwAAAAKLvacJ",
              "createdAt": "2023-11-12T12:16:09Z"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5S8K4N",
              "createdAt": "2024-05-27T14:37:58Z",
              "source": {
                "id": "PR_kwDOFcwZ1c5whPq6",
                "title": "[Merged by Bors] - feat: lint `attribute [instance] instName in`",
                "url": "https://github.com/leanprover-community/mathlib4/pull/13190"
              }
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5S-1qQ",
              "createdAt": "2024-05-29T11:48:09Z",
              "source": {
                "id": "PR_kwDOFcwZ1c5ws2zM",
                "title": "[Merged by Bors] - fix: extend attributeInstanceIn linter to lint all global attributes declared with `in`",
                "url": "https://github.com/leanprover-community/mathlib4/pull/13293"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            }
          ]
        }
      }
    }
  }
}
