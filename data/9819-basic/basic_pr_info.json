{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 6745,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "jjaassoonn"
        },
        "baseRefName": "master",
        "body": "1. if $A$ is a noetherian graded ring, then $A_0$ is a noetherian subring of  $A$ and $A$ is a finitely generated algebra over $A_0$, if $M$ is a finitely generated graded module over $A$, then each $M_n$ is a finitely generated module over \r\n$A_0$.\r\n\r\n2. Definition of additive functions over any abelian category: if $C$ is an abelian category, a function $f : C \\to \\mathbb Z$ is said to be additive, if $f(y) = f(x) + f(z)$ whenever $0\\to x \\to y \\to z \\to 0$ is exact. proved some basic properties such as $f(0) = 0$ and $f(x) = f(y)$ whenever $x \\cong y$ and interaction of $f$ with longer exact sequences\r\n\r\n3. The category of finitely generated module over noetherian ring is abelian\r\n\r\n4. A proof of Hilbert-Serre theorem: the Poincare series is actually of the form $\\frac{p}{\\prod(1- X^i)}$ where $p$ is polynomial\r\n\r\nThe code works, but poorly written. \r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 25,
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c53oJQ_",
              "body": "I have added a file HilbertPolynomial.lean to the folder Mathlib/Algebra/HilbertSerre. In the file, the main things I have done are:\r\n1. formalising the Hilbert polynomial (`HilbertSerre.hilbertPolynomial`), which is a one-variable polynomial with coefficients in `ℚ`;\r\n2. proving that for any large enough `n : ℕ`, the value of the additive function `μ` at `ℳ n` is equal to the value of the Hilbert polynomial at `n`;\r\n3. showing that the polynomial `h` satisfying the above property (i.e. for any large enough `n : ℕ`, the value of `μ` at `ℳ n` equals the value of `h` at `n`) is unique;\r\n4. proving a theorem `HilbertSerre.natDegree_hilbertPolynomial`, which tells us the specific degree of any non-zero Hilbert polynomial.\r\n\r\nThe codes have been edited to be much neater and conciser than the original draft, but may still need further improvements.",
              "createdAt": "2024-03-19T12:07:59Z",
              "author": {
                "login": "FMLJohn"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6C_QoE",
              "body": "### PR summary [413e5b872a](https://github.com/leanprover-community/mathlib4/pull/9819/commits/413e5b872a7c758e0eb91f99cb96d6a61c81f0a2)\n\n#### Import changes\n\nDependency changes\n\n| File | Base Count | Head Count | Change |\n| --- | --- | --- | --- |\n| Mathlib.RingTheory.GradedAlgebra.Noetherian | 976 | 1070 | +94 (+9.63%) |\n| Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal | 926 | 956 | +30 (+3.24%) |\n| Mathlib.RingTheory.GradedAlgebra.Radical | 927 | 957 | +30 (+3.24%) |\n| Mathlib.AlgebraicGeometry.ProjectiveSpectrum.Topology | 1029 | 1059 | +30 (+2.92%) |\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ A'ZeroToAZero`\n`+ A'ZeroToAZero_comp_AZeroToA'Zero`\n`+ AZeroEquivA'Zero`\n`+ AZeroToA'Zero`\n`+ AZeroToA'Zero_comp_A'ZeroToAZero`\n`+ AdditiveFunction`\n`+ AdditiveFunction_eq_hilbertPolynomial_eval`\n`+ Algebra.adjoin_isNoetherian`\n`+ Algebra.adjoin_module_finite_of_annihilating`\n`+ Algebra.adjoin_smul_def`\n`+ C`\n`+ COKER.descComponent`\n`+ COKER.descComponent_surjective`\n`+ Finset.single_le_sum'`\n`+ GradeZero.distribMulAction_at_i`\n`+ GradeZero.module_at_i`\n`+ GradeZero.mulAction_at_i`\n`+ GradeZero.smul_at_i`\n`+ GradeZero.subring_isNoetherianRing_of_isNoetherianRing`\n`+ GradedRing.exists_of_mem_homogeneousComponents`\n`+ GradedRing.homogeneousComponents`\n`+ GradedRing.homogeneousComponents_def`\n`+ GradedRing.mem_homogeneousComponents_iff`\n`+ GradedRing.mem_homogeneousComponents_of_ne_zero_and_exists`\n`+ GradedRing.mem_homogeneousSubmonoid_of_mem_homogeneousComponents`\n`+ GradedRing.ne_zero_of_mem_homogeneousComponents`\n`+ HomogeneousSubmodule`\n`+ HomogeneousSubmodule.ext`\n`+ HomogeneousSubmodule.homogeneousHull_toSubmodule_eq_self`\n`+ HomogeneousSubmodule.isHomogeneous`\n`+ HomogeneousSubmodule.mem_iff`\n`+ HomogeneousSubmodule.setLike`\n`+ HomogeneousSubmodule.toSubmodule_homogeneousCore_eq_self`\n`+ HomogeneousSubmodule.toSubmodule_injective`\n`+ HomogeneousSubring`\n`+ HomogeneousSubring.ext`\n`+ HomogeneousSubring.isHomogeneous`\n`+ HomogeneousSubring.mem_iff`\n`+ HomogeneousSubring.setLike`\n`+ HomogeneousSubring.toSubring_injective`\n`+ Ideal.fg_iff_homogeneously_fg`\n`+ Ideal.homogeneousCore'_eq_sSup`\n`+ Ideal.homogeneousHull`\n`+ Ideal.homogeneously_FG`\n`+ Ideal.le_toSubmodule_homogeneousHull`\n`+ Irrelevant`\n`+ KER`\n`+ KER.componentEmb`\n`+ KER.componentEmb_injective`\n`+ MvPowerSeries`\n`+ Submodule.IsHomogeneous`\n`+ Submodule.IsHomogeneous.iff_eq`\n`+ Submodule.IsHomogeneous.iff_exists`\n`+ Submodule.IsHomogeneous.toSubmodule_homogeneousCore_eq_self`\n`+ Submodule.IsHomogeneous.toSubmodule_homogeneousHull_eq_self`\n`+ Submodule.fg_iff_homogeneously_fg`\n`+ Submodule.homogeneousCore`\n`+ Submodule.homogeneousCore'`\n`+ Submodule.homogeneousCore'_eq_sSup`\n`+ Submodule.homogeneousCore'_le`\n`+ Submodule.homogeneousCore'_mono`\n`+ Submodule.homogeneousCore.gc`\n`+ Submodule.homogeneousCore.gi`\n`+ Submodule.homogeneousCore_eq_sSup`\n`+ Submodule.homogeneousCore_mono`\n`+ Submodule.homogeneousHull`\n`+ Submodule.homogeneousHull.gc`\n`+ Submodule.homogeneousHull.gi`\n`+ Submodule.homogeneousHull_eq_iSup`\n`+ Submodule.homogeneousHull_eq_sInf`\n`+ Submodule.homogeneousHull_mono`\n`+ Submodule.homogeneous_span`\n`+ Submodule.homogeneously_FG`\n`+ Submodule.isHomogeneous_iff_forall_subset`\n`+ Submodule.isHomogeneous_iff_subset_iInter`\n`+ Submodule.le_toSubmodule_homogeneousHull`\n`+ Submodule.mem_homogeneousCore_of_homogeneous_of_mem`\n`+ Submodule.smul_homogeneous_element_mem_of_mem`\n`+ Submodule.toSubmodule_homogeneousCore_le`\n`+ Submodule.toSubmodule_homogeneousHull_eq_iSup`\n`+ Subring.IsHomogeneous`\n`+ Subring.homogeneousCore'`\n`+ Subring.homogeneousCore'_le`\n`+ Subring.homogeneousCore'_mono`\n`+ Subring.homogeneous_closure`\n`+ Subring.isHomogeneous_iff_forall_subset`\n`+ Subring.isHomogeneous_iff_subset_iInter`\n`+ Top`\n`+ X`\n`+ X_def`\n`+ X_dvd_iff`\n`+ X_inj`\n`+ X_pow_dvd_iff`\n`+ X_pow_eq`\n`+ X_pow_order_dvd`\n`+ _root_.RingEquiv.toFGModuleCatEquivalence`\n`+ _root_.RingEquiv.toFGModuleCatEquivalenceFunctor`\n`+ _root_.RingEquiv.toFGModuleCatEquivalenceInverse`\n`+ _root_.hilbert_serre`\n`+ abelian_A'_zero`\n`+ abelian_of_noetherian`\n`+ add`\n`+ addCommMonoid`\n`+ addMonoid`\n`+ addSemigroup`\n`+ addZeroClass`\n`+ add_apply`\n`+ add_mul`\n`+ adjoinHomogeneous`\n`+ algebraMap_apply`\n`+ algebraMap_apply'`\n`+ algebraMap_apply''`\n`+ algebraMvPolynomial`\n`+ algebraMvPowerSeries`\n`+ alternating_apply_aux_of_length6`\n`+ alternating_sum_apply_eq_zero_of_zero_zero_of_length6`\n`+ alternating_sum_apply_eq_zero_of_zero_zero_of_length6'`\n`+ alternating_sum_apply_eq_zero_of_zero_zero_of_length6_aux`\n`+ alternating_sum_apply_of_length6`\n`+ anExactSeq`\n`+ anExactSeq_complex`\n`+ anExactSeq_exact`\n`+ apply_eq_apply_image_add_apply_image`\n`+ apply_eq_apply_kernel_add_apply_kernel`\n`+ apply_image_eq_apply_ker_succ`\n`+ apply_kernel_sub_apply_cokernel_eq_apply_src_sub_apply_tgt`\n`+ apply_shortComplex_of_exact`\n`+ apply_shortComplex_of_exact'`\n`+ apply_sub_apply_succ`\n`+ asHom`\n`+ c_eq_algebraMap`\n`+ coeToMvPowerSeries`\n`+ coeToMvPowerSeries.algHom`\n`+ coeToMvPowerSeries.algHom_apply`\n`+ coeToMvPowerSeries.ringHom`\n`+ coeToMvPowerSeries.ringHom_apply`\n`+ coe_C`\n`+ coe_X`\n`+ coe_add`\n`+ coe_bit0`\n`+ coe_bit1`\n`+ coe_def`\n`+ coe_eq_one_iff`\n`+ coe_eq_zero_iff`\n`+ coe_inf`\n`+ coe_inj`\n`+ coe_injective`\n`+ coe_monomial`\n`+ coe_mul`\n`+ coe_one`\n`+ coe_pow`\n`+ coe_sup`\n`+ coe_zero`\n`+ coeff`\n`+ coeff_C`\n`+ coeff_C_mul`\n`+ coeff_X`\n`+ coeff_X_pow`\n`+ coeff_add_monomial_mul`\n`+ coeff_add_mul_monomial`\n`+ coeff_coe`\n`+ coeff_comp_monomial`\n`+ coeff_index_single_X`\n`+ coeff_index_single_self_X`\n`+ coeff_invOfUnit`\n`+ coeff_inv_aux`\n`+ coeff_map`\n`+ coeff_monomial`\n`+ coeff_monomial_mul`\n`+ coeff_monomial_ne`\n`+ coeff_monomial_same`\n`+ coeff_mul`\n`+ coeff_mul_C`\n`+ coeff_mul_invOneSubPow_eq_hilbert_eval`\n`+ coeff_mul_monomial`\n`+ coeff_mul_of_lt_order`\n`+ coeff_mul_one_sub_of_lt_order`\n`+ coeff_mul_prod_one_sub_of_lt_order`\n`+ coeff_of_lt_order`\n`+ coeff_one`\n`+ coeff_order`\n`+ coeff_poincareSeries`\n`+ coeff_prod`\n`+ coeff_smul`\n`+ coeff_trunc`\n`+ coeff_truncFun`\n`+ coeff_zero`\n`+ coeff_zero_C`\n`+ coeff_zero_X`\n`+ coeff_zero_X_mul`\n`+ coeff_zero_eq_constantCoeff`\n`+ coeff_zero_eq_constantCoeff_apply`\n`+ coeff_zero_mul_X`\n`+ coeff_zero_one`\n`+ cokernelCocone`\n`+ cokernelIsColimit`\n`+ cokernelIsoRangeQuotient`\n`+ cokernel_π_cokernelIsoRangeQuotient_hom`\n`+ cokernel_π_ext`\n`+ commute_X`\n`+ commute_monomial`\n`+ completeLattice`\n`+ constantCoeff`\n`+ constantCoeff_C`\n`+ constantCoeff_X`\n`+ constantCoeff_comp_C`\n`+ constantCoeff_invOfUnit`\n`+ constantCoeff_map`\n`+ constantCoeff_one`\n`+ constantCoeff_zero`\n`+ decomposition`\n`+ degreeMonomial`\n`+ degreeMonomial_zero`\n`+ epi_iff_range_eq_top`\n`+ epi_iff_surjective`\n`+ eqCOKER`\n`+ eqKER`\n`+ eq_apply_image_add_apply_cokernel`\n`+ eq_apply_kernel_add_apply_image`\n`+ eq_bot_iff`\n`+ eq_of_coeff_monomial_ne_zero`\n`+ eq_of_iso`\n`+ eq_top_iff`\n`+ evalMonomial_homogeneous`\n`+ evalMonomial_mem`\n`+ evalMonomial_mem_aux`\n`+ eventually_eq_zero_of_empty_generatorSet`\n`+ eventually_subsingleton_of_empty_generatorSet`\n`+ exact_KERComponentEmb_smulBy`\n`+ exact_iff`\n`+ exact_smulBy_COKERDescComponent`\n`+ exact_smulBy_COKERDescComponent'`\n`+ exists_coeff_ne_zero_iff_ne_zero`\n`+ exists_unique_hilbert`\n`+ exists_unique_hilbertPolynomial`\n`+ ext_iff`\n`+ finite_COKER`\n`+ finite_KER`\n`+ finite_adjoin_module_of_finite_module`\n`+ finite_algebra_over_degree_zero_subring`\n`+ finite_module_over_degree_zero_subring`\n`+ forget_preservesEpimorphisms`\n`+ forget_preservesMonomorphisms`\n`+ forget₂CreatesLimitOfNoetherian`\n`+ fromHomogeneousGeneratingSetOfIrrelevant`\n`+ generatingSet'`\n`+ generatingSetOverBaseRing`\n`+ generatingSet_is_finite`\n`+ gradedModule_COKER`\n`+ gradedModule_KER`\n`+ gradedRing`\n`+ gradedRing_A'`\n`+ gradedSMul`\n`+ grading.decompose_def`\n`+ greatestFactorOneSubNotDvd`\n`+ greatestFactorOneSubNotDvd_ne_zero`\n`+ hasCokernels_fgModuleCat`\n`+ hasKernels_fgModuleCat`\n`+ hilbert`\n`+ hilbertPolynomial`\n`+ homogeneousComponents`\n`+ homogeneous_of_mem_homogeneousComponents`\n`+ iInf`\n`+ iInf₂`\n`+ iSup`\n`+ iSup₂`\n`+ iff_quotient_mvPolynomial'''`\n`+ induction`\n`+ inf`\n`+ instance (F : J ⥤ FGModuleCat R) :`\n`+ instance (I : Ideal A) : Membership A (HomogeneousGeneratingSetOf 𝒜 I)`\n`+ instance (J : Type) [Category J] [FinCategory J] :`\n`+ instance (n : ℕ) : Module (𝒜 0) ((COKER.den ℳ x deg_x).quotientGrading n)`\n`+ instance (p : Submodule A M) : Membership M (HomogeneousGeneratingSetOf ℳ p)`\n`+ instance : Add (HomogeneousIdeal 𝒜) := inferInstanceAs <| Add <| HomogeneousSubmodule A 𝒜`\n`+ instance : Add (HomogeneousSubmodule A ℳ)`\n`+ instance : AddCommGroup (𝒞 ⟹+ T)`\n`+ instance : AddMonoidWithOne (MvPowerSeries σ R)`\n`+ instance : AddSubgroupClass (HomogeneousSubmodule A ℳ) M`\n`+ instance : Algebra (𝒜 0) A := Algebra.ofSubring (SetLike.GradeZero.subring 𝒜)`\n`+ instance : Algebra R (MvPowerSeries σ A)`\n`+ instance : Bot (HomogeneousIdeal 𝒜) := inferInstanceAs <| Bot <| HomogeneousSubmodule A 𝒜`\n`+ instance : Bot (HomogeneousSubmodule A ℳ)`\n`+ instance : CreatesLimitsOfShape J (forget₂ (FGModuleCat R) (ModuleCat.{v} R))`\n`+ instance : DFunLike (AdditiveFunction 𝒞 T) 𝒞 (fun _ ↦ T)`\n`+ instance : Decomposition A'.grading`\n`+ instance : DirectSum.Decomposition (COKER.den ℳ x deg_x).quotientGrading`\n`+ instance : HasFiniteLimits (FGModuleCat R)`\n`+ instance : Inf (HomogeneousIdeal 𝒜) := inferInstanceAs <| Inf <| HomogeneousSubmodule A 𝒜`\n`+ instance : Inf (HomogeneousSubmodule A ℳ)`\n`+ instance : InfSet (HomogeneousIdeal 𝒜) := inferInstanceAs <| InfSet <| HomogeneousSubmodule A 𝒜`\n`+ instance : InfSet (HomogeneousSubmodule A ℳ)`\n`+ instance : Inv (MvPowerSeries σ k)`\n`+ instance : Inv (PowerSeries k)`\n`+ instance : InvOneClass (MvPowerSeries σ k)`\n`+ instance : InvOneClass (PowerSeries k)`\n`+ instance : IsNoetherianRing R[S]`\n`+ instance : Module R[S] M`\n`+ instance : Mul (MvPowerSeries σ R)`\n`+ instance : One (MvPowerSeries σ R)`\n`+ instance : PreservesFiniteLimits (forget₂ (FGModuleCat R) (ModuleCat.{v} R))`\n`+ instance : Semiring (MvPowerSeries σ R)`\n`+ instance : SetLike.GradedMonoid A'.grading`\n`+ instance : SetLike.GradedSMul 𝒜 (COKER.den ℳ x deg_x).quotientGrading`\n`+ instance : SubringClass (HomogeneousSubring 𝒜𝒜) AA`\n`+ instance : Sup (HomogeneousIdeal 𝒜) := inferInstanceAs <| Sup <| HomogeneousSubmodule A 𝒜`\n`+ instance : SupSet (HomogeneousIdeal 𝒜) := inferInstanceAs <| SupSet <| HomogeneousSubmodule A 𝒜`\n`+ instance : Top (HomogeneousIdeal 𝒜) := inferInstanceAs <| Top <| HomogeneousSubmodule A 𝒜`\n`+ instance : Top (HomogeneousSubmodule A ℳ)`\n`+ instance [AddCommGroup R] : AddCommGroup (MvPowerSeries σ R)`\n`+ instance [AddCommMonoid R] : AddCommMonoid (MvPowerSeries σ R)`\n`+ instance [AddGroup R] : AddGroup (MvPowerSeries σ R)`\n`+ instance [AddMonoid R] : AddMonoid (MvPowerSeries σ R)`\n`+ instance [CommRing R] : CommRing (MvPowerSeries σ R)`\n`+ instance [CommSemiring R] : CommSemiring (MvPowerSeries σ R)`\n`+ instance [Inhabited R] : Inhabited (MvPowerSeries σ R)`\n`+ instance [LocalRing R] : LocalRing (MvPowerSeries σ R)`\n`+ instance [Nonempty σ] [Nontrivial R] : Nontrivial (Subalgebra R (MvPowerSeries σ R))`\n`+ instance [Nontrivial R] : Nontrivial (MvPowerSeries σ R)`\n`+ instance [Ring R] : Ring (MvPowerSeries σ R)`\n`+ instance [Zero R] : Zero (MvPowerSeries σ R)`\n`+ instance {A S} [Semiring R] [Semiring S] [AddCommMonoid A] [Module R A] [Module S A] [SMul R S]`\n`+ instance {A} [Semiring R] [AddCommMonoid A] [Module R A] : Module R (MvPowerSeries σ A)`\n`+ instance {J : Type} [Finite J] (Z : J → ModuleCat R) [∀ j, Module.Finite R (Z j)] :`\n`+ inv.aux`\n`+ invOfUnit`\n`+ invOneSubPow`\n`+ invOneSubPow_eq_inv_one_sub_pow`\n`+ invOneSubPow_inv_eq_one_sub_pow`\n`+ invOneSubPow_val_eq_mk_choose_add`\n`+ invOneSubPow_val_mul_one_sub_pow_eq_one`\n`+ invOneSubPow_val_zero_eq_invUnitSub_one`\n`+ inv_eq_inv_aux`\n`+ irrelevant.adjoin_eq_top`\n`+ irrelevant.deg_pos`\n`+ irrelevant_eq`\n`+ isUnit_constantCoeff`\n`+ ker_eq_bot_of_mono`\n`+ kernelCone`\n`+ kernelIsLimit`\n`+ kernelIsoKer`\n`+ kernelIsoKer_hom_ker_subtype`\n`+ kernelIsoKer_inv_kernel_ι`\n`+ key_lemma`\n`+ kth_degree_eq_span`\n`+ le_order`\n`+ le_order_add`\n`+ map`\n`+ map.isLocalRingHom`\n`+ map_C`\n`+ map_X`\n`+ map_comp`\n`+ map_id`\n`+ map_monomial`\n`+ map_subsingleton`\n`+ map_zero`\n`+ mem_A'`\n`+ mem_KER_iff`\n`+ mk_apply`\n`+ mk_choose_add_mul_one_sub_pow_eq_one`\n`+ mk_empty`\n`+ mk_eq_sum_of`\n`+ mk_one_pow_eq_mk_choose_add`\n`+ mono_iff_injective`\n`+ mono_iff_ker_eq_bot`\n`+ monomial`\n`+ monomial_def`\n`+ monomial_finite_of_bounded_degree`\n`+ monomial_mul_monomial`\n`+ monomial_zero_eq_C`\n`+ monomial_zero_eq_C_apply`\n`+ monomial_zero_one`\n`+ mul_add`\n`+ mul_assoc`\n`+ mul_invOfUnit`\n`+ mul_one`\n`+ mul_zero`\n`+ natDegree_greatestFactorOneSubNotDvd_le`\n`+ natDegree_hilbert`\n`+ natDegree_hilbertPolynomial`\n`+ natDegree_pow_rootMultiplicity_sub_mul_greatestFactorOneSubNotDvd_le`\n`+ nat_le_order`\n`+ neg`\n`+ neg_apply`\n`+ noetherian_A'`\n`+ noetherian_A'_zero`\n`+ normalEpi`\n`+ normalMono`\n`+ numeratorPolynomial`\n`+ numeratorPolynomial_mul_inv_poles_eq_poincareSeries`\n`+ one_mul`\n`+ one_sub_pow_mul_invOneSubPow_val_eq_one`\n`+ one_sub_pow_mul_mk_choose_add_eq_one`\n`+ order`\n`+ order_X`\n`+ order_X_pow`\n`+ order_add_of_order_eq`\n`+ order_eq`\n`+ order_eq_multiplicity_X`\n`+ order_eq_nat`\n`+ order_eq_top`\n`+ order_finite_iff_ne_zero`\n`+ order_le`\n`+ order_monomial`\n`+ order_monomial_of_ne_zero`\n`+ order_mul`\n`+ order_mul_ge`\n`+ order_one`\n`+ order_zero`\n`+ poincareSeries`\n`+ poles`\n`+ poles_eq_one_sub_pow_of_deg_eq_one`\n`+ poles_inv_eq'`\n`+ poles_val`\n`+ pow_rootMultiplicity_mul_greatestFactorOneSubNotDvd_eq`\n`+ preHilbert`\n`+ preHilbert_eq_choose_sub_add`\n`+ prod_sub_rootMultiplicity_coeff_eq_one`\n`+ proj`\n`+ proj_smul_mem_left`\n`+ proj_smul_mem_right`\n`+ proof'`\n`+ proof.base_case`\n`+ pushforward`\n`+ quotientDecomposition`\n`+ quotientGradedSMul`\n`+ quotientGrading`\n`+ quotientGrading.decompose`\n`+ quotientGrading.decomposeAux`\n`+ quotientGrading.decompose_apply_mkQ_of_mem`\n`+ quotientGrading.decompose_apply_mkQ_of_ne`\n`+ quotientGrading.decompose_leftInverse`\n`+ quotientGrading.decompose_rightInverse`\n`+ quotientGrading.le_decomposeAux_ker`\n`+ quotientGradingEmb`\n`+ range_eq_top_of_epi`\n`+ range_mkQ_cokernelIsoRangeQuotient_inv`\n`+ reindex`\n`+ smulBy`\n`+ smul_eq_C_mul`\n`+ statement'_imp_statement`\n`+ supSet`\n`+ support_mk`\n`+ toMvPowerSeries`\n`+ toSubmodule_add`\n`+ toSubmodule_bot`\n`+ toSubmodule_iInf`\n`+ toSubmodule_iInf₂`\n`+ toSubmodule_iSup`\n`+ toSubmodule_iSup₂`\n`+ toSubmodule_inf`\n`+ toSubmodule_sInf`\n`+ toSubmodule_sSup`\n`+ toSubmodule_sup`\n`+ toSubmodule_top`\n`+ trunc`\n`+ truncFun`\n`+ trunc_c`\n`+ trunc_one`\n`+ uniqueOfEpiZero`\n`+ zero`\n`+ zero_apply`\n`+ zero_mul`\n`+ μ'`\n`++ C_inv`\n`++ FG.spanningSet`\n`++ FG.spanningSet_span_eq`\n`++ HomogeneousGeneratingSetOf`\n`++ X_inv`\n`++ coeff_inv`\n`++ constantCoeff_inv`\n`++ deg`\n`++ eq_inv_iff_mul_eq_one`\n`++ eq_mul_inv_iff_mul_eq`\n`++ evalMonomial`\n`++ evalMonomial_zero`\n`++ ext`\n`++ grading`\n`++ grading.decompose`\n`++ grading.decompose_add`\n`++ grading.decompose_apply`\n`++ grading.decompose_leftInverse`\n`++ grading.decompose_rightInverse`\n`++ grading.decompose_zero`\n`++ homogeneous`\n`++ instance : Inhabited (HomogeneousSubmodule A ℳ) where default := ⊥`\n`++ instance : PartialOrder (HomogeneousSubmodule A ℳ)`\n`++ inv`\n`++ invOfUnit_eq`\n`++ invOfUnit_eq'`\n`++ inv_eq_iff_mul_eq_one`\n`++ inv_eq_zero`\n`++ inv_mul_cancel`\n`++ mem_deg`\n`++ mul_inv_cancel`\n`++ mul_inv_rev`\n`++ ne_zero`\n`++ pow_inv_eq_inv_pow`\n`++ smul_inv`\n`++ sup`\n`++ top_eq_span_monomial`\n`++ zero_inv`\n`+-+ bot`\n`+-+ coe_bot`\n`+-+ coe_top`\n`+-+ sInf`\n`+-+ sSup`\n`+-+ top`\n`- GradeZero.isNoetherianRing`\n`- Ideal.le_toIdeal_homogeneousHull`\n`- instance : Add (HomogeneousIdeal 𝒜)`\n`- instance : Bot (HomogeneousIdeal 𝒜)`\n`- instance : Inf (HomogeneousIdeal 𝒜)`\n`- instance : InfSet (HomogeneousIdeal 𝒜)`\n`- instance : Inhabited (HomogeneousIdeal 𝒜) where default := ⊥`\n`- instance : PartialOrder (HomogeneousIdeal 𝒜)`\n`- instance : Sup (HomogeneousIdeal 𝒜)`\n`- instance : SupSet (HomogeneousIdeal 𝒜)`\n`- instance : Top (HomogeneousIdeal 𝒜)`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/no_lost_declarations.sh short <optional_commit>\n\n## more verbose report:\n./scripts/no_lost_declarations.sh <optional_commit>\n```\n</details>\n\n</details>",
              "createdAt": "2024-06-28T20:34:39Z",
              "author": {
                "login": "github-actions"
              }
            }
          ]
        },
        "closed": false,
        "closedAt": null,
        "createdAt": "2024-01-17T19:00:22Z",
        "deletions": 217,
        "files": {
          "nodes": [
            {
              "path": "Mathlib.lean",
              "additions": 13,
              "deletions": 0
            },
            {
              "path": "Mathlib/Algebra/Category/FGModuleCat/Abelian.lean",
              "additions": 79,
              "deletions": 0
            },
            {
              "path": "Mathlib/Algebra/Category/FGModuleCat/Basic.lean",
              "additions": 134,
              "deletions": 0
            },
            {
              "path": "Mathlib/Algebra/Category/FGModuleCat/EpiMono.lean",
              "additions": 72,
              "deletions": 0
            },
            {
              "path": "Mathlib/Algebra/Category/FGModuleCat/Kernels.lean",
              "additions": 124,
              "deletions": 0
            },
            {
              "path": "Mathlib/Algebra/Category/FGModuleCat/Limits.lean",
              "additions": 38,
              "deletions": 0
            },
            {
              "path": "Mathlib/Algebra/DirectSum/Basic.lean",
              "additions": 39,
              "deletions": 0
            },
            {
              "path": "Mathlib/Algebra/GradedMonoid.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Algebra/HilbertSerre/AdditiveFunction.lean",
              "additions": 440,
              "deletions": 0
            },
            {
              "path": "Mathlib/Algebra/HilbertSerre/FiniteInstances.lean",
              "additions": 272,
              "deletions": 0
            },
            {
              "path": "Mathlib/Algebra/HilbertSerre/HilbertPolynomial.lean",
              "additions": 131,
              "deletions": 0
            },
            {
              "path": "Mathlib/Algebra/HilbertSerre/Theorem.lean",
              "additions": 1010,
              "deletions": 0
            },
            {
              "path": "Mathlib/Algebra/Module/GradeZeroModule.lean",
              "additions": 53,
              "deletions": 0
            },
            {
              "path": "Mathlib/Algebra/Module/GradedModule.lean",
              "additions": 205,
              "deletions": 0
            },
            {
              "path": "Mathlib/AlgebraicGeometry/ProjectiveSpectrum/Topology.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/RingTheory/FiniteType.lean",
              "additions": 17,
              "deletions": 0
            },
            {
              "path": "Mathlib/RingTheory/Finiteness.lean",
              "additions": 16,
              "deletions": 0
            },
            {
              "path": "Mathlib/RingTheory/GradedAlgebra/Basic.lean",
              "additions": 48,
              "deletions": 0
            },
            {
              "path": "Mathlib/RingTheory/GradedAlgebra/HomogeneousIdeal.lean",
              "additions": 795,
              "deletions": 205
            },
            {
              "path": "Mathlib/RingTheory/GradedAlgebra/Noetherian.lean",
              "additions": 744,
              "deletions": 9
            },
            {
              "path": "Mathlib/RingTheory/GradedAlgebra/Radical.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/RingTheory/GradedAlgebra/Subgrading.lean",
              "additions": 493,
              "deletions": 0
            },
            {
              "path": "Mathlib/RingTheory/Polynomial/Hilbert.lean",
              "additions": 278,
              "deletions": 0
            },
            {
              "path": "Mathlib/RingTheory/PowerSeries/Basic.lean",
              "additions": 1660,
              "deletions": 0
            },
            {
              "path": "Mathlib/RingTheory/PowerSeries/WellKnown.lean",
              "additions": 81,
              "deletions": 0
            }
          ]
        },
        "headRefName": "zjj/graded_and_fg",
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5kWGXZ",
        "isCrossRepository": false,
        "isDraft": true,
        "labels": {
          "nodes": [
            {
              "id": "MDU6TGFiZWwzMjcxMjQ0NzU5",
              "color": "e899cd",
              "name": "WIP"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
              "color": "f99094",
              "name": "merge-conflict"
            }
          ]
        },
        "number": 9819,
        "reviews": {
          "nodes": []
        },
        "state": "OPEN",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGPut2zQ",
                "name": "Lint style",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9718166973/job/26825422541"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGPut2ug",
                "name": "label-and-report-new-contributor",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9718166974/job/26825422522"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGPut2rA",
                "name": "build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9718166971/job/26825422508"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGPuuSJA",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9718169206/job/26825429540"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGPuuS8A",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9718169214/job/26825429744"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGPuuSLw",
                "name": "Lint style",
                "conclusion": "FAILURE",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9718169214/job/26825429551"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGPuuUXw",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9718169206/job/26825430111"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGPut3tA",
                "name": "Check all files imported",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9718166973/job/26825422772"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGPuuS5Q",
                "name": "check workflows (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9718169206/job/26825429733"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGPuuUVQ",
                "name": "check workflows",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9718169214/job/26825430101"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGPuuTiQ",
                "name": "Build",
                "conclusion": "FAILURE",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9718169214/job/26825429897"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGPuuTqg",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9718169206/job/26825429930"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGPuuVVg",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9718169206/job/26825430358"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGPuvkGg",
                "name": "Post-CI job",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9718169214/job/26825450522"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGPuuG7Q",
                "name": "New Contributor Check",
                "conclusion": "NEUTRAL",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/26825426669"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGPuu8RQ",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=9819&login=leanprover-community&repository=mathlib4"
              }
            ]
          }
        },
        "title": "fg graded ring",
        "updatedAt": "2024-07-31T08:14:01Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/9819"
      }
    }
  }
}
