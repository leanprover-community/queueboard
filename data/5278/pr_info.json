{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 162,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "tydeu"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "---\r\n\r\nThis PR adds the `recall` command discussed in [this](https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/recall.20command) Zulip thread. As I am essentially new to mathlib PRs, I am tagging @semorrison -- the one who motivated me to create this PR -- to hopefully correct me if I made any mistakes.\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 4,
        "closed": true,
        "closedAt": "2023-06-20T13:55:13Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5fQGtg",
              "body": "Could `recall Complex.exp` by itself produce \"Try this: recall Complex.exp : ℂ → ℂ\"? Currently is succeeds silently, which is okay, but not particularly useful.",
              "createdAt": "2023-06-20T03:29:46Z",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5fQIMJ",
              "body": "That could be a code action on `recall`, I don't see a particular reason for it to be a required action.",
              "createdAt": "2023-06-20T03:41:34Z",
              "author": {
                "login": "digama0"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5fQKJY",
              "body": "@digama0, @semorrison EDIT: Oh, actually the CI build is failing do to a `#guard_msgs` mismatch of what appear to be the same string. EDIT 2: Interesting, I do not get this error in my VS Code, but I do get it when I run the test from the command line. I wonder what is going on? EDIT 3: Figured it out!\r\n\r\nThe tests are not run with `pp.unicode.fun` set on the command line whereas the server is, thus creating a mismatch for the function character. Will fix.",
              "createdAt": "2023-06-20T03:56:55Z",
              "author": {
                "login": "tydeu"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5fQgw1",
              "body": "Hopefully I have successfully addressed the review comments. I left the idea of a 'try this' code action for a future PR.",
              "createdAt": "2023-06-20T06:01:40Z",
              "author": {
                "login": "tydeu"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5fSLkY",
              "body": "bors merge",
              "createdAt": "2023-06-20T11:29:20Z",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5fTF9a",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/5322609913/jobs/9639291579)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/5322609913/jobs/9639291936)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/5322609913/jobs/9639292116)",
              "createdAt": "2023-06-20T13:55:12Z",
              "author": {
                "login": "bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "6b1509ede0bf2466e0e6d2a672953031871b8f97",
                "additions": 157,
                "deletions": 0,
                "committedDate": "2023-06-20T03:20:57Z",
                "author": {
                  "name": "tydeu",
                  "email": "tydeu@hatpress.net"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "f87a33f38eb5eef78eb622cd30bd55a5ca26424c",
                "additions": 9,
                "deletions": 2,
                "committedDate": "2023-06-20T04:43:28Z",
                "author": {
                  "name": "tydeu",
                  "email": "tydeu@hatpress.net"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "3f00eda09bd17a5153135ea02dbf4275ad4cc7df",
                "additions": 6,
                "deletions": 8,
                "committedDate": "2023-06-20T06:00:20Z",
                "author": {
                  "name": "tydeu",
                  "email": "tydeu@hatpress.net"
                },
                "statusCheckRollup": null
              }
            }
          ]
        },
        "createdAt": "2023-06-20T03:22:43Z",
        "deletions": 0,
        "files": {
          "nodes": [
            {
              "path": "Mathlib.lean",
              "additions": 1,
              "deletions": 0
            },
            {
              "path": "Mathlib/Tactic.lean",
              "additions": 1,
              "deletions": 0
            },
            {
              "path": "Mathlib/Tactic/Recall.lean",
              "additions": 71,
              "deletions": 0
            },
            {
              "path": "test/Recall.lean",
              "additions": 89,
              "deletions": 0
            }
          ]
        },
        "headRefName": "tydeu/recall",
        "headRefOid": "3f00eda09bd17a5153135ea02dbf4275ad4cc7df",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5TZLzl",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
              "color": "06e039",
              "name": "ready-to-merge"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABKAKYew",
              "color": "33DBEC",
              "name": "t-meta"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5YukUm",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kmill"
              },
              "submittedAt": "2023-06-20T16:58:20Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5Yp1La",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "digama0"
              },
              "submittedAt": "2023-06-20T05:52:54Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 5278,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": [
                {
                  "login": "kim-em"
                }
              ]
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5YpVVo",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "digama0"
              },
              "submittedAt": "2023-06-20T03:26:08Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5YpV4s",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "digama0"
              },
              "submittedAt": "2023-06-20T03:30:54Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5YpWIK",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "digama0"
              },
              "submittedAt": "2023-06-20T03:32:58Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5YpWWS",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "tydeu"
              },
              "submittedAt": "2023-06-20T03:34:45Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5YpZox",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "tydeu"
              },
              "submittedAt": "2023-06-20T03:49:30Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5YpaoK",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "tydeu"
              },
              "submittedAt": "2023-06-20T03:53:05Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5Ypnlz",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "digama0"
              },
              "submittedAt": "2023-06-20T04:50:05Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5Ypqyh",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "tydeu"
              },
              "submittedAt": "2023-06-20T05:06:48Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5Ypzgj",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "digama0"
              },
              "submittedAt": "2023-06-20T05:45:19Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5Yp00Y",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "tydeu"
              },
              "submittedAt": "2023-06-20T05:51:21Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5Yp1La",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "digama0"
              },
              "submittedAt": "2023-06-20T05:52:54Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5Yp2Uo",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "tydeu"
              },
              "submittedAt": "2023-06-20T05:57:46Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5YukUm",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kmill"
              },
              "submittedAt": "2023-06-20T16:58:20Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Jl-J_",
                    "body": "Could this use an example that is likely to be available from no imports (or only the ones used by this file)? There are a lot of things going on here that might distract from the command itself. Alternatively, this example could include an import of `Mathlib.Tactic.Recall` itself along with whatever file you need to get this fderiv example.",
                    "createdAt": "2023-06-20T03:26:08Z",
                    "author": {
                      "login": "digama0"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5JmAlK",
                    "body": "@digama0 Is the goal just to have a simpler example? I choose that one because it was complex, to demonstrate that everything works as expected (and also because it was the motivating example in the thread). However, if the goal is just to have something people can copy and paste, maybe this would work:\r\n```lean\r\nrecall Function.comp {α} {β} {δ} (f : β → δ) (g : α → β) : α → δ :=\r\n  fun x => f (g x)\r\n```\r\nWhat do you think?",
                    "createdAt": "2023-06-20T03:49:30Z",
                    "author": {
                      "login": "tydeu"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5JmITl",
                    "body": "You could still demonstrate things like notations, variables and autoimplicits using something from lean or std. My reading was that this was what you wanted to show off with this example.",
                    "createdAt": "2023-06-20T04:50:05Z",
                    "author": {
                      "login": "digama0"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5JmKU9",
                    "body": "@digama0 Do you have any suggestions on a good example? Finding sophisticated notation in both types and definition of a non-proof is a lot harder with Lean/Std as most definitions there have relatively simple types. And the ones that do not are generally relatively obscure definitions that do not make for great examples. (For reference, I am regex-searching through Lean/Std for binders with interesting notation and I am not finding any good non-proof examples. The best I can find is something like `Array.uget`.)",
                    "createdAt": "2023-06-20T05:06:47Z",
                    "author": {
                      "login": "tydeu"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5JmP2T",
                    "body": "how about:\r\n```lean\r\nrecall List.cons_append (a : α) (as bs : List α) : (a :: as) ++ bs = a :: (as ++ bs) := rfl\r\n```\r\nyou could also use a `variable` and/or change the variable names to differ from the original statement",
                    "createdAt": "2023-06-20T05:45:18Z",
                    "author": {
                      "login": "digama0"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5JmQuA",
                    "body": "@digama0 That does have a lot of nice notation and some auto-implicits, but it is still a theorem. Thus, it does not really demonstrate the utility of being able to restate value of a definition.  I guess the question is which is worth more in this first example?",
                    "createdAt": "2023-06-20T05:51:21Z",
                    "author": {
                      "login": "tydeu"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5JmQ-I",
                    "body": "well, the fact that the theorem is proved by rfl is demonstrated by the `recall`, even though \"value typechecks\" is pulling more weight than \"value is defeq to original definition\" here.\r\n\r\nI agree you will have difficulty finding interesting `def`s which have dependent types in lean/std; even in mathlib you will have trouble finding one that is easily understood. If you really want such an example, I suggest you just have two: a `def` with a simple type and an interesting value, and a `theorem` with an interesting type and maybe interesting value (like `rfl` here).",
                    "createdAt": "2023-06-20T05:52:53Z",
                    "author": {
                      "login": "digama0"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5JmRwy",
                    "body": "Okay, if you think that is good enough, I will use it.",
                    "createdAt": "2023-06-20T05:57:46Z",
                    "author": {
                      "login": "tydeu"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Jl-i5",
                    "body": "Is it legal to just `recall foo` without type or value? *Should* it work? (It could be used to mean \"`foo` exists\" without asserting anything about its type.)",
                    "createdAt": "2023-06-20T03:30:54Z",
                    "author": {
                      "login": "digama0"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5Jl-4o",
                    "body": "Yes, that is legal, as that is also a valid bodiless definition. As Seth mentions, we could have this provide some guidance on what type/value could be added.",
                    "createdAt": "2023-06-20T03:34:44Z",
                    "author": {
                      "login": "tydeu"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Jl-u4",
                    "body": "If the lookup is successful, you should put TermInfo on the identifier so that go to definition works on it (and takes you to the original def, not the transitory one made here).",
                    "createdAt": "2023-06-20T03:32:58Z",
                    "author": {
                      "login": "digama0"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5JmBAy",
                    "body": "Oh, I did not know you could do that. Will do!",
                    "createdAt": "2023-06-20T03:53:05Z",
                    "author": {
                      "login": "tydeu"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5JpQQw",
                    "body": "This is a comment about tests in general rather than specifically this PR: I wonder if we could have the tests use the same options as mathlib? I had to set this option too in the tests for [`#explode`](https://github.com/leanprover-community/mathlib4/blob/master/test/Explode.lean#L27).",
                    "createdAt": "2023-06-20T16:58:20Z",
                    "author": {
                      "login": "kmill"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjkwMjA0ODM=",
              "login": "tydeu"
            },
            {
              "id": "MDQ6VXNlcjQ3Nzk1Ng==",
              "login": "kim-em"
            },
            {
              "id": "MDQ6VXNlcjg2ODU4OA==",
              "login": "digama0"
            },
            {
              "id": "MDQ6VXNlcjIzNTMwNw==",
              "login": "kmill"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": null,
        "title": "[Merged by Bors] - feat: add `recall` command",
        "updatedAt": "2023-06-20T16:58:37Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/5278",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "6b1509ede0bf2466e0e6d2a672953031871b8f97"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5YpVVo",
              "createdAt": "2023-06-20T03:26:08Z",
              "body": "",
              "author": {
                "login": "digama0"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5fQGtg",
              "createdAt": "2023-06-20T03:29:46Z",
              "body": "Could `recall Complex.exp` by itself produce \"Try this: recall Complex.exp : ℂ → ℂ\"? Currently is succeeds silently, which is okay, but not particularly useful.",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5YpV4s",
              "createdAt": "2023-06-20T03:30:54Z",
              "body": "",
              "author": {
                "login": "digama0"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5YpWIK",
              "createdAt": "2023-06-20T03:32:58Z",
              "body": "",
              "author": {
                "login": "digama0"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5fQIMJ",
              "createdAt": "2023-06-20T03:41:34Z",
              "body": "That could be a code action on `recall`, I don't see a particular reason for it to be a required action.",
              "author": {
                "login": "digama0"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5fQKJY",
              "createdAt": "2023-06-20T03:56:55Z",
              "body": "@digama0, @semorrison EDIT: Oh, actually the CI build is failing do to a `#guard_msgs` mismatch of what appear to be the same string. EDIT 2: Interesting, I do not get this error in my VS Code, but I do get it when I run the test from the command line. I wonder what is going on? EDIT 3: Figured it out!\r\n\r\nThe tests are not run with `pp.unicode.fun` set on the command line whereas the server is, thus creating a mismatch for the function character. Will fix.",
              "author": {
                "login": "tydeu"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "f87a33f38eb5eef78eb622cd30bd55a5ca26424c"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5pLN9CzwAAAAI6t-BJ",
              "createdAt": "2023-06-20T05:16:56Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "3f00eda09bd17a5153135ea02dbf4275ad4cc7df"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5fQgw1",
              "createdAt": "2023-06-20T06:01:40Z",
              "body": "Hopefully I have successfully addressed the review comments. I left the idea of a 'try this' code action for a future PR.",
              "author": {
                "login": "tydeu"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5pLN9CzwAAAAI6vEvE",
              "createdAt": "2023-06-20T06:05:26Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKAKYew",
                "name": "t-meta"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5fSLkY",
              "createdAt": "2023-06-20T11:29:20Z",
              "body": "bors merge",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5pLN9CzwAAAAI668fW",
              "createdAt": "2023-06-20T11:29:31Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
                "name": "ready-to-merge"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5pLN9CzwAAAAI668h3",
              "createdAt": "2023-06-20T11:29:32Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5fTF9a",
              "createdAt": "2023-06-20T13:55:12Z",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/5322609913/jobs/9639291579)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/5322609913/jobs/9639291936)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/5322609913/jobs/9639292116)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c5pLN9CzwAAAAI7A62g",
              "createdAt": "2023-06-20T13:55:14Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c5pLN9CzwAAAAI7A7Ke",
              "createdAt": "2023-06-20T13:55:20Z"
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5YukUm",
              "createdAt": "2023-06-20T16:58:19Z",
              "body": "",
              "author": {
                "login": "kmill"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            }
          ]
        }
      }
    }
  }
}
