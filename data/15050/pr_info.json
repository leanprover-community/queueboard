{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 17,
        "assignees": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjEwMTA1MDE2",
              "login": "grunweg"
            }
          ]
        },
        "author": {
          "login": "rwst"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "Add missing lemma `x ^ m - 1 ∣ x ^ (m * n) - 1` for `x` both in `Nat` and `Ring`.\r\n\r\nCo-authored-by: grunweg <rothgami@math.hu-berlin.de>\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nFor details on the \"pull request lifecycle\" in mathlib, please see:\r\nhttps://leanprover-community.github.io/contribute/index.html\r\n\r\nIn particular, note that most reviewers will only notice your PR\r\nif it passes the continuous integration checks.\r\nPlease ask for help on https://leanprover.zulipchat.com if needed.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nIf you are moving or deleting declarations, please include these lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nMoves:\r\n- Vector.* -> Mathlib.Vector.*\r\n- ...\r\n\r\nDeletions:\r\n- Nat.bit1_add_bit1\r\n- ...\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 1,
        "closed": true,
        "closedAt": "2024-08-08T19:05:42Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c6FzJBh",
              "body": "### PR summary [41e03486db](https://github.com/leanprover-community/mathlib4/pull/15050/commits/41e03486dbd17821c1de28bb98181d53f6bd0771)\n\n<details><summary>\n\n#### Import changes for modified files\n\n</summary>\n\nDependency changes\n\n| File | Base Count | Head Count | Change |\n| --- | --- | --- | --- |\n| Mathlib.Algebra.GeomSum | 685 | 687 | +2 (+0.29%) |\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\nThere are 1386 files with changed transitive imports: this is too many to display!\n\n</details>\n\n</details>\n\n---\n\n#### Declarations diff\n\n`+ nat_pow_one_sub_dvd_pow_mul_sub_one`\n`+ pow_one_sub_dvd_pow_mul_sub_one`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>",
              "createdAt": "2024-07-23T09:58:56Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6F1Dj1",
              "body": "> Thanks for your contribution! I'm wondering: can `x` be generalised from the natural numbers to, say, an `AddMonoid` (or perhaps `AddCommMonoid`)?\r\n> \r\n> awaiting-author\r\n\r\nI'll put it on my list (also for `nat_sub_dvd_pow_sub_pow`).",
              "createdAt": "2024-07-23T13:34:58Z",
              "author": {
                "login": "rwst"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6F1gad",
              "body": "Let me label it accordingly.",
              "createdAt": "2024-07-23T14:22:33Z",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6F1hzr",
              "body": "Can there be exponentiation in an additive monoid? When trying this, I get:\r\n```\r\n[AddCommMonoid α] (x : α) (m n : ℕ) : x ^ m...\r\n\r\nfailed to synthesize\r\n  HPow α ℕ ?m.62821\r\n```",
              "createdAt": "2024-07-23T14:24:56Z",
              "author": {
                "login": "rwst"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6F10H1",
              "body": "Also using a mere `CommMonoid` will complain about subtraction. I mean, this is certainly not the first time the question came up of generalizing a `Nat` lemma that uses exponentiation (in the usual sense) and subtraction (when negative results do not occur). What structure would be the next parent of `Nat`? As I find, it cannot be `CommMonoid`.",
              "createdAt": "2024-07-23T14:52:58Z",
              "author": {
                "login": "rwst"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6F18FW",
              "body": "Good point. Defining powers (with natural exponent) in a monoid works the same as for natural numbers: you inductively define $a^{n+1}=a^n * n$, and prove that this has the properties you expect. You're right about subtraction, though...\r\n\r\nSo, perhaps the best result to state is actually for rings. Given natural numbers, can you use the `zify` to convert this to a result about integers, and then apply the integer result? That should remove the need for your lemma in applications.\r\n\r\nUpdate. I tried this, with [mixed success](https://live.lean-lang.org/#code=import%20Mathlib%0A%0Alemma%20foo%20(x%20%3A%20%E2%84%A4)%20(m%20n%20%3A%20%E2%84%95)%20%3A%20((x%20%5Em)%20-%201%20%3A%20%E2%84%A4)%20%E2%88%A3%20(x%20%5E%20(m%20*%20n)%20-%201)%20%3A%3D%20by%0A%20%20rw%20%5Bnpow_mul%5D%0A%20%20exact%20sub_one_dvd_pow_sub_one%20(x%20%3A%3D%20x%20%5E%20m)%20(n%20%3A%3D%20n)%0A%0Alemma%20nat_pow_sub_dvd_pow_mul_sub%20(x%20m%20n%20%3A%20%E2%84%95)%20%3A%20x%20%5E%20m%20-%201%20%E2%88%A3%20x%20%5E%20(m%20*%20n)%20-%201%20%3A%3D%20by%0A%20%20zify%0A%20%20let%20a%20%3A%3D%20foo%20x%20m%20n%0A%20%20push_cast%20at%20a%0A%20%20convert%20a%20%20%0A). I think this is worth posting about on zulip.",
              "createdAt": "2024-07-23T15:06:19Z",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6F2PMU",
              "body": "Intuitively, the `push_cast` needs to be told that `x^m-1` is nonnegative, so the cast can move to the `x`.",
              "createdAt": "2024-07-23T15:38:16Z",
              "author": {
                "login": "rwst"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6GWhc8",
              "body": "To recap, the new goal of this PR is to have both `Nat` and `Ring`/`CommRing` versions of\r\n\r\n1. `x - y ∣ x ^ n - y ^ n`\r\n2. `x ^ m - 1 ∣ x ^ (m * n) - 1`\r\n\r\nThere is, however, no need to base the `Nat` proof on the resp. ring version if the `Nat` proof is more simple. This applies to both cases because I find the `zify`ed version of (2) is more complicated than what I originally proposed here, because of multiple cases to be handled (`x` zero/nonzero, `m` zero/nonzero, `m*n` zero/nonzero). This is necessary since the solution was to use `zify [lemma1, lemma2]`:\r\n\r\n```\r\nlemma nat_pow_sub_dvd_pow_mul_sub (x m n : ℕ) : x ^ m - 1 ∣ x ^ (m * n) - 1 := by\r\n  have : x = 0 ∨ 0 < x := Nat.eq_zero_or_pos x\r\n  rcases this with h | h\r\n  rw [h, zero_pow_eq]\r\n  have hpos₁ : 1 ≤ x ^ m := by    \r\n    sorry\r\n  have hpos₂ : 1 ≤ x ^ (m * n) := by\r\n    sorry\r\n  zify [hpos₁, hpos₂]\r\n  let a := foo x m n\r\n  push_cast at a\r\n  convert a\r\n```\r\n\r\nSo, I'll keep the originally proposed `Nat` version of (2), and add the ring version of (2) by @grunweg. The `Nat` version of (1) is `nat_sub_dvd_pow_sub_pow` already in Mathlib, and the ring version of (1) is `sub_dvd_pow_sub_pow` already in Mathlib. What do you think? ",
              "createdAt": "2024-07-27T08:25:08Z",
              "author": {
                "login": "rwst"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6Hrm2z",
              "body": "I think the lemmas as stated are fine now. I don't really care which way you choose to prove them, but note that the `zify` proofs can be made to work easily, as I show above.\r\n\r\nbors d+",
              "createdAt": "2024-08-08T17:48:12Z",
              "author": {
                "login": "j-loreaux"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6Hrm3v",
              "body": ":v: rwst can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests).",
              "createdAt": "2024-08-08T17:48:15Z",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6Hrul8",
              "body": "bors r+",
              "createdAt": "2024-08-08T18:07:47Z",
              "author": {
                "login": "rwst"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6HsE46",
              "body": "Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/10307450502/job/28532752474)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/10307450502/job/28532752778)",
              "createdAt": "2024-08-08T19:05:41Z",
              "author": {
                "login": "mathlib-bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "3b0082f73c8d1d4aaff959e0c6e1f55fa066d873",
                "additions": 5,
                "deletions": 0,
                "committedDate": "2024-07-23T09:56:08Z",
                "author": {
                  "name": "Ralf Stephan",
                  "email": "ralf@ark.in-berlin.de"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGeTE9bA",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10058932844/job/27803073900"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGeTVg0w",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10059020349/job/27803345107"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGeWDFpA",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10059905934/job/27806188964"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGeWPrwQ",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10059967066/job/27806395329"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGerlCvQ",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10066743362/job/27828765373"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGeTE9JA",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10058932852/job/27803073828"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGeTVfmw",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10059020348/job/27803344795"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGeWDFPw",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10059905927/job/27806188863"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGeWPrlw",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10059967059/job/27806395287"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGerlCLw",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10066743370/job/27828765231"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGeMuhOg",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10056800021/job/27796414778"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGeMuhew",
                        "name": "build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10056800020/job/27796414843"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGeMqlEg",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10056781613/job/27796350226"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGeMql6A",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10056781601/job/27796350440"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGeMuiwA",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10056800019/job/27796415168"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGeTE_qw",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10058932844/job/27803074475"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGeTVfcg",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10059020349/job/27803344754"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGeWDHSA",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10059905934/job/27806189384"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGeWPtfQ",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10059967066/job/27806395773"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGerlBxw",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10066743362/job/27828765127"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGeMqoQQ",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10056781613/job/27796351041"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGeMqpgQ",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10056781601/job/27796351361"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGeMuhkw",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10056800019/job/27796414867"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGeMql_Q",
                        "name": "check workflows (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10056781613/job/27796350461"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGeMqm8w",
                        "name": "check workflows",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10056781601/job/27796350707"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGeMqnKg",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10056781613/job/27796350762"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGeMqk5w",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10056781601/job/27796350183"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGeMqpWw",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10056781613/job/27796351323"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGeOF8-Q",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10056781601/job/27797847289"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGeMu2oA",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/27796420256"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGeMvTrg",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=15050&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "41e03486dbd17821c1de28bb98181d53f6bd0771",
                "additions": 13,
                "deletions": 7,
                "committedDate": "2024-07-27T08:18:59Z",
                "author": {
                  "name": "Ralf Stephan",
                  "email": "ralf@ark.in-berlin.de"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGhJLbxw",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10122203672/job/27994020807"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGpI-2Mg",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10306810858/job/28530685490"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGpJZJmQ",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10306941439/job/28531116441"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGhJLbGw",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10122203671/job/27994020635"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGpI-2ZQ",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10306810860/job/28530685541"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGpJZH3Q",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10306941437/job/28531115997"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGhJCxLA",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10122135501/job/27993878828"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGhJCxKA",
                        "name": "build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10122135499/job/27993878824"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGhJCwJQ",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10122135357/job/27993878565"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGhJCv2Q",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10122135356/job/27993878489"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGhJCxZA",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10122135500/job/27993878884"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGhJLbHA",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10122203672/job/27994020636"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGpI-3LQ",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10306810858/job/28530685741"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGpJZIRg",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10306941439/job/28531116102"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGhJCwmg",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10122135357/job/27993878682"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGhJCwHQ",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10122135356/job/27993878557"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGhJCxKw",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10122135500/job/27993878827"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGhJCwWg",
                        "name": "check workflows (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10122135357/job/27993878618"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGhJCwlw",
                        "name": "check workflows",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10122135356/job/27993878679"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGhJCv2g",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10122135357/job/27993878490"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGhJCwVg",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10122135356/job/27993878614"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGhJCw1w",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10122135357/job/27993878743"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGhJgWVQ",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10122135356/job/27994363477"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGhJC3Mg",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/27993880370"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGhJDOLg",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=15050&login=leanprover-community&repository=mathlib4"
                      },
                      {
                        "__typename": "StatusContext",
                        "id": "SC_kwDOFcwZ1c8AAAAHJZVA3w",
                        "context": "bors",
                        "state": "SUCCESS",
                        "targetUrl": "https://mathlib-bors-ca18eefec4cb.herokuapp.com/batches/4971",
                        "description": "Build succeeded"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "createdAt": "2024-07-23T09:58:14Z",
        "deletions": 6,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/Algebra/GeomSum.lean",
              "additions": 17,
              "deletions": 6
            }
          ]
        },
        "headRefName": "rwst/geomsum2",
        "headRefOid": "41e03486dbd17821c1de28bb98181d53f6bd0771",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c52MX7s",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABAt13Ow",
              "color": "bfd4f2",
              "name": "delegated"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c6Cw3hp",
              "body": "Thanks for your contribution! I'm wondering: can `x` be generalised from the natural numbers to, say, an `AddMonoid` (or perhaps `AddCommMonoid`)?\r\n\r\nawaiting-author",
              "state": "COMMENTED",
              "author": {
                "login": "grunweg"
              },
              "submittedAt": "2024-07-23T12:29:57Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6E1FTZ",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "j-loreaux"
              },
              "submittedAt": "2024-08-08T17:45:48Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 15050,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c6Cw3hp",
              "body": "Thanks for your contribution! I'm wondering: can `x` be generalised from the natural numbers to, say, an `AddMonoid` (or perhaps `AddCommMonoid`)?\r\n\r\nawaiting-author",
              "state": "COMMENTED",
              "author": {
                "login": "grunweg"
              },
              "submittedAt": "2024-07-23T12:29:57Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6Cw6ZP",
              "body": "Why this lemma in particular? None of the others are generalized in this way.",
              "state": "COMMENTED",
              "author": {
                "login": "j-loreaux"
              },
              "submittedAt": "2024-07-23T12:35:30Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6CxefF",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "rwst"
              },
              "submittedAt": "2024-07-23T13:33:18Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6C1yQd",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "j-loreaux"
              },
              "submittedAt": "2024-07-23T21:36:38Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6DUUzg",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "rwst"
              },
              "submittedAt": "2024-07-27T08:30:36Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6E1A4V",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "j-loreaux"
              },
              "submittedAt": "2024-08-08T17:35:26Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6E1FTZ",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "j-loreaux"
              },
              "submittedAt": "2024-08-08T17:45:48Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5knJ84",
                    "body": "I'm confused why we're writing this at all. It follows, in more generality (i.e., `Ring` instead of `Nat`), immediately from `sub_one_dvd_pow_sub_one` by using `x := x ^ m` (and `pow_mul`)",
                    "createdAt": "2024-07-23T12:34:55Z",
                    "author": {
                      "login": "j-loreaux"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5knfqL",
                    "body": "(rant deleted)\r\n\r\nBecause `Nat` is not a ring?",
                    "createdAt": "2024-07-23T13:33:18Z",
                    "author": {
                      "login": "rwst"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5kqGE_",
                    "body": "Sorry, point taken. But still, the generality you want is `Ring`. The fact that it happens to hold for `Nat` is essentially a coincidence. (Because `Nat` subtraction is awful, and it just so happens that either, (a) it's zero, and zero divides anything, it (b) it's nonzero, in which case subtracting one is still well-behaved.)\n\nThat said, if you need this lemma for `Nat`, it's fine to add that special case.",
                    "createdAt": "2024-07-23T21:36:38Z",
                    "author": {
                      "login": "j-loreaux"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5k9zEX",
                    "body": "See the latest comment in the PR main comment thread.",
                    "createdAt": "2024-07-27T08:30:36Z",
                    "author": {
                      "login": "rwst"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5l7E98",
                    "body": "First, I'll note that what I said before still applies, and moreover, you can turn this idea into a proof (using `zify` as Michael suggested), which is approximately the same complexity (in terms of a proof script) as what is written here.\r\n\r\n> But still, the generality you want is `Ring`. The fact that it happens to hold for `Nat` is essentially a coincidence. (Because `Nat` subtraction is awful, and it just so happens that either, (a) it's zero, and zero divides anything, it (b) it's nonzero, in which case subtracting one is still well-behaved.)\r\n\r\n```suggestion\r\n  cases x with\r\n  | zero => cases m <;> cases n <;> simp\r\n  | succ x => zify [Nat.one_le_pow']; exact pow_one_sub_dvd_pow_mul_sub_one _ _ _\r\n```\r\nIn fact, the only reason this isn't *less* complicated than the proof already written here is that your complexity (in particular, the part where you would have to separate out the case where the difference is zero) is hidden behind the proof of the lemma `nat_sub_dvd_pow_sub_pow`.",
                    "createdAt": "2024-08-08T17:35:26Z",
                    "author": {
                      "login": "j-loreaux"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5l7I2A",
                    "body": "Optional of course, but this just shows how to use `zify` to do this:\r\n```suggestion\r\n  · zify [h, Nat.pow_le_pow_left]\r\n    exact sub_dvd_pow_sub_pow _ _ _\r\n```\r\nYour proof is essentially just `zify`, but done manually.",
                    "createdAt": "2024-08-08T17:45:48Z",
                    "author": {
                      "login": "j-loreaux"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjExNDY3MDk=",
              "login": "rwst"
            },
            {
              "id": "MDQ6VXNlcjEwMTA1MDE2",
              "login": "grunweg"
            },
            {
              "id": "MDQ6VXNlcjg5MjA1OTg=",
              "login": "j-loreaux"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGhJLbxw",
                "name": "Add ready-to-merge label",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10122203672/job/27994020807"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGpI-2Mg",
                "name": "Add ready-to-merge label",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10306810858/job/28530685490"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGpJZJmQ",
                "name": "Add ready-to-merge label",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10306941439/job/28531116441"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGhJLbGw",
                "name": "Ping maintainers on Zulip",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10122203671/job/27994020635"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGpI-2ZQ",
                "name": "Ping maintainers on Zulip",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10306810860/job/28530685541"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGpJZH3Q",
                "name": "Ping maintainers on Zulip",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10306941437/job/28531115997"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGhJCxLA",
                "name": "label-and-report-new-contributor",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10122135501/job/27993878828"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGhJCxKA",
                "name": "build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10122135499/job/27993878824"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGhJCwJQ",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10122135357/job/27993878565"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGhJCv2Q",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10122135356/job/27993878489"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGhJCxZA",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10122135500/job/27993878884"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGhJLbHA",
                "name": "Add delegated label",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10122203672/job/27994020636"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGpI-3LQ",
                "name": "Add delegated label",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10306810858/job/28530685741"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGpJZIRg",
                "name": "Add delegated label",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10306941439/job/28531116102"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGhJCwmg",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10122135357/job/27993878682"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGhJCwHQ",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10122135356/job/27993878557"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGhJCxKw",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10122135500/job/27993878827"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGhJCwWg",
                "name": "check workflows (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10122135357/job/27993878618"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGhJCwlw",
                "name": "check workflows",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10122135356/job/27993878679"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGhJCv2g",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10122135357/job/27993878490"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGhJCwVg",
                "name": "Build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10122135356/job/27993878614"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGhJCw1w",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10122135357/job/27993878743"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGhJgWVQ",
                "name": "Post-CI job",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10122135356/job/27994363477"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGhJC3Mg",
                "name": "New Contributor Check",
                "conclusion": "NEUTRAL",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/27993880370"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGhJDOLg",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=15050&login=leanprover-community&repository=mathlib4"
              },
              {
                "__typename": "StatusContext",
                "id": "SC_kwDOFcwZ1c8AAAAHJZVA3w",
                "context": "bors",
                "state": "SUCCESS",
                "targetUrl": "https://mathlib-bors-ca18eefec4cb.herokuapp.com/batches/4971",
                "description": "Build succeeded"
              }
            ]
          }
        },
        "title": "[Merged by Bors] - feat(Algebra/GeomSum): add two lemmas",
        "updatedAt": "2024-08-08T19:05:46Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/15050",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6QhypkzwAAAAMraXka",
              "createdAt": "2024-07-23T09:58:27Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABJc1VKA",
                "name": "easy"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6FzJBh",
              "createdAt": "2024-07-23T09:58:56Z",
              "body": "### PR summary [41e03486db](https://github.com/leanprover-community/mathlib4/pull/15050/commits/41e03486dbd17821c1de28bb98181d53f6bd0771)\n\n<details><summary>\n\n#### Import changes for modified files\n\n</summary>\n\nDependency changes\n\n| File | Base Count | Head Count | Change |\n| --- | --- | --- | --- |\n| Mathlib.Algebra.GeomSum | 685 | 687 | +2 (+0.29%) |\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\nThere are 1386 files with changed transitive imports: this is too many to display!\n\n</details>\n\n</details>\n\n---\n\n#### Declarations diff\n\n`+ nat_pow_one_sub_dvd_pow_mul_sub_one`\n`+ pow_one_sub_dvd_pow_mul_sub_one`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6Cw3hp",
              "createdAt": "2024-07-23T12:29:57Z",
              "body": "Thanks for your contribution! I'm wondering: can `x` be generalised from the natural numbers to, say, an `AddMonoid` (or perhaps `AddCommMonoid`)?\r\n\r\nawaiting-author",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "__typename": "AssignedEvent",
              "id": "AE_lADOFcwZ1c6QhypkzwAAAAMrhdi1",
              "createdAt": "2024-07-23T12:30:04Z",
              "assignee": {
                "id": "MDQ6VXNlcjEwMTA1MDE2",
                "login": "grunweg"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6QhypkzwAAAAMrhjd9",
              "createdAt": "2024-07-23T12:31:58Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6Cw6ZP",
              "createdAt": "2024-07-23T12:34:55Z",
              "body": "Why this lemma in particular? None of the others are generalized in this way.",
              "author": {
                "login": "j-loreaux"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6QhypkzwAAAAMrkqCo",
              "createdAt": "2024-07-23T13:30:11Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6F1Dj1",
              "createdAt": "2024-07-23T13:34:58Z",
              "body": "> Thanks for your contribution! I'm wondering: can `x` be generalised from the natural numbers to, say, an `AddMonoid` (or perhaps `AddCommMonoid`)?\r\n> \r\n> awaiting-author\r\n\r\nI'll put it on my list (also for `nat_sub_dvd_pow_sub_pow`).",
              "author": {
                "login": "rwst"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6QhypkzwAAAAMrnssp",
              "createdAt": "2024-07-23T14:22:19Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6F1gad",
              "createdAt": "2024-07-23T14:22:33Z",
              "body": "Let me label it accordingly.",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6F1hzr",
              "createdAt": "2024-07-23T14:24:56Z",
              "body": "Can there be exponentiation in an additive monoid? When trying this, I get:\r\n```\r\n[AddCommMonoid α] (x : α) (m n : ℕ) : x ^ m...\r\n\r\nfailed to synthesize\r\n  HPow α ℕ ?m.62821\r\n```",
              "author": {
                "login": "rwst"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6F10H1",
              "createdAt": "2024-07-23T14:52:58Z",
              "body": "Also using a mere `CommMonoid` will complain about subtraction. I mean, this is certainly not the first time the question came up of generalizing a `Nat` lemma that uses exponentiation (in the usual sense) and subtraction (when negative results do not occur). What structure would be the next parent of `Nat`? As I find, it cannot be `CommMonoid`.",
              "author": {
                "login": "rwst"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6QhypkzwAAAAMrplLO",
              "createdAt": "2024-07-23T14:54:37Z",
              "label": {
                "id": "MDU6TGFiZWwyOTg0NTM0NDU0",
                "name": "help-wanted"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6F18FW",
              "createdAt": "2024-07-23T15:06:19Z",
              "body": "Good point. Defining powers (with natural exponent) in a monoid works the same as for natural numbers: you inductively define $a^{n+1}=a^n * n$, and prove that this has the properties you expect. You're right about subtraction, though...\r\n\r\nSo, perhaps the best result to state is actually for rings. Given natural numbers, can you use the `zify` to convert this to a result about integers, and then apply the integer result? That should remove the need for your lemma in applications.\r\n\r\nUpdate. I tried this, with [mixed success](https://live.lean-lang.org/#code=import%20Mathlib%0A%0Alemma%20foo%20(x%20%3A%20%E2%84%A4)%20(m%20n%20%3A%20%E2%84%95)%20%3A%20((x%20%5Em)%20-%201%20%3A%20%E2%84%A4)%20%E2%88%A3%20(x%20%5E%20(m%20*%20n)%20-%201)%20%3A%3D%20by%0A%20%20rw%20%5Bnpow_mul%5D%0A%20%20exact%20sub_one_dvd_pow_sub_one%20(x%20%3A%3D%20x%20%5E%20m)%20(n%20%3A%3D%20n)%0A%0Alemma%20nat_pow_sub_dvd_pow_mul_sub%20(x%20m%20n%20%3A%20%E2%84%95)%20%3A%20x%20%5E%20m%20-%201%20%E2%88%A3%20x%20%5E%20(m%20*%20n)%20-%201%20%3A%3D%20by%0A%20%20zify%0A%20%20let%20a%20%3A%3D%20foo%20x%20m%20n%0A%20%20push_cast%20at%20a%0A%20%20convert%20a%20%20%0A). I think this is worth posting about on zulip.",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6QhypkzwAAAAMrq8Al",
              "createdAt": "2024-07-23T15:18:51Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABJc1VKA",
                "name": "easy"
              }
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5UCZMd",
              "createdAt": "2024-07-23T15:31:50Z",
              "source": {
                "id": "PR_kwDOFcwZ1c52Hl9h",
                "title": "fix: recognise awaiting-review comments again",
                "url": "https://github.com/leanprover-community/mathlib4/pull/15026"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6F2PMU",
              "createdAt": "2024-07-23T15:38:16Z",
              "body": "Intuitively, the `push_cast` needs to be told that `x^m-1` is nonnegative, so the cast can move to the `x`.",
              "author": {
                "login": "rwst"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6QhypkzwAAAAMrsLuR",
              "createdAt": "2024-07-23T15:43:19Z",
              "label": {
                "id": "MDU6TGFiZWwzMjcxMjQ0NzU5",
                "name": "WIP"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6QhypkzwAAAAMrsMku",
              "createdAt": "2024-07-23T15:43:35Z",
              "label": {
                "id": "MDU6TGFiZWwyOTg0NTM0NDU0",
                "name": "help-wanted"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6QhypkzwAAAAMurdXI",
              "createdAt": "2024-07-27T08:23:32Z",
              "label": {
                "id": "MDU6TGFiZWwzMjcxMjQ0NzU5",
                "name": "WIP"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6QhypkzwAAAAMurdXK",
              "createdAt": "2024-07-27T08:23:32Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6GWhc8",
              "createdAt": "2024-07-27T08:25:08Z",
              "body": "To recap, the new goal of this PR is to have both `Nat` and `Ring`/`CommRing` versions of\r\n\r\n1. `x - y ∣ x ^ n - y ^ n`\r\n2. `x ^ m - 1 ∣ x ^ (m * n) - 1`\r\n\r\nThere is, however, no need to base the `Nat` proof on the resp. ring version if the `Nat` proof is more simple. This applies to both cases because I find the `zify`ed version of (2) is more complicated than what I originally proposed here, because of multiple cases to be handled (`x` zero/nonzero, `m` zero/nonzero, `m*n` zero/nonzero). This is necessary since the solution was to use `zify [lemma1, lemma2]`:\r\n\r\n```\r\nlemma nat_pow_sub_dvd_pow_mul_sub (x m n : ℕ) : x ^ m - 1 ∣ x ^ (m * n) - 1 := by\r\n  have : x = 0 ∨ 0 < x := Nat.eq_zero_or_pos x\r\n  rcases this with h | h\r\n  rw [h, zero_pow_eq]\r\n  have hpos₁ : 1 ≤ x ^ m := by    \r\n    sorry\r\n  have hpos₂ : 1 ≤ x ^ (m * n) := by\r\n    sorry\r\n  zify [hpos₁, hpos₂]\r\n  let a := foo x m n\r\n  push_cast at a\r\n  convert a\r\n```\r\n\r\nSo, I'll keep the originally proposed `Nat` version of (2), and add the ring version of (2) by @grunweg. The `Nat` version of (1) is `nat_sub_dvd_pow_sub_pow` already in Mathlib, and the ring version of (1) is `sub_dvd_pow_sub_pow` already in Mathlib. What do you think? ",
              "author": {
                "login": "rwst"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6E1A4V",
              "createdAt": "2024-08-08T17:35:25Z",
              "body": "",
              "author": {
                "login": "j-loreaux"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6E1FTZ",
              "createdAt": "2024-08-08T17:45:48Z",
              "body": "",
              "author": {
                "login": "j-loreaux"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6Hrm2z",
              "createdAt": "2024-08-08T17:48:12Z",
              "body": "I think the lemmas as stated are fine now. I don't really care which way you choose to prove them, but note that the `zify` proofs can be made to work easily, as I show above.\r\n\r\nbors d+",
              "author": {
                "login": "j-loreaux"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6Hrm3v",
              "createdAt": "2024-08-08T17:48:15Z",
              "body": ":v: rwst can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests).",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6QhypkzwAAAAM3KWhz",
              "createdAt": "2024-08-08T17:48:22Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABAt13Ow",
                "name": "delegated"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6Hrul8",
              "createdAt": "2024-08-08T18:07:47Z",
              "body": "bors r+",
              "author": {
                "login": "rwst"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6HsE46",
              "createdAt": "2024-08-08T19:05:41Z",
              "body": "Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/10307450502/job/28532752474)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/10307450502/job/28532752778)",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c6QhypkzwAAAAM3NTfa",
              "createdAt": "2024-08-08T19:05:42Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c6QhypkzwAAAAM3NTod",
              "createdAt": "2024-08-08T19:05:46Z"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            }
          ]
        }
      }
    }
  }
}
