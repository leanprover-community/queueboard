{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 205,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "kim-em"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "This is a primitive implementation of the `says` combinator discussed at today's porting meeting.\r\n\r\nIf you write `X says`, where `X` is a tactic that produces a \"Try this: Y\" message, then you will get a message \"Try this: X says Y\". Once you've clicked to replace `X says` with `X says Y`, after then `X says Y` will only run `Y`.\r\n\r\nI think this is already potentially useful.\r\n\r\nPossible additions:\r\n* a CI mode that re-verifies that `X` really does still say `Y`. (Edit: DONE)\r\n* If `X` doesn't say anything, perhaps implicitly wrap it with `show_term`?\r\n* Add an extra `suggest` flag to the `TacticM` state, so we can instruct tactics to print \"Try this:\" suggestions without adding `?` directly.\r\n\r\nVery happy if anyone wants to hack on this / replace with a better implementation, etc.\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 6,
        "closed": true,
        "closedAt": "2023-07-27T19:54:43Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5hwCfP",
              "body": "Thanks so much for writing this first version!\r\n\r\n> a CI mode that re-verifies that X really does still say Y.\r\n\r\nI think this is pretty crucial if we want to keep this code in mathlib (which I would really like!)\r\nwould it be hard to implement such a flag? I suppose it would have to be configurable with some `set_option` thingy?",
              "createdAt": "2023-07-18T10:44:05Z",
              "author": {
                "login": "jcommelin"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5hwJo0",
              "body": "> I think this is pretty crucial if we want to keep this code in mathlib (which I would really like!) would it be hard to implement such a flag? I suppose it would have to be configurable with some `set_option` thingy?\r\n\r\nDone: `set_option says.verify true`. If I understand correctly we can turn this on as a weak option in CI.\r\n",
              "createdAt": "2023-07-18T11:05:43Z",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5h1bRA",
              "body": "Should we enable the weak-option CI-verification check in this same PR?",
              "createdAt": "2023-07-19T04:31:49Z",
              "author": {
                "login": "jcommelin"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5h39z5",
              "body": "> Should we enable the weak-option CI-verification check in this same PR?\r\n\r\nNo need. Github CI sets the `CI` environment variable directly, so it is already enabled.",
              "createdAt": "2023-07-19T13:13:55Z",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5inR6t",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/5683726994/job/15404884802)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/5683726994/job/15404884985)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/5683726994/job/15404884606)",
              "createdAt": "2023-07-27T19:54:42Z",
              "author": {
                "login": "bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "6fd88e8e89084d552f8082245efec25c2e540c6f",
                "additions": 102,
                "deletions": 0,
                "committedDate": "2023-07-18T10:32:39Z",
                "author": {
                  "name": "Scott Morrison",
                  "email": "scott.morrison@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "e4b5ffd969cbf7ec868a7350f672cb734a498025",
                "additions": 14,
                "deletions": 4,
                "committedDate": "2023-07-18T10:44:00Z",
                "author": {
                  "name": "Scott Morrison",
                  "email": "scott.morrison@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "5d7f9f003d8f3fe284c44457f534f4f312c203b7",
                "additions": 32,
                "deletions": 3,
                "committedDate": "2023-07-18T11:05:01Z",
                "author": {
                  "name": "Scott Morrison",
                  "email": "scott.morrison@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "47a0ec0e031eb3cc2e637658a91910cb1648b2bf",
                "additions": 47,
                "deletions": 23,
                "committedDate": "2023-07-18T23:40:07Z",
                "author": {
                  "name": "Scott Morrison",
                  "email": "scott.morrison@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "7e009f9b71c9c54212e55118aa5ac95546f2ff5c",
                "additions": 25,
                "deletions": 3,
                "committedDate": "2023-07-18T23:50:25Z",
                "author": {
                  "name": "Scott Morrison",
                  "email": "scott.morrison@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "d5a261597bee37aeb630fd97a17481e39eae8982",
                "additions": 3,
                "deletions": 2,
                "committedDate": "2023-07-19T00:16:40Z",
                "author": {
                  "name": "Scott Morrison",
                  "email": "scott.morrison@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "e6be93ac096bc538b29a5e6bdd5de319413dfc27",
                "additions": 21,
                "deletions": 6,
                "committedDate": "2023-07-19T01:29:55Z",
                "author": {
                  "name": "Scott Morrison",
                  "email": "scott.morrison@gmail.com"
                },
                "statusCheckRollup": null
              }
            }
          ]
        },
        "createdAt": "2023-07-18T10:38:03Z",
        "deletions": 2,
        "files": {
          "nodes": [
            {
              "path": "Mathlib.lean",
              "additions": 1,
              "deletions": 0
            },
            {
              "path": "Mathlib/CategoryTheory/Limits/Fubini.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/Tactic.lean",
              "additions": 1,
              "deletions": 0
            },
            {
              "path": "Mathlib/Tactic/Common.lean",
              "additions": 1,
              "deletions": 0
            },
            {
              "path": "Mathlib/Tactic/Says.lean",
              "additions": 115,
              "deletions": 0
            },
            {
              "path": "test/says.lean",
              "additions": 85,
              "deletions": 0
            }
          ]
        },
        "headRefName": "says",
        "headRefOid": "e6be93ac096bc538b29a5e6bdd5de319413dfc27",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5VxYo0",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": []
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5cZ76n",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kmill"
              },
              "submittedAt": "2023-07-27T16:37:13Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 5980,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": [
            {
              "requestedReviewer": {
                "id": "MDQ6VXNlcjg2ODU4OA==",
                "login": "digama0"
              }
            }
          ]
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5bezXd",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kmill"
              },
              "submittedAt": "2023-07-18T11:22:39Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5bgMbG",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "digama0"
              },
              "submittedAt": "2023-07-18T14:23:50Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5bjgjY",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kim-em"
              },
              "submittedAt": "2023-07-18T23:40:53Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5bjiDN",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kim-em"
              },
              "submittedAt": "2023-07-18T23:51:10Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5cZ76n",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kmill"
              },
              "submittedAt": "2023-07-27T16:37:13Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Lfx8c",
                    "body": "This function currently drops all mesasges if `evalTactic` throws an error. I didn't test it, but it seems to me that what we want is that in the failure case, we restore all the messages, add the new messages, and propagate the error. I didn't test it, but something like this:\r\n```suggestion\r\n  let mut msgs ← modifyGetThe Core.State fun st => (st.messages, { st with messages := {} })\r\n  try\r\n    evalTactic tac\r\n    return (← getThe Core.State).messages\r\n  catch e =>\r\n    msgs := msgs ++ (← getThe Core.State).messages\r\n    throw e\r\n  finally\r\n    modifyThe Core.State fun st => { st with messages := msgs }\r\n```",
                    "createdAt": "2023-07-18T11:14:45Z",
                    "author": {
                      "login": "kmill"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5Lit1r",
                    "body": "Implemented! Also did some further refactoring, adding `evalTacticCapturingInfo` and `evalTacticCapturingTryThis`.",
                    "createdAt": "2023-07-18T23:40:53Z",
                    "author": {
                      "login": "kim-em"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5LfzBB",
                    "body": "Have you checked that if you do\r\n```\r\n  simp says\r\n  exact foo\r\n```\r\nthat the parser doesn't consume the `exact foo` as well? If it does, and if there's no way to require the `tacticSeq` has strictly more indentation than the first tactic, then maybe we should alter the notation to be `tactic \" says\" (\"(\" tacticSeq \")\")?` or something similar? Anything that serves to delimit the quotation for what's being said.",
                    "createdAt": "2023-07-18T11:18:55Z",
                    "author": {
                      "login": "kmill"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5LgqtG",
                    "body": "the normal delimitation here would be indentation, just stick a `colGt` before `tacticSeq`",
                    "createdAt": "2023-07-18T14:23:50Z",
                    "author": {
                      "login": "digama0"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5Liu3e",
                    "body": "Add a `colGt` to the syntax suffices to deal with non-indented following tactics, happily! I've added some tests to exercise this.",
                    "createdAt": "2023-07-18T23:51:10Z",
                    "author": {
                      "login": "kim-em"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5MFo39",
                    "body": "I suspect this should be something like\r\n```suggestion\r\n    addSuggestion tk (← `(tactic| $tac says $stx)) (origSpan? := (← getRef))\r\n```\r\nbut I'm not sure there's any observable difference since quasiquotes use `getRef`.\r\n\r\nLet's merge and see what `says` is like in practice.\r\n\r\nbors r+",
                    "createdAt": "2023-07-27T16:37:13Z",
                    "author": {
                      "login": "kmill"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjQ3Nzk1Ng==",
              "login": "kim-em"
            },
            {
              "id": "MDQ6VXNlcjU2MzY3MDU=",
              "login": "jcommelin"
            },
            {
              "id": "MDQ6VXNlcjIzNTMwNw==",
              "login": "kmill"
            },
            {
              "id": "MDQ6VXNlcjg2ODU4OA==",
              "login": "digama0"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": null,
        "title": "[Merged by Bors] - feat: says tactic combinator",
        "updatedAt": "2023-07-27T19:54:50Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/5980",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "6fd88e8e89084d552f8082245efec25c2e540c6f"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5r3UHRzwAAAAJLCEdO",
              "createdAt": "2023-07-18T10:38:03Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5r3UHRzwAAAAJLCEdU",
              "createdAt": "2023-07-18T10:38:03Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "ReviewRequestedEvent",
              "id": "RRE_lADOFcwZ1c5r3UHRzwAAAAJLCEdi",
              "createdAt": "2023-07-18T10:38:03Z",
              "requestedReviewer": {
                "id": "MDQ6VXNlcjIzNTMwNw==",
                "login": "kmill"
              }
            },
            {
              "__typename": "ReviewRequestedEvent",
              "id": "RRE_lADOFcwZ1c5r3UHRzwAAAAJLCEdz",
              "createdAt": "2023-07-18T10:38:03Z",
              "requestedReviewer": {
                "id": "MDQ6VXNlcjg2ODU4OA==",
                "login": "digama0"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "e4b5ffd969cbf7ec868a7350f672cb734a498025"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5hwCfP",
              "createdAt": "2023-07-18T10:44:05Z",
              "body": "Thanks so much for writing this first version!\r\n\r\n> a CI mode that re-verifies that X really does still say Y.\r\n\r\nI think this is pretty crucial if we want to keep this code in mathlib (which I would really like!)\r\nwould it be hard to implement such a flag? I suppose it would have to be configurable with some `set_option` thingy?",
              "author": {
                "login": "jcommelin"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "5d7f9f003d8f3fe284c44457f534f4f312c203b7"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5hwJo0",
              "createdAt": "2023-07-18T11:05:43Z",
              "body": "> I think this is pretty crucial if we want to keep this code in mathlib (which I would really like!) would it be hard to implement such a flag? I suppose it would have to be configurable with some `set_option` thingy?\r\n\r\nDone: `set_option says.verify true`. If I understand correctly we can turn this on as a weak option in CI.\r\n",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5bezXd",
              "createdAt": "2023-07-18T11:14:45Z",
              "body": "",
              "author": {
                "login": "kmill"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5r3UHRzwAAAAJLDwBD",
              "createdAt": "2023-07-18T11:27:23Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "47a0ec0e031eb3cc2e637658a91910cb1648b2bf"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "7e009f9b71c9c54212e55118aa5ac95546f2ff5c"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "d5a261597bee37aeb630fd97a17481e39eae8982"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "e6be93ac096bc538b29a5e6bdd5de319413dfc27"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5h1bRA",
              "createdAt": "2023-07-19T04:31:49Z",
              "body": "Should we enable the weak-option CI-verification check in this same PR?",
              "author": {
                "login": "jcommelin"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5h39z5",
              "createdAt": "2023-07-19T13:13:55Z",
              "body": "> Should we enable the weak-option CI-verification check in this same PR?\r\n\r\nNo need. Github CI sets the `CI` environment variable directly, so it is already enabled.",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5cZ76n",
              "createdAt": "2023-07-27T16:37:12Z",
              "body": "",
              "author": {
                "login": "kmill"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5inR6t",
              "createdAt": "2023-07-27T19:54:42Z",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/5683726994/job/15404884802)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/5683726994/job/15404884985)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/5683726994/job/15404884606)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c5r3UHRzwAAAAJQeOBo",
              "createdAt": "2023-07-27T19:54:43Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c5r3UHRzwAAAAJQeONk",
              "createdAt": "2023-07-27T19:54:50Z"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            }
          ]
        }
      }
    }
  }
}
