{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 1521,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "Parcly-Taxel"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "Replace `induction'` with `induction` where the target is\r\n* `Nat` using both default inductor and `Nat.strong_induction_on`\r\n* `List` using default inductor\r\n* `Finset` using `Finset.induction(_on)`\r\n\r\nThis script performed the automatic replacement:\r\n```python\r\n#!/usr/bin/env python3\r\nimport re\r\n\r\nkeys = {}\r\nwith open(\"induction-uses\", 'r') as f:\r\n    for l in f:\r\n        filename, line_n, col_n, rest = l.split(':', maxsplit=3)\r\n        i = int(line_n)-1\r\n        col_n = int(col_n)\r\n        head, sep, n_subgoals = rest.strip().rpartition(' ')\r\n        n_subgoals = int(n_subgoals)\r\n        assert head.endswith(']')\r\n        head, sep, newvars = head[:-1].rpartition(' [')\r\n        assert sep\r\n        newvars = newvars.split(', ') if newvars else []\r\n        assert head.endswith(']')\r\n        head, sep, genvars = head[:-1].rpartition(' [')\r\n        assert sep\r\n        genvars = genvars.split(', ') if genvars else []\r\n        head, sep, inductor = head.rpartition(' ')\r\n        assert sep\r\n        if filename not in keys:\r\n            keys[filename] = {}\r\n        if i not in keys[filename]:\r\n            keys[filename][i] = {}\r\n        keys[filename][i].update({col_n: ((head, inductor, n_subgoals), genvars, newvars)})\r\n\r\nrep_dict = {(\"Nat\", \"~\", 2): [(\"zero\", 0), (\"succ\", 2)],\r\n            (\"Nat\", \"Nat.strong_induction_on\", 1): [(\"h\", 2)],\r\n            (\"List\", \"~\", 2): [(\"nil\", 0), (\"cons\", 3)],\r\n            (\"Finset\", \"Finset.induction\", 2): [(\"empty\", 0), (\"@insert\", 4)],\r\n            (\"Finset\", \"Finset.induction_on\", 2): [(\"empty\", 0), (\"@insert\", 4)]}\r\n\r\n# Strip · from the start of a line if present.\r\n# Return the stripped line (preserving indentation), its indent in spaces and whether it starts with ·\r\ndef strip_dot(l):\r\n    l1 = l.lstrip(' ')\r\n    l2 = l.lstrip(' ·')\r\n    dent = len(l) - len(l2)\r\n    return (' '*dent + l2, dent, len(l2) < len(l1))\r\n\r\nfor (filename, d) in keys.items():\r\n    with open(filename, 'r') as f:\r\n        lines = f.readlines()\r\n    drift = 0 # keep track of line count increases from replacing\r\n    for (i, t) in d.items():\r\n        line = lines[i + drift]\r\n        for (col_n, (ind_kind, genvars, newvars)) in t.items():\r\n            # If no new variables are named we might as well use plain `induction`\r\n            if not newvars:\r\n                lines[i + drift] = line.replace(\"induction'\", \"induction\")\r\n                continue\r\n            if ind_kind not in rep_dict:\r\n                continue\r\n            genstr = \" generalizing \" + \" \".join(genvars) if genvars else \"\"\r\n            if ind_kind[1] == \"~\":\r\n                induction_re = re.compile(r\"induction' (.*) with \" + \" \".join(newvars) + genstr)\r\n            else:\r\n                induction_re = re.compile(rf\"induction' (.*) using {ind_kind[1]} with \" + \" \".join(newvars) + genstr)\r\n            if not (m := induction_re.search(line)):\r\n                continue\r\n            # Scan below the induction' to find case blocks (marked by ·),\r\n            # until the indent goes back to or below the induction'.\r\n            # (It is possible that the final block has the same indent)\r\n            ind_blocks, j, bail = [], 1, False\r\n            start_dent = strip_dot(line)[1]\r\n            while True:\r\n                try:\r\n                    cand_line = lines[i + drift + j]\r\n                except IndexError: # we reached EOF\r\n                    break\r\n                stripped_line, dent, has_dot = strip_dot(cand_line)\r\n                if dent < start_dent:\r\n                    break\r\n                if dent == start_dent:\r\n                    ind_blocks.append([])\r\n                    break\r\n                if has_dot:\r\n                    ind_blocks.append([stripped_line])\r\n                else:\r\n                    try:\r\n                        ind_blocks[-1].append(stripped_line)\r\n                    except IndexError:\r\n                        bail = True\r\n                        break\r\n                j += 1\r\n            if bail:\r\n                continue\r\n            ind_branches = rep_dict[ind_kind]\r\n            if len(ind_blocks) != len(ind_branches):\r\n                continue\r\n            if ind_kind[1] == \"~\":\r\n                replacement_block = [' '*start_dent + f\"induction {m[1]}{genstr} with\\n\"]\r\n            else:\r\n                replacement_block = [' '*start_dent + f\"induction {m[1]} using {ind_kind[1]}{genstr} with\\n\"]\r\n            for ((branch_name, nvars), block) in zip(ind_branches, ind_blocks):\r\n                # Pick (up to) nvars variables from newvars\r\n                branch_head = ' '*start_dent + f\"| {branch_name}\" + \"\".join(' '+v for v in newvars[:nvars]) + \" =>\"\r\n                newvars = newvars[nvars:]\r\n                if len(block) == 0:\r\n                    replacement_block.append(branch_head + \" ?_\\n\")\r\n                elif len(block) == 1:\r\n                    replacement_block.append(branch_head + \" \" + block[0].lstrip(' '))\r\n                else:\r\n                    replacement_block.append(branch_head + '\\n')\r\n                    replacement_block.extend(block)\r\n            # Modify the replacement block to be on one line if it is exactly two lines\r\n            if len(replacement_block) == 2:\r\n                l0, l1 = replacement_block\r\n                replacement_block = [l0.rstrip() + ' ' + l1.lstrip(' ')]\r\n            n_orig_lines = sum(len(block) for block in ind_blocks) + 1\r\n            n_repl_lines = len(replacement_block)\r\n            lines[i+drift:i+drift+n_orig_lines] = replacement_block\r\n            drift += n_repl_lines - n_orig_lines\r\n    with open(filename, 'w') as f:\r\n        f.write(\"\".join(lines))\r\n```\r\n`induction-uses` was obtained from the output of [this run](https://github.com/leanprover-community/mathlib4/actions/runs/14004271932/job/39215914331) and is available [here](https://leanprover.zulipchat.com/#narrow/channel/287929-mathlib4/topic/The.20plan.20to.20remove.20induction'/near/507418143).",
        "changedFiles": 233,
        "closed": false,
        "closedAt": null,
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c6jnhDM",
              "body": "### PR summary [c7ad1b51f8](https://github.com/leanprover-community/mathlib4/pull/23211/commits/c7ad1b51f82a2e25f4aa56e1a2a7c174a6044e7e)\n\n#### Import changes for modified files\n\nNo significant changes to the import graph\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n\n</details>\n\n---\n\n#### Declarations diff\n\nNo declarations were harmed in the making of this PR! 🐙\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n---\n\n<details><summary>No changes to technical debt.</summary>\n\nYou can run this locally as\n```\n./scripts/technical-debt-metrics.sh pr_summary\n```\n* The `relative` value is the weighted *sum* of the differences with weight given by the *inverse* of the current value of the statistic.\n* The `absolute` value is the `relative` value divided by the total sum of the inverses of the current values (i.e. the weighted *average* of the differences).\n</details>\n",
              "createdAt": "2025-03-22T06:14:04Z",
              "author": {
                "login": "github-actions"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "c7ad1b51f82a2e25f4aa56e1a2a7c174a6044e7e",
                "additions": 1521,
                "deletions": 1113,
                "committedDate": "2025-03-22T06:07:40Z",
                "author": {
                  "name": "Parcly Taxel",
                  "email": "reddeloostw@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJIa6l0g",
                        "name": "set_pr_emoji",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14005926986/job/39219799506"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJIa6liA",
                        "name": "set_pr_emoji",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14005927005/job/39219799432"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJIa1QWQ",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14005888510/job/39219712089"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJIa6ldA",
                        "name": "Add topic label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14005926998/job/39219799412"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJIa6lVg",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14005927000/job/39219799382"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJIa6lZw",
                        "name": "post-or-update-summary-comment",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14005926996/job/39219799399"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJIa1QFw",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14005888508/job/39219712023"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJIa1Pvw",
                        "name": "Build",
                        "conclusion": "FAILURE",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14005888508/job/39219711935"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJIa1P2g",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14005888510/job/39219711962"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJIa1QxA",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14005888510/job/39219712196"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJIa5Zng",
                        "name": "Post-CI job",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14005888508/job/39219779998"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJIa62cg",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/39219803762"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJIa7F2w",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=23211&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "createdAt": "2025-03-22T06:12:55Z",
        "deletions": 1113,
        "files": {
          "nodes": [
            {
              "path": "Archive/Imo/Imo1977Q6.lean",
              "additions": 4,
              "deletions": 3
            },
            {
              "path": "Archive/Imo/Imo2006Q5.lean",
              "additions": 4,
              "deletions": 3
            },
            {
              "path": "Archive/Imo/Imo2013Q1.lean",
              "additions": 3,
              "deletions": 2
            },
            {
              "path": "Archive/Imo/Imo2013Q5.lean",
              "additions": 6,
              "deletions": 4
            },
            {
              "path": "Archive/MiuLanguage/DecisionSuf.lean",
              "additions": 22,
              "deletions": 14
            },
            {
              "path": "Archive/Sensitivity.lean",
              "additions": 14,
              "deletions": 9
            },
            {
              "path": "Archive/Wiedijk100Theorems/FriendshipGraphs.lean",
              "additions": 3,
              "deletions": 2
            },
            {
              "path": "Archive/Wiedijk100Theorems/Partition.lean",
              "additions": 3,
              "deletions": 2
            },
            {
              "path": "Mathlib/Algebra/Algebra/Subalgebra/Lattice.lean",
              "additions": 3,
              "deletions": 2
            },
            {
              "path": "Mathlib/Algebra/BigOperators/Group/List/Lemmas.lean",
              "additions": 3,
              "deletions": 3
            },
            {
              "path": "Mathlib/Algebra/Group/Conj.lean",
              "additions": 3,
              "deletions": 3
            },
            {
              "path": "Mathlib/Algebra/Group/ForwardDiff.lean",
              "additions": 10,
              "deletions": 9
            },
            {
              "path": "Mathlib/Algebra/Group/Pointwise/Finset/Basic.lean",
              "additions": 3,
              "deletions": 3
            },
            {
              "path": "Mathlib/Algebra/Group/Pointwise/Set/BigOperators.lean",
              "additions": 12,
              "deletions": 8
            },
            {
              "path": "Mathlib/Algebra/Group/Pointwise/Set/Finite.lean",
              "additions": 5,
              "deletions": 3
            },
            {
              "path": "Mathlib/Algebra/Group/Pointwise/Set/ListOfFn.lean",
              "additions": 4,
              "deletions": 3
            },
            {
              "path": "Mathlib/Algebra/Order/BigOperators/Group/List.lean",
              "additions": 12,
              "deletions": 9
            },
            {
              "path": "Mathlib/Algebra/Order/CauSeq/BigOperators.lean",
              "additions": 8,
              "deletions": 5
            },
            {
              "path": "Mathlib/Algebra/Order/Group/Multiset.lean",
              "additions": 5,
              "deletions": 3
            },
            {
              "path": "Mathlib/Algebra/Polynomial/BigOperators.lean",
              "additions": 6,
              "deletions": 6
            },
            {
              "path": "Mathlib/Algebra/Polynomial/Degree/Lemmas.lean",
              "additions": 4,
              "deletions": 3
            },
            {
              "path": "Mathlib/Algebra/Polynomial/Derivative.lean",
              "additions": 7,
              "deletions": 7
            },
            {
              "path": "Mathlib/Algebra/Polynomial/HasseDeriv.lean",
              "additions": 3,
              "deletions": 2
            },
            {
              "path": "Mathlib/Algebra/Polynomial/PartialFractions.lean",
              "additions": 4,
              "deletions": 2
            },
            {
              "path": "Mathlib/Algebra/Ring/Subring/Basic.lean",
              "additions": 9,
              "deletions": 6
            },
            {
              "path": "Mathlib/Algebra/Tropical/BigOperators.lean",
              "additions": 9,
              "deletions": 9
            },
            {
              "path": "Mathlib/AlgebraicTopology/DoldKan/Projections.lean",
              "additions": 14,
              "deletions": 9
            },
            {
              "path": "Mathlib/Analysis/Analytic/Composition.lean",
              "additions": 4,
              "deletions": 3
            },
            {
              "path": "Mathlib/Analysis/Analytic/Constructions.lean",
              "additions": 10,
              "deletions": 6
            },
            {
              "path": "Mathlib/Analysis/BoxIntegral/Box/SubboxInduction.lean",
              "additions": 3,
              "deletions": 2
            },
            {
              "path": "Mathlib/Analysis/BoxIntegral/Partition/Additive.lean",
              "additions": 3,
              "deletions": 2
            },
            {
              "path": "Mathlib/Analysis/BoxIntegral/Partition/Split.lean",
              "additions": 3,
              "deletions": 3
            },
            {
              "path": "Mathlib/Analysis/CStarAlgebra/Basic.lean",
              "additions": 4,
              "deletions": 3
            },
            {
              "path": "Mathlib/Analysis/CStarAlgebra/Multiplier.lean",
              "additions": 4,
              "deletions": 3
            },
            {
              "path": "Mathlib/Analysis/Calculus/ContDiff/Basic.lean",
              "additions": 15,
              "deletions": 9
            },
            {
              "path": "Mathlib/Analysis/Calculus/ContDiff/Bounds.lean",
              "additions": 5,
              "deletions": 3
            },
            {
              "path": "Mathlib/Analysis/Calculus/ContDiff/FTaylorSeries.lean",
              "additions": 9,
              "deletions": 6
            },
            {
              "path": "Mathlib/Analysis/Calculus/ContDiff/Operations.lean",
              "additions": 8,
              "deletions": 6
            },
            {
              "path": "Mathlib/Analysis/Calculus/Deriv/ZPow.lean",
              "additions": 5,
              "deletions": 3
            },
            {
              "path": "Mathlib/Analysis/Calculus/IteratedDeriv/Lemmas.lean",
              "additions": 4,
              "deletions": 3
            },
            {
              "path": "Mathlib/Analysis/Convex/Combination.lean",
              "additions": 3,
              "deletions": 2
            },
            {
              "path": "Mathlib/Analysis/Normed/Algebra/Exponential.lean",
              "additions": 3,
              "deletions": 2
            },
            {
              "path": "Mathlib/Analysis/NormedSpace/Multilinear/Basic.lean",
              "additions": 3,
              "deletions": 2
            },
            {
              "path": "Mathlib/Analysis/SpecialFunctions/Gamma/Basic.lean",
              "additions": 9,
              "deletions": 6
            },
            {
              "path": "Mathlib/Analysis/SpecialFunctions/Gamma/Beta.lean",
              "additions": 5,
              "deletions": 3
            },
            {
              "path": "Mathlib/Analysis/SpecialFunctions/Log/Base.lean",
              "additions": 3,
              "deletions": 2
            },
            {
              "path": "Mathlib/Analysis/SpecialFunctions/Pow/Deriv.lean",
              "additions": 4,
              "deletions": 3
            },
            {
              "path": "Mathlib/Analysis/SpecialFunctions/Trigonometric/EulerSineProd.lean",
              "additions": 5,
              "deletions": 3
            },
            {
              "path": "Mathlib/CategoryTheory/ComposableArrows.lean",
              "additions": 5,
              "deletions": 3
            },
            {
              "path": "Mathlib/CategoryTheory/Limits/VanKampen.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/CategoryTheory/Triangulated/TStructure/Basic.lean",
              "additions": 6,
              "deletions": 6
            },
            {
              "path": "Mathlib/Computability/Ackermann.lean",
              "additions": 10,
              "deletions": 9
            },
            {
              "path": "Mathlib/Computability/DFA.lean",
              "additions": 4,
              "deletions": 3
            },
            {
              "path": "Mathlib/Computability/EpsilonNFA.lean",
              "additions": 6,
              "deletions": 4
            },
            {
              "path": "Mathlib/Computability/Language.lean",
              "additions": 9,
              "deletions": 6
            },
            {
              "path": "Mathlib/Computability/NFA.lean",
              "additions": 4,
              "deletions": 3
            },
            {
              "path": "Mathlib/Computability/Partrec.lean",
              "additions": 6,
              "deletions": 5
            },
            {
              "path": "Mathlib/Computability/PartrecCode.lean",
              "additions": 10,
              "deletions": 6
            },
            {
              "path": "Mathlib/Computability/PostTuringMachine.lean",
              "additions": 14,
              "deletions": 8
            },
            {
              "path": "Mathlib/Computability/RegularExpressions.lean",
              "additions": 4,
              "deletions": 3
            },
            {
              "path": "Mathlib/Computability/TMConfig.lean",
              "additions": 9,
              "deletions": 6
            },
            {
              "path": "Mathlib/Computability/TMToPartrec.lean",
              "additions": 4,
              "deletions": 2
            },
            {
              "path": "Mathlib/Computability/Tape.lean",
              "additions": 7,
              "deletions": 4
            },
            {
              "path": "Mathlib/Control/LawfulFix.lean",
              "additions": 4,
              "deletions": 2
            },
            {
              "path": "Mathlib/Data/Complex/Exponential.lean",
              "additions": 4,
              "deletions": 3
            },
            {
              "path": "Mathlib/Data/Countable/Basic.lean",
              "additions": 4,
              "deletions": 3
            },
            {
              "path": "Mathlib/Data/DFinsupp/WellFounded.lean",
              "additions": 4,
              "deletions": 2
            },
            {
              "path": "Mathlib/Data/Fin/Tuple/Basic.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/Data/Finmap.lean",
              "additions": 3,
              "deletions": 2
            },
            {
              "path": "Mathlib/Data/Finset/Fold.lean",
              "additions": 9,
              "deletions": 7
            },
            {
              "path": "Mathlib/Data/Finset/Image.lean",
              "additions": 3,
              "deletions": 2
            },
            {
              "path": "Mathlib/Data/Finset/Lattice/Fold.lean",
              "additions": 8,
              "deletions": 6
            },
            {
              "path": "Mathlib/Data/Finset/Lattice/Lemmas.lean",
              "additions": 3,
              "deletions": 3
            },
            {
              "path": "Mathlib/Data/Finset/Lattice/Pi.lean",
              "additions": 3,
              "deletions": 2
            },
            {
              "path": "Mathlib/Data/Finset/NAry.lean",
              "additions": 3,
              "deletions": 2
            },
            {
              "path": "Mathlib/Data/Finset/NoncommProd.lean",
              "additions": 4,
              "deletions": 3
            },
            {
              "path": "Mathlib/Data/Finset/Sym.lean",
              "additions": 4,
              "deletions": 2
            },
            {
              "path": "Mathlib/Data/Finsupp/BigOperators.lean",
              "additions": 12,
              "deletions": 9
            },
            {
              "path": "Mathlib/Data/Fintype/Basic.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Data/Fintype/Card.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Data/Fintype/Fin.lean",
              "additions": 4,
              "deletions": 3
            },
            {
              "path": "Mathlib/Data/Fintype/Lattice.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Data/Fintype/Sum.lean",
              "additions": 4,
              "deletions": 2
            },
            {
              "path": "Mathlib/Data/List/Chain.lean",
              "additions": 10,
              "deletions": 9
            },
            {
              "path": "Mathlib/Data/List/Cycle.lean",
              "additions": 13,
              "deletions": 9
            },
            {
              "path": "Mathlib/Data/List/Destutter.lean",
              "additions": 12,
              "deletions": 8
            },
            {
              "path": "Mathlib/Data/List/Duplicate.lean",
              "additions": 3,
              "deletions": 3
            },
            {
              "path": "Mathlib/Data/List/Flatten.lean",
              "additions": 3,
              "deletions": 2
            },
            {
              "path": "Mathlib/Data/List/Indexes.lean",
              "additions": 4,
              "deletions": 3
            },
            {
              "path": "Mathlib/Data/List/Infix.lean",
              "additions": 5,
              "deletions": 5
            },
            {
              "path": "Mathlib/Data/List/Lemmas.lean",
              "additions": 4,
              "deletions": 3
            },
            {
              "path": "Mathlib/Data/List/MinMax.lean",
              "additions": 5,
              "deletions": 5
            },
            {
              "path": "Mathlib/Data/List/NodupEquivFin.lean",
              "additions": 3,
              "deletions": 2
            },
            {
              "path": "Mathlib/Data/List/OfFn.lean",
              "additions": 14,
              "deletions": 9
            },
            {
              "path": "Mathlib/Data/List/Permutation.lean",
              "additions": 21,
              "deletions": 18
            },
            {
              "path": "Mathlib/Data/List/Pi.lean",
              "additions": 5,
              "deletions": 3
            },
            {
              "path": "Mathlib/Data/List/ProdSigma.lean",
              "additions": 11,
              "deletions": 9
            },
            {
              "path": "Mathlib/Data/List/Range.lean",
              "additions": 4,
              "deletions": 3
            },
            {
              "path": "Mathlib/Data/List/ReduceOption.lean",
              "additions": 11,
              "deletions": 9
            },
            {
              "path": "Mathlib/Data/List/Sections.lean",
              "additions": 3,
              "deletions": 2
            }
          ]
        },
        "headRefName": "deprime-induction-auto",
        "headRefOid": "c7ad1b51f82a2e25f4aa56e1a2a7c174a6044e7e",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c6PtZn4",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "MDU6TGFiZWwzMjcxMjQ0NzU5",
              "color": "e899cd",
              "name": "WIP"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABlkjS4g",
              "color": "0EFB96",
              "name": "tech debt"
            }
          ]
        },
        "latestReviews": {
          "nodes": []
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "BLOCKED",
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 23211,
        "potentialMergeCommit": {
          "oid": "05d9c9edc39e445c8ee5fcf49722bf289fa9c866"
        },
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": []
        },
        "reviewThreads": {
          "nodes": []
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjU0MTc1NDYz",
              "login": "Parcly-Taxel"
            }
          ]
        },
        "state": "OPEN",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAJIa6l0g",
                "name": "set_pr_emoji",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14005926986/job/39219799506"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAJIa6liA",
                "name": "set_pr_emoji",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14005927005/job/39219799432"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAJIa1QWQ",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14005888510/job/39219712089"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAJIa6ldA",
                "name": "Add topic label",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14005926998/job/39219799412"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAJIa6lVg",
                "name": "label-and-report-new-contributor",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14005927000/job/39219799382"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAJIa6lZw",
                "name": "post-or-update-summary-comment",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14005926996/job/39219799399"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAJIa1QFw",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14005888508/job/39219712023"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAJIa1Pvw",
                "name": "Build",
                "conclusion": "FAILURE",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14005888508/job/39219711935"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAJIa1P2g",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14005888510/job/39219711962"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAJIa1QxA",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14005888510/job/39219712196"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAJIa5Zng",
                "name": "Post-CI job",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14005888508/job/39219779998"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAJIa62cg",
                "name": "New Contributor Check",
                "conclusion": "NEUTRAL",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/39219803762"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAJIa7F2w",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=23211&login=leanprover-community&repository=mathlib4"
              }
            ]
          }
        },
        "title": "chore: automatically deprime common `induction'` uses",
        "updatedAt": "2025-03-22T06:15:01Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/23211",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "c7ad1b51f82a2e25f4aa56e1a2a7c174a6044e7e"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6vPp6LzwAAAAPxpo2w",
              "createdAt": "2025-03-22T06:12:55Z",
              "label": {
                "id": "MDU6TGFiZWwzMjcxMjQ0NzU5",
                "name": "WIP"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6vPp6LzwAAAAPxpo2x",
              "createdAt": "2025-03-22T06:12:55Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABlkjS4g",
                "name": "tech debt"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6jnhDM",
              "createdAt": "2025-03-22T06:14:04Z",
              "body": "### PR summary [c7ad1b51f8](https://github.com/leanprover-community/mathlib4/pull/23211/commits/c7ad1b51f82a2e25f4aa56e1a2a7c174a6044e7e)\n\n#### Import changes for modified files\n\nNo significant changes to the import graph\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n\n</details>\n\n---\n\n#### Declarations diff\n\nNo declarations were harmed in the making of this PR! 🐙\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n---\n\n<details><summary>No changes to technical debt.</summary>\n\nYou can run this locally as\n```\n./scripts/technical-debt-metrics.sh pr_summary\n```\n* The `relative` value is the weighted *sum* of the differences with weight given by the *inverse* of the current value of the statistic.\n* The `absolute` value is the `relative` value divided by the total sum of the inverses of the current values (i.e. the weighted *average* of the differences).\n</details>\n",
              "author": {
                "login": "github-actions"
              }
            }
          ]
        }
      }
    }
  }
}
