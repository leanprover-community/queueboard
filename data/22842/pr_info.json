{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 235,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "loefflerd"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "This PR makes the following changes:\r\n\r\n- Define a mixin class `NormMulClass` for norms satisfying `‚Äña * b‚Äñ = ‚Äña‚Äñ * ‚Äñb‚Äñ`, and show that any `NormedDivisionRing` satisfies it.\r\n- Generalise some of the lemmas we currently have for `NormedDivisionRing` or `NormedField` to any normed ring satisfying `NormMulClass`.\r\n- ~~Some minor cleanup I noticed along the way (e.g. deleting a bunch of unnecessary instances in `PadicInt`).~~ [deferred to another PR]\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nFor details on the \"pull request lifecycle\" in mathlib, please see:\r\nhttps://leanprover-community.github.io/contribute/index.html\r\n\r\nIn particular, note that most reviewers will only notice your PR\r\nif it passes the continuous integration checks.\r\nPlease ask for help on https://leanprover.zulipchat.com if needed.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nIf you are moving or deleting declarations, please include these lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nMoves:\r\n- Vector.* -> List.Vector.*\r\n- ...\r\n\r\nDeletions:\r\n- Nat.bit1_add_bit1\r\n- ...\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n\r\n-->\r\n- [ ] depends on: #22871\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 7,
        "closed": false,
        "closedAt": null,
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c6h1oop",
              "body": "### PR summary [c6aec57acf](https://github.com/leanprover-community/mathlib4/pull/22842/commits/c6aec57acf9ff87c9458995ffb2a36452e7a7d07)\n\n<details><summary>\n\n#### Import changes for modified files\n\n</summary>\n\nDependency changes\n\n| File | Base Count | Head Count | Change |\n| --- | --- | --- | --- |\n| Mathlib.Analysis.Normed.Ring.Lemmas | 1330 | 1354 | +24 (+1.80%) |\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n|<details><summary>3 files</summary> `Mathlib.NumberTheory.LegendreSymbol.GaussEisensteinLemmas` `Mathlib.NumberTheory.SumTwoSquares` `Mathlib.NumberTheory.Zsqrtd.QuadraticReciprocity`</details>|2|\n| `Mathlib.Topology.Algebra.Polynomial` `Mathlib.Topology.ContinuousMap.Polynomial`|22|\n| `Mathlib.Analysis.Normed.Field.Instances`|23|\n|<details><summary>5 files</summary> `Mathlib.Analysis.Meromorphic.Divisor.Basic` `Mathlib.Analysis.Normed.Ring.InfiniteSum` `Mathlib.Analysis.Normed.Ring.Lemmas` `Mathlib.Analysis.NormedSpace.Int` `Mathlib.Topology.Bornology.BoundedOperation`</details>|24|\n\n</details>\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ Dilation.mulLeft`\n`+ Dilation.mulRight`\n`+ Int.instNormMulClass`\n`+ NormMulClass`\n`+ NormMulClass.induced`\n`+ NormMulClass.isAbsoluteValue_norm`\n`+ NormMulClass.isDomain`\n`+ NormMulClass.toNormOneClass`\n`+ instance (priority := 100) NormedDivisionRing.toNormMulClass [Œ≤ : NormedDivisionRing Œ±] :`\n`+ instance : NormMulClass ‚Ñ§_[p] := ‚ü®fun x y ‚Ü¶ by simp [norm_def]‚ü©`\n`+ instance [NonUnitalNormedCommRing E] : NonUnitalNormedCommRing (RestrictScalars ùïú ùïú' E) := ‚Äπ_‚Ä∫`\n`+ instance [NonUnitalNormedRing E] : NonUnitalNormedRing (RestrictScalars ùïú ùïú' E) := ‚Äπ_‚Ä∫`\n`+ instance [NonUnitalSeminormedCommRing E] : NonUnitalSeminormedCommRing (RestrictScalars ùïú ùïú' E)`\n`+ instance [NonUnitalSeminormedRing E] : NonUnitalSeminormedRing (RestrictScalars ùïú ùïú' E) := ‚Äπ_‚Ä∫`\n`+ instance [NormedAddCommGroup E] : NormedAddCommGroup (RestrictScalars ùïú ùïú' E) := ‚Äπ_‚Ä∫`\n`+ instance [NormedCommRing E] : NormedCommRing (RestrictScalars ùïú ùïú' E) := ‚Äπ_‚Ä∫`\n`+ instance [NormedRing E] : NormedRing (RestrictScalars ùïú ùïú' E) := ‚Äπ_‚Ä∫`\n`+ instance [SeminormedAddCommGroup E] : SeminormedAddCommGroup (RestrictScalars ùïú ùïú' E) := ‚Äπ_‚Ä∫`\n`+ instance [SeminormedCommRing E] : SeminormedCommRing (RestrictScalars ùïú ùïú' E) := ‚Äπ_‚Ä∫`\n`+ instance [SeminormedRing E] : SeminormedRing (RestrictScalars ùïú ùïú' E) := ‚Äπ_‚Ä∫`\n`+ toNormMulClass`\n`+-- norm_mul`\n`- Int.instNormOneClass`\n`- antilipschitzWith_mul_left`\n`- instance (priority := 900) NormedDivisionRing.to_normOneClass : NormOneClass Œ±`\n`- instance : IsDomain ‚Ñ§_[p] := Function.Injective.isDomain (subring p).subtype Subtype.coe_injective`\n`- instance : NormOneClass ‚Ñ§_[p]`\n`- instance [I : NonUnitalNormedCommRing E] :`\n`- instance [I : NonUnitalNormedRing E] :`\n`- instance [I : NonUnitalSeminormedCommRing E] :`\n`- instance [I : NonUnitalSeminormedRing E] :`\n`- instance [I : NormedAddCommGroup E] :`\n`- instance [I : NormedCommRing E] :`\n`- instance [I : NormedRing E] :`\n`- instance [I : SeminormedAddCommGroup E] :`\n`- instance [I : SeminormedCommRing E] :`\n`- instance [I : SeminormedRing E] :`\n`- isAbsoluteValue`\n`- isAbsoluteValue_norm`\n`- norm_pow`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n</details>\n\n---\n\n<details><summary>Increase in tech debt: (relative, absolute) = (1.00, 0.00)</summary>\n\n|Current number|Change|Type|\n|-:|:-:|:-|\n|2261|1|porting notes|\n\nCurrent commit [c6aec57acf](https://github.com/leanprover-community/mathlib4/commit/c6aec57acf9ff87c9458995ffb2a36452e7a7d07)\nReference commit [6bc8904b57](https://github.com/leanprover-community/mathlib4/commit/6bc8904b57469119759a2455637235bfde44c0db)\n\nYou can run this locally as\n```\n./scripts/technical-debt-metrics.sh pr_summary\n```\n* The `relative` value is the weighted *sum* of the differences with weight given by the *inverse* of the current value of the statistic.\n* The `absolute` value is the `relative` value divided by the total sum of the inverses of the current values (i.e. the weighted *average* of the differences).\n</details>\n",
              "createdAt": "2025-03-11T17:41:02Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6h-LvE",
              "body": "> * Rename the field `norm_smul_le` of `NormedSpace` and `NormedAlgebra` to `norm_smul_le'`, to avoid a naming conflict with the lemma inherited via `IsBoundedSMul`. [_These structure field renames are trivial, but make up most of the diff._]\r\n\r\nWhat's the conflict here? Why does it matter if the field name is the same as a lemma name?",
              "createdAt": "2025-03-12T10:41:07Z",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6h-MMX",
              "body": "> * Rename the field `norm_mul` of the normed ring classes, which states that `‚Äña * b‚Äñ ‚â§ ‚Äña‚Äñ * ‚Äñb‚Äñ`, to `norm_mul_le`, to avoid a naming conflict with the `norm_mul` of `NormMulClass`.\r\n\r\nCould you split this to its own PR? Independently of whether it clashes, I agree this is a better name.",
              "createdAt": "2025-03-12T10:41:37Z",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6h-Nwq",
              "body": "> > * Rename the field `norm_smul_le` of `NormedSpace` and `NormedAlgebra` to `norm_smul_le'`, to avoid a naming conflict with the lemma inherited via `IsBoundedSMul`. [_These structure field renames are trivial, but make up most of the diff._]\r\n> \r\n> What's the conflict here? Why does it matter if the field name is the same as a lemma name?\r\n\r\nIf you have `NormedSpace` open, if you try to apply `norm_smul_le` you have to specify whether you mean `_root_.norm_smul_le` or `NormedSpace.norm_smul_le` (which is annoying since they are both, in fact, asserting exactly the same thing!)",
              "createdAt": "2025-03-12T10:44:20Z",
              "author": {
                "login": "loefflerd"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6h-W2Z",
              "body": "\r\n> If you have `NormedSpace` open, if you try to apply `norm_smul_le` you have to specify whether you mean `_root_.norm_smul_le` or `NormedSpace.norm_smul_le` (which is annoying since they are both, in fact, asserting exactly the same thing!)\r\n\r\nThen the fix is to put `protected` before `norm_smul_le` in `NormedSpace`",
              "createdAt": "2025-03-12T10:58:47Z",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6h-g-_",
              "body": "> > If you have `NormedSpace` open, if you try to apply `norm_smul_le` you have to specify whether you mean `_root_.norm_smul_le` or `NormedSpace.norm_smul_le` (which is annoying since they are both, in fact, asserting exactly the same thing!)\r\n> \r\n> Then the fix is to put `protected` before `norm_smul_le` in `NormedSpace`\r\n\r\nCan you protect a structure field, rather than a lemma? I didn't know that was possible. (We seem to have a pretty consistent design pattern where `foo'` is a structure field and `foo` the lemma which accesses it.)",
              "createdAt": "2025-03-12T11:15:28Z",
              "author": {
                "login": "loefflerd"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6h_JX-",
              "body": "> Can you protect a structure field, rather than a lemma? \r\n\r\nYes!\r\n\r\n> We seem to have a pretty consistent design pattern where `foo'` is a structure field and `foo` the lemma which accesses it.\r\n\r\nUsually the pattern is that `foo'` is the lemma about some internal implementation detail, like `toFun`, and `foo` is the lemma about the spelling using a notation class.",
              "createdAt": "2025-03-12T12:13:32Z",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6iAFBB",
              "body": "> > Can you protect a structure field, rather than a lemma?\r\n> \r\n> Yes!\r\n> \r\n> > We seem to have a pretty consistent design pattern where `foo'` is a structure field and `foo` the lemma which accesses it.\r\n> \r\n> Usually the pattern is that `foo'` is the lemma about some internal implementation detail, like `toFun`, and `foo` is the lemma about the spelling using a notation class.\r\n\r\n`NormedDivisionRing.norm_mul'` doesn't seem to fit this. I guess that's because `norm_mul` (unprimed) was previously used for the inequality, so should we now rename `NormedDivisionRing.norm_mul'` to `NormedDivisionRing.norm_mul`?",
              "createdAt": "2025-03-12T13:42:23Z",
              "author": {
                "login": "loefflerd"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6iIaR6",
              "body": "bot fix style",
              "createdAt": "2025-03-13T06:28:08Z",
              "author": {
                "login": "loefflerd"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6iJTug",
              "body": "This PR/issue depends on:\n* ~~leanprover-community/mathlib4#22871~~\nBy **[Dependent Issues](https://github.com/z0al/dependent-issues)** (ü§ñ). Happy coding!\n<!-- By Dependent Issues (Action) - DO NOT REMOVE -->",
              "createdAt": "2025-03-13T08:22:38Z",
              "author": {
                "login": "mathlib4-dependent-issues-bot"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "c6aec57acf9ff87c9458995ffb2a36452e7a7d07",
                "additions": 235,
                "deletions": 183,
                "committedDate": "2025-03-13T15:42:22Z",
                "author": {
                  "name": "David Loeffler",
                  "email": "d.loeffler.01@cantab.net"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJA_CJZg",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13838850690/job/38720801126"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJA_CQpQ",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13838851424/job/38720802981"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJA_CQbQ",
                        "name": "post-or-update-summary-comment",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13838851411/job/38720802925"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJA_CLdA",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13838850702/job/38720801652"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJA_CTSA",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13838851423/job/38720803656"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJA_CJnw",
                        "name": "Build",
                        "conclusion": null,
                        "status": "IN_PROGRESS",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13838850702/job/38720801183"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJA_CMcA",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13838850690/job/38720801904"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJA_CQ_A",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13838851423/job/38720803068"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJA_COkQ",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13838850690/job/38720802449"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJA_C80g",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/38720814290"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJA_Er0A",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=22842&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "createdAt": "2025-03-11T17:30:55Z",
        "deletions": 183,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/Analysis/Normed/Field/Basic.lean",
              "additions": 6,
              "deletions": 55
            },
            {
              "path": "Mathlib/Analysis/Normed/Field/Lemmas.lean",
              "additions": 7,
              "deletions": 40
            },
            {
              "path": "Mathlib/Analysis/Normed/Module/Basic.lean",
              "additions": 33,
              "deletions": 55
            },
            {
              "path": "Mathlib/Analysis/Normed/Ring/Basic.lean",
              "additions": 126,
              "deletions": 6
            },
            {
              "path": "Mathlib/Analysis/Normed/Ring/Lemmas.lean",
              "additions": 61,
              "deletions": 5
            },
            {
              "path": "Mathlib/NumberTheory/Padics/Hensel.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/NumberTheory/Padics/PadicIntegers.lean",
              "additions": 1,
              "deletions": 21
            }
          ]
        },
        "headRefName": "DL_norm_mul",
        "headRefOid": "c6aec57acf9ff87c9458995ffb2a36452e7a7d07",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c6ONQLA",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJeVg",
              "color": "33DBEC",
              "name": "t-analysis"
            }
          ]
        },
        "latestReviews": {
          "nodes": []
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "BLOCKED",
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 22842,
        "potentialMergeCommit": {
          "oid": "6b1899c477eaf8cf6c3ea1e9047cc6f7222329de"
        },
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": []
        },
        "reviewThreads": {
          "nodes": []
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjM0Mzk2ODg=",
              "login": "loefflerd"
            },
            {
              "id": "MDQ6VXNlcjQyNTI2MA==",
              "login": "eric-wieser"
            },
            {
              "id": "U_kgDOCsITAQ",
              "login": "mathlib4-dependent-issues-bot"
            },
            {
              "id": "U_kgDOBcsTTQ",
              "login": "leanprover-community-bot-assistant"
            }
          ]
        },
        "state": "OPEN",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAJA_CJZg",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13838850690/job/38720801126"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAJA_CQpQ",
                "name": "label-and-report-new-contributor",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13838851424/job/38720802981"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAJA_CQbQ",
                "name": "post-or-update-summary-comment",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13838851411/job/38720802925"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAJA_CLdA",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13838850702/job/38720801652"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAJA_CTSA",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13838851423/job/38720803656"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAJA_CJnw",
                "name": "Build",
                "conclusion": null,
                "status": "IN_PROGRESS",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13838850702/job/38720801183"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAJA_CMcA",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13838850690/job/38720801904"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAJA_CQ_A",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13838851423/job/38720803068"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAJA_COkQ",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13838850690/job/38720802449"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAJA_C80g",
                "name": "New Contributor Check",
                "conclusion": "NEUTRAL",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/38720814290"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAJA_Er0A",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=22842&login=leanprover-community&repository=mathlib4"
              }
            ]
          }
        },
        "title": "feat(Analysis/Normed): Class for strict multiplicativity of norm",
        "updatedAt": "2025-03-13T15:49:25Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/22842",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6th6jmzwAAAAPjCVjr",
              "createdAt": "2025-03-11T17:30:55Z",
              "label": {
                "id": "MDU6TGFiZWwzMjcxMjQ0NzU5",
                "name": "WIP"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c6th6jmzwAAAAPjDGK9",
              "createdAt": "2025-03-11T17:40:02Z"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6h1oop",
              "createdAt": "2025-03-11T17:41:02Z",
              "body": "### PR summary [c6aec57acf](https://github.com/leanprover-community/mathlib4/pull/22842/commits/c6aec57acf9ff87c9458995ffb2a36452e7a7d07)\n\n<details><summary>\n\n#### Import changes for modified files\n\n</summary>\n\nDependency changes\n\n| File | Base Count | Head Count | Change |\n| --- | --- | --- | --- |\n| Mathlib.Analysis.Normed.Ring.Lemmas | 1330 | 1354 | +24 (+1.80%) |\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n|<details><summary>3 files</summary> `Mathlib.NumberTheory.LegendreSymbol.GaussEisensteinLemmas` `Mathlib.NumberTheory.SumTwoSquares` `Mathlib.NumberTheory.Zsqrtd.QuadraticReciprocity`</details>|2|\n| `Mathlib.Topology.Algebra.Polynomial` `Mathlib.Topology.ContinuousMap.Polynomial`|22|\n| `Mathlib.Analysis.Normed.Field.Instances`|23|\n|<details><summary>5 files</summary> `Mathlib.Analysis.Meromorphic.Divisor.Basic` `Mathlib.Analysis.Normed.Ring.InfiniteSum` `Mathlib.Analysis.Normed.Ring.Lemmas` `Mathlib.Analysis.NormedSpace.Int` `Mathlib.Topology.Bornology.BoundedOperation`</details>|24|\n\n</details>\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ Dilation.mulLeft`\n`+ Dilation.mulRight`\n`+ Int.instNormMulClass`\n`+ NormMulClass`\n`+ NormMulClass.induced`\n`+ NormMulClass.isAbsoluteValue_norm`\n`+ NormMulClass.isDomain`\n`+ NormMulClass.toNormOneClass`\n`+ instance (priority := 100) NormedDivisionRing.toNormMulClass [Œ≤ : NormedDivisionRing Œ±] :`\n`+ instance : NormMulClass ‚Ñ§_[p] := ‚ü®fun x y ‚Ü¶ by simp [norm_def]‚ü©`\n`+ instance [NonUnitalNormedCommRing E] : NonUnitalNormedCommRing (RestrictScalars ùïú ùïú' E) := ‚Äπ_‚Ä∫`\n`+ instance [NonUnitalNormedRing E] : NonUnitalNormedRing (RestrictScalars ùïú ùïú' E) := ‚Äπ_‚Ä∫`\n`+ instance [NonUnitalSeminormedCommRing E] : NonUnitalSeminormedCommRing (RestrictScalars ùïú ùïú' E)`\n`+ instance [NonUnitalSeminormedRing E] : NonUnitalSeminormedRing (RestrictScalars ùïú ùïú' E) := ‚Äπ_‚Ä∫`\n`+ instance [NormedAddCommGroup E] : NormedAddCommGroup (RestrictScalars ùïú ùïú' E) := ‚Äπ_‚Ä∫`\n`+ instance [NormedCommRing E] : NormedCommRing (RestrictScalars ùïú ùïú' E) := ‚Äπ_‚Ä∫`\n`+ instance [NormedRing E] : NormedRing (RestrictScalars ùïú ùïú' E) := ‚Äπ_‚Ä∫`\n`+ instance [SeminormedAddCommGroup E] : SeminormedAddCommGroup (RestrictScalars ùïú ùïú' E) := ‚Äπ_‚Ä∫`\n`+ instance [SeminormedCommRing E] : SeminormedCommRing (RestrictScalars ùïú ùïú' E) := ‚Äπ_‚Ä∫`\n`+ instance [SeminormedRing E] : SeminormedRing (RestrictScalars ùïú ùïú' E) := ‚Äπ_‚Ä∫`\n`+ toNormMulClass`\n`+-- norm_mul`\n`- Int.instNormOneClass`\n`- antilipschitzWith_mul_left`\n`- instance (priority := 900) NormedDivisionRing.to_normOneClass : NormOneClass Œ±`\n`- instance : IsDomain ‚Ñ§_[p] := Function.Injective.isDomain (subring p).subtype Subtype.coe_injective`\n`- instance : NormOneClass ‚Ñ§_[p]`\n`- instance [I : NonUnitalNormedCommRing E] :`\n`- instance [I : NonUnitalNormedRing E] :`\n`- instance [I : NonUnitalSeminormedCommRing E] :`\n`- instance [I : NonUnitalSeminormedRing E] :`\n`- instance [I : NormedAddCommGroup E] :`\n`- instance [I : NormedCommRing E] :`\n`- instance [I : NormedRing E] :`\n`- instance [I : SeminormedAddCommGroup E] :`\n`- instance [I : SeminormedCommRing E] :`\n`- instance [I : SeminormedRing E] :`\n`- isAbsoluteValue`\n`- isAbsoluteValue_norm`\n`- norm_pow`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n</details>\n\n---\n\n<details><summary>Increase in tech debt: (relative, absolute) = (1.00, 0.00)</summary>\n\n|Current number|Change|Type|\n|-:|:-:|:-|\n|2261|1|porting notes|\n\nCurrent commit [c6aec57acf](https://github.com/leanprover-community/mathlib4/commit/c6aec57acf9ff87c9458995ffb2a36452e7a7d07)\nReference commit [6bc8904b57](https://github.com/leanprover-community/mathlib4/commit/6bc8904b57469119759a2455637235bfde44c0db)\n\nYou can run this locally as\n```\n./scripts/technical-debt-metrics.sh pr_summary\n```\n* The `relative` value is the weighted *sum* of the differences with weight given by the *inverse* of the current value of the statistic.\n* The `absolute` value is the `relative` value divided by the total sum of the inverses of the current values (i.e. the weighted *average* of the differences).\n</details>\n",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6th6jmzwAAAAPjT-gc",
              "createdAt": "2025-03-11T21:43:51Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJeVg",
                "name": "t-analysis"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6th6jmzwAAAAPjT-ql",
              "createdAt": "2025-03-11T21:43:55Z",
              "label": {
                "id": "MDU6TGFiZWwzMjcxMjQ0NzU5",
                "name": "WIP"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6h-LvE",
              "createdAt": "2025-03-12T10:41:07Z",
              "body": "> * Rename the field `norm_smul_le` of `NormedSpace` and `NormedAlgebra` to `norm_smul_le'`, to avoid a naming conflict with the lemma inherited via `IsBoundedSMul`. [_These structure field renames are trivial, but make up most of the diff._]\r\n\r\nWhat's the conflict here? Why does it matter if the field name is the same as a lemma name?",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6h-MMX",
              "createdAt": "2025-03-12T10:41:37Z",
              "body": "> * Rename the field `norm_mul` of the normed ring classes, which states that `‚Äña * b‚Äñ ‚â§ ‚Äña‚Äñ * ‚Äñb‚Äñ`, to `norm_mul_le`, to avoid a naming conflict with the `norm_mul` of `NormMulClass`.\r\n\r\nCould you split this to its own PR? Independently of whether it clashes, I agree this is a better name.",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6h-Nwq",
              "createdAt": "2025-03-12T10:44:20Z",
              "body": "> > * Rename the field `norm_smul_le` of `NormedSpace` and `NormedAlgebra` to `norm_smul_le'`, to avoid a naming conflict with the lemma inherited via `IsBoundedSMul`. [_These structure field renames are trivial, but make up most of the diff._]\r\n> \r\n> What's the conflict here? Why does it matter if the field name is the same as a lemma name?\r\n\r\nIf you have `NormedSpace` open, if you try to apply `norm_smul_le` you have to specify whether you mean `_root_.norm_smul_le` or `NormedSpace.norm_smul_le` (which is annoying since they are both, in fact, asserting exactly the same thing!)",
              "author": {
                "login": "loefflerd"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6h-W2Z",
              "createdAt": "2025-03-12T10:58:47Z",
              "body": "\r\n> If you have `NormedSpace` open, if you try to apply `norm_smul_le` you have to specify whether you mean `_root_.norm_smul_le` or `NormedSpace.norm_smul_le` (which is annoying since they are both, in fact, asserting exactly the same thing!)\r\n\r\nThen the fix is to put `protected` before `norm_smul_le` in `NormedSpace`",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6h-g-_",
              "createdAt": "2025-03-12T11:15:28Z",
              "body": "> > If you have `NormedSpace` open, if you try to apply `norm_smul_le` you have to specify whether you mean `_root_.norm_smul_le` or `NormedSpace.norm_smul_le` (which is annoying since they are both, in fact, asserting exactly the same thing!)\r\n> \r\n> Then the fix is to put `protected` before `norm_smul_le` in `NormedSpace`\r\n\r\nCan you protect a structure field, rather than a lemma? I didn't know that was possible. (We seem to have a pretty consistent design pattern where `foo'` is a structure field and `foo` the lemma which accesses it.)",
              "author": {
                "login": "loefflerd"
              }
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c6A7Ipo",
              "createdAt": "2025-03-12T11:22:43Z",
              "source": {
                "id": "PR_kwDOFcwZ1c6OU8oW",
                "title": "[Merged by Bors] - chore (Analysis/Normed): rename `norm_mul` to `norm_mul_le`",
                "url": "https://github.com/leanprover-community/mathlib4/pull/22871"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6h_JX-",
              "createdAt": "2025-03-12T12:13:32Z",
              "body": "> Can you protect a structure field, rather than a lemma? \r\n\r\nYes!\r\n\r\n> We seem to have a pretty consistent design pattern where `foo'` is a structure field and `foo` the lemma which accesses it.\r\n\r\nUsually the pattern is that `foo'` is the lemma about some internal implementation detail, like `toFun`, and `foo` is the lemma about the spelling using a notation class.",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6iAFBB",
              "createdAt": "2025-03-12T13:42:23Z",
              "body": "> > Can you protect a structure field, rather than a lemma?\r\n> \r\n> Yes!\r\n> \r\n> > We seem to have a pretty consistent design pattern where `foo'` is a structure field and `foo` the lemma which accesses it.\r\n> \r\n> Usually the pattern is that `foo'` is the lemma about some internal implementation detail, like `toFun`, and `foo` is the lemma about the spelling using a notation class.\r\n\r\n`NormedDivisionRing.norm_mul'` doesn't seem to fit this. I guess that's because `norm_mul` (unprimed) was previously used for the inequality, so should we now rename `NormedDivisionRing.norm_mul'` to `NormedDivisionRing.norm_mul`?",
              "author": {
                "login": "loefflerd"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c6th6jmzwAAAAPkUnDv",
              "createdAt": "2025-03-12T14:55:31Z"
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c6th6jmzwAAAAPkZC-X",
              "createdAt": "2025-03-12T16:00:37Z"
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6th6jmzwAAAAPkaeOH",
              "createdAt": "2025-03-12T16:22:31Z",
              "label": {
                "id": "MDU6TGFiZWwzMjg4OTQyMDg2",
                "name": "blocked-by-other-PR"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6th6jmzwAAAAPk7d1L",
              "createdAt": "2025-03-13T05:45:07Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6iIaR6",
              "createdAt": "2025-03-13T06:28:08Z",
              "body": "bot fix style",
              "author": {
                "login": "loefflerd"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6th6jmzwAAAAPk-BC_",
              "createdAt": "2025-03-13T06:43:38Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6th6jmzwAAAAPlGDpb",
              "createdAt": "2025-03-13T08:22:37Z",
              "label": {
                "id": "MDU6TGFiZWwzMjg4OTQyMDg2",
                "name": "blocked-by-other-PR"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6iJTug",
              "createdAt": "2025-03-13T08:22:38Z",
              "body": "This PR/issue depends on:\n* ~~leanprover-community/mathlib4#22871~~\nBy **[Dependent Issues](https://github.com/z0al/dependent-issues)** (ü§ñ). Happy coding!\n<!-- By Dependent Issues (Action) - DO NOT REMOVE -->",
              "author": {
                "login": "mathlib4-dependent-issues-bot"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6th6jmzwAAAAPlG7pF",
              "createdAt": "2025-03-13T08:33:43Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "c6aec57acf9ff87c9458995ffb2a36452e7a7d07"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c6th6jmzwAAAAPl8oy-",
              "createdAt": "2025-03-13T15:47:55Z"
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6th6jmzwAAAAPl81Jz",
              "createdAt": "2025-03-13T15:48:41Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            }
          ]
        }
      }
    }
  }
}
