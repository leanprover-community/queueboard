{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 86,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "mo271"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 1,
        "closed": true,
        "closedAt": "2023-10-23T09:44:51Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5nRNb4",
              "body": "adding @MichaelStollBayreuth as reviewer, because of the help with this file in past...",
              "createdAt": "2023-09-24T12:56:38Z",
              "author": {
                "login": "mo271"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5nRdVQ",
              "body": "I'm thinking of adding some API, but need to play around a bit.",
              "createdAt": "2023-09-24T17:48:45Z",
              "author": {
                "login": "MichaelStollBayreuth"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5nRkeB",
              "body": "If we had\r\n```lean\r\nlemma unitsMap_surjective {n m : ℕ} (h : n ∣ m) (hm : m ≠ 0) : Function.Surjective (unitsMap h) := sorry\r\n```\r\n(see [this Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Surjectivity.20of.20.28ZMod.20m.29.CB.A3.20.E2.86.92*.20.28ZMod.20n.29.CB.A3/near/392858973)) then we could add\r\n```lean\r\nlemma changeLevel_injective {d : ℕ} (h : d ∣ n) (hn : n ≠ 0) :\r\n    Function.Injective (changeLevel (R := R) h) := by\r\n  intro χ χ' H\r\n  ext a\r\n  obtain ⟨b, hb⟩ := ZMod.unitsMap_surjective h hn a\r\n  apply_fun (· b) at H\r\n  simp only [Units.isUnit, changeLevel_eq_cast_of_dvd _ h] at H \r\n  rwa [← hb]\r\n\r\nlemma changeLevel_trivial_iff {d : ℕ} {χ : DirichletCharacter R n} {χ' : DirichletCharacter R d}\r\n    (hdn : d ∣ n) (hn : n ≠ 0) (h : χ = changeLevel hdn χ') : χ = 1 ↔ χ' = 1 :=\r\n  ⟨fun H ↦ (changeLevel_injective hdn hn <| (H.symm ▸ changeLevel_trivial hdn).trans h).symm,\r\n   fun H ↦ h ▸ H ▸ changeLevel_trivial hdn⟩\r\n```\r\n",
              "createdAt": "2023-09-24T20:11:31Z",
              "author": {
                "login": "MichaelStollBayreuth"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5nUN88",
              "body": "> If we had\r\n> \r\n> ```lean\r\n> lemma unitsMap_surjective {n m : ℕ} (h : n ∣ m) (hm : m ≠ 0) : Function.Surjective (unitsMap h) := sorry\r\n> ```\r\n> \r\n> (see [this Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Surjectivity.20of.20.28ZMod.20m.29.CB.A3.20.E2.86.92*.20.28ZMod.20n.29.CB.A3/near/392858973)) then we could add\r\n\r\nI added a TODO for this",
              "createdAt": "2023-09-25T10:03:40Z",
              "author": {
                "login": "mo271"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5pyL5E",
              "body": "Thanks!\r\n\r\nbors merge",
              "createdAt": "2023-10-23T09:15:40Z",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5pyYZS",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6611210509/job/17954644349)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6611210509/job/17954644072)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6611210509/job/17954644817)",
              "createdAt": "2023-10-23T09:44:50Z",
              "author": {
                "login": "bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "d28b70b09b3891448410845e0815f5d6d8758d85",
                "additions": 71,
                "deletions": 1,
                "committedDate": "2023-09-24T12:53:19Z",
                "author": {
                  "name": "Moritz Firsching",
                  "email": "firsching@google.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "8c04bb284cae64d4d2a79b0243586da37267b527",
                "additions": 6,
                "deletions": 5,
                "committedDate": "2023-09-24T17:34:26Z",
                "author": {
                  "name": "Moritz Firsching",
                  "email": "firsching@google.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "262bec07b073734d3c2d194dd5651d4570fe4508",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-09-25T09:33:09Z",
                "author": {
                  "name": "Moritz Firsching",
                  "email": "firsching@google.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "ca3d4d51395d0ce57d306915943152297f16ffe4",
                "additions": 11,
                "deletions": 33,
                "committedDate": "2023-09-25T09:47:05Z",
                "author": {
                  "name": "Moritz Firsching",
                  "email": "firsching@google.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "d76b09902a49e0f935006e16db3fcd91a932f305",
                "additions": 35,
                "deletions": 11,
                "committedDate": "2023-09-25T09:55:49Z",
                "author": {
                  "name": "Moritz Firsching",
                  "email": "firsching@google.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "83b57b63436c40ca97b06fdd229dd424d1e42ee2",
                "additions": 12,
                "deletions": 0,
                "committedDate": "2023-09-25T10:03:11Z",
                "author": {
                  "name": "Moritz Firsching",
                  "email": "firsching@google.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "ad554b5650a8809fd0082e2f4a0b577b77086778",
                "additions": 5,
                "deletions": 5,
                "committedDate": "2023-09-25T11:18:09Z",
                "author": {
                  "name": "Moritz Firsching",
                  "email": "firsching@google.com"
                },
                "statusCheckRollup": null
              }
            }
          ]
        },
        "createdAt": "2023-09-24T12:54:04Z",
        "deletions": 1,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/NumberTheory/DirichletCharacter/Basic.lean",
              "additions": 86,
              "deletions": 1
            }
          ]
        },
        "headRefName": "mo271/conductor_props",
        "headRefOid": "ad554b5650a8809fd0082e2f4a0b577b77086778",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5bDst4",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
              "color": "06e039",
              "name": "ready-to-merge"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5iatBv",
              "body": "LGTM.",
              "state": "APPROVED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-09-29T16:56:08Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 7352,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": "APPROVED",
        "reviewRequests": {
          "nodes": [
            {
              "requestedReviewer": {
                "id": "MDQ6VXNlcjQyNTI2MA==",
                "login": "eric-wieser"
              }
            }
          ]
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5h0M0X",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-09-24T14:41:02Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5h0S0e",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mo271"
              },
              "submittedAt": "2023-09-24T17:34:35Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5h0WsW",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-09-24T20:03:39Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5h0WuX",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-09-24T20:04:55Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5h0Wvd",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-09-24T20:05:27Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5h0WwV",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-09-24T20:05:49Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5h0WxG",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-09-24T20:06:34Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5h0XLm",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-09-24T20:22:34Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5h0XTD",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-09-24T20:27:04Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5h2sRp",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-09-25T09:31:56Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5h2soI",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-09-25T09:32:44Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5h2378",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mo271"
              },
              "submittedAt": "2023-09-25T09:56:30Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5h24HW",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mo271"
              },
              "submittedAt": "2023-09-25T09:56:55Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5h3ON7",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-09-25T10:52:09Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5h3YGn",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mo271"
              },
              "submittedAt": "2023-09-25T11:18:31Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5iatBv",
              "body": "LGTM.",
              "state": "APPROVED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-09-29T16:56:08Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5PlYUD",
                    "body": "maybe use `.dvd` in place of `.1` to improve readability.",
                    "createdAt": "2023-09-24T14:41:02Z",
                    "author": {
                      "login": "MichaelStollBayreuth"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PldvA",
                    "body": "done",
                    "createdAt": "2023-09-24T17:34:35Z",
                    "author": {
                      "login": "mo271"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Plh5W",
                    "body": "I suggest to add the following API lemmas at suitable places.\r\n```lean\r\nlemma level_one (χ : DirichletCharacter R 1) : χ = 1 := by\r\n  ext\r\n  simp [units_eq_one]\r\n\r\nlemma level_one' (hn : n = 1) : χ = 1 := by\r\n  subst hn\r\n  exact level_one _\r\n\r\ninstance : Subsingleton (DirichletCharacter R 1) := by\r\n  refine subsingleton_iff.mpr (fun χ χ' ↦ ?_)\r\n  simp [level_one]\r\n\r\nnoncomputable instance : Inhabited (DirichletCharacter R n) := ⟨1⟩\r\n\r\nnoncomputable instance : Unique (DirichletCharacter R 1) := Unique.mk' (DirichletCharacter R 1)\r\n\r\nlemma changeLevel_trivial {d : ℕ} (h : d ∣ n) :\r\n    changeLevel h (1 : DirichletCharacter R d) = 1 := by\r\n  simp [changeLevel]\r\n\r\nlemma factorsThrough_one_iff : FactorsThrough χ 1 ↔ χ = 1 := by\r\n  refine ⟨fun ⟨_, χ₀, hχ₀⟩ ↦ ?_,\r\n          fun h ↦ ⟨one_dvd n, 1, by rw [h, changeLevel_trivial]⟩⟩\r\n  rwa [level_one χ₀, changeLevel_trivial] at hχ₀\r\n```",
                    "createdAt": "2023-09-24T20:03:39Z",
                    "author": {
                      "login": "MichaelStollBayreuth"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PliZR",
                    "body": "Maybe we should discuss whether the trivial character should be referred to as `trivial` or as `one`.\r\nThe latter could potentially lead to confusion when level 1 is involved.",
                    "createdAt": "2023-09-24T20:22:33Z",
                    "author": {
                      "login": "MichaelStollBayreuth"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PnJt1",
                    "body": "I added this.\r\n\r\nNot sure if `trivial` or `one` or `1` would be best. Let's stick with `1` for now?",
                    "createdAt": "2023-09-25T09:56:30Z",
                    "author": {
                      "login": "mo271"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PnXmI",
                    "body": "What I meant was in names of lemmas, i.e., `changeLevel_trivial` vs. `changeLevel_one`. Writing `1` in the *statements* is perfectly fine.\r\n\r\nI guess, right now, it should perhaps be `changeLevel_one` for consistency (or else `factorsThrough_trivial`, `conductor_trivial`, `eq_trivial_iff_conductor_eq_one` etc.). I'm to blame for using `trivial` here, so feel free to change it.",
                    "createdAt": "2023-09-25T10:52:08Z",
                    "author": {
                      "login": "MichaelStollBayreuth"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5Pndnv",
                    "body": "changed to `changeLevel_one`",
                    "createdAt": "2023-09-25T11:18:31Z",
                    "author": {
                      "login": "mo271"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Plh7X",
                    "body": "We can put one half of a later lemma before this lemma, to be used in the proof:\r\n```lean\r\nlemma conductor_ne_zero (hn : n ≠ 0) : conductor χ ≠ 0 :=\r\n  fun h ↦ hn <| Nat.eq_zero_of_zero_dvd <| h ▸ conductor_dvd_level _\r\n\r\nlemma conductor_one (hn : n ≠ 0) : conductor (1 : DirichletCharacter R n) = 1 := by\r\n  suffices : FactorsThrough (1 : DirichletCharacter R n) 1\r\n  · have h : conductor (1 : DirichletCharacter R n) ≤ 1 :=\r\n      Nat.sInf_le <| (mem_conductorSet_iff _).mpr this\r\n    exact Nat.le_antisymm h (Nat.pos_of_ne_zero <| conductor_ne_zero _ hn)\r\n  · exact (factorsThrough_one_iff _).mpr rfl\r\n```",
                    "createdAt": "2023-09-24T20:04:54Z",
                    "author": {
                      "login": "MichaelStollBayreuth"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5Pliim",
                    "body": "Also, note that I am using the formally weaker `n ≠ 0` instead of `0 < n` as an assumption.\r\nAlternatively, one could think of using the `NeZero` typeclass.",
                    "createdAt": "2023-09-24T20:27:03Z",
                    "author": {
                      "login": "MichaelStollBayreuth"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PnJ1R",
                    "body": "done",
                    "createdAt": "2023-09-25T09:56:55Z",
                    "author": {
                      "login": "mo271"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Plh9a",
                    "body": "```suggestion\r\nlemma eq_one_iff_conductor_eq_one (hn : n ≠ 0) : χ = 1 ↔ conductor χ = 1 := by\r\n  refine ⟨fun h ↦ h ▸ conductor_one hn, fun hχ ↦ ?_⟩\r\n  obtain ⟨h', χ₀, h⟩ := factorsThrough_conductor χ\r\n  exact (level_one' χ₀ hχ ▸ h).trans <| changeLevel_trivial h'\r\n```",
                    "createdAt": "2023-09-24T20:05:27Z",
                    "author": {
                      "login": "MichaelStollBayreuth"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Plh-S",
                    "body": "```suggestion\r\nlemma conductor_eq_zero_iff_level_eq_zero : conductor χ = 0 ↔ n = 0 := by\r\n  refine ⟨(conductor_ne_zero χ).mtr, ?_⟩\r\n  rintro rfl\r\n  exact Nat.sInf_eq_zero.mpr <| Or.inl <| level_mem_conductorSet χ\r\n```",
                    "createdAt": "2023-09-24T20:05:49Z",
                    "author": {
                      "login": "MichaelStollBayreuth"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Plh-6",
                    "body": "```suggestion\r\nlemma isPritive_one_level_zero : isPrimitive (1 : DirichletCharacter R 0) :=\r\n  conductor_eq_zero_iff_level_eq_zero.mpr rfl\r\n```",
                    "createdAt": "2023-09-24T20:06:34Z",
                    "author": {
                      "login": "MichaelStollBayreuth"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5PnCLx",
                    "body": "The naming convention is\r\n\r\n```suggestion\r\nlemma factorsThrough_conductor : FactorsThrough χ (conductor χ) := conductor_mem_conductorSet χ\r\n```",
                    "createdAt": "2023-09-25T09:31:55Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5PnCao",
                    "body": "\r\n```suggestion\r\nlemma isPrimitive_def : isPrimitive χ ↔ conductor χ = n := Iff.rfl\r\n```",
                    "createdAt": "2023-09-25T09:32:44Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjM0OTE2Mjc=",
              "login": "mo271"
            },
            {
              "id": "U_kgDOBfNrCg",
              "login": "MichaelStollBayreuth"
            },
            {
              "id": "MDQ6VXNlcjMyNDkwNTMy",
              "login": "riccardobrasca"
            },
            {
              "id": "MDQ6VXNlcjQyNTI2MA==",
              "login": "eric-wieser"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": null,
        "title": "[Merged by Bors] - feat: properties of the conductor",
        "updatedAt": "2023-10-23T09:44:55Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/7352",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "d28b70b09b3891448410845e0815f5d6d8758d85"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5nRNb4",
              "createdAt": "2023-09-24T12:56:38Z",
              "body": "adding @MichaelStollBayreuth as reviewer, because of the help with this file in past...",
              "author": {
                "login": "mo271"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "ReviewRequestedEvent",
              "id": "RRE_lADOFcwZ1c5x27eszwAAAAJvLZDj",
              "createdAt": "2023-09-24T12:56:46Z",
              "requestedReviewer": {
                "id": "U_kgDOBfNrCg",
                "login": "MichaelStollBayreuth"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5x27eszwAAAAJvLa0B",
              "createdAt": "2023-09-24T13:02:09Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5x27eszwAAAAJvLa0F",
              "createdAt": "2023-09-24T13:02:09Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5x27eszwAAAAJvLfaj",
              "createdAt": "2023-09-24T13:15:07Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5h0M0X",
              "createdAt": "2023-09-24T14:41:02Z",
              "body": "",
              "author": {
                "login": "MichaelStollBayreuth"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "8c04bb284cae64d4d2a79b0243586da37267b527"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5nRdVQ",
              "createdAt": "2023-09-24T17:48:45Z",
              "body": "I'm thinking of adding some API, but need to play around a bit.",
              "author": {
                "login": "MichaelStollBayreuth"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5h0WsW",
              "createdAt": "2023-09-24T20:03:38Z",
              "body": "",
              "author": {
                "login": "MichaelStollBayreuth"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5h0WuX",
              "createdAt": "2023-09-24T20:04:54Z",
              "body": "",
              "author": {
                "login": "MichaelStollBayreuth"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5h0Wvd",
              "createdAt": "2023-09-24T20:05:27Z",
              "body": "",
              "author": {
                "login": "MichaelStollBayreuth"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5h0WwV",
              "createdAt": "2023-09-24T20:05:49Z",
              "body": "",
              "author": {
                "login": "MichaelStollBayreuth"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5h0WxG",
              "createdAt": "2023-09-24T20:06:33Z",
              "body": "",
              "author": {
                "login": "MichaelStollBayreuth"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5nRkeB",
              "createdAt": "2023-09-24T20:11:31Z",
              "body": "If we had\r\n```lean\r\nlemma unitsMap_surjective {n m : ℕ} (h : n ∣ m) (hm : m ≠ 0) : Function.Surjective (unitsMap h) := sorry\r\n```\r\n(see [this Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Surjectivity.20of.20.28ZMod.20m.29.CB.A3.20.E2.86.92*.20.28ZMod.20n.29.CB.A3/near/392858973)) then we could add\r\n```lean\r\nlemma changeLevel_injective {d : ℕ} (h : d ∣ n) (hn : n ≠ 0) :\r\n    Function.Injective (changeLevel (R := R) h) := by\r\n  intro χ χ' H\r\n  ext a\r\n  obtain ⟨b, hb⟩ := ZMod.unitsMap_surjective h hn a\r\n  apply_fun (· b) at H\r\n  simp only [Units.isUnit, changeLevel_eq_cast_of_dvd _ h] at H \r\n  rwa [← hb]\r\n\r\nlemma changeLevel_trivial_iff {d : ℕ} {χ : DirichletCharacter R n} {χ' : DirichletCharacter R d}\r\n    (hdn : d ∣ n) (hn : n ≠ 0) (h : χ = changeLevel hdn χ') : χ = 1 ↔ χ' = 1 :=\r\n  ⟨fun H ↦ (changeLevel_injective hdn hn <| (H.symm ▸ changeLevel_trivial hdn).trans h).symm,\r\n   fun H ↦ h ▸ H ▸ changeLevel_trivial hdn⟩\r\n```\r\n",
              "author": {
                "login": "MichaelStollBayreuth"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5h2sRp",
              "createdAt": "2023-09-25T09:31:55Z",
              "body": "",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5h2soI",
              "createdAt": "2023-09-25T09:32:44Z",
              "body": "",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "262bec07b073734d3c2d194dd5651d4570fe4508"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "ca3d4d51395d0ce57d306915943152297f16ffe4"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "d76b09902a49e0f935006e16db3fcd91a932f305"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "83b57b63436c40ca97b06fdd229dd424d1e42ee2"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5nUN88",
              "createdAt": "2023-09-25T10:03:40Z",
              "body": "> If we had\r\n> \r\n> ```lean\r\n> lemma unitsMap_surjective {n m : ℕ} (h : n ∣ m) (hm : m ≠ 0) : Function.Surjective (unitsMap h) := sorry\r\n> ```\r\n> \r\n> (see [this Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Surjectivity.20of.20.28ZMod.20m.29.CB.A3.20.E2.86.92*.20.28ZMod.20n.29.CB.A3/near/392858973)) then we could add\r\n\r\nI added a TODO for this",
              "author": {
                "login": "mo271"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "ad554b5650a8809fd0082e2f4a0b577b77086778"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5iatBv",
              "createdAt": "2023-09-29T16:56:08Z",
              "body": "LGTM.",
              "author": {
                "login": "MichaelStollBayreuth"
              }
            },
            {
              "__typename": "ReviewRequestedEvent",
              "id": "RRE_lADOFcwZ1c5x27eszwAAAAJ3FZvW",
              "createdAt": "2023-10-09T07:57:01Z",
              "requestedReviewer": {
                "id": "MDQ6VXNlcjQyNTI2MA==",
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5pyL5E",
              "createdAt": "2023-10-23T09:15:40Z",
              "body": "Thanks!\r\n\r\nbors merge",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5x27eszwAAAAKACIIm",
              "createdAt": "2023-10-23T09:15:56Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
                "name": "ready-to-merge"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5x27eszwAAAAKACILe",
              "createdAt": "2023-10-23T09:15:57Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5pyYZS",
              "createdAt": "2023-10-23T09:44:50Z",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6611210509/job/17954644349)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6611210509/job/17954644072)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6611210509/job/17954644817)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c5x27eszwAAAAKADY1x",
              "createdAt": "2023-10-23T09:44:52Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c5x27eszwAAAAKADY_I",
              "createdAt": "2023-10-23T09:44:55Z"
            }
          ]
        }
      }
    }
  }
}
