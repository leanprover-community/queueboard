{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 184,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "Multramate"
        },
        "baseRefName": "master",
        "body": "---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n- [x] depends on: #6703 \r\n- [x] depends on: #13356 \r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 2,
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c6AhVy2",
              "body": "### PR summary\n\n#### Import changes\n\nDependency changes\n\n| File | Base Count | Head Count | Change |\n| --- | --- | --- | --- |\n| Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic | 1005 | 1317 | +312 (+31.04%) |\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ Affine.CoordinateRing.mk_Î¨_sq`\n`+ Affine.CoordinateRing.mk_Ï†`\n`+ Affine.CoordinateRing.mk_Ïˆ`\n`+ Affine.CoordinateRing.mk_Ïˆâ‚‚_sq`\n`+ C_Î¨â‚‚Sq`\n`+ baseChange_preÎ¨`\n`+ baseChange_preÎ¨'`\n`+ baseChange_preÎ¨â‚„`\n`+ baseChange_Î¦`\n`+ baseChange_Î¨`\n`+ baseChange_Î¨Sq`\n`+ baseChange_Î¨â‚‚Sq`\n`+ baseChange_Î¨â‚ƒ`\n`+ baseChange_Ï†`\n`+ baseChange_Ïˆ`\n`+ baseChange_Ïˆâ‚‚`\n`+ map_normEDS`\n`+ map_preNormEDS`\n`+ map_preNormEDS'`\n`+ map_preÎ¨`\n`+ map_preÎ¨'`\n`+ map_preÎ¨â‚„`\n`+ map_Î¦`\n`+ map_Î¨`\n`+ map_Î¨Sq`\n`+ map_Î¨â‚‚Sq`\n`+ map_Î¨â‚ƒ`\n`+ map_Ï†`\n`+ map_Ïˆ`\n`+ map_Ïˆâ‚‚`\n`+ Ïˆâ‚‚_sq`\n`- C_Î¨â‚‚Sq_eq`\n`- as`\n`- in`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/no_lost_declarations.sh short <optional_commit>\n\n## more verbose report:\n./scripts/no_lost_declarations.sh <optional_commit>\n```\n</details>\n\n</details>",
              "createdAt": "2024-06-08T23:23:13Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6AjoKe",
              "body": "This PR/issue depends on:\n* ~~leanprover-community/mathlib4#6703~~\n* ~~leanprover-community/mathlib4#13356~~\nBy **[Dependent Issues](https://github.com/z0al/dependent-issues)** (ðŸ¤–). Happy coding!\n<!-- By Dependent Issues (Action) - DO NOT REMOVE -->",
              "createdAt": "2024-06-09T22:46:58Z",
              "author": {
                "login": "leanprover-community-mathlib4-bot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6AqE2n",
              "body": "ðŸš€ Pull request has been placed on the maintainer queue by alreadydone.",
              "createdAt": "2024-06-10T14:23:53Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6A2eS4",
              "body": "ðŸš€ Pull request has been placed on the maintainer queue by alreadydone.",
              "createdAt": "2024-06-11T23:24:50Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6A4zfa",
              "body": "Does it make sense to put this in a new file? Because the current import adds 300 new transitive imports. Or do you think that everything importing `.Basic` will also want access to the new results from this PR anyways?",
              "createdAt": "2024-06-12T08:07:59Z",
              "author": {
                "login": "jcommelin"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6A6OLe",
              "body": "> Does it make sense to put this in a new file? Because the current import adds 300 new transitive imports. Or do you think that everything importing `.Basic` will also want access to the new results from this PR anyways?\n\nVery understandable. I do think that users of \\Psi and \\Phi should have access to their equivalence with \\psi and \\phi in the coordinate ring, because that's the original motivation for having separate definitions. This only requires the definition of the coordinate ring and some basic properties, hence only requires importing `AdjoinRoot` and `Norm`. Unfortunately the file defining the coordinate ring is interlaced with the proof of the group law that imports `ClassGroup`, which presumably is the majority of the 300+ transitive imports. How about this: let's merge this PR, and I'll open another PR immediately that splits off the stuff on the coordinate ring into another file, and this file can just import that new file.",
              "createdAt": "2024-06-12T11:13:34Z",
              "author": {
                "login": "Multramate"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6A8iO3",
              "body": "The central result about division polynomials is the [formula](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Defining.20n-division.20polynomials/near/440803664) for zsmul on the group of rational points in terms of division polynomials, and the group structure already require `CoordinateRing` (`AdjoinRoot`), `ClassGroup` and `Norm`,  so I don't think it makes much sense to avoid them.",
              "createdAt": "2024-06-12T15:39:32Z",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6A9EDC",
              "body": "Yes, but `ZSMul.lean` or `Group.lean` will be a different file from `Basic.lean`. Maybe there are uses of division polynomials without needing the fact that the points form a group, e.g. if you just need an explicit duplication/triplication formula?\r\n\r\nI think it's probably good to split off a file just for the coordinate ring anyway - this can include all the API for the universal elliptic curve, the evaluation and specialisation maps, and whatever else that are universal constructions.\r\n\r\nNow that I think of it, we don't actually need the two definitions to agree until we actually compute the structure of the n-torsion. Maybe I'll leave the lemmas here for now, and the move it out eventually once I get to that.",
              "createdAt": "2024-06-12T16:46:53Z",
              "author": {
                "login": "Multramate"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6A9UuM",
              "body": "> just need an explicit duplication/triplication formula\r\n\r\nI think my proof of the duplication formula (in terms of division polynomials) doesn't use the group axioms (can be extracted from [these two lemmas](https://github.com/leanprover-community/mathlib4/blob/bd3b187a0c6d5cf7fadef7ff51f86faa16a639c2/Mathlib/AlgebraicGeometry/EllipticCurve/DivisionPolynomial.lean#L358-L377)), but the triplication formula (which is not established until the [final theorem](https://github.com/leanprover-community/mathlib4/blob/bd3b187a0c6d5cf7fadef7ff51f86faa16a639c2/Mathlib/AlgebraicGeometry/EllipticCurve/DivisionPolynomial.lean#L647-L648)) uses the group structure.",
              "createdAt": "2024-06-12T17:24:58Z",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6A_e49",
              "body": "It seems our consensus is to merge this PR first, so let's do that and worry about splitting later? If you put your proposed splitting in some branch I can check whether it's reasonable ...",
              "createdAt": "2024-06-13T00:18:38Z",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6BQB7v",
              "body": "In fact, I think it's pretty rare that people would want to talk about elliptic curves without knowing the rational points form a group. Do you have such examples in mind?",
              "createdAt": "2024-06-14T17:25:00Z",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6BS_bK",
              "body": "I tend to agree that the split can be done later, if at all",
              "createdAt": "2024-06-15T09:20:53Z",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6BYwMx",
              "body": "> In fact, I think it's pretty rare that people would want to talk about elliptic curves without knowing the rational points form a group. Do you have such examples in mind?\r\n\r\nNot specifically the theory of division polynomials, but my primary example would be moduli problems (e.g. the moduli stack of genus one curves, or just modular curves X/X_0/X_1), where the group law is not relevant? Obviously this is very far away and proving any useful theorems about moduli spaces would require some form of Riemann-Roch, in which case the group law is pretty much automatic, but maybe there's a nice description of the Weierstrass coefficients in terms of the moduli space.\r\n\r\nAnother argument for avoiding the import could be if the user prefers to write a different group law (e.g. the one induced by complex uniformisation), which might have properties easier to work with, but that's probably a weak argument.",
              "createdAt": "2024-06-15T20:56:14Z",
              "author": {
                "login": "Multramate"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6BZCel",
              "body": "Well, the modular curves seem pretty closely connected to the group structure:\r\n<img width=\"1182\" alt=\"image\" src=\"https://github.com/leanprover-community/mathlib4/assets/3064145/757516fa-5b10-49a8-8cf4-2f20b4e707a7\">\r\nYou might be able to define modular curves through their own equations but as soon as you connect them to elliptic curves you'd be talking about torsion points.",
              "createdAt": "2024-06-15T21:06:51Z",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6CcYbE",
              "body": "Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/9659538611/job/26643146222)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/9659538611/job/26643146554)",
              "createdAt": "2024-06-25T09:56:57Z",
              "author": {
                "login": "mathlib-bors"
              }
            }
          ]
        },
        "closed": true,
        "closedAt": "2024-06-25T09:56:58Z",
        "createdAt": "2024-05-30T22:34:09Z",
        "deletions": 44,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/AlgebraicGeometry/EllipticCurve/DivisionPolynomial/Basic.lean",
              "additions": 157,
              "deletions": 34
            },
            {
              "path": "Mathlib/NumberTheory/EllipticDivisibilitySequence.lean",
              "additions": 27,
              "deletions": 10
            }
          ]
        },
        "headRefName": "DivisionPolynomial.Map",
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5xEA3V",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJLNA",
              "color": "33DBEC",
              "name": "t-number-theory"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJgtQ",
              "color": "33DBEC",
              "name": "t-algebraic-geometry"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABh1mAHA",
              "color": "6BEB7E",
              "name": "maintainer-merge"
            }
          ]
        },
        "number": 13399,
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c58kWrr",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2024-05-31T05:07:54Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c58kX1X",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2024-05-31T05:13:42Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c58rHDF",
              "state": "COMMENTED",
              "author": {
                "login": "Multramate"
              },
              "submittedAt": "2024-05-31T20:35:29Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c58rHbA",
              "state": "COMMENTED",
              "author": {
                "login": "Multramate"
              },
              "submittedAt": "2024-05-31T20:36:49Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c59fvNu",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2024-06-07T22:39:23Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c59jvW5",
              "state": "APPROVED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2024-06-10T03:23:44Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c59m1qG",
              "state": "COMMENTED",
              "author": {
                "login": "Multramate"
              },
              "submittedAt": "2024-06-10T09:53:17Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c59pOav",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2024-06-10T14:23:42Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c59rkkt",
              "state": "CHANGES_REQUESTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2024-06-10T19:12:54Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c59ropl",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2024-06-10T19:22:37Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c59rpiB",
              "state": "COMMENTED",
              "author": {
                "login": "Multramate"
              },
              "submittedAt": "2024-06-10T19:25:03Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c59r6C5",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2024-06-10T20:11:10Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c59sHD0",
              "state": "APPROVED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2024-06-10T20:42:06Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5_bpNB",
              "state": "APPROVED",
              "author": {
                "login": "Vierkantor"
              },
              "submittedAt": "2024-06-25T08:59:55Z"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGNAz8cw",
                "name": "Add ready-to-merge label",
                "conclusion": "FAILURE",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9659513648/job/26643070067"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGEGG-yQ",
                "name": "Add ready-to-merge label",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9455262741/job/26044645065"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGEGG-tA",
                "name": "Ping maintainers on Zulip",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9455262739/job/26044645044"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGNAz7GA",
                "name": "Ping maintainers on Zulip",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9659513637/job/26643069720"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGNDVoPw",
                "name": "build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9660345957/job/26645719103"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGEFJHSQ",
                "name": "label-and-report-new-contributor",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9454943784/job/26043631433"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGEFJGlw",
                "name": "build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9454943792/job/26043631255"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGEFJELA",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9454943633/job/26043630636"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGEFJELw",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9454943644/job/26043630639"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGEFJHgA",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9454943787/job/26043631488"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGEGG_lg",
                "name": "Add delegated label",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9455262741/job/26044645270"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGNAz7Ng",
                "name": "Add delegated label",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9659513648/job/26643069750"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGEFJGMQ",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9454943633/job/26043631153"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGEFJHaw",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9454943644/job/26043631467"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGEFJGew",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9454943787/job/26043631227"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGEFJHcw",
                "name": "check workflows (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9454943633/job/26043631475"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGEFJGRA",
                "name": "check workflows",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9454943644/job/26043631172"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGEFJFNg",
                "name": "summarize_declarations",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9454943633/job/26043630902"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGEFJISQ",
                "name": "summarize_declarations",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9454943644/job/26043631689"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGEFJIaA",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9454943633/job/26043631720"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGEFJFNw",
                "name": "Build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9454943644/job/26043630903"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGEFJJRQ",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9454943633/job/26043631941"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGEFqgww",
                "name": "Post-CI job",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9454943644/job/26044178627"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGEFJciw",
                "name": "New Contributor Check",
                "conclusion": "NEUTRAL",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/26043636875"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGEFKYBg",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=13399&login=leanprover-community&repository=mathlib4"
              },
              {
                "__typename": "StatusContext",
                "id": "SC_kwDOFcwZ1c8AAAAG8_34_g",
                "context": "bors",
                "state": "SUCCESS",
                "targetUrl": "https://mathlib-bors-ca18eefec4cb.herokuapp.com/batches/3958",
                "description": "Build succeeded"
              }
            ]
          }
        },
        "title": "[Merged by Bors] - feat(AlgebraicGeometry/EllipticCurve/DivisionPolynomial/Basic): add maps for division polynomials",
        "updatedAt": "2024-06-25T09:57:02Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/13399"
      }
    }
  }
}
