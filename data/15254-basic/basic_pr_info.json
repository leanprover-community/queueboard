{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 3685,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "yuma-mizuno"
        },
        "baseRefName": "master",
        "body": "We redefine algebras internal to monoidal categories, which were defined by full-bundled structures, in terms of semi-bundled type classes. The original full-bundled structure `X` is renamed to `X_Cat`.\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nFor details on the \"pull request lifecycle\" in mathlib, please see:\r\nhttps://leanprover-community.github.io/contribute/index.html\r\n\r\nIn particular, note that most reviewers will only notice your PR\r\nif it passes the continuous integration checks.\r\nPlease ask for help on https://leanprover.zulipchat.com if needed.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nIf you are moving or deleting declarations, please include these lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nMoves:\r\n- Vector.* -> Mathlib.Vector.*\r\n- ...\r\n\r\nDeletions:\r\n- Nat.bit1_add_bit1\r\n- ...\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 11,
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c6GaHEA",
              "body": "### PR summary [cd5a8294ca](https://github.com/leanprover-community/mathlib4/pull/15254/commits/cd5a8294ca1ed3f74470b3d99d43c2b8998426f4)\n\n<details><summary>\n\n#### Import changes for modified files\n\n</summary>\n\nNo significant changes to the import graph\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n| `Mathlib.CategoryTheory.Monoidal.mwe`|412|\n| `Mathlib.CategoryTheory.Monoidal.Mon_Class`|457|\n| `Mathlib.CategoryTheory.Monoidal.Mod_Class` `Mathlib.CategoryTheory.Monoidal.CommMon_Class`|458|\n| `Mathlib.CategoryTheory.Monoidal.Comon_Class`|460|\n| `Mathlib.CategoryTheory.Monoidal.Bimon_Classcopy` `Mathlib.CategoryTheory.Monoidal.Bimon_Class`|461|\n| `Mathlib.CategoryTheory.Monoidal.Bimod_Class`|464|\n| `Mathlib.CategoryTheory.Monoidal.Internal.ModuleClass`|1064|\n\n</details>\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ Algebra_of_Mon_Class`\n`+ Bimod_Cat`\n`+ Bimon_ClassHom`\n`+ Bimon_ClassHom.comp`\n`+ Bimon_ClassHom.id`\n`+ Bimon_ClassHom.mk'`\n`+ Bimon_ClassIso`\n`+ Bimon_ClassIso.mk'`\n`+ Bimon_ClassIso.symm`\n`+ Bimon_ClassIso.toBimon_ClassHom`\n`+ CommMon_Cat`\n`+ CommMon_Cat.toMon_Cat`\n`+ CommMon_Class`\n`+ ComonCatMonCatToComonCat`\n`+ Comon_Cat`\n`+ Comon_ClassEquivMon_ClassOpOp`\n`+ Comon_ClassHom`\n`+ Comon_ClassHom.comp`\n`+ Comon_ClassHom.id`\n`+ Comon_ClassIso`\n`+ Comon_ClassIso.symm`\n`+ Comon_ClassToMon_ClassOpOp`\n`+ Comon_ClassToMon_ClassOpOp_obj'`\n`+ Comon_ClassXX`\n`+ Hom.id`\n`+ Iso`\n`+ Iso.hom`\n`+ Iso.inv`\n`+ Iso.left_act_inv`\n`+ Iso.right_act_inv`\n`+ MiddleAssocClass`\n`+ Mod_Cat`\n`+ Mod_Class`\n`+ MonCatComonCatToMonCat`\n`+ Mon_Cat`\n`+ Mon_ClassHom`\n`+ Mon_ClassHom.comp`\n`+ Mon_ClassHom.id`\n`+ Mon_ClassIso`\n`+ Mon_ClassIso.symm`\n`+ Mon_ClassOpOpToComon_Class`\n`+ Mon_ClassOpOpToComon_Classobj'`\n`+ Mon_tensor_mul_assoc`\n`+ Mon_tensor_mul_one`\n`+ Mon_tensor_one_mul`\n`+ RightMod_Class`\n`+ Ring_of_Mon_Class`\n`+ actLeft`\n`+ actRight`\n`+ actRight_one'`\n`+ algebraMap`\n`+ assoc_flip`\n`+ associator`\n`+ associatorBimod_Class`\n`+ commMonToLaxBraided`\n`+ comp`\n`+ comp'`\n`+ comp_hom`\n`+ comp_whiskerLeft_bimod`\n`+ comp_whiskerRight_bimod`\n`+ comul_assoc_flip`\n`+ comul_counit_hom`\n`+ counit_comul_hom`\n`+ equivComonCatMonCat`\n`+ equivComonCatMonCatCounitIsoApp`\n`+ equivComonCatMonCatUnitIsoApp`\n`+ equivLaxBraidedFunctorPUnit`\n`+ equivLaxMonoidalFunctorPUnit`\n`+ equivMonCatComonCatCounitIsoAppX`\n`+ equivMonCatComonCatUnitIsoAppX`\n`+ extracted`\n`+ forget‚ÇÇMon_Cat`\n`+ forget‚ÇÇ_Mon_Classmap_hom`\n`+ forget‚ÇÇ_Mon_Classobj_mul`\n`+ forget‚ÇÇ_Mon_Classobj_one`\n`+ functor`\n`+ homAux`\n`+ id'`\n`+ id_hom`\n`+ id_tensor_œÄ_preserves_coequalizer_inv_colimMap_desc`\n`+ id_tensor_œÄ_preserves_coequalizer_inv_desc`\n`+ id_whiskerLeft_bimod`\n`+ id_whiskerRight_bimod`\n`+ instance (F : LaxBraidedFunctor C D) {A : C} [CommMon_Class A] : CommMon_Class (F.obj A)`\n`+ instance (F : LaxMonoidalFunctor C D) {A : C} [Mon_Class A] : Mon_Class (F.obj A)`\n`+ instance (F : OplaxMonoidalFunctor C D) {A : C} [Comon_Class A] : Comon_Class (F.obj A)`\n`+ instance (M : Bimon_Cat C) : Comon_Class ((toMonCat C).obj M)`\n`+ instance (M : Bimon_Cat C) : Mon_Class ((toComonCat C).obj M)`\n`+ instance (M : C) [Mon_Class M] : Inhabited (Mon_ClassHom M M)`\n`+ instance (M : Comon_Cat (Mon_Cat C)) : Bimon_Class M.X.X`\n`+ instance (M : Mon_Cat C) [Comon_Class M] : Comon_Class M.X`\n`+ instance : (forget C).ReflectsIsomorphisms`\n`+ instance : (forget‚ÇÇMon_Cat C).Faithful := InducedCategory.faithful _`\n`+ instance : (forget‚ÇÇMon_Cat C).Full := InducedCategory.full _`\n`+ instance : Category (Bimod_Cat A B)`\n`+ instance : Category (Bimon_Cat C)`\n`+ instance : Category (Bimon_Cat C) := inferInstanceAs (Category (Comon_Cat (Mon_Cat C)))`\n`+ instance : Category (CommMon_Cat C)`\n`+ instance : Category (Mod_Cat A)`\n`+ instance : Category.{v‚ÇÅ} (Comon_Cat C)`\n`+ instance : Category.{v‚ÇÅ} (Mon_Cat C)`\n`+ instance : HasInitial (CommMon_Cat C)`\n`+ instance : HasInitial (Mon_Cat C)`\n`+ instance : Inhabited (CommMon_Class (ùüô_ C))`\n`+ instance : Inhabited (Comon_Cat C)`\n`+ instance : Inhabited (Comon_Class (ùüô_ C))`\n`+ instance : Inhabited (MiddleAssocClass A A A)`\n`+ instance : Inhabited (Mod_Class A A)`\n`+ instance : Inhabited (Mon_Cat C)`\n`+ instance : Inhabited (Mon_Class (ùüô_ C))`\n`+ instance : MiddleAssocClass R T (P ‚äó[S] Q)`\n`+ instance : Mod_Class R (P ‚äó[S] Q)`\n`+ instance : RightMod_Class T (P ‚äó[S] Q)`\n`+ instance : SymmetricCategory (Mon_Cat C)`\n`+ instance [BraidedCategory C] : MonoidalCategory (Comon_Cat C)`\n`+ instance {A B : Comon_Cat C} (f : A ‚ü∂ B) [e : IsIso ((forget C).map f)] :`\n`+ instance {A B : C} [Comon_Class A] [Comon_Class B] (f : Comon_ClassHom A B)`\n`+ instance {A B : C} [Mon_Class A] [Mon_Class B] (f : Mon_ClassHom A B)`\n`+ instance {A B : Mon_Cat C} (f : A ‚ü∂ B) [e : IsIso ((forget C).map f)] :`\n`+ instance {M N : C} [Mon_Class M] [Mon_Class N] : Mon_Class (M ‚äó N : C)`\n`+ invAux`\n`+ inverse`\n`+ inverseObj`\n`+ isBimon_Class`\n`+ isoOfIso`\n`+ laxBraidedToCommMon`\n`+ laxMonoidalToMon`\n`+ leftUnitor`\n`+ leftUnitorBimod_Class`\n`+ left_assoc'`\n`+ mapCommMon_Cat`\n`+ mapCommMon_CatFunctor`\n`+ mapComonCat`\n`+ mapMonCat`\n`+ mapMonCatFunctor`\n`+ middle_assoc'`\n`+ mk`\n`+ mkHom'`\n`+ monBicategory`\n`+ monCatModuleEquivalenceAlgebra`\n`+ monCatModuleEquivalenceAlgebraForget`\n`+ monMonoidal`\n`+ monMonoidalStruct`\n`+ monToLaxMonoidal`\n`+ monToLaxMonoidalObj`\n`+ mul_assoc_flip`\n`+ mul_associator`\n`+ mul_braiding`\n`+ mul_comm`\n`+ mul_leftUnitor`\n`+ mul_one_hom`\n`+ mul_rightUnitor`\n`+ ofComonCatMonCat`\n`+ ofHom`\n`+ ofIso`\n`+ ofMonCatComonCatobj`\n`+ ofTensor`\n`+ ofTensor_comul`\n`+ ofTensor_counit`\n`+ of_X`\n`+ one_act_left'`\n`+ one_associator`\n`+ one_braiding`\n`+ one_leftUnitor`\n`+ one_mul_hom`\n`+ one_rightUnitor`\n`+ pentagon_bimod`\n`+ rightUnitor`\n`+ rightUnitorBimod_Class`\n`+ right_assoc'`\n`+ tensor`\n`+ tensorHom`\n`+ tensorObj_X`\n`+ toComonCatMonCat`\n`+ toMonCatComonCatObj`\n`+ toMonCatComonCatObjXX`\n`+ triangle_bimod`\n`+ whiskerLeft_comp_bimod`\n`+ whiskerLeft_id_bimod`\n`+ whiskerLeft_œÄ_actLeft`\n`+ whiskerRight_comp_bimod`\n`+ whiskerRight_id_bimod`\n`+ whisker_assoc_bimod`\n`+ whisker_exchange_bimod`\n`+ œÄ_tensor_id_actRight`\n`+ œÄ_tensor_id_preserves_coequalizer_inv_colimMap_desc`\n`+ œÄ_tensor_id_preserves_coequalizer_inv_desc`\n`++ Bimon_Cat`\n`++ Bimon_Class`\n`++ Comon_Class`\n`++ Hom.comp`\n`++ Mon_Class`\n`++ comap`\n`++ counitIso`\n`++ equivMonCatComonCat`\n`++ equivMonCatComonCatCounitIsoApp`\n`++ equivMonCatComonCatUnitIsoApp`\n`++ ext`\n`++ ext'`\n`++ forgetMonoidal`\n`++ forgetMonoidal_toFunctor`\n`++ forgetMonoidal_Œµ`\n`++ forgetMonoidal_Œº`\n`++ forget_faithful`\n`++ id`\n`++ instance (M : C) [Bimon_Class M] : Comon_Class (Mon_Cat.mk M)`\n`++ instance (M : C) [Bimon_Class M] : Mon_Class (Comon_Cat.mk M)`\n`++ instance (M : Comon_Cat C) [Mon_Class M] : Mon_Class M.X`\n`++ instance (M : Mon_Cat (Comon_Cat C)) : Bimon_Class M.X.X`\n`++ instance : HasTerminal (Comon_Cat C)`\n`++ mk_X`\n`++ of`\n`++ ofMonCatComonCat`\n`++ toComonCat`\n`++ toComonCatMonCat_ofComonCatMonCat_X_X`\n`++ toComonCat_forget`\n`++ toMonCat`\n`++ toMonCatComonCat`\n`++ toMonCatComonCat_ofMonCatComonCat_X_X`\n`++ toMonCatforget`\n`++ uniqueHomFromTrivial`\n`++ uniqueHomToTrivial`\n`++ unitIso`\n`++ whiskerLeft`\n`++ whiskerRight`\n`+++ Hom`\n`+++ hom`\n`+++ hom_ext`\n`+++ hom_inv_id`\n`+++ hom_left_act_hom'`\n`+++ hom_right_act_hom'`\n`+++ inv`\n`+++ inv_hom_id`\n`+++ mkHom`\n`+++ mkHom_hom`\n`+++ mkIso`\n`+++ mkIso'`\n`+++ regular`\n`+++ trivial`\n`++++ homInhabited`\n`++++++ comp_hom'`\n`++++++ forget`\n`++++++ id_hom'`\n`- instance : BraidedCategory C·µí·µñ`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n</details>\n\n---\n\n<details><summary>Increase in tech debt: (relative, absolute) = (1.68, 0.27)</summary>\n\n|Current number|Change|Type|\n|-:|:-:|:-|\n|5120|24|porting notes|\n|15|1|skipAssignedInstances flags|\n|221|1|disabled simpNF lints|\n|1590|25|erw|\n|11|2|maxHeartBeats modifications|\n\nCurrent commit [cd5a8294ca](https://github.com/leanprover-community/mathlib4/commit/cd5a8294ca1ed3f74470b3d99d43c2b8998426f4)\nReference commit [b4ef11754f](https://github.com/leanprover-community/mathlib4/commit/b4ef11754f83859f04237acbd0c2375b8cb0e354)\n\nYou can run this locally as\n```\n./scripts/technical-debt-metrics.sh pr_summary\n```\n* The `relative` value is the weighted *sum* of the differences with weight given by the *inverse* of the current value of the statistic.\n* The `absolute` value is the `relative` value divided by the total sum of the inverses of the current values (i.e. the weighted *average* of the differences).\n</details>",
              "createdAt": "2024-07-29T05:44:32Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6gYbsU",
              "body": "I don't understand this PR. We already have `Mon_` the category and `Mon_Class` the typeclass. What more do you need?",
              "createdAt": "2025-02-28T14:17:41Z",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6gfscw",
              "body": "> I don't understand this PR. We already have `Mon_` the category and `Mon_Class` the typeclass. What more do you need?\r\n\r\n@YaelDillies  The purpose is to take the advantage of type classes not only for definitions but also for theorems.\r\nThis is parallel to the way many theorems in ring theory are formulated using `Ring` instead of `RingCat`.",
              "createdAt": "2025-03-02T10:24:02Z",
              "author": {
                "login": "yuma-mizuno"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6ggSyh",
              "body": "Then I would think the PR title is misleading. Mind renaming it? üôÇ",
              "createdAt": "2025-03-02T17:08:34Z",
              "author": {
                "login": "YaelDillies"
              }
            }
          ]
        },
        "closed": false,
        "closedAt": null,
        "createdAt": "2024-07-29T05:43:50Z",
        "deletions": 3,
        "files": {
          "nodes": [
            {
              "path": "Mathlib.lean",
              "additions": 9,
              "deletions": 0
            },
            {
              "path": "Mathlib/CategoryTheory/Monoidal/Bimod_Class.lean",
              "additions": 1119,
              "deletions": 0
            },
            {
              "path": "Mathlib/CategoryTheory/Monoidal/Bimon_Class copy.lean",
              "additions": 324,
              "deletions": 0
            },
            {
              "path": "Mathlib/CategoryTheory/Monoidal/Bimon_Class.lean",
              "additions": 341,
              "deletions": 0
            },
            {
              "path": "Mathlib/CategoryTheory/Monoidal/Braided/Opposite.lean",
              "additions": 3,
              "deletions": 3
            },
            {
              "path": "Mathlib/CategoryTheory/Monoidal/CommMon_Class.lean",
              "additions": 228,
              "deletions": 0
            },
            {
              "path": "Mathlib/CategoryTheory/Monoidal/Comon_Class.lean",
              "additions": 503,
              "deletions": 0
            },
            {
              "path": "Mathlib/CategoryTheory/Monoidal/Internal/ModuleClass.lean",
              "additions": 240,
              "deletions": 0
            },
            {
              "path": "Mathlib/CategoryTheory/Monoidal/Mod_Class.lean",
              "additions": 167,
              "deletions": 0
            },
            {
              "path": "Mathlib/CategoryTheory/Monoidal/Mon_Class.lean",
              "additions": 704,
              "deletions": 0
            },
            {
              "path": "Mathlib/CategoryTheory/Monoidal/mwe.lean",
              "additions": 47,
              "deletions": 0
            }
          ]
        },
        "headRefName": "ymizuno-Mon_Cat",
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c52smmj",
        "isCrossRepository": false,
        "isDraft": true,
        "labels": {
          "nodes": [
            {
              "id": "MDU6TGFiZWwzMjcxMjQ0NzU5",
              "color": "e899cd",
              "name": "WIP"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
              "color": "f99094",
              "name": "merge-conflict"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJTYQ",
              "color": "33dbec",
              "name": "t-category-theory"
            }
          ]
        },
        "number": 15254,
        "reviews": {
          "nodes": []
        },
        "state": "OPEN",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHs_sYxQ",
                "name": "Lint style",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11871615552/job/33084348613"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHs_sjKQ",
                "name": "Add topic label",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11871616681/job/33084351273"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHs_sYgA",
                "name": "label-and-report-new-contributor",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11871615550/job/33084348544"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHs_sYfw",
                "name": "build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11871615551/job/33084348543"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHs_sjNw",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11871616673/job/33084351287"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHs_sjPw",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11871616676/job/33084351295"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHs_skNQ",
                "name": "Lint style",
                "conclusion": "FAILURE",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11871616676/job/33084351541"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHs_skJg",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11871616673/job/33084351526"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHs_sYgQ",
                "name": "Check all files imported",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11871615552/job/33084348545"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHs_sjpQ",
                "name": "Build",
                "conclusion": "FAILURE",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11871616676/job/33084351397"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHs_sjkA",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11871616673/job/33084351376"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHs_skgw",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11871616673/job/33084351619"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHs_uCZg",
                "name": "Post-CI job",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11871616676/job/33084375654"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHs_sezA",
                "name": "New Contributor Check",
                "conclusion": "NEUTRAL",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/33084350156"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHs_sXhg",
                "name": ".github/dependabot.yml",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dependabot-api.githubapp.com"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHs_syxA",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=15254&login=leanprover-community&repository=mathlib4"
              }
            ]
          }
        },
        "title": "feat(CategoryTheory/Monoidal): replace `Mon_` lemmas with `Mon_Class` lemmas",
        "updatedAt": "2025-03-03T05:40:31Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/15254"
      }
    }
  }
}
