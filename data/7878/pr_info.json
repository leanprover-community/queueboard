{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 80,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "grunweg"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "Mirrors the corresponding proofs for connectedness.\r\n\r\nCo-authored-by: @ADedecker ",
        "changedFiles": 2,
        "closed": true,
        "closedAt": "2023-10-26T14:47:59Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5p5_0N",
              "body": "Removing easy label as this PR adds two simp lemmas (even though they're probably uncontroversial). Sorry for the churn.",
              "createdAt": "2023-10-24T09:03:54Z",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qEb5j",
              "body": "@ADedecker Wow! I didn't mean to nerd-snipe you - but now that you've suggested this, I have added it. I don't know how to add you as a co-author so git recognises this; feel free to force-push something/edit the top-level comment accordingly.\r\n\r\nI saw that the file already had the implicit variables you mentioned, hence went over the file and removed all superfluous `{X : Type*} {TopologicalSpace X}` (also so Y). Let me know if I should drop that commit/move to a different PR.",
              "createdAt": "2023-10-25T15:34:02Z",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qJ_rg",
              "body": "Don't worry for nerd-sniping, that was very fun! I've added my name to the PR description. This looks good to me, but obviously I'm not going to merge it myself, I'll ask on Zulip.",
              "createdAt": "2023-10-26T12:17:59Z",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qKGbx",
              "body": "Thanks :tada:\r\n\r\nbors merge",
              "createdAt": "2023-10-26T12:33:31Z",
              "author": {
                "login": "jcommelin"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qLDN5",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6654946484/job/18084057888)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6654946484/job/18084058537)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6654946484/job/18084058967)",
              "createdAt": "2023-10-26T14:47:58Z",
              "author": {
                "login": "bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "e70b66ba75a998bd0ea9eab0452f863d9044b134",
                "additions": 16,
                "deletions": 0,
                "committedDate": "2023-10-23T22:23:39Z",
                "author": {
                  "name": "Michael Rothgang",
                  "email": "rothgami@math.hu-berlin.de"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "58323830504b79ce98d4e13bb7599e010bf3792a",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-10-23T22:25:23Z",
                "author": {
                  "name": "Michael Rothgang",
                  "email": "rothgami@math.hu-berlin.de"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "1d86616789c01969bda4152b2e18d2903f4c7371",
                "additions": 35,
                "deletions": 3,
                "committedDate": "2023-10-25T15:24:02Z",
                "author": {
                  "name": "Michael Rothgang",
                  "email": "rothgami@math.hu-berlin.de"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "ca82d2e17cd61e912f30a742196a5a1d4c83e442",
                "additions": 34,
                "deletions": 37,
                "committedDate": "2023-10-25T15:29:28Z",
                "author": {
                  "name": "Michael Rothgang",
                  "email": "rothgami@math.hu-berlin.de"
                },
                "statusCheckRollup": null
              }
            }
          ]
        },
        "createdAt": "2023-10-23T22:25:51Z",
        "deletions": 35,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/Topology/Connected/PathConnected.lean",
              "additions": 78,
              "deletions": 35
            },
            {
              "path": "Mathlib/Topology/UnitInterval.lean",
              "additions": 2,
              "deletions": 0
            }
          ]
        },
        "headRefName": "MR-pathconn-homeo",
        "headRefOid": "ca82d2e17cd61e912f30a742196a5a1d4c83e442",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5dlMjA",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
              "color": "06e039",
              "name": "ready-to-merge"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJbOw",
              "color": "33DBEC",
              "name": "t-topology"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5lK9BT",
              "body": "LGTM!\r\n\r\nIf you're interested, I made a `Inducing` version. You'd need to add:\r\n- in `UnitInterval.lean`: \r\n```lean\r\ninstance : NeZero (1 : I) := ⟨fun h ↦ one_ne_zero <| congrArg Subtype.val h⟩\r\n```\r\n- in `PathConnected.lean`:\r\n```lean\r\ntheorem Specializes.joinedIn (h : x ⤳ y) (hx : x ∈ F) (hy : y ∈ F) : JoinedIn F x y := by\r\n  refine ⟨⟨⟨Set.piecewise {1} (const I y) (const I x), ?_⟩, by simp, by simp⟩, fun t ↦ ?_⟩\r\n  · simp only [const, continuous_def, piecewise_preimage]\r\n    intro U hU\r\n    by_cases hy' : y ∈ U\r\n    · simp [hy', h.mem_open hU hy']\r\n    · by_cases hx' : x ∈ U\r\n      · simpa [hx', hy'] using isOpen_univ.sdiff isClosed_singleton\r\n      · simp [hx', hy']\r\n  · simp only [Path.coe_mk_mk, piecewise]\r\n    split_ifs <;> assumption\r\n\r\ntheorem Inseparable.joinedIn (h : Inseparable x y) (hx : x ∈ F) (hy : y ∈ F) : JoinedIn F x y :=\r\n  h.specializes.joinedIn hx hy\r\n```\r\nAnd then:\r\n```lean\r\nnonrec theorem Inducing.isPathConnected_iff {Y : Type*} [TopologicalSpace Y]\r\n    {f : X → Y} (hf : Inducing f) :\r\n    IsPathConnected F ↔ IsPathConnected (f '' F) := by\r\n  refine ⟨fun hF ↦ hF.image hf.continuous, fun hF ↦ ?_⟩\r\n  simp? [isPathConnected_iff] at hF ⊢ says\r\n    simp only [isPathConnected_iff, nonempty_image_iff, mem_image, forall_exists_index,\r\n      and_imp, forall_apply_eq_imp_iff₂] at hF ⊢\r\n  refine ⟨hF.1, fun x hx y hy ↦ ?_⟩\r\n  rcases hF.2 x hx y hy with ⟨γ, hγ⟩\r\n  choose γ' hγ' hγγ' using hγ\r\n  have key₁ : Inseparable x (γ' 0) := by rw [← hf.inseparable_iff, hγγ' 0, γ.source]\r\n  have key₂ : Inseparable (γ' 1) y := by rw [← hf.inseparable_iff, hγγ' 1, γ.target]\r\n  refine key₁.joinedIn hx (hγ' 0) |>.trans ⟨⟨⟨γ', ?_⟩, rfl, rfl⟩, hγ'⟩ |>.trans\r\n    (key₂.joinedIn (hγ' 1) hy)\r\n  simpa [hf.continuous_iff] using γ.continuous.congr fun t ↦ (hγγ' t).symm\r\n```\r\n\r\nIf you prefer I can do that in a later PR.",
              "state": "COMMENTED",
              "author": {
                "login": "ADedecker"
              },
              "submittedAt": "2023-10-25T13:38:15Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 7878,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5lK9BT",
              "body": "LGTM!\r\n\r\nIf you're interested, I made a `Inducing` version. You'd need to add:\r\n- in `UnitInterval.lean`: \r\n```lean\r\ninstance : NeZero (1 : I) := ⟨fun h ↦ one_ne_zero <| congrArg Subtype.val h⟩\r\n```\r\n- in `PathConnected.lean`:\r\n```lean\r\ntheorem Specializes.joinedIn (h : x ⤳ y) (hx : x ∈ F) (hy : y ∈ F) : JoinedIn F x y := by\r\n  refine ⟨⟨⟨Set.piecewise {1} (const I y) (const I x), ?_⟩, by simp, by simp⟩, fun t ↦ ?_⟩\r\n  · simp only [const, continuous_def, piecewise_preimage]\r\n    intro U hU\r\n    by_cases hy' : y ∈ U\r\n    · simp [hy', h.mem_open hU hy']\r\n    · by_cases hx' : x ∈ U\r\n      · simpa [hx', hy'] using isOpen_univ.sdiff isClosed_singleton\r\n      · simp [hx', hy']\r\n  · simp only [Path.coe_mk_mk, piecewise]\r\n    split_ifs <;> assumption\r\n\r\ntheorem Inseparable.joinedIn (h : Inseparable x y) (hx : x ∈ F) (hy : y ∈ F) : JoinedIn F x y :=\r\n  h.specializes.joinedIn hx hy\r\n```\r\nAnd then:\r\n```lean\r\nnonrec theorem Inducing.isPathConnected_iff {Y : Type*} [TopologicalSpace Y]\r\n    {f : X → Y} (hf : Inducing f) :\r\n    IsPathConnected F ↔ IsPathConnected (f '' F) := by\r\n  refine ⟨fun hF ↦ hF.image hf.continuous, fun hF ↦ ?_⟩\r\n  simp? [isPathConnected_iff] at hF ⊢ says\r\n    simp only [isPathConnected_iff, nonempty_image_iff, mem_image, forall_exists_index,\r\n      and_imp, forall_apply_eq_imp_iff₂] at hF ⊢\r\n  refine ⟨hF.1, fun x hx y hy ↦ ?_⟩\r\n  rcases hF.2 x hx y hy with ⟨γ, hγ⟩\r\n  choose γ' hγ' hγγ' using hγ\r\n  have key₁ : Inseparable x (γ' 0) := by rw [← hf.inseparable_iff, hγγ' 0, γ.source]\r\n  have key₂ : Inseparable (γ' 1) y := by rw [← hf.inseparable_iff, hγγ' 1, γ.target]\r\n  refine key₁.joinedIn hx (hγ' 0) |>.trans ⟨⟨⟨γ', ?_⟩, rfl, rfl⟩, hγ'⟩ |>.trans\r\n    (key₂.joinedIn (hγ' 1) hy)\r\n  simpa [hf.continuous_iff] using γ.continuous.congr fun t ↦ (hγγ' t).symm\r\n```\r\n\r\nIf you prefer I can do that in a later PR.",
              "state": "COMMENTED",
              "author": {
                "login": "ADedecker"
              },
              "submittedAt": "2023-10-25T13:38:15Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5lMKvY",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "grunweg"
              },
              "submittedAt": "2023-10-25T15:32:03Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Rw6Fv",
                    "body": "```suggestion\r\n```\r\nI don't think this is a controversial placement, so I'd remove this line. In fact, I would argue that `Homeomorph.isConnected_image` should be in the connectedness file, but that's not worth refactoring.",
                    "createdAt": "2023-10-25T13:35:23Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5RxoBP",
                    "body": "Sure, removed.",
                    "createdAt": "2023-10-25T15:32:03Z",
                    "author": {
                      "login": "grunweg"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjEwMTA1MDE2",
              "login": "grunweg"
            },
            {
              "id": "MDQ6VXNlcjQ4NjU2Nzkz",
              "login": "ADedecker"
            },
            {
              "id": "MDQ6VXNlcjU2MzY3MDU=",
              "login": "jcommelin"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": null,
        "title": "[Merged by Bors] - feat: path-connectedness is preserved by homeomorphisms",
        "updatedAt": "2023-10-26T14:48:05Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/7878",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "e70b66ba75a998bd0ea9eab0452f863d9044b134"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "58323830504b79ce98d4e13bb7599e010bf3792a"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c50tovTzwAAAAKAj4uf",
              "createdAt": "2023-10-23T22:25:51Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c50tovTzwAAAAKAj4uj",
              "createdAt": "2023-10-23T22:25:51Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABJc1VKA",
                "name": "easy"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c50tovTzwAAAAKAj4up",
              "createdAt": "2023-10-23T22:25:51Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJbOw",
                "name": "t-topology"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c50tovTzwAAAAKA0avn",
              "createdAt": "2023-10-24T09:03:43Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABJc1VKA",
                "name": "easy"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5p5_0N",
              "createdAt": "2023-10-24T09:03:54Z",
              "body": "Removing easy label as this PR adds two simp lemmas (even though they're probably uncontroversial). Sorry for the churn.",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5lK9BT",
              "createdAt": "2023-10-25T13:35:23Z",
              "body": "LGTM!\r\n\r\nIf you're interested, I made a `Inducing` version. You'd need to add:\r\n- in `UnitInterval.lean`: \r\n```lean\r\ninstance : NeZero (1 : I) := ⟨fun h ↦ one_ne_zero <| congrArg Subtype.val h⟩\r\n```\r\n- in `PathConnected.lean`:\r\n```lean\r\ntheorem Specializes.joinedIn (h : x ⤳ y) (hx : x ∈ F) (hy : y ∈ F) : JoinedIn F x y := by\r\n  refine ⟨⟨⟨Set.piecewise {1} (const I y) (const I x), ?_⟩, by simp, by simp⟩, fun t ↦ ?_⟩\r\n  · simp only [const, continuous_def, piecewise_preimage]\r\n    intro U hU\r\n    by_cases hy' : y ∈ U\r\n    · simp [hy', h.mem_open hU hy']\r\n    · by_cases hx' : x ∈ U\r\n      · simpa [hx', hy'] using isOpen_univ.sdiff isClosed_singleton\r\n      · simp [hx', hy']\r\n  · simp only [Path.coe_mk_mk, piecewise]\r\n    split_ifs <;> assumption\r\n\r\ntheorem Inseparable.joinedIn (h : Inseparable x y) (hx : x ∈ F) (hy : y ∈ F) : JoinedIn F x y :=\r\n  h.specializes.joinedIn hx hy\r\n```\r\nAnd then:\r\n```lean\r\nnonrec theorem Inducing.isPathConnected_iff {Y : Type*} [TopologicalSpace Y]\r\n    {f : X → Y} (hf : Inducing f) :\r\n    IsPathConnected F ↔ IsPathConnected (f '' F) := by\r\n  refine ⟨fun hF ↦ hF.image hf.continuous, fun hF ↦ ?_⟩\r\n  simp? [isPathConnected_iff] at hF ⊢ says\r\n    simp only [isPathConnected_iff, nonempty_image_iff, mem_image, forall_exists_index,\r\n      and_imp, forall_apply_eq_imp_iff₂] at hF ⊢\r\n  refine ⟨hF.1, fun x hx y hy ↦ ?_⟩\r\n  rcases hF.2 x hx y hy with ⟨γ, hγ⟩\r\n  choose γ' hγ' hγγ' using hγ\r\n  have key₁ : Inseparable x (γ' 0) := by rw [← hf.inseparable_iff, hγγ' 0, γ.source]\r\n  have key₂ : Inseparable (γ' 1) y := by rw [← hf.inseparable_iff, hγγ' 1, γ.target]\r\n  refine key₁.joinedIn hx (hγ' 0) |>.trans ⟨⟨⟨γ', ?_⟩, rfl, rfl⟩, hγ'⟩ |>.trans\r\n    (key₂.joinedIn (hγ' 1) hy)\r\n  simpa [hf.continuous_iff] using γ.continuous.congr fun t ↦ (hγγ' t).symm\r\n```\r\n\r\nIf you prefer I can do that in a later PR.",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c50tovTzwAAAAKBzcbW",
              "createdAt": "2023-10-25T13:38:28Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c50tovTzwAAAAKBzcbe",
              "createdAt": "2023-10-25T13:38:28Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "1d86616789c01969bda4152b2e18d2903f4c7371"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "ca82d2e17cd61e912f30a742196a5a1d4c83e442"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qEb5j",
              "createdAt": "2023-10-25T15:34:02Z",
              "body": "@ADedecker Wow! I didn't mean to nerd-snipe you - but now that you've suggested this, I have added it. I don't know how to add you as a co-author so git recognises this; feel free to force-push something/edit the top-level comment accordingly.\r\n\r\nI saw that the file already had the implicit variables you mentioned, hence went over the file and removed all superfluous `{X : Type*} {TopologicalSpace X}` (also so Y). Let me know if I should drop that commit/move to a different PR.",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c50tovTzwAAAAKB5aXN",
              "createdAt": "2023-10-25T15:34:11Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c50tovTzwAAAAKB5aXn",
              "createdAt": "2023-10-25T15:34:12Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qJ_rg",
              "createdAt": "2023-10-26T12:17:59Z",
              "body": "Don't worry for nerd-sniping, that was very fun! I've added my name to the PR description. This looks good to me, but obviously I'm not going to merge it myself, I'll ask on Zulip.",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qKGbx",
              "createdAt": "2023-10-26T12:33:31Z",
              "body": "Thanks :tada:\r\n\r\nbors merge",
              "author": {
                "login": "jcommelin"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c50tovTzwAAAAKCftye",
              "createdAt": "2023-10-26T12:33:47Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
                "name": "ready-to-merge"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c50tovTzwAAAAKCft2A",
              "createdAt": "2023-10-26T12:33:48Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qLDN5",
              "createdAt": "2023-10-26T14:47:58Z",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6654946484/job/18084057888)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6654946484/job/18084058537)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6654946484/job/18084058967)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c50tovTzwAAAAKCmiwl",
              "createdAt": "2023-10-26T14:48:00Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c50tovTzwAAAAKCmjA2",
              "createdAt": "2023-10-26T14:48:05Z"
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5PEkgC",
              "createdAt": "2023-10-26T21:41:38Z",
              "source": {
                "id": "PR_kwDOFcwZ1c5d6gov",
                "title": "[Merged by Bors] - Misc lemmas about Specializes, Inseparable and path-connectedness",
                "url": "https://github.com/leanprover-community/mathlib4/pull/7970"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            }
          ]
        }
      }
    }
  }
}
