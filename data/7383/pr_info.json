{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 188,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "YaelDillies"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "Define `Finset.diffs` and `Finset.compls`, the pointwise set difference of two finsets and pointwise complement of a finset.\r\n\r\n`diffs` appears in the statement of the Marica-Schönheim inequality and `compls` in the proof.\r\n\r\nAlso fix the corresponding statements for `sups` and `infs` to use the new `·` notation.\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 2,
        "closed": true,
        "closedAt": "2023-10-23T12:53:50Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5n1wqc",
              "body": "Yes, my goal when introducing the `image₂` API was to make writing this kind of API easy, not to make using this kind of API hard because we're not allowed to copy template API over to specific cases in the name of avoiding duplication.",
              "createdAt": "2023-10-01T17:27:46Z",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5n4dsN",
              "body": "Note that I am a bit unhappy with the `\\\\` notation. Do people think `\\ˢ` is better?  ",
              "createdAt": "2023-10-02T11:35:57Z",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5n7_eG",
              "body": "I definitely need `compls` for many different purposes. It shows up in the proof of Marica-Schönheim, but also in Kruskal-Katona, Sperner's theorem (at least the proof Bhavik had before I golfed it) and @apnelson1 independently wanted an `UpperSet`/`LowerSet`-valued version.\r\n\r\n`diffs` is less clear-cut but still worth it:\r\n* It makes the deduction of Marica-Schönheim from Daykin magically easy: https://github.com/YaelDillies/LeanCamCombi/blob/main/LeanCamCombi/FourFunctions.lean#L345-L347\r\n* It is used in the reverse Kleitman inequality stuff here (unfinished): https://github.com/YaelDillies/LeanCamCombi/blob/main/LeanCamCombi/Mathlib/Data/Finset/PosDiffs.lean#L73-L75\r\n* Having a `def` wrapping that special case of `image₂` means that we have a clear name atom to use in lemma names.\r\n* I designed `image₂` to be a template API that people can copy and use for their specific operations. Maintenance of template uses is pretty easy since a template use contains no new proof, and every lemma that could be added there instead gets upstreamed to become a template lemma. Basically, don't kill the point of the template by telling me to use the template directly instead of specializing it.",
              "createdAt": "2023-10-02T21:17:05Z",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5pylCc",
              "body": ":v: YaelDillies can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests).",
              "createdAt": "2023-10-23T10:14:53Z",
              "author": {
                "login": "bors"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5pzKsN",
              "body": "Yeah, I'm not convinced about the notation either. I'm happy to change it at a later time.\n\nbors merge",
              "createdAt": "2023-10-23T11:49:16Z",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5pzlO-",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6613253001/job/17960729087)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6613253001/job/17960728829)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6613253001/job/17960728490)",
              "createdAt": "2023-10-23T12:53:48Z",
              "author": {
                "login": "bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "1e3bcd6aa28592b8ebc33334574d0b6da2dc33fa",
                "additions": 160,
                "deletions": 0,
                "committedDate": "2023-09-26T15:16:40Z",
                "author": {
                  "name": "Yaël Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "6baaaf2c2d09aab1b5c990ba309293f88cd69b92",
                "additions": 11,
                "deletions": 13,
                "committedDate": "2023-09-27T08:21:52Z",
                "author": {
                  "name": "Yaël Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "53cc4b790172277ac2df7d81c29b06e53688acee",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-09-27T08:25:15Z",
                "author": {
                  "name": "Yaël Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "eee857fccf55e160700102ebc4c0253d6348e7b2",
                "additions": 7,
                "deletions": 13,
                "committedDate": "2023-09-27T14:09:47Z",
                "author": {
                  "name": "Yaël Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "70c35ac848186224d968362d6d3b1f12312ae847",
                "additions": 27,
                "deletions": 43,
                "committedDate": "2023-10-01T12:38:01Z",
                "author": {
                  "name": "Yaël Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "d3c9c495a3342872f83bea770b23076d9b348eca",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-10-23T11:43:30Z",
                "author": {
                  "name": "Yaël Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": null
              }
            }
          ]
        },
        "createdAt": "2023-09-26T15:17:18Z",
        "deletions": 52,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/Combinatorics/SetFamily/Shadow.lean",
              "additions": 12,
              "deletions": 20
            },
            {
              "path": "Mathlib/Data/Finset/Sups.lean",
              "additions": 176,
              "deletions": 32
            }
          ]
        },
        "headRefName": "diffs_compls",
        "headRefOid": "d3c9c495a3342872f83bea770b23076d9b348eca",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5bPpS9",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABAt13Ow",
              "color": "bfd4f2",
              "name": "delegated"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJlpQ",
              "color": "33DBEC",
              "name": "t-order"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5k3Isz",
              "body": "I think it's fine to introduce these new definitions with the new API.\r\nI'm not sure about the notation, I think both `\\\\` and `\\ˢ` are fine.\r\n\r\nbors d+",
              "state": "COMMENTED",
              "author": {
                "login": "fpvandoorn"
              },
              "submittedAt": "2023-10-23T10:14:52Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5ijQRA",
              "body": "In my opinion changing the notation throughout to the \"dotted\" functions (such as `(· ⊔ ·)`) improved readability over the `fun a b => a ⊔ b` alternative. Thanks!\r\n\r\nI still feel unqualified to judge whether the new definitions and notation for them (`s ⊻ t` for `Finset.sups`, `s ⊼ t` for `Finset.infs`, `s \\\\ t` for `Finset.diffs`, `sᶜˢ` for `Finset.compls`) are worthwhile, because:\r\n- the spelled out ones (e.g. `image₂ (· \\ ·)` instead of `Finset.diffs`) are actually very readable and self-explanatory as such\r\n- almost all results about the new definitions are results that already exist for `image₂` or `image` or `map`.\r\n\r\nConvenience in subsequent work should justify the introduction of the notation and special casing of the `image₂` API lemmas. The applications ([discussed on Zulip](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Discrete.20correlation.20inequalities/near/393106219) and available in the LeanCamCombi repo) are extremely nice results that we definitely want in Mathlib (but on a cursory glance it is not clear even the repo uses these definitions and notations an awful lot). Thanks in advance for those!\r\n\r\nSo I'd like to have the opinion of someone more experienced on the whole introduction of the definitions and notation, but this PR looks good to me now.",
              "state": "APPROVED",
              "author": {
                "login": "kkytola"
              },
              "submittedAt": "2023-10-02T20:02:43Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 7383,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": "APPROVED",
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5ibt_O",
              "body": "The added APIs about `diffs` and `compls` look quite complete. They are, however, largely duplications of APIs of `image₂` etc. Whether the duplication and new notation is worthwhile is in my opinion determined by applications of these notions. I assume the planned applications (leading notably to FKG inequality) justify these, and in that case modulo small comments I made in the review: LGTM.",
              "state": "COMMENTED",
              "author": {
                "login": "kkytola"
              },
              "submittedAt": "2023-09-29T21:24:52Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5ideiy",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2023-10-01T12:20:34Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5ide8s",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2023-10-01T12:32:44Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5ijQRA",
              "body": "In my opinion changing the notation throughout to the \"dotted\" functions (such as `(· ⊔ ·)`) improved readability over the `fun a b => a ⊔ b` alternative. Thanks!\r\n\r\nI still feel unqualified to judge whether the new definitions and notation for them (`s ⊻ t` for `Finset.sups`, `s ⊼ t` for `Finset.infs`, `s \\\\ t` for `Finset.diffs`, `sᶜˢ` for `Finset.compls`) are worthwhile, because:\r\n- the spelled out ones (e.g. `image₂ (· \\ ·)` instead of `Finset.diffs`) are actually very readable and self-explanatory as such\r\n- almost all results about the new definitions are results that already exist for `image₂` or `image` or `map`.\r\n\r\nConvenience in subsequent work should justify the introduction of the notation and special casing of the `image₂` API lemmas. The applications ([discussed on Zulip](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Discrete.20correlation.20inequalities/near/393106219) and available in the LeanCamCombi repo) are extremely nice results that we definitely want in Mathlib (but on a cursory glance it is not clear even the repo uses these definitions and notations an awful lot). Thanks in advance for those!\r\n\r\nSo I'd like to have the opinion of someone more experienced on the whole introduction of the definitions and notation, but this PR looks good to me now.",
              "state": "APPROVED",
              "author": {
                "login": "kkytola"
              },
              "submittedAt": "2023-10-02T20:02:43Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5k3Isz",
              "body": "I think it's fine to introduce these new definitions with the new API.\r\nI'm not sure about the notation, I think both `\\\\` and `\\ˢ` are fine.\r\n\r\nbors d+",
              "state": "COMMENTED",
              "author": {
                "login": "fpvandoorn"
              },
              "submittedAt": "2023-10-23T10:14:52Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5P-bUw",
                    "body": "I find this docstring very confusing.",
                    "createdAt": "2023-09-29T20:23:59Z",
                    "author": {
                      "login": "kkytola"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5P_z5e",
                    "body": "Uh, that's because it is! ",
                    "createdAt": "2023-10-01T12:20:34Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5P-d31",
                    "body": "```suggestion\r\nlemma image_subset_diffs_left : b ∈ t → s.image (· \\ b) ⊆ s \\\\ t :=\r\n```\r\n...to use a similar spelling as in `image_subset_diffs_right ` below.",
                    "createdAt": "2023-09-29T20:40:54Z",
                    "author": {
                      "login": "kkytola"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5P_0Rg",
                    "body": "Took the opportunity to fix them all, including the ported ones.",
                    "createdAt": "2023-10-01T12:32:44Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5P-gux",
                    "body": "```suggestion\r\nlemma biUnion_image_sdiff_left : s.biUnion (fun a ↦ t.image fun b ↦ a \\ b) = s \\\\ t :=\r\n```\r\nI think the spelling should again match the one of `biUnion_image_sdiff_right`.\r\n\r\nMy own preferred spelling would avoid the `$`-notation because it is not used in math (but this is clearly a style choice). Also the `(· \\ ·) a` seems redundant, isn't this just `a \\ ·`?",
                    "createdAt": "2023-09-29T20:58:27Z",
                    "author": {
                      "login": "kkytola"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5RkJ9Z",
                    "body": "```suggestion\r\n* `Finset.infs s t`: Finset of elements of the form `a ⊓ b` where `a ∈ s`, `b ∈ t`.\r\n```",
                    "createdAt": "2023-10-23T10:10:09Z",
                    "author": {
                      "login": "fpvandoorn"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjE0MDkwNTkz",
              "login": "YaelDillies"
            },
            {
              "id": "MDQ6VXNlcjczNzYwMTI=",
              "login": "fpvandoorn"
            },
            {
              "id": "MDQ6VXNlcjM5NTI4MTAy",
              "login": "kkytola"
            },
            {
              "id": "MDQ6VXNlcjU2MzY3MDU=",
              "login": "jcommelin"
            },
            {
              "id": "U_kgDOB75MNQ",
              "login": "leanprover-community-mathlib4-bot"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": null,
        "title": "[Merged by Bors] - feat: Pointwise set difference, complement",
        "updatedAt": "2023-10-23T12:53:54Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/7383",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "1e3bcd6aa28592b8ebc33334574d0b6da2dc33fa"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5yEZTqzwAAAAJwdhgP",
              "createdAt": "2023-09-26T15:17:35Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5yEZTqzwAAAAJwdhgp",
              "createdAt": "2023-09-26T15:17:35Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJlpQ",
                "name": "t-order"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "6baaaf2c2d09aab1b5c990ba309293f88cd69b92"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "53cc4b790172277ac2df7d81c29b06e53688acee"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "eee857fccf55e160700102ebc4c0253d6348e7b2"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5ibt_O",
              "createdAt": "2023-09-29T20:23:59Z",
              "body": "The added APIs about `diffs` and `compls` look quite complete. They are, however, largely duplications of APIs of `image₂` etc. Whether the duplication and new notation is worthwhile is in my opinion determined by applications of these notions. I assume the planned applications (leading notably to FKG inequality) justify these, and in that case modulo small comments I made in the review: LGTM.",
              "author": {
                "login": "kkytola"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5yEZTqzwAAAAJy1riW",
              "createdAt": "2023-09-30T04:48:44Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5yEZTqzwAAAAJy1riY",
              "createdAt": "2023-09-30T04:48:44Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "70c35ac848186224d968362d6d3b1f12312ae847"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5n1wqc",
              "createdAt": "2023-10-01T17:27:46Z",
              "body": "Yes, my goal when introducing the `image₂` API was to make writing this kind of API easy, not to make using this kind of API hard because we're not allowed to copy template API over to specific cases in the name of avoiding duplication.",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5yEZTqzwAAAAJzC-Ua",
              "createdAt": "2023-10-01T17:27:53Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5yEZTqzwAAAAJzC-Ud",
              "createdAt": "2023-10-01T17:27:53Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5n4dsN",
              "createdAt": "2023-10-02T11:35:57Z",
              "body": "Note that I am a bit unhappy with the `\\\\` notation. Do people think `\\ˢ` is better?  ",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5ijQRA",
              "createdAt": "2023-10-02T20:02:43Z",
              "body": "In my opinion changing the notation throughout to the \"dotted\" functions (such as `(· ⊔ ·)`) improved readability over the `fun a b => a ⊔ b` alternative. Thanks!\r\n\r\nI still feel unqualified to judge whether the new definitions and notation for them (`s ⊻ t` for `Finset.sups`, `s ⊼ t` for `Finset.infs`, `s \\\\ t` for `Finset.diffs`, `sᶜˢ` for `Finset.compls`) are worthwhile, because:\r\n- the spelled out ones (e.g. `image₂ (· \\ ·)` instead of `Finset.diffs`) are actually very readable and self-explanatory as such\r\n- almost all results about the new definitions are results that already exist for `image₂` or `image` or `map`.\r\n\r\nConvenience in subsequent work should justify the introduction of the notation and special casing of the `image₂` API lemmas. The applications ([discussed on Zulip](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Discrete.20correlation.20inequalities/near/393106219) and available in the LeanCamCombi repo) are extremely nice results that we definitely want in Mathlib (but on a cursory glance it is not clear even the repo uses these definitions and notations an awful lot). Thanks in advance for those!\r\n\r\nSo I'd like to have the opinion of someone more experienced on the whole introduction of the definitions and notation, but this PR looks good to me now.",
              "author": {
                "login": "kkytola"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5n7_eG",
              "createdAt": "2023-10-02T21:17:05Z",
              "body": "I definitely need `compls` for many different purposes. It shows up in the proof of Marica-Schönheim, but also in Kruskal-Katona, Sperner's theorem (at least the proof Bhavik had before I golfed it) and @apnelson1 independently wanted an `UpperSet`/`LowerSet`-valued version.\r\n\r\n`diffs` is less clear-cut but still worth it:\r\n* It makes the deduction of Marica-Schönheim from Daykin magically easy: https://github.com/YaelDillies/LeanCamCombi/blob/main/LeanCamCombi/FourFunctions.lean#L345-L347\r\n* It is used in the reverse Kleitman inequality stuff here (unfinished): https://github.com/YaelDillies/LeanCamCombi/blob/main/LeanCamCombi/Mathlib/Data/Finset/PosDiffs.lean#L73-L75\r\n* Having a `def` wrapping that special case of `image₂` means that we have a clear name atom to use in lemma names.\r\n* I designed `image₂` to be a template API that people can copy and use for their specific operations. Maintenance of template uses is pretty easy since a template use contains no new proof, and every lemma that could be added there instead gets upstreamed to become a template lemma. Basically, don't kill the point of the template by telling me to use the template directly instead of specializing it.",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5k3Isz",
              "createdAt": "2023-10-23T10:10:09Z",
              "body": "I think it's fine to introduce these new definitions with the new API.\r\nI'm not sure about the notation, I think both `\\\\` and `\\ˢ` are fine.\r\n\r\nbors d+",
              "author": {
                "login": "fpvandoorn"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5pylCc",
              "createdAt": "2023-10-23T10:14:53Z",
              "body": ":v: YaelDillies can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests).",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5yEZTqzwAAAAKAEqhz",
              "createdAt": "2023-10-23T10:15:07Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABAt13Ow",
                "name": "delegated"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5yEZTqzwAAAAKAEqkV",
              "createdAt": "2023-10-23T10:15:08Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "d3c9c495a3342872f83bea770b23076d9b348eca"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5pzKsN",
              "createdAt": "2023-10-23T11:49:16Z",
              "body": "Yeah, I'm not convinced about the notation either. I'm happy to change it at a later time.\n\nbors merge",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5pzlO-",
              "createdAt": "2023-10-23T12:53:48Z",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6613253001/job/17960729087)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6613253001/job/17960728829)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6613253001/job/17960728490)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c5yEZTqzwAAAAKALTwQ",
              "createdAt": "2023-10-23T12:53:50Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c5yEZTqzwAAAAKALT8L",
              "createdAt": "2023-10-23T12:53:54Z"
            }
          ]
        }
      }
    }
  }
}
