{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 62,
        "assignees": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjM0Mzk2ODg=",
              "login": "loefflerd"
            }
          ]
        },
        "author": {
          "login": "YaelDillies"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "From PFR\n\nCo-authored-by: hi@llllvvuu.dev\n\n\n---\n<!-- The text above the `---` will become the commit message when your\nPR is merged. Please leave a blank newline before the `---`, otherwise\nGitHub will format the text above it as a title.\n\nFor details on the \"pull request lifecycle\" in mathlib, please see:\nhttps://leanprover-community.github.io/contribute/index.html\n\nIn particular, note that most reviewers will only notice your PR\nif it passes the continuous integration checks.\nPlease ask for help on https://leanprover.zulipchat.com if needed.\n\nTo indicate co-authors, include lines at the bottom of the commit message\n(that is, before the `---`) using the following format:\n\nCo-authored-by: Author Name <author@email.com>\n\nIf you are moving or deleting declarations, please include these lines at the bottom of the commit message\n(that is, before the `---`) using the following format:\n\nMoves:\n- Vector.* -> Mathlib.Vector.*\n- ...\n\nDeletions:\n- Nat.bit1_add_bit1\n- ...\n\nAny other comments you want to keep out of the PR commit should go\nbelow the `---`, and placed outside this HTML comment, or else they\nwill be invisible to reviewers.\n\nIf this PR depends on other PRs, please list them below this comment,\nusing the following format:\n- [ ] depends on: #abc [optional extra text]\n- [ ] depends on: #xyz [optional extra text]\n\n-->\nI'm sure this can be improved, but I'm not sure how. I need guidance.\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\n",
        "changedFiles": 1,
        "closed": true,
        "closedAt": "2024-12-09T11:42:44Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c6OGP2s",
              "body": "### PR summary [4f3190acfe](https://github.com/leanprover-community/mathlib4/pull/17308/commits/4f3190acfed2694559366e19c52a6a8b70a7b2c4)\n\n<details><summary>\n\n#### Import changes for modified files\n\n</summary>\n\nDependency changes\n\n| File | Base Count | Head Count | Change |\n| --- | --- | --- | --- |\n| Mathlib.LinearAlgebra.Basis.VectorSpace | 971 | 972 | +1 (+0.10%) |\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n|<details><summary>130 files</summary> `Mathlib.Analysis.MeanInequalitiesPow` `Mathlib.Combinatorics.SimpleGraph.Triangle.Removal` `Mathlib.Dynamics.TopologicalEntropy.NetEntropy` `Mathlib.NumberTheory.MulChar.Lemmas` `Mathlib.Analysis.SpecialFunctions.Pow.Complex` `Mathlib.MeasureTheory.Function.SpecialFunctions.Basic` `Mathlib.Analysis.Normed.Lp.PiLp` `Mathlib.Analysis.SpecialFunctions.CompareExp` `Mathlib.Analysis.Convex.Birkhoff` `Mathlib.Topology.Algebra.Module.UniformConvergence` `Mathlib.LinearAlgebra.Dimension.DivisionRing` `Mathlib.Combinatorics.Additive.Corner.Roth` `Mathlib.MeasureTheory.Function.LpSeminorm.Basic` `Mathlib.Analysis.SpecialFunctions.Complex.Log` `Mathlib.LinearAlgebra.Dimension.Localization` `Mathlib.Analysis.Convex.Topology` `Mathlib.Analysis.Complex.HalfPlane` `Mathlib.Analysis.LocallyConvex.Bounded` `Mathlib.Analysis.Complex.UnitDisc.Basic` `Mathlib.Analysis.SpecialFunctions.Exp` `Mathlib.Analysis.Normed.Algebra.Norm` `Mathlib.Computability.AkraBazzi.GrowsPolynomially` `Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan` `Mathlib.Analysis.NormedSpace.RieszLemma` `Mathlib.Analysis.Complex.Circle` `Mathlib.Topology.MetricSpace.PartitionOfUnity` `Mathlib.Analysis.SpecialFunctions.PolynomialExp` `Mathlib.Analysis.LocallyConvex.Barrelled` `Mathlib.Analysis.CStarAlgebra.ContinuousFunctionalCalculus.Unitary` `Mathlib.NumberTheory.SumPrimeReciprocals` `Mathlib.MeasureTheory.Function.LpSeminorm.Trim` `Mathlib.Analysis.PSeries` `Mathlib.Analysis.Complex.Basic` `Mathlib.Analysis.Calculus.TangentCone` `Mathlib.Analysis.SpecialFunctions.Pow.Continuity` `Mathlib.MeasureTheory.Function.LpSeminorm.TriangleInequality` `Mathlib.Analysis.SpecialFunctions.Log.ENNRealLogExp` `Mathlib.NumberTheory.ClassNumber.AdmissibleCardPowDegree` `Mathlib.Combinatorics.SimpleGraph.Regularity.Increment` `Mathlib.Analysis.SpecificLimits.FloorPow` `Mathlib.Analysis.LocallyConvex.WeakDual` `Mathlib.Analysis.Normed.Module.Span` `Mathlib.Analysis.Normed.Lp.ProdLp` `Mathlib.Analysis.LocallyConvex.AbsConvex` `Mathlib.Analysis.Normed.Ring.SeminormFromConst` `Mathlib.Analysis.Convex.SimplicialComplex.Basic` `Mathlib.Analysis.Normed.Group.Tannery` `Mathlib.Analysis.Complex.IsIntegral` `Mathlib.Analysis.SpecialFunctions.Log.Base` `Mathlib.Analysis.Convex.SpecificFunctions.Pow` `Mathlib.Analysis.Normed.Lp.lpSpace` `Mathlib.Analysis.Normed.Ring.Seminorm` `Mathlib.MeasureTheory.Function.LpSeminorm.ChebyshevMarkov` `Mathlib.Topology.Compactness.DeltaGeneratedSpace` `Mathlib.MeasureTheory.Function.SpecialFunctions.Arctan` `Mathlib.Analysis.CStarAlgebra.Classes` `Mathlib.Analysis.NormedSpace.ConformalLinearMap` `Mathlib.LinearAlgebra.AffineSpace.Basis` `Mathlib.Analysis.Complex.ReImTopology` `Mathlib.Analysis.SpecialFunctions.Complex.Arg` `Mathlib.Topology.PartitionOfUnity` `Mathlib.GroupTheory.CosetCover` `Mathlib.LinearAlgebra.AffineSpace.Independent` `Mathlib.NumberTheory.Ostrowski` `Mathlib.Topology.Algebra.Module.LocallyConvex` `Mathlib.MeasureTheory.Measure.Doubling` `Mathlib.Analysis.MeanInequalities` `Mathlib.Analysis.Normed.Ring.SeminormFromBounded` `Mathlib.Analysis.Convex.Independent` `Mathlib.Analysis.Complex.Asymptotics` `Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse` `Mathlib.Analysis.SpecialFunctions.Trigonometric.Complex` `Mathlib.Analysis.NormedSpace.Extr` `Mathlib.FieldTheory.Finiteness` `Mathlib.MeasureTheory.Constructions.BorelSpace.Complex` `Mathlib.Analysis.RCLike.Basic` `Mathlib.RingTheory.RootsOfUnity.Complex` `Mathlib.Analysis.SpecialFunctions.Log.Monotone` `Mathlib.Analysis.SpecialFunctions.Pow.Asymptotics` `Mathlib.Analysis.NormedSpace.ENorm` `Mathlib.Topology.Algebra.PontryaginDual` `Mathlib.Topology.MetricSpace.Holder` `Mathlib.Combinatorics.SimpleGraph.Regularity.Chunk` `Mathlib.MeasureTheory.Integral.MeanInequalities` `Mathlib.Analysis.NormedSpace.HomeomorphBall` `Mathlib.Analysis.SpecialFunctions.Log.Basic` `Mathlib.Analysis.ConstantSpeed` `Mathlib.Topology.Algebra.Module.Multilinear.Bounded` `Mathlib.Analysis.Convex.TotallyBounded` `Mathlib.NumberTheory.VonMangoldt` `Mathlib.Topology.MetricSpace.HolderNorm` `Mathlib.Analysis.SpecialFunctions.Pow.Real` `Mathlib.Dynamics.TopologicalEntropy.Semiconj` `Mathlib.Analysis.SpecialFunctions.Trigonometric.Angle` `Mathlib.Analysis.Convex.Gauge` `Mathlib.MeasureTheory.Function.LpSeminorm.CompareExp` `Mathlib.Analysis.Convex.Jensen` `Mathlib.Topology.MetricSpace.Kuratowski` `Mathlib.Analysis.Complex.Convex` `Mathlib.Analysis.Convex.Combination` `Mathlib.Analysis.Normed.Ring.IsPowMulFaithful` `Mathlib.Analysis.LocallyConvex.ContinuousOfBounded` `Mathlib.Algebra.Order.CompleteField` `Mathlib.Combinatorics.SimpleGraph.Regularity.Bound` `Mathlib.Analysis.LocallyConvex.WithSeminorms` `Mathlib.Analysis.Normed.Module.Ray` `Mathlib.Algebra.Group.UniqueProds.VectorSpace` `Mathlib.Dynamics.TopologicalEntropy.CoverEntropy` `Mathlib.Analysis.CStarAlgebra.lpSpace` `Mathlib.Analysis.NormedSpace.Real` `Mathlib.Analysis.SpecialFunctions.Complex.Circle` `Mathlib.Combinatorics.SimpleGraph.Regularity.Lemma` `Mathlib.Analysis.NormedSpace.BallAction` `Mathlib.Dynamics.BirkhoffSum.NormedSpace` `Mathlib.Analysis.Convex.Caratheodory` `Mathlib.Analysis.NormedSpace.Connected` `Mathlib.Analysis.SpecificLimits.RCLike` `Mathlib.Analysis.SpecialFunctions.Pow.NNReal` `Mathlib.Analysis.Convex.StoneSeparation` `Mathlib.Analysis.Convex.SpecificFunctions.Basic` `Mathlib.Analysis.SpecialFunctions.Trigonometric.Basic` `Mathlib.MeasureTheory.Measure.Complex` `Mathlib.Topology.Algebra.Module.Cardinality` `Mathlib.Analysis.NormedSpace.SphereNormEquiv` `Mathlib.Analysis.Convex.PartitionOfUnity` `Mathlib.Analysis.Complex.AbelLimit` `Mathlib.Analysis.NormedSpace.Pointwise` `Mathlib.Analysis.SpecialFunctions.Log.ENNRealLog` `Mathlib.LinearAlgebra.Basis.VectorSpace` `Mathlib.Analysis.Normed.Algebra.UnitizationL1`</details>|1|\n\n</details>\n\n</details>\n\n---\n\n#### Declarations diff\n\n`+ exists_equiv_fst_sndModFst`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n---\n\n<details><summary>No changes to technical debt.</summary>\n\nYou can run this locally as\n```\n./scripts/technical-debt-metrics.sh pr_summary\n```\n* The `relative` value is the weighted *sum* of the differences with weight given by the *inverse* of the current value of the statistic.\n* The `absolute` value is the `relative` value divided by the total sum of the inverses of the current values (i.e. the weighted *average* of the differences).\n</details>",
              "createdAt": "2024-09-30T19:35:10Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6OL0hB",
              "body": "I don't really know the use case, but the underlying result I see is that any submodule `S` of `A × B` decomposes as the direct sum of its intersection with `B` and its intersection with the graph of some linear map from `A` to `B`. This linear map is obtained by taking a section of the surjective map `S →ₗ[R] (map (LinearMap.fst R A B) S)` and extending that section to a map from `A` to `B`.\r\n\r\nComposing with the obvious linear equiv between the graph of a linear map and its domain gets you the result.\r\n\r\nBut maybe this just makes things harder to use in practice.",
              "createdAt": "2024-10-01T10:54:44Z",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6OMIe5",
              "body": "> the underlying result I see is that any submodule `S` of `A × B` decomposes as the direct sum of its intersection with `B` and its intersection with the graph of some linear map from `A` to `B`.\r\n\r\nYes, that's exactly right.\r\n\r\n> Composing with the obvious linear equiv between the graph of a linear map and its domain gets you the result.\r\n> \r\n> But maybe this just makes things harder to use in practice.\r\n\r\nI think that's the right approach. How would you state the theorem and prove it?",
              "createdAt": "2024-10-01T11:37:29Z",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6SIwMe",
              "body": "Hmm. I promised I'd look at this, but on looking at it, I realise you're not actually proving the same lemma I thought you were proving.\r\n\r\nWhat I _thought_ was going on was the following:\r\n```lean\r\nvariable {R A B : Type*} [Ring R] [AddCommGroup A] [AddCommGroup B]\r\n  [Module R A] [Module R B]\r\n\r\n/--\r\n**Goursat's Lemma**: given `R`-modules `A, B`, and a submodule `V ⊆ A × B`, there are submodules\r\n`A' ⊆ A` and `B' ⊆ B`, and an equivalence `f : A / A' ≃ B / B'`, such that `V` is precisely the\r\npreimage in `A × B` of `graph f ⊆ A' × B'`.\r\n-/\r\ntheorem exists_equiv_fstMod_sndMod (V : Submodule R (A × B)) \r\n    (hv₁ : Surjective (Prod.fst ∘ V.subtype)) (hv₂ : Surjective (Prod.snd ∘ V.subtype)):\r\n    ∃ (A' : Submodule R A) (B' : Submodule R B) (f : (A ⧸ A') ≃ₗ[R] (B ⧸ B')),\r\n    ∀ p : A × B, p ∈ V ↔ f ⟦p.1⟧ = ⟦p.2⟧ := sorry\r\n```\r\n\r\nThis is a rather cleaner and more symmetric statement than the one you're proving; and it's clearly a lemma which Mathlib ought to have, and apparently doesn't yet. But it isn't the same lemma as the one you're proving here. Do you think there's a prospect of deriving the lemma you're proving from this one?\r\n\r\n\r\n\r\n",
              "createdAt": "2024-11-01T12:06:02Z",
              "author": {
                "login": "loefflerd"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6TCNEQ",
              "body": "(BTW, I made a PR for Goursat's lemma here: #18667. But I haven't yet got around to checking whether my speculation is correct that the result you're proving here is derivable from Goursat.)",
              "createdAt": "2024-11-10T18:01:16Z",
              "author": {
                "login": "loefflerd"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6TCRTR",
              "body": "The result in this PR is actually used to prove a Goursat-like statement in PFR. See [the Lean code](https://github.com/teorth/pfr/blob/a3de43bd735cb17b74c1fcda6cadd5babea10896/PFR/HomPFR.lean#L35-L58) and [the blueprint entry](https://teorth.github.io/pfr/blueprint/sect0009.html#a0000000287).\r\n\r\nI don't quite see how to deduce that Goursat-like statement from usual Goursat because usual Goursat only gives us info about the subgroup once we take its image in some quotient, while here we want to describe `H` precisely. Unless, I've missed something the quotient map really does lose some information.\r\n\r\nIn case it turns out useful, I have now proved Goursat for subgroups (#18823), depending on the vertical line test for monoid homs (#18822).",
              "createdAt": "2024-11-10T18:56:06Z",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6TCRaT",
              "body": "Oh! Sorry, I just spent several hours proving Goursat 🙈 ",
              "createdAt": "2024-11-10T18:57:38Z",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6TCc-L",
              "body": "Oops, sorry! I should have posted here when I made the PR. Your Goursat is not the same as mine, though: yours is better, since you prove it for (possibly non-commutative) groups, while my proof at #18667 only works for modules over a ring.\r\n\r\nFWIW, I'm not sure I agree with your comment:\r\n\r\n> usual Goursat only gives us info about the subgroup once we take its image in some quotient\r\n\r\nGoursat provides you with an isomorphism between quotients whose _preimage_ is the given subgroup. That's a complete characterisation of the given subgroup, it loses nothing. It isn't just saying that the _image_ of the given subgroup in the quotient is the graph of some isomorphism, which would indeed be a weaker statement.",
              "createdAt": "2024-11-10T20:10:51Z",
              "author": {
                "login": "loefflerd"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6TCf2E",
              "body": "> yours is better, since you prove it for (possibly non-commutative) groups, while my proof at #18667 only works for modules over a ring.\r\n\r\nMine doesn't have linearity of the map, nor the version where the projections are not surjective, although I suspect both are easy to deduce from what I have. Feel free to push to my Goursat branch (and put your name in the coyright header) if you want to complete it",
              "createdAt": "2024-11-10T20:23:43Z",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6WqXWh",
              "body": "I will close this for now because I think I can bypass this weird result in PFR",
              "createdAt": "2024-12-09T11:42:44Z",
              "author": {
                "login": "YaelDillies"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "4f3190acfed2694559366e19c52a6a8b70a7b2c4",
                "additions": 62,
                "deletions": 0,
                "committedDate": "2024-12-09T11:31:28Z",
                "author": {
                  "name": "Yaël Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH8gNQOQ",
                        "name": "Cross off linked issues",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12234910630/job/34125074489"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH8gK_Gw",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12234899737/job/34125037339"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH8gK_Hg",
                        "name": "post-or-update-summary-comment",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12234899735/job/34125037342"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH8gK4cg",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12234899289/job/34125035634"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH8gK5yg",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12234899285/job/34125035978"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH8gLAfg",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12234899758/job/34125037694"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH8gK7sA",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12234899289/job/34125036464"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH8gK4Rw",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12234899285/job/34125035591"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH8gLB2g",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12234899758/job/34125038042"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH8gK57g",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12234899289/job/34125036014"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH8gK7vw",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12234899285/job/34125036479"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH8gK9cA",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12234899289/job/34125036912"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH8hJZwQ",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12234899285/job/34126059969"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH8gLwjA",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/34125049996"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH8gK3AA",
                        "name": ".github/dependabot.yml",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dependabot-api.githubapp.com"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH8gMWEg",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=17308&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "createdAt": "2024-09-30T19:34:19Z",
        "deletions": 0,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/LinearAlgebra/Basis/VectorSpace.lean",
              "additions": 62,
              "deletions": 0
            }
          ]
        },
        "headRefName": "submodule_exists_fst_snd_mod",
        "headRefOid": "4f3190acfed2694559366e19c52a6a8b70a7b2c4",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c59KakH",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJjTQ",
              "color": "33DBEC",
              "name": "t-algebra"
            }
          ]
        },
        "latestReviews": {
          "nodes": []
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 17308,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": []
        },
        "reviewThreads": {
          "nodes": []
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjE0MDkwNTkz",
              "login": "YaelDillies"
            },
            {
              "id": "MDQ6VXNlcjQ4NjU2Nzkz",
              "login": "ADedecker"
            },
            {
              "id": "MDQ6VXNlcjM0Mzk2ODg=",
              "login": "loefflerd"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH8gNQOQ",
                "name": "Cross off linked issues",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12234910630/job/34125074489"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH8gK_Gw",
                "name": "label-and-report-new-contributor",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12234899737/job/34125037339"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH8gK_Hg",
                "name": "post-or-update-summary-comment",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12234899735/job/34125037342"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH8gK4cg",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12234899289/job/34125035634"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH8gK5yg",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12234899285/job/34125035978"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH8gLAfg",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12234899758/job/34125037694"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH8gK7sA",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12234899289/job/34125036464"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH8gK4Rw",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12234899285/job/34125035591"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH8gLB2g",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12234899758/job/34125038042"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH8gK57g",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12234899289/job/34125036014"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH8gK7vw",
                "name": "Build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12234899285/job/34125036479"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH8gK9cA",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12234899289/job/34125036912"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH8hJZwQ",
                "name": "Post-CI job",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12234899285/job/34126059969"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH8gLwjA",
                "name": "New Contributor Check",
                "conclusion": "NEUTRAL",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/34125049996"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH8gK3AA",
                "name": ".github/dependabot.yml",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dependabot-api.githubapp.com"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH8gMWEg",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=17308&login=leanprover-community&repository=mathlib4"
              }
            ]
          }
        },
        "title": "feat: Decomposing a submodule of a product",
        "updatedAt": "2024-12-09T11:42:49Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/17308",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6YcDVozwAAAANd9456",
              "createdAt": "2024-09-30T19:34:32Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJjTQ",
                "name": "t-algebra"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6OGP2s",
              "createdAt": "2024-09-30T19:35:10Z",
              "body": "### PR summary [4f3190acfe](https://github.com/leanprover-community/mathlib4/pull/17308/commits/4f3190acfed2694559366e19c52a6a8b70a7b2c4)\n\n<details><summary>\n\n#### Import changes for modified files\n\n</summary>\n\nDependency changes\n\n| File | Base Count | Head Count | Change |\n| --- | --- | --- | --- |\n| Mathlib.LinearAlgebra.Basis.VectorSpace | 971 | 972 | +1 (+0.10%) |\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n|<details><summary>130 files</summary> `Mathlib.Analysis.MeanInequalitiesPow` `Mathlib.Combinatorics.SimpleGraph.Triangle.Removal` `Mathlib.Dynamics.TopologicalEntropy.NetEntropy` `Mathlib.NumberTheory.MulChar.Lemmas` `Mathlib.Analysis.SpecialFunctions.Pow.Complex` `Mathlib.MeasureTheory.Function.SpecialFunctions.Basic` `Mathlib.Analysis.Normed.Lp.PiLp` `Mathlib.Analysis.SpecialFunctions.CompareExp` `Mathlib.Analysis.Convex.Birkhoff` `Mathlib.Topology.Algebra.Module.UniformConvergence` `Mathlib.LinearAlgebra.Dimension.DivisionRing` `Mathlib.Combinatorics.Additive.Corner.Roth` `Mathlib.MeasureTheory.Function.LpSeminorm.Basic` `Mathlib.Analysis.SpecialFunctions.Complex.Log` `Mathlib.LinearAlgebra.Dimension.Localization` `Mathlib.Analysis.Convex.Topology` `Mathlib.Analysis.Complex.HalfPlane` `Mathlib.Analysis.LocallyConvex.Bounded` `Mathlib.Analysis.Complex.UnitDisc.Basic` `Mathlib.Analysis.SpecialFunctions.Exp` `Mathlib.Analysis.Normed.Algebra.Norm` `Mathlib.Computability.AkraBazzi.GrowsPolynomially` `Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan` `Mathlib.Analysis.NormedSpace.RieszLemma` `Mathlib.Analysis.Complex.Circle` `Mathlib.Topology.MetricSpace.PartitionOfUnity` `Mathlib.Analysis.SpecialFunctions.PolynomialExp` `Mathlib.Analysis.LocallyConvex.Barrelled` `Mathlib.Analysis.CStarAlgebra.ContinuousFunctionalCalculus.Unitary` `Mathlib.NumberTheory.SumPrimeReciprocals` `Mathlib.MeasureTheory.Function.LpSeminorm.Trim` `Mathlib.Analysis.PSeries` `Mathlib.Analysis.Complex.Basic` `Mathlib.Analysis.Calculus.TangentCone` `Mathlib.Analysis.SpecialFunctions.Pow.Continuity` `Mathlib.MeasureTheory.Function.LpSeminorm.TriangleInequality` `Mathlib.Analysis.SpecialFunctions.Log.ENNRealLogExp` `Mathlib.NumberTheory.ClassNumber.AdmissibleCardPowDegree` `Mathlib.Combinatorics.SimpleGraph.Regularity.Increment` `Mathlib.Analysis.SpecificLimits.FloorPow` `Mathlib.Analysis.LocallyConvex.WeakDual` `Mathlib.Analysis.Normed.Module.Span` `Mathlib.Analysis.Normed.Lp.ProdLp` `Mathlib.Analysis.LocallyConvex.AbsConvex` `Mathlib.Analysis.Normed.Ring.SeminormFromConst` `Mathlib.Analysis.Convex.SimplicialComplex.Basic` `Mathlib.Analysis.Normed.Group.Tannery` `Mathlib.Analysis.Complex.IsIntegral` `Mathlib.Analysis.SpecialFunctions.Log.Base` `Mathlib.Analysis.Convex.SpecificFunctions.Pow` `Mathlib.Analysis.Normed.Lp.lpSpace` `Mathlib.Analysis.Normed.Ring.Seminorm` `Mathlib.MeasureTheory.Function.LpSeminorm.ChebyshevMarkov` `Mathlib.Topology.Compactness.DeltaGeneratedSpace` `Mathlib.MeasureTheory.Function.SpecialFunctions.Arctan` `Mathlib.Analysis.CStarAlgebra.Classes` `Mathlib.Analysis.NormedSpace.ConformalLinearMap` `Mathlib.LinearAlgebra.AffineSpace.Basis` `Mathlib.Analysis.Complex.ReImTopology` `Mathlib.Analysis.SpecialFunctions.Complex.Arg` `Mathlib.Topology.PartitionOfUnity` `Mathlib.GroupTheory.CosetCover` `Mathlib.LinearAlgebra.AffineSpace.Independent` `Mathlib.NumberTheory.Ostrowski` `Mathlib.Topology.Algebra.Module.LocallyConvex` `Mathlib.MeasureTheory.Measure.Doubling` `Mathlib.Analysis.MeanInequalities` `Mathlib.Analysis.Normed.Ring.SeminormFromBounded` `Mathlib.Analysis.Convex.Independent` `Mathlib.Analysis.Complex.Asymptotics` `Mathlib.Analysis.SpecialFunctions.Trigonometric.Inverse` `Mathlib.Analysis.SpecialFunctions.Trigonometric.Complex` `Mathlib.Analysis.NormedSpace.Extr` `Mathlib.FieldTheory.Finiteness` `Mathlib.MeasureTheory.Constructions.BorelSpace.Complex` `Mathlib.Analysis.RCLike.Basic` `Mathlib.RingTheory.RootsOfUnity.Complex` `Mathlib.Analysis.SpecialFunctions.Log.Monotone` `Mathlib.Analysis.SpecialFunctions.Pow.Asymptotics` `Mathlib.Analysis.NormedSpace.ENorm` `Mathlib.Topology.Algebra.PontryaginDual` `Mathlib.Topology.MetricSpace.Holder` `Mathlib.Combinatorics.SimpleGraph.Regularity.Chunk` `Mathlib.MeasureTheory.Integral.MeanInequalities` `Mathlib.Analysis.NormedSpace.HomeomorphBall` `Mathlib.Analysis.SpecialFunctions.Log.Basic` `Mathlib.Analysis.ConstantSpeed` `Mathlib.Topology.Algebra.Module.Multilinear.Bounded` `Mathlib.Analysis.Convex.TotallyBounded` `Mathlib.NumberTheory.VonMangoldt` `Mathlib.Topology.MetricSpace.HolderNorm` `Mathlib.Analysis.SpecialFunctions.Pow.Real` `Mathlib.Dynamics.TopologicalEntropy.Semiconj` `Mathlib.Analysis.SpecialFunctions.Trigonometric.Angle` `Mathlib.Analysis.Convex.Gauge` `Mathlib.MeasureTheory.Function.LpSeminorm.CompareExp` `Mathlib.Analysis.Convex.Jensen` `Mathlib.Topology.MetricSpace.Kuratowski` `Mathlib.Analysis.Complex.Convex` `Mathlib.Analysis.Convex.Combination` `Mathlib.Analysis.Normed.Ring.IsPowMulFaithful` `Mathlib.Analysis.LocallyConvex.ContinuousOfBounded` `Mathlib.Algebra.Order.CompleteField` `Mathlib.Combinatorics.SimpleGraph.Regularity.Bound` `Mathlib.Analysis.LocallyConvex.WithSeminorms` `Mathlib.Analysis.Normed.Module.Ray` `Mathlib.Algebra.Group.UniqueProds.VectorSpace` `Mathlib.Dynamics.TopologicalEntropy.CoverEntropy` `Mathlib.Analysis.CStarAlgebra.lpSpace` `Mathlib.Analysis.NormedSpace.Real` `Mathlib.Analysis.SpecialFunctions.Complex.Circle` `Mathlib.Combinatorics.SimpleGraph.Regularity.Lemma` `Mathlib.Analysis.NormedSpace.BallAction` `Mathlib.Dynamics.BirkhoffSum.NormedSpace` `Mathlib.Analysis.Convex.Caratheodory` `Mathlib.Analysis.NormedSpace.Connected` `Mathlib.Analysis.SpecificLimits.RCLike` `Mathlib.Analysis.SpecialFunctions.Pow.NNReal` `Mathlib.Analysis.Convex.StoneSeparation` `Mathlib.Analysis.Convex.SpecificFunctions.Basic` `Mathlib.Analysis.SpecialFunctions.Trigonometric.Basic` `Mathlib.MeasureTheory.Measure.Complex` `Mathlib.Topology.Algebra.Module.Cardinality` `Mathlib.Analysis.NormedSpace.SphereNormEquiv` `Mathlib.Analysis.Convex.PartitionOfUnity` `Mathlib.Analysis.Complex.AbelLimit` `Mathlib.Analysis.NormedSpace.Pointwise` `Mathlib.Analysis.SpecialFunctions.Log.ENNRealLog` `Mathlib.LinearAlgebra.Basis.VectorSpace` `Mathlib.Analysis.Normed.Algebra.UnitizationL1`</details>|1|\n\n</details>\n\n</details>\n\n---\n\n#### Declarations diff\n\n`+ exists_equiv_fst_sndModFst`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n---\n\n<details><summary>No changes to technical debt.</summary>\n\nYou can run this locally as\n```\n./scripts/technical-debt-metrics.sh pr_summary\n```\n* The `relative` value is the weighted *sum* of the differences with weight given by the *inverse* of the current value of the statistic.\n* The `absolute` value is the `relative` value divided by the total sum of the inverses of the current values (i.e. the weighted *average* of the differences).\n</details>",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6OL0hB",
              "createdAt": "2024-10-01T10:54:44Z",
              "body": "I don't really know the use case, but the underlying result I see is that any submodule `S` of `A × B` decomposes as the direct sum of its intersection with `B` and its intersection with the graph of some linear map from `A` to `B`. This linear map is obtained by taking a section of the surjective map `S →ₗ[R] (map (LinearMap.fst R A B) S)` and extending that section to a map from `A` to `B`.\r\n\r\nComposing with the obvious linear equiv between the graph of a linear map and its domain gets you the result.\r\n\r\nBut maybe this just makes things harder to use in practice.",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6OMIe5",
              "createdAt": "2024-10-01T11:37:29Z",
              "body": "> the underlying result I see is that any submodule `S` of `A × B` decomposes as the direct sum of its intersection with `B` and its intersection with the graph of some linear map from `A` to `B`.\r\n\r\nYes, that's exactly right.\r\n\r\n> Composing with the obvious linear equiv between the graph of a linear map and its domain gets you the result.\r\n> \r\n> But maybe this just makes things harder to use in practice.\r\n\r\nI think that's the right approach. How would you state the theorem and prove it?",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "AssignedEvent",
              "id": "AE_lADOFcwZ1c6YcDVozwAAAAOAhiOd",
              "createdAt": "2024-10-31T16:38:07Z",
              "assignee": {
                "id": "MDQ6VXNlcjM0Mzk2ODg=",
                "login": "loefflerd"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6SIwMe",
              "createdAt": "2024-11-01T12:06:02Z",
              "body": "Hmm. I promised I'd look at this, but on looking at it, I realise you're not actually proving the same lemma I thought you were proving.\r\n\r\nWhat I _thought_ was going on was the following:\r\n```lean\r\nvariable {R A B : Type*} [Ring R] [AddCommGroup A] [AddCommGroup B]\r\n  [Module R A] [Module R B]\r\n\r\n/--\r\n**Goursat's Lemma**: given `R`-modules `A, B`, and a submodule `V ⊆ A × B`, there are submodules\r\n`A' ⊆ A` and `B' ⊆ B`, and an equivalence `f : A / A' ≃ B / B'`, such that `V` is precisely the\r\npreimage in `A × B` of `graph f ⊆ A' × B'`.\r\n-/\r\ntheorem exists_equiv_fstMod_sndMod (V : Submodule R (A × B)) \r\n    (hv₁ : Surjective (Prod.fst ∘ V.subtype)) (hv₂ : Surjective (Prod.snd ∘ V.subtype)):\r\n    ∃ (A' : Submodule R A) (B' : Submodule R B) (f : (A ⧸ A') ≃ₗ[R] (B ⧸ B')),\r\n    ∀ p : A × B, p ∈ V ↔ f ⟦p.1⟧ = ⟦p.2⟧ := sorry\r\n```\r\n\r\nThis is a rather cleaner and more symmetric statement than the one you're proving; and it's clearly a lemma which Mathlib ought to have, and apparently doesn't yet. But it isn't the same lemma as the one you're proving here. Do you think there's a prospect of deriving the lemma you're proving from this one?\r\n\r\n\r\n\r\n",
              "author": {
                "login": "loefflerd"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6TCNEQ",
              "createdAt": "2024-11-10T18:01:16Z",
              "body": "(BTW, I made a PR for Goursat's lemma here: #18667. But I haven't yet got around to checking whether my speculation is correct that the result you're proving here is derivable from Goursat.)",
              "author": {
                "login": "loefflerd"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6TCRTR",
              "createdAt": "2024-11-10T18:56:06Z",
              "body": "The result in this PR is actually used to prove a Goursat-like statement in PFR. See [the Lean code](https://github.com/teorth/pfr/blob/a3de43bd735cb17b74c1fcda6cadd5babea10896/PFR/HomPFR.lean#L35-L58) and [the blueprint entry](https://teorth.github.io/pfr/blueprint/sect0009.html#a0000000287).\r\n\r\nI don't quite see how to deduce that Goursat-like statement from usual Goursat because usual Goursat only gives us info about the subgroup once we take its image in some quotient, while here we want to describe `H` precisely. Unless, I've missed something the quotient map really does lose some information.\r\n\r\nIn case it turns out useful, I have now proved Goursat for subgroups (#18823), depending on the vertical line test for monoid homs (#18822).",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6TCRaT",
              "createdAt": "2024-11-10T18:57:38Z",
              "body": "Oh! Sorry, I just spent several hours proving Goursat 🙈 ",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6TCc-L",
              "createdAt": "2024-11-10T20:10:51Z",
              "body": "Oops, sorry! I should have posted here when I made the PR. Your Goursat is not the same as mine, though: yours is better, since you prove it for (possibly non-commutative) groups, while my proof at #18667 only works for modules over a ring.\r\n\r\nFWIW, I'm not sure I agree with your comment:\r\n\r\n> usual Goursat only gives us info about the subgroup once we take its image in some quotient\r\n\r\nGoursat provides you with an isomorphism between quotients whose _preimage_ is the given subgroup. That's a complete characterisation of the given subgroup, it loses nothing. It isn't just saying that the _image_ of the given subgroup in the quotient is the graph of some isomorphism, which would indeed be a weaker statement.",
              "author": {
                "login": "loefflerd"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6TCf2E",
              "createdAt": "2024-11-10T20:23:43Z",
              "body": "> yours is better, since you prove it for (possibly non-commutative) groups, while my proof at #18667 only works for modules over a ring.\r\n\r\nMine doesn't have linearity of the map, nor the version where the projections are not surjective, although I suspect both are easy to deduce from what I have. Feel free to push to my Goursat branch (and put your name in the coyright header) if you want to complete it",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c6YcDVozwAAAAOgwLpl",
              "createdAt": "2024-12-09T11:41:56Z"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6WqXWh",
              "createdAt": "2024-12-09T11:42:44Z",
              "body": "I will close this for now because I think I can bypass this weird result in PFR",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c6YcDVozwAAAAOgwOQu",
              "createdAt": "2024-12-09T11:42:44Z"
            }
          ]
        }
      }
    }
  }
}
