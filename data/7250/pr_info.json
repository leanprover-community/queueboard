{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 1,
        "assignees": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjIxMTY1NzA=",
              "login": "Vierkantor"
            }
          ]
        },
        "author": {
          "login": "alexjbest"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "Following https://github.com/leanprover-community/mathlib4/pull/7245, https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/isClass.3F.20panic!/near/391779504.\r\n\r\nThere is one exception that it is unclear how to fix, it seems lean makes the internal declarations in a block of mutual instances also instances perhaps? Seeing as it is internal I hope it won't cause too much trouble\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 1,
        "closed": true,
        "closedAt": "2023-09-20T10:21:26Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5m1O9v",
              "body": "> Is there a reason for putting this linter in Mathlib instead of Std? I think it should be applicable to any Lean project.\r\n\r\nLazyness ;) its much easier to test vs mathlib by simply PRing to mathlib.\r\n\r\nI'm not sure where the line is here though, Mathlib/Tactic/Lint.lean already contains one linter that I would also argue is widely applicable",
              "createdAt": "2023-09-19T10:21:43Z",
              "author": {
                "login": "alexjbest"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5m12c5",
              "body": "There's certainly value in getting this linter in quickly, and I expect/hope that ultimately it will be obsoleted anyway because Lean itself makes this situation an error so there might not be enough gained in moving this to Std.\r\n\r\nBut to ensure such a move remains possible, how about the following: ensure no non-Std imports in the linters, by adding a `#assert_not_exists` command. Not sure what to assert against, maybe something from either `Mathlib/Lean/Expr/Basic.lean` or `Mathlib/Tactic/Core.lean`?",
              "createdAt": "2023-09-19T12:11:43Z",
              "author": {
                "login": "Vierkantor"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5m61OT",
              "body": "> There's certainly value in getting this linter in quickly, and I expect/hope that ultimately it will be obsoleted anyway because Lean itself makes this situation an error so there might not be enough gained in moving this to Std.\r\n> \r\n> But to ensure such a move remains possible, how about the following: ensure no non-Std imports in the linters, by adding a `#assert_not_exists` command. Not sure what to assert against, maybe something from either `Mathlib/Lean/Expr/Basic.lean` or `Mathlib/Tactic/Core.lean`?\r\n\r\nThis seems way more effort than its worth, ill just pr this to std then I think :)",
              "createdAt": "2023-09-20T00:04:22Z",
              "author": {
                "login": "alexjbest"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5m61XA",
              "body": "Actually we may aswell have this PR be simply the have to haveI change now",
              "createdAt": "2023-09-20T00:05:16Z",
              "author": {
                "login": "alexjbest"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5m9lvk",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6246978386/job/16958679981)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6246978386/job/16958679560)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6246978386/job/16958679305)",
              "createdAt": "2023-09-20T10:21:25Z",
              "author": {
                "login": "bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "34810bb54bd51e27ec51887eb9df9c2c43df7e0c",
                "additions": 12,
                "deletions": 0,
                "committedDate": "2023-09-19T00:10:50Z",
                "author": {
                  "name": "Alex J. Best",
                  "email": "alex.j.best@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "ca9379ad94c69a0b29a39babd937e0336aedf820",
                "additions": 966,
                "deletions": 1150,
                "committedDate": "2023-09-19T08:46:08Z",
                "author": {
                  "name": "Alex J. Best",
                  "email": "alex.j.best@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "e6a3b5fdedffb7c5dce8a2015bba86f98af0324b",
                "additions": 3,
                "deletions": 1,
                "committedDate": "2023-09-19T09:37:34Z",
                "author": {
                  "name": "Alex J. Best",
                  "email": "alex.j.best@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "835bff066eb4724079a321164dd9773e7103a28e",
                "additions": 1,
                "deletions": 0,
                "committedDate": "2023-09-19T10:21:54Z",
                "author": {
                  "name": "Alex J Best",
                  "email": "alex.j.best@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "bb0ae9e54a0b6942099cf87d28b7360fa03bde43",
                "additions": 0,
                "deletions": 14,
                "committedDate": "2023-09-20T00:06:07Z",
                "author": {
                  "name": "Alex J Best",
                  "email": "alex.j.best@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "c10a2d65b39f7f5fad5a9db047a0da554d45d68d",
                "additions": 0,
                "deletions": 1,
                "committedDate": "2023-09-20T00:08:34Z",
                "author": {
                  "name": "Alex J Best",
                  "email": "alex.j.best@gmail.com"
                },
                "statusCheckRollup": null
              }
            }
          ]
        },
        "createdAt": "2023-09-19T00:11:24Z",
        "deletions": 1,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/Algebra/Category/ModuleCat/ChangeOfRings.lean",
              "additions": 1,
              "deletions": 1
            }
          ]
        },
        "headRefName": "alexjbest/nonclassinstancelint",
        "headRefOid": "c10a2d65b39f7f5fad5a9db047a0da554d45d68d",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5an7nZ",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
              "color": "06e039",
              "name": "ready-to-merge"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABKAKYew",
              "color": "33DBEC",
              "name": "t-meta"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5hVEHi",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kmill"
              },
              "submittedAt": "2023-09-19T10:13:57Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hd9OL",
              "body": "For the lazy, like me, std4 pr: https://github.com/leanprover/std4/pull/268 :)\r\n\r\nbors r+",
              "state": "APPROVED",
              "author": {
                "login": "Vierkantor"
              },
              "submittedAt": "2023-09-20T09:57:08Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 7250,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": "APPROVED",
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5hU9bJ",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kmill"
              },
              "submittedAt": "2023-09-19T09:57:43Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hU-Z_",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "Vierkantor"
              },
              "submittedAt": "2023-09-19T10:00:00Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hU-tR",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "Vierkantor"
              },
              "submittedAt": "2023-09-19T10:00:43Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hU_uZ",
              "body": "Is there a reason for putting this linter in Mathlib instead of Std? I think it should be applicable to any Lean project.",
              "state": "COMMENTED",
              "author": {
                "login": "Vierkantor"
              },
              "submittedAt": "2023-09-19T10:03:05Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hVEHi",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kmill"
              },
              "submittedAt": "2023-09-19T10:13:57Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hVIBk",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alexjbest"
              },
              "submittedAt": "2023-09-19T10:24:01Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hamQN",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alexjbest"
              },
              "submittedAt": "2023-09-20T00:05:36Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hamSI",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alexjbest"
              },
              "submittedAt": "2023-09-20T00:05:48Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hamsw",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alexjbest"
              },
              "submittedAt": "2023-09-20T00:08:31Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hd9OL",
              "body": "For the lazy, like me, std4 pr: https://github.com/leanprover/std4/pull/268 :)\r\n\r\nbors r+",
              "state": "APPROVED",
              "author": {
                "login": "Vierkantor"
              },
              "submittedAt": "2023-09-20T09:57:08Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5PREaq",
                    "body": "Could you explain why `haveI` instead of `have`? I just want to make sure you're not using it with the Lean 3 meaning. Now it means \"inlined have\", where `(RestrictScalars.obj' f (ModuleCat.mk M)).isModule.toSMul` itself will be substituted into wherever `this` is used.",
                    "createdAt": "2023-09-19T09:57:43Z",
                    "author": {
                      "login": "kmill"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PRFPh",
                    "body": "If I understand the commit correctly, the inlining is the point, since otherwise the declaration will have head symbol `have` instead of `SMulCommClass`.",
                    "createdAt": "2023-09-19T10:00:00Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PRJZi",
                    "body": "Ah, thanks, I didn't notice this was for the type of the instance.",
                    "createdAt": "2023-09-19T10:13:57Z",
                    "author": {
                      "login": "kmill"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PRL6s",
                    "body": "to be honest I'm still not sure how useful this instance will will be with such a `haveI`ed subterm, but at least this stops it breaking doc-gen",
                    "createdAt": "2023-09-19T10:24:01Z",
                    "author": {
                      "login": "alexjbest"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5PRFf0",
                    "body": "IMO we should always add a comment when adding nolints.\r\n```suggestion\r\n-- This declaration is autogenerated to be an instance, but its type is not a class.\r\nattribute [nolint nonClassInstance] Lists.Equiv.decidable._unary._mutual\r\n```",
                    "createdAt": "2023-09-19T10:00:43Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5PUqiD",
                    "body": "```suggestion\r\n```",
                    "createdAt": "2023-09-20T00:05:36Z",
                    "author": {
                      "login": "alexjbest"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5PUqjJ",
                    "body": "```suggestion\r\n```",
                    "createdAt": "2023-09-20T00:05:48Z",
                    "author": {
                      "login": "alexjbest"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5PUq1T",
                    "body": "```suggestion\r\n```",
                    "createdAt": "2023-09-20T00:08:31Z",
                    "author": {
                      "login": "alexjbest"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjE2ODg1MzM=",
              "login": "alexjbest"
            },
            {
              "id": "MDQ6VXNlcjIxMTY1NzA=",
              "login": "Vierkantor"
            },
            {
              "id": "MDQ6VXNlcjIzNTMwNw==",
              "login": "kmill"
            },
            {
              "id": "U_kgDOB75MNQ",
              "login": "leanprover-community-mathlib4-bot"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": null,
        "title": "[Merged by Bors] - chore: another non-class instance",
        "updatedAt": "2023-09-20T10:21:30Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/7250",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "34810bb54bd51e27ec51887eb9df9c2c43df7e0c"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5xXYcGzwAAAAJsIuRb",
              "createdAt": "2023-09-19T00:11:24Z",
              "label": {
                "id": "MDU6TGFiZWwzMjcxMjQ0NzU5",
                "name": "WIP"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5xXYcGzwAAAAJsIuRm",
              "createdAt": "2023-09-19T00:11:24Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKAKYew",
                "name": "t-meta"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5xXYcGzwAAAAJsIuRv",
              "createdAt": "2023-09-19T00:11:24Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "ca9379ad94c69a0b29a39babd937e0336aedf820"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "e6a3b5fdedffb7c5dce8a2015bba86f98af0324b"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5xXYcGzwAAAAJsYJqx",
              "createdAt": "2023-09-19T09:42:37Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5xXYcGzwAAAAJsYJq8",
              "createdAt": "2023-09-19T09:42:37Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5xXYcGzwAAAAJsYdGc",
              "createdAt": "2023-09-19T09:50:17Z",
              "label": {
                "id": "MDU6TGFiZWwzMjcxMjQ0NzU5",
                "name": "WIP"
              }
            },
            {
              "__typename": "AssignedEvent",
              "id": "AE_lADOFcwZ1c5xXYcGzwAAAAJsYwIS",
              "createdAt": "2023-09-19T09:57:24Z",
              "assignee": {
                "id": "MDQ6VXNlcjIxMTY1NzA=",
                "login": "Vierkantor"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5hU9bJ",
              "createdAt": "2023-09-19T09:57:43Z",
              "body": "",
              "author": {
                "login": "kmill"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5hU-tR",
              "createdAt": "2023-09-19T10:00:43Z",
              "body": "",
              "author": {
                "login": "Vierkantor"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5hU_uZ",
              "createdAt": "2023-09-19T10:03:05Z",
              "body": "Is there a reason for putting this linter in Mathlib instead of Std? I think it should be applicable to any Lean project.",
              "author": {
                "login": "Vierkantor"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5m1O9v",
              "createdAt": "2023-09-19T10:21:43Z",
              "body": "> Is there a reason for putting this linter in Mathlib instead of Std? I think it should be applicable to any Lean project.\r\n\r\nLazyness ;) its much easier to test vs mathlib by simply PRing to mathlib.\r\n\r\nI'm not sure where the line is here though, Mathlib/Tactic/Lint.lean already contains one linter that I would also argue is widely applicable",
              "author": {
                "login": "alexjbest"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "835bff066eb4724079a321164dd9773e7103a28e"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5m12c5",
              "createdAt": "2023-09-19T12:11:43Z",
              "body": "There's certainly value in getting this linter in quickly, and I expect/hope that ultimately it will be obsoleted anyway because Lean itself makes this situation an error so there might not be enough gained in moving this to Std.\r\n\r\nBut to ensure such a move remains possible, how about the following: ensure no non-Std imports in the linters, by adding a `#assert_not_exists` command. Not sure what to assert against, maybe something from either `Mathlib/Lean/Expr/Basic.lean` or `Mathlib/Tactic/Core.lean`?",
              "author": {
                "login": "Vierkantor"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5m61OT",
              "createdAt": "2023-09-20T00:04:22Z",
              "body": "> There's certainly value in getting this linter in quickly, and I expect/hope that ultimately it will be obsoleted anyway because Lean itself makes this situation an error so there might not be enough gained in moving this to Std.\r\n> \r\n> But to ensure such a move remains possible, how about the following: ensure no non-Std imports in the linters, by adding a `#assert_not_exists` command. Not sure what to assert against, maybe something from either `Mathlib/Lean/Expr/Basic.lean` or `Mathlib/Tactic/Core.lean`?\r\n\r\nThis seems way more effort than its worth, ill just pr this to std then I think :)",
              "author": {
                "login": "alexjbest"
              }
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c5xXYcGzwAAAAJs3Fch",
              "createdAt": "2023-09-20T00:04:22Z"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5m61XA",
              "createdAt": "2023-09-20T00:05:16Z",
              "body": "Actually we may aswell have this PR be simply the have to haveI change now",
              "author": {
                "login": "alexjbest"
              }
            },
            {
              "__typename": "ReopenedEvent",
              "id": "REE_lADOFcwZ1c5xXYcGzwAAAAJs3Gce",
              "createdAt": "2023-09-20T00:05:16Z"
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5hamQN",
              "createdAt": "2023-09-20T00:05:36Z",
              "body": "",
              "author": {
                "login": "alexjbest"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5hamSI",
              "createdAt": "2023-09-20T00:05:48Z",
              "body": "",
              "author": {
                "login": "alexjbest"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "bb0ae9e54a0b6942099cf87d28b7360fa03bde43"
              }
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOH5Wj9M5Ofiea",
              "createdAt": "2023-09-20T00:08:15Z",
              "source": {
                "id": "PR_kwDOH5Wj9M5auboS",
                "title": "feat: a linter for instances that are not classes",
                "url": "https://github.com/leanprover-community/batteries/pull/268"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5hamsw",
              "createdAt": "2023-09-20T00:08:30Z",
              "body": "",
              "author": {
                "login": "alexjbest"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "c10a2d65b39f7f5fad5a9db047a0da554d45d68d"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5hd9OL",
              "createdAt": "2023-09-20T09:57:08Z",
              "body": "For the lazy, like me, std4 pr: https://github.com/leanprover/std4/pull/268 :)\r\n\r\nbors r+",
              "author": {
                "login": "Vierkantor"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5xXYcGzwAAAAJtI4b6",
              "createdAt": "2023-09-20T09:57:23Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
                "name": "ready-to-merge"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5xXYcGzwAAAAJtI4e2",
              "createdAt": "2023-09-20T09:57:24Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5m9lvk",
              "createdAt": "2023-09-20T10:21:25Z",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6246978386/job/16958679981)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6246978386/job/16958679560)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6246978386/job/16958679305)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c5xXYcGzwAAAAJtJ1g_",
              "createdAt": "2023-09-20T10:21:27Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c5xXYcGzwAAAAJtJ1o8",
              "createdAt": "2023-09-20T10:21:30Z"
            },
            {
              "__typename": "ReferencedEvent"
            }
          ]
        }
      }
    }
  }
}
