{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 66,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "mbkybky"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "This PR adds definitions of restricting maps to the ring of integers. That is, given a ring homomorphism (resp. ring isomorphism; resp. algebra homomorphism; resp. algebra isomorphism) `f` from`K` to `L`, we define the induced ring homomorphism (resp. ring isomorphism; resp. algebra homomorphism; resp. algebra isomorphism) from `ùìû K` to `ùìû L`, which is obtained by restricting `f` to `ùìû K`.\r\n\r\nCo-authored-by: Yongle Hu @mbkybky\r\nCo-authored-by: Yuyang Zhao @FR-vdash-bot\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nFor details on the \"pull request lifecycle\" in mathlib, please see:\r\nhttps://leanprover-community.github.io/contribute/index.html\r\n\r\nIn particular, note that most reviewers will only notice your PR\r\nif it passes the continuous integration checks.\r\nPlease ask for help on https://leanprover.zulipchat.com if needed.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nIf you are moving or deleting declarations, please include these lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nMoves:\r\n- Vector.* -> Mathlib.Vector.*\r\n- ...\r\n\r\nDeletions:\r\n- Nat.bit1_add_bit1\r\n- ...\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 2,
        "closed": true,
        "closedAt": "2024-09-27T15:50:55Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c6MOpXp",
              "body": "### PR summary [85014ec1f6](https://github.com/leanprover-community/mathlib4/pull/16849/commits/85014ec1f6c548baf5e65cea55a501f171bc8299)\n\n#### Import changes for modified files\n\nNo significant changes to the import graph\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ coe_ringHom_ofRingHom`\n`+ inst_isScalarTower`\n`+ mapAlgEquiv`\n`+ mapAlgHom`\n`+ mapRingEquiv`\n`+ mapRingHom`\n`+ ofRingHom`\n`+ ofRingHom_coe_ringHom`\n`+ ofRingHom_symm`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n</details>",
              "createdAt": "2024-09-16T11:24:54Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6Ns40R",
              "body": "> We already have [NumberField.inst_ringOfIntegersAlgebra](https://leanprover-community.github.io/mathlib4_docs/Mathlib/NumberTheory/NumberField/Basic.html#NumberField.inst_ringOfIntegersAlgebra). I see it's not exactly the same thing, but it is very close. What do you think?\r\n\r\nYes. What I really need is `mapAlgEquiv`. To this end, I wrote `mapRingHom` following the construction of `NumberField.inst_ringOfIntegersAlgebra`, and used it to write `mapAlgHom` and `mapAlgEquiv`.",
              "createdAt": "2024-09-26T15:54:31Z",
              "author": {
                "login": "mbkybky"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6Ns-Mv",
              "body": "Yes, the equiv version is definitely not there. What about avoiding `mapRingHom` (since it is just the `algebraMap` given by the algebra instance) but keeping the equiv?",
              "createdAt": "2024-09-26T16:04:50Z",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6NtAsr",
              "body": "Actually we want that for a tower of fields `M/L/K` (with `IsScalarTower ..`) the corresponing algebras of ring of integers satisfy `IsScalarTower`. Then proving your result should be easy (just make `L/K/L` using the ring hom and its inverse).",
              "createdAt": "2024-09-26T16:08:59Z",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6NtR0O",
              "body": "> Yes, the equiv version is definitely not there. What about avoiding `mapRingHom` (since it is just the `algebraMap` given by the algebra instance) but keeping the equiv?\r\n\r\nI think `mapRingHom` would be more general. For example, if we have a ring homomorphism `L ‚Üí+* L`, the induced `Algebra` instance will conflict with the instance induced by `RingHom.id`.",
              "createdAt": "2024-09-26T16:45:10Z",
              "author": {
                "login": "mbkybky"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6NtWI6",
              "body": "What I am saying is that if we have `L` a `K` algebra, there with your construction two ways of getting a ring hom `ùìû K ‚Üí ùìû L`: one is `algebraMap (ùìû K) (ùìû L)`, and the other your construction. It's not the end of the world (and you're right, your construction works given any map, without the `Algebra` instance), but it would be nice to have them defeq (so you should modify your construction to be `algebraMap`, after some `let _ : Algebra .. ..:=`). or at least we want the theorem saying they're the same.",
              "createdAt": "2024-09-26T16:54:59Z",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6NtZ-E",
              "body": "> What I am saying is that if we have `L` a `K` algebra, there with your construction two ways of getting a ring hom `ùìû K ‚Üí ùìû L`: one is `algebraMap (ùìû K) (ùìû L)`, and the other your construction. It's not the end of the world (and you're right, your construction works given any map, without the `Algebra` instance), but it would be nice to have them defeq (so you should modify your construction to be `algebraMap`, after some `let _ : Algebra .. ..:=`). or at least we want the theorem saying they're the same.\r\n\r\nI understand. But would it be a better to modify the definition of `NumberField.inst_ringOfIntegersAlgebra` (using `mapRingHom`)?  It's currently induced by a ring homomorphism, and inducing a ring homomorphism from it again might be too indirect.",
              "createdAt": "2024-09-26T17:03:47Z",
              "author": {
                "login": "mbkybky"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6Nta0i",
              "body": "> > What I am saying is that if we have `L` a `K` algebra, there with your construction two ways of getting a ring hom `ùìû K ‚Üí ùìû L`: one is `algebraMap (ùìû K) (ùìû L)`, and the other your construction. It's not the end of the world (and you're right, your construction works given any map, without the `Algebra` instance), but it would be nice to have them defeq (so you should modify your construction to be `algebraMap`, after some `let _ : Algebra .. ..:=`). or at least we want the theorem saying they're the same.\r\n> \r\n> I understand. But would it be a better to modify the definition of `NumberField.inst_ringOfIntegersAlgebra` (using `mapRingHom`)? It's currently induced by a ring homomorphism, and inducing a ring homomorphism from it again might be too indirect.\r\n\r\nWhy not, but make sure to keep [this](https://github.com/leanprover-community/mathlib4/blob/367f25d3750097169f52c46b90f06497586b3a31/Mathlib/NumberTheory/NumberField/Basic.lean#L149) example working.",
              "createdAt": "2024-09-26T17:05:49Z",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6Ntcdz",
              "body": "> > > What I am saying is that if we have `L` a `K` algebra, there with your construction two ways of getting a ring hom `ùìû K ‚Üí ùìû L`: one is `algebraMap (ùìû K) (ùìû L)`, and the other your construction. It's not the end of the world (and you're right, your construction works given any map, without the `Algebra` instance), but it would be nice to have them defeq (so you should modify your construction to be `algebraMap`, after some `let _ : Algebra .. ..:=`). or at least we want the theorem saying they're the same.\r\n> > \r\n> > \r\n> > I understand. But would it be a better to modify the definition of `NumberField.inst_ringOfIntegersAlgebra` (using `mapRingHom`)? It's currently induced by a ring homomorphism, and inducing a ring homomorphism from it again might be too indirect.\r\n> \r\n> Why not, but make sure to keep [this](https://github.com/leanprover-community/mathlib4/blob/367f25d3750097169f52c46b90f06497586b3a31/Mathlib/NumberTheory/NumberField/Basic.lean#L149) example working.\r\n\r\nOK. I will try it tomorrow. Thank you!",
              "createdAt": "2024-09-26T17:09:45Z",
              "author": {
                "login": "mbkybky"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6Nx_d4",
              "body": "!bench",
              "createdAt": "2024-09-27T08:09:59Z",
              "author": {
                "login": "mbkybky"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6NyN4p",
              "body": "Here are the [benchmark results](http://speed.lean-fro.org/mathlib4/run-detail/fbf6a79e-414b-4e47-8283-c64bc08d3014) for commit 85014ec1f6c548baf5e65cea55a501f171bc8299.\nThere were [no significant changes](http://speed.lean-fro.org/mathlib4/compare/9c37380a-451c-4c7d-81cd-902ba247548e/to/fbf6a79e-414b-4e47-8283-c64bc08d3014) against commit cc2c5288193edfd09bc4bf4eb6e0b26459c8572e.",
              "createdAt": "2024-09-27T08:35:47Z",
              "author": {
                "login": "leanprover-bot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6N1a5Z",
              "body": "Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/11073025278/job/30768632040)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/11073025278/job/30768632762)",
              "createdAt": "2024-09-27T15:50:54Z",
              "author": {
                "login": "mathlib-bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "07458bcf39a5b21a573d32b0b6f854dc2f54bdb6",
                "additions": 60,
                "deletions": 0,
                "committedDate": "2024-09-16T09:37:32Z",
                "author": {
                  "name": "Hu Yongle",
                  "email": "2065545849@qq.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHJrmV9w",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11055392811/job/30714467831"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHJseCew",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11055671626/job/30715380347"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHJrmWAQ",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11055392812/job/30714467841"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHJseASw",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11055671623/job/30715379787"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHJrmV3g",
                        "name": "Fix style issues from lint",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11055392807/job/30714467806"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHJseCHw",
                        "name": "Fix style issues from lint",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11055671627/job/30715380255"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHB7zjIQ",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10882804794/job/30194590497"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHB7zi0g",
                        "name": "build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10882804800/job/30194590418"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHB5dVHg",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10882009017/job/30192129310"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHB5dVIQ",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10882009016/job/30192129313"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHB7zjGw",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10882804796/job/30194590491"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHJrmXwQ",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11055392811/job/30714468289"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHJseAKA",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11055671626/job/30715379752"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHB5dXMQ",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10882009017/job/30192129841"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHB5dXYQ",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10882009016/job/30192129889"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHB7zkaA",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10882804796/job/30194590824"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHB5dWIw",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10882009017/job/30192129571"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHB5dWJA",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10882009016/job/30192129572"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHB5dYYw",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10882009017/job/30192130147"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHB7Qp6w",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10882009016/job/30194018795"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHB7z9MA",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/30194597168"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHB71ABA",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=16849&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "b33dddb898fba142fcf6457bf87d01a4e885a07e",
                "additions": 10,
                "deletions": 4,
                "committedDate": "2024-09-26T16:54:26Z",
                "author": {
                  "name": "Hu Yongle",
                  "email": "2065545849@qq.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHJv_o4A",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11056775490/job/30719076576"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHJv_p1Q",
                        "name": "build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11056775506/job/30719076821"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHJv_lXg",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11056775237/job/30719075678"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHJv_kzA",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11056775236/job/30719075532"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHJv_pzg",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11056775529/job/30719076814"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHJv_nXA",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11056775237/job/30719076188"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHJv_miw",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11056775236/job/30719075979"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHJv_quQ",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11056775529/job/30719077049"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHJv_jaA",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11056775237/job/30719075176"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHJv_jjg",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11056775236/job/30719075214"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHJv_o2Q",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11056775237/job/30719076569"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHJwmV5A",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11056775236/job/30719710692"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHJv_8OQ",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/30719081529"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHJwBGLw",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=16849&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "85014ec1f6c548baf5e65cea55a501f171bc8299",
                "additions": 38,
                "deletions": 44,
                "committedDate": "2024-09-27T07:56:31Z",
                "author": {
                  "name": "Hu Yongle",
                  "email": "2065545849@qq.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHKfPUkQ",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11073020260/job/30768616593"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHKfPUrg",
                        "name": "Fix style issues from lint",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11073020269/job/30768616622"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHKfPUgw",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11073020272/job/30768616579"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHKMQ9yA",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11066781778/job/30748720584"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHKMQ9zQ",
                        "name": "build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11066781784/job/30748720589"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHKMQ3rA",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11066781181/job/30748719020"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHKMQ3dQ",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11066781180/job/30748718965"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHKMQ_CQ",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11066781788/job/30748720905"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHKfPVww",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11073020272/job/30768616899"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHKMQ6Dg",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11066781181/job/30748719630"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHKMQ5bw",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11066781180/job/30748719471"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHKMRAQA",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11066781788/job/30748721216"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHKMQ40g",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11066781181/job/30748719314"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHKMQ4cw",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11066781180/job/30748719219"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHKMQ7Ig",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11066781181/job/30748719906"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHKMzUCQ",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11066781180/job/30749283337"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHKMRN3A",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/30748724700"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHKMSH3g",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=16849&login=leanprover-community&repository=mathlib4"
                      },
                      {
                        "__typename": "StatusContext",
                        "id": "SC_kwDOFcwZ1c8AAAAHXpTIWg",
                        "context": "bors",
                        "state": "SUCCESS",
                        "targetUrl": "https://mathlib-bors-ca18eefec4cb.herokuapp.com/batches/6065",
                        "description": "Build succeeded"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "createdAt": "2024-09-16T11:24:12Z",
        "deletions": 6,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/Algebra/Ring/Equiv.lean",
              "additions": 27,
              "deletions": 0
            },
            {
              "path": "Mathlib/NumberTheory/NumberField/Basic.lean",
              "additions": 39,
              "deletions": 6
            }
          ]
        },
        "headRefName": "restricting-maps-to-ringOfIntegers",
        "headRefOid": "85014ec1f6c548baf5e65cea55a501f171bc8299",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c57m1Sf",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
              "color": "06e039",
              "name": "ready-to-merge"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJLNA",
              "color": "33DBEC",
              "name": "t-number-theory"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABb5aSCQ",
              "color": "8BBA68",
              "name": "new-contributor"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c6LHb2J",
              "body": "Thanks!\r\n\r\nbors merge",
              "state": "APPROVED",
              "author": {
                "login": "riccardobrasca"
              },
              "submittedAt": "2024-09-27T15:03:29Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 16849,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": "APPROVED",
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c6K-i9I",
              "body": "We already have [NumberField.inst_ringOfIntegersAlgebra](https://leanprover-community.github.io/mathlib4_docs/Mathlib/NumberTheory/NumberField/Basic.html#NumberField.inst_ringOfIntegersAlgebra). I see it's not exactly the same thing, but it is very close. What do you think?",
              "state": "COMMENTED",
              "author": {
                "login": "riccardobrasca"
              },
              "submittedAt": "2024-09-26T15:26:08Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6K-ulo",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mbkybky"
              },
              "submittedAt": "2024-09-26T15:42:19Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6LHb2J",
              "body": "Thanks!\r\n\r\nbors merge",
              "state": "APPROVED",
              "author": {
                "login": "riccardobrasca"
              },
              "submittedAt": "2024-09-27T15:03:29Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5p76I5",
                    "body": "This is essentially [RingHom.inverse](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Ring/Equiv.html#RingHom.inverse), I am not sure we want to duplicate it. Do we do it for other types of homs?",
                    "createdAt": "2024-09-26T15:24:29Z",
                    "author": {
                      "login": "riccardobrasca"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5p8BfE",
                    "body": "> This is essentially [RingHom.inverse](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Ring/Equiv.html#RingHom.inverse), I am not sure we want to duplicate it. Do we do it for other types of homs?\r\n\r\nI used [AlgEquiv.ofAlgHom](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Algebra/Equiv.html#AlgEquiv.ofAlgHom) to construct `mapAlgEquiv`, and then I wanted to construct `mapRingEquiv` in a similar way. Therefore, I wrote `RingEquiv.ofRingHom` by imitating `AlgEquiv.ofAlgHom`.",
                    "createdAt": "2024-09-26T15:42:19Z",
                    "author": {
                      "login": "mbkybky"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "U_kgDOCF96oQ",
              "login": "mbkybky"
            },
            {
              "id": "MDQ6VXNlcjMyNDkwNTMy",
              "login": "riccardobrasca"
            },
            {
              "id": "MDQ6VXNlcjg1NjY4Mzk0",
              "login": "leanprover-bot"
            },
            {
              "id": "U_kgDOB75MNQ",
              "login": "leanprover-community-mathlib4-bot"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHKfPUkQ",
                "name": "Ping maintainers on Zulip",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11073020260/job/30768616593"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHKfPUrg",
                "name": "Fix style issues from lint",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11073020269/job/30768616622"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHKfPUgw",
                "name": "Add ready-to-merge label",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11073020272/job/30768616579"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHKMQ9yA",
                "name": "label-and-report-new-contributor",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11066781778/job/30748720584"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHKMQ9zQ",
                "name": "build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11066781784/job/30748720589"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHKMQ3rA",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11066781181/job/30748719020"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHKMQ3dQ",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11066781180/job/30748718965"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHKMQ_CQ",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11066781788/job/30748720905"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHKfPVww",
                "name": "Add delegated label",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11073020272/job/30768616899"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHKMQ6Dg",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11066781181/job/30748719630"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHKMQ5bw",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11066781180/job/30748719471"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHKMRAQA",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11066781788/job/30748721216"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHKMQ40g",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11066781181/job/30748719314"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHKMQ4cw",
                "name": "Build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11066781180/job/30748719219"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHKMQ7Ig",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11066781181/job/30748719906"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHKMzUCQ",
                "name": "Post-CI job",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11066781180/job/30749283337"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHKMRN3A",
                "name": "New Contributor Check",
                "conclusion": "NEUTRAL",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/30748724700"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHKMSH3g",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=16849&login=leanprover-community&repository=mathlib4"
              },
              {
                "__typename": "StatusContext",
                "id": "SC_kwDOFcwZ1c8AAAAHXpTIWg",
                "context": "bors",
                "state": "SUCCESS",
                "targetUrl": "https://mathlib-bors-ca18eefec4cb.herokuapp.com/batches/6065",
                "description": "Build succeeded"
              }
            ]
          }
        },
        "title": "[Merged by Bors] - feat(NumberTheory/NumberField): Restricting maps to the ring of integers",
        "updatedAt": "2024-09-27T15:50:58Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/16849",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6WsSCazwAAAANSojkO",
              "createdAt": "2024-09-16T11:24:12Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJLNA",
                "name": "t-number-theory"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6WsSCazwAAAANSokPq",
              "createdAt": "2024-09-16T11:24:24Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABb5aSCQ",
                "name": "new-contributor"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6MOpXp",
              "createdAt": "2024-09-16T11:24:54Z",
              "body": "### PR summary [85014ec1f6](https://github.com/leanprover-community/mathlib4/pull/16849/commits/85014ec1f6c548baf5e65cea55a501f171bc8299)\n\n#### Import changes for modified files\n\nNo significant changes to the import graph\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ coe_ringHom_ofRingHom`\n`+ inst_isScalarTower`\n`+ mapAlgEquiv`\n`+ mapAlgHom`\n`+ mapRingEquiv`\n`+ mapRingHom`\n`+ ofRingHom`\n`+ ofRingHom_coe_ringHom`\n`+ ofRingHom_symm`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n</details>",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ReviewRequestedEvent",
              "id": "RRE_lADOFcwZ1c6WsSCazwAAAANbW07h",
              "createdAt": "2024-09-26T14:26:52Z",
              "requestedReviewer": {
                "id": "MDQ6VXNlcjMyNDkwNTMy",
                "login": "riccardobrasca"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6K-i9I",
              "createdAt": "2024-09-26T15:24:29Z",
              "body": "We already have [NumberField.inst_ringOfIntegersAlgebra](https://leanprover-community.github.io/mathlib4_docs/Mathlib/NumberTheory/NumberField/Basic.html#NumberField.inst_ringOfIntegersAlgebra). I see it's not exactly the same thing, but it is very close. What do you think?",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6Ns40R",
              "createdAt": "2024-09-26T15:54:31Z",
              "body": "> We already have [NumberField.inst_ringOfIntegersAlgebra](https://leanprover-community.github.io/mathlib4_docs/Mathlib/NumberTheory/NumberField/Basic.html#NumberField.inst_ringOfIntegersAlgebra). I see it's not exactly the same thing, but it is very close. What do you think?\r\n\r\nYes. What I really need is `mapAlgEquiv`. To this end, I wrote `mapRingHom` following the construction of `NumberField.inst_ringOfIntegersAlgebra`, and used it to write `mapAlgHom` and `mapAlgEquiv`.",
              "author": {
                "login": "mbkybky"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6Ns-Mv",
              "createdAt": "2024-09-26T16:04:50Z",
              "body": "Yes, the equiv version is definitely not there. What about avoiding `mapRingHom` (since it is just the `algebraMap` given by the algebra instance) but keeping the equiv?",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6NtAsr",
              "createdAt": "2024-09-26T16:08:59Z",
              "body": "Actually we want that for a tower of fields `M/L/K` (with `IsScalarTower ..`) the corresponing algebras of ring of integers satisfy `IsScalarTower`. Then proving your result should be easy (just make `L/K/L` using the ring hom and its inverse).",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6NtR0O",
              "createdAt": "2024-09-26T16:45:10Z",
              "body": "> Yes, the equiv version is definitely not there. What about avoiding `mapRingHom` (since it is just the `algebraMap` given by the algebra instance) but keeping the equiv?\r\n\r\nI think `mapRingHom` would be more general. For example, if we have a ring homomorphism `L ‚Üí+* L`, the induced `Algebra` instance will conflict with the instance induced by `RingHom.id`.",
              "author": {
                "login": "mbkybky"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6NtWI6",
              "createdAt": "2024-09-26T16:54:59Z",
              "body": "What I am saying is that if we have `L` a `K` algebra, there with your construction two ways of getting a ring hom `ùìû K ‚Üí ùìû L`: one is `algebraMap (ùìû K) (ùìû L)`, and the other your construction. It's not the end of the world (and you're right, your construction works given any map, without the `Algebra` instance), but it would be nice to have them defeq (so you should modify your construction to be `algebraMap`, after some `let _ : Algebra .. ..:=`). or at least we want the theorem saying they're the same.",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6NtZ-E",
              "createdAt": "2024-09-26T17:03:47Z",
              "body": "> What I am saying is that if we have `L` a `K` algebra, there with your construction two ways of getting a ring hom `ùìû K ‚Üí ùìû L`: one is `algebraMap (ùìû K) (ùìû L)`, and the other your construction. It's not the end of the world (and you're right, your construction works given any map, without the `Algebra` instance), but it would be nice to have them defeq (so you should modify your construction to be `algebraMap`, after some `let _ : Algebra .. ..:=`). or at least we want the theorem saying they're the same.\r\n\r\nI understand. But would it be a better to modify the definition of `NumberField.inst_ringOfIntegersAlgebra` (using `mapRingHom`)?  It's currently induced by a ring homomorphism, and inducing a ring homomorphism from it again might be too indirect.",
              "author": {
                "login": "mbkybky"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6Nta0i",
              "createdAt": "2024-09-26T17:05:49Z",
              "body": "> > What I am saying is that if we have `L` a `K` algebra, there with your construction two ways of getting a ring hom `ùìû K ‚Üí ùìû L`: one is `algebraMap (ùìû K) (ùìû L)`, and the other your construction. It's not the end of the world (and you're right, your construction works given any map, without the `Algebra` instance), but it would be nice to have them defeq (so you should modify your construction to be `algebraMap`, after some `let _ : Algebra .. ..:=`). or at least we want the theorem saying they're the same.\r\n> \r\n> I understand. But would it be a better to modify the definition of `NumberField.inst_ringOfIntegersAlgebra` (using `mapRingHom`)? It's currently induced by a ring homomorphism, and inducing a ring homomorphism from it again might be too indirect.\r\n\r\nWhy not, but make sure to keep [this](https://github.com/leanprover-community/mathlib4/blob/367f25d3750097169f52c46b90f06497586b3a31/Mathlib/NumberTheory/NumberField/Basic.lean#L149) example working.",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6Ntcdz",
              "createdAt": "2024-09-26T17:09:45Z",
              "body": "> > > What I am saying is that if we have `L` a `K` algebra, there with your construction two ways of getting a ring hom `ùìû K ‚Üí ùìû L`: one is `algebraMap (ùìû K) (ùìû L)`, and the other your construction. It's not the end of the world (and you're right, your construction works given any map, without the `Algebra` instance), but it would be nice to have them defeq (so you should modify your construction to be `algebraMap`, after some `let _ : Algebra .. ..:=`). or at least we want the theorem saying they're the same.\r\n> > \r\n> > \r\n> > I understand. But would it be a better to modify the definition of `NumberField.inst_ringOfIntegersAlgebra` (using `mapRingHom`)? It's currently induced by a ring homomorphism, and inducing a ring homomorphism from it again might be too indirect.\r\n> \r\n> Why not, but make sure to keep [this](https://github.com/leanprover-community/mathlib4/blob/367f25d3750097169f52c46b90f06497586b3a31/Mathlib/NumberTheory/NumberField/Basic.lean#L149) example working.\r\n\r\nOK. I will try it tomorrow. Thank you!",
              "author": {
                "login": "mbkybky"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6Nx_d4",
              "createdAt": "2024-09-27T08:09:59Z",
              "body": "!bench",
              "author": {
                "login": "mbkybky"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6NyN4p",
              "createdAt": "2024-09-27T08:35:47Z",
              "body": "Here are the [benchmark results](http://speed.lean-fro.org/mathlib4/run-detail/fbf6a79e-414b-4e47-8283-c64bc08d3014) for commit 85014ec1f6c548baf5e65cea55a501f171bc8299.\nThere were [no significant changes](http://speed.lean-fro.org/mathlib4/compare/9c37380a-451c-4c7d-81cd-902ba247548e/to/fbf6a79e-414b-4e47-8283-c64bc08d3014) against commit cc2c5288193edfd09bc4bf4eb6e0b26459c8572e.",
              "author": {
                "login": "leanprover-bot"
              }
            },
            {
              "__typename": "ReviewRequestedEvent",
              "id": "RRE_lADOFcwZ1c6WsSCazwAAAANcH06H",
              "createdAt": "2024-09-27T12:32:46Z",
              "requestedReviewer": {
                "id": "MDQ6VXNlcjMyNDkwNTMy",
                "login": "riccardobrasca"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6LHb2J",
              "createdAt": "2024-09-27T15:03:29Z",
              "body": "Thanks!\r\n\r\nbors merge",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6WsSCazwAAAANcQCC2",
              "createdAt": "2024-09-27T15:03:41Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
                "name": "ready-to-merge"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6N1a5Z",
              "createdAt": "2024-09-27T15:50:54Z",
              "body": "Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/11073025278/job/30768632040)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/11073025278/job/30768632762)",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c6WsSCazwAAAANcSVdN",
              "createdAt": "2024-09-27T15:50:55Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c6WsSCazwAAAANcSVno",
              "createdAt": "2024-09-27T15:50:58Z"
            },
            {
              "__typename": "ReferencedEvent"
            }
          ]
        }
      }
    }
  }
}
