{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 38,
        "assignees": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjIxMTY1NzA=",
              "login": "Vierkantor"
            }
          ]
        },
        "author": {
          "login": "xroblot"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "Add the following result: \r\n```lean\r\ntheorem mem_span_integralBasis {x : K} :\r\n    x ‚àà Submodule.span ‚Ñ§ (Set.range (integralBasis K)) ‚Üî x ‚àà ùìû K\r\n```\r\nthat is, `integralBasis` is indeed a `‚Ñ§`-basis of the ring of integers. \r\n\r\nCo-authored-by: Riccardo Brasca <riccardo.brasca@gmail.com>\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 6,
        "closed": true,
        "closedAt": "2023-08-02T10:39:03Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5ic2R-",
              "body": "Why not having an actual `Basis ... ‚Ñ§ (ùìû K)`? We have somewhere that this induces automatically a `‚Ñö`-basis of `K` I think.",
              "createdAt": "2023-07-26T12:41:38Z",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5igG66",
              "body": "> Why not having an actual `Basis ... ‚Ñ§ (ùìû K)`? We have somewhere that this induces automatically a `‚Ñö`-basis of `K` I think.\r\n\r\nThis is what we are doing here. We start with a ‚Ñ§-basis of `ùìû K`, that's `NumberField.RingOfIntegers.basis`, then we prove that it is a ‚Ñö-basis of `K`, that's `NumberField.integralBasis`, and this result closes the circle by proving that the ‚Ñ§-lattice generated by this basis inside `K` is indeed `ùìû K`.",
              "createdAt": "2023-07-26T22:15:11Z",
              "author": {
                "login": "xroblot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5igVxs",
              "body": "Ah, I see, `NumberField.integralBasis` is defined using `RingOfIntegers.basis`  via `  Basis.localizationLocalization`. Can you state a general result about `Basis.localizationLocalization` instead of this particular case?",
              "createdAt": "2023-07-26T22:49:38Z",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5ipdDT",
              "body": "> Ah, I see, `NumberField.integralBasis` is defined using `RingOfIntegers.basis` via ` Basis.localizationLocalization`. Can you state a general result about `Basis.localizationLocalization` instead of this particular case?\r\n\r\nI added the general result\r\n```lean\r\n theorem Basis.localizationLocalization_span {Œπ : Type _} (b : Basis Œπ R A) :\r\n     Submodule.span R (Set.range (b.localizationLocalization R‚Çõ S A‚Çõ)) =\r\n       Submodule.map (IsScalarTower.toAlgHom R A A‚Çõ) ‚ä§ \r\n```\r\nand used it to prove `mem_span_integralBasis`",
              "createdAt": "2023-07-28T05:15:59Z",
              "author": {
                "login": "xroblot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5iriu-",
              "body": "@Vierkantor can you have a look at this? Thanks!",
              "createdAt": "2023-07-28T12:15:27Z",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5irtiI",
              "body": "Sure! I will make some time in the coming days.",
              "createdAt": "2023-07-28T12:42:13Z",
              "author": {
                "login": "Vierkantor"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5itRTa",
              "body": "Not sure why \"Detect changes to header SHAs / Add annotations (pull_request) \" is taking forever...\r\n",
              "createdAt": "2023-07-28T17:14:29Z",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5ivZ_n",
              "body": "> Not sure why \"Detect changes to header SHAs / Add annotations (pull_request) \" is taking forever...\r\n\r\nIt seems merging master solved this.",
              "createdAt": "2023-07-29T08:21:05Z",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5iwwAV",
              "body": "> > Not sure why \"Detect changes to header SHAs / Add annotations (pull_request) \" is taking forever...\r\n> \r\n> It seems merging master solved this.\r\n\r\nRiccardo, thanks a lot for your improvements of this PR. I am in Japan at the moment and it is difficult to find time to work on Lean. I added your name as a co-author. Maybe I should also update the title and description? ",
              "createdAt": "2023-07-29T23:01:40Z",
              "author": {
                "login": "xroblot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5jBlJl",
              "body": "@Vierkantor Thanks for the review. As you suggested, I moved `Subalgebra.range_isScalarTower_toAlgHom` to `Mathlib.Algebra.Algebra.Subalgebra.Tower`",
              "createdAt": "2023-08-02T01:44:37Z",
              "author": {
                "login": "xroblot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5jD7M8",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/5737063517/job/15547935639)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/5737063517/job/15547936080)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/5737063517/job/15547936277)",
              "createdAt": "2023-08-02T10:39:02Z",
              "author": {
                "login": "bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "5825419c8b9a5b291f4a21d1db7fb7d5dcbeeef9",
                "additions": 15,
                "deletions": 0,
                "committedDate": "2023-07-19T10:03:37Z",
                "author": {
                  "name": "Xavier-Fran√ßois Roblot",
                  "email": "46200072+xroblot@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "e93f55806df9851495bf0c6e9f9ed5d4a7a3705d",
                "additions": 15,
                "deletions": 12,
                "committedDate": "2023-07-28T05:11:08Z",
                "author": {
                  "name": "Xavier-Fran√ßois Roblot",
                  "email": "46200072+xroblot@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "cfd346c4dbd69d68c646e263a30843d19433ae0b",
                "additions": 1,
                "deletions": 2,
                "committedDate": "2023-07-28T05:14:01Z",
                "author": {
                  "name": "Xavier-Fran√ßois Roblot",
                  "email": "46200072+xroblot@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "6da1b303fbf30f27076ebd37bb0cbbefde79d9f9",
                "additions": 10,
                "deletions": 10,
                "committedDate": "2023-07-28T09:30:47Z",
                "author": {
                  "name": "Riccardo Brasca",
                  "email": "riccardo.brasca@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "b24a482a81d23a25d6757cab31578d9033b6627b",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-07-28T10:00:37Z",
                "author": {
                  "name": "Riccardo Brasca",
                  "email": "riccardo.brasca@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "7215aa6298863da79f16b8a42ed32d745ec7b1ed",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-07-28T10:50:19Z",
                "author": {
                  "name": "Riccardo Brasca",
                  "email": "riccardo.brasca@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "005ecbfbad9a3a91ab23f2189c19b1969e74f91c",
                "additions": 0,
                "deletions": 1,
                "committedDate": "2023-07-28T11:17:15Z",
                "author": {
                  "name": "Riccardo Brasca",
                  "email": "riccardo.brasca@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "c74e196049805bde549511b3c7f072bf98588dc1",
                "additions": 16087,
                "deletions": 19816,
                "committedDate": "2023-07-29T08:02:31Z",
                "author": {
                  "name": "Riccardo Brasca",
                  "email": "riccardo.brasca@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "d934f8f7a572c634b1cc153610981122114c2e07",
                "additions": 5,
                "deletions": 7,
                "committedDate": "2023-08-02T01:11:11Z",
                "author": {
                  "name": "Xavier Roblot",
                  "email": "46200072+xroblot@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "41492980e48a41e51c9e1808f1b3ef1b9c6d91b1",
                "additions": 12,
                "deletions": 3,
                "committedDate": "2023-08-02T01:15:15Z",
                "author": {
                  "name": "Xavier Roblot",
                  "email": "46200072+xroblot@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "b9f5144b438c27adf11ed5b9df093a5e08727de4",
                "additions": 14,
                "deletions": 11,
                "committedDate": "2023-08-02T01:43:09Z",
                "author": {
                  "name": "Xavier-Fran√ßois Roblot",
                  "email": "46200072+xroblot@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            }
          ]
        },
        "createdAt": "2023-07-19T10:06:51Z",
        "deletions": 12,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/Algebra/Algebra/Subalgebra/Tower.lean",
              "additions": 13,
              "deletions": 0
            },
            {
              "path": "Mathlib/LinearAlgebra/FreeModule/PID.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/LinearAlgebra/Span.lean",
              "additions": 10,
              "deletions": 10
            },
            {
              "path": "Mathlib/NumberTheory/NumberField/Basic.lean",
              "additions": 5,
              "deletions": 0
            },
            {
              "path": "Mathlib/RingTheory/Finiteness.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/RingTheory/Localization/Module.lean",
              "additions": 8,
              "deletions": 0
            }
          ]
        },
        "headRefName": "xfr_mem_span_integralBasis",
        "headRefOid": "b9f5144b438c27adf11ed5b9df093a5e08727de4",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5V3-Pg",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
              "color": "06e039",
              "name": "ready-to-merge"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJLNA",
              "color": "33DBEC",
              "name": "t-number-theory"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5c5Zu9",
              "body": "Thanks!\r\n\r\nbors r+",
              "state": "APPROVED",
              "author": {
                "login": "Vierkantor"
              },
              "submittedAt": "2023-08-02T09:06:36Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5c4sCR",
              "body": "LGTM, thanks!",
              "state": "APPROVED",
              "author": {
                "login": "riccardobrasca"
              },
              "submittedAt": "2023-08-02T07:21:52Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 5996,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": "APPROVED",
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5cfG67",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "riccardobrasca"
              },
              "submittedAt": "2023-07-28T08:50:41Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5cfV_V",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "xroblot"
              },
              "submittedAt": "2023-07-28T09:29:22Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5cfWyT",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "riccardobrasca"
              },
              "submittedAt": "2023-07-28T09:31:32Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5cfZJA",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "riccardobrasca"
              },
              "submittedAt": "2023-07-28T09:38:01Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5cfZpX",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "xroblot"
              },
              "submittedAt": "2023-07-28T09:39:21Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5cfbJ1",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "riccardobrasca"
              },
              "submittedAt": "2023-07-28T09:43:28Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5cpvJE",
              "body": "This is indeed a useful result, thanks for spotting that we're missing it.",
              "state": "COMMENTED",
              "author": {
                "login": "Vierkantor"
              },
              "submittedAt": "2023-07-31T10:41:41Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5c4sCR",
              "body": "LGTM, thanks!",
              "state": "APPROVED",
              "author": {
                "login": "riccardobrasca"
              },
              "submittedAt": "2023-08-02T07:21:52Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5c5Zu9",
              "body": "Thanks!\r\n\r\nbors r+",
              "state": "APPROVED",
              "author": {
                "login": "Vierkantor"
              },
              "submittedAt": "2023-08-02T09:06:36Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5MId7c",
                    "body": "Can you try to use\r\n```\r\n{F : Type _} [SemilinearMapClass F œÉ‚ÇÅ‚ÇÇ M M‚ÇÇ]\r\n```\r\nand `(f : F)` in `Submodule.map_span`? This should make the `change` line useless. I see that most of `Mathlib.LinearAlgebra.Span` already uses `SemilinearMapClass`, it should be a pretty easy generalization.",
                    "createdAt": "2023-07-28T08:50:41Z",
                    "author": {
                      "login": "riccardobrasca"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5MInat",
                    "body": "I am sorry, but I cannot see what you want me to do. I tried to remove the `change` and provide some explicit arguments to `Submodule.map_span` but I could not get anywhere without making things more complicated",
                    "createdAt": "2023-07-28T09:29:22Z",
                    "author": {
                      "login": "xroblot"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5MIn9G",
                    "body": "I've pushed a commit, let's see what CI think thinks. If it becomes too complicated feel free to revert it.\r\n",
                    "createdAt": "2023-07-28T09:31:31Z",
                    "author": {
                      "login": "riccardobrasca"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5MIphq",
                    "body": "The point is that `Submodule.map_span` is stated for `f : M ‚Üí‚Çõ‚Çó[œÉ‚ÇÅ‚ÇÇ] M‚ÇÇ` but it actually holds for any `(f : F)`, where `[SemilinearMapClass F œÉ‚ÇÅ‚ÇÇ M M‚ÇÇ]`. You have `f : A ‚Üí‚Çê[R] A‚Çõ`, that is not literally a semilinear map, so you need the `change` line. But we have `[SemilinearMapClass (A ‚Üí‚Çê[R] A‚Çõ) ... ...]`, so with this generalization the `change` line should become useless.\r\n\r\nIn general, when a `change` is needed I see this as a warning that a lemma is missing (in this case we can prove, by `rfl`, that `Submodule.map f M = Submodule.map f.toLinearMap M` and rewrite this) or that something is stated in a suboptimal way.",
                    "createdAt": "2023-07-28T09:38:01Z",
                    "author": {
                      "login": "riccardobrasca"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5MIp3x",
                    "body": "Ok. I see. Thanks for the explanation!",
                    "createdAt": "2023-07-28T09:39:21Z",
                    "author": {
                      "login": "xroblot"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5MIq1G",
                    "body": "The reason why rewriting the `rfl` lemma is better than using `change` is the following: suppose that the `change` trick is used 100 times and I refactor the definition of `Submodule.map` in such a way that the `Submodule.map f M = Submodule.map f.toLinearMap M` is not true definitionally anymore (this seems unlike, I agree, but we changed the definition of groups two years ago...). Then I need to fix all the 100 occurrences of the trick, by hand. If instead `rw` is used, I only need to fix it once, in the proof of the lemma.",
                    "createdAt": "2023-07-28T09:43:27Z",
                    "author": {
                      "login": "riccardobrasca"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5MPW2B",
                    "body": "The right hand side can be simplified further using `Submodule.map_top`.\r\n\r\nAlso, I found the `convert`s and `rw`s hard to read, how about `calc`?\r\n```suggestion\r\ntheorem Basis.localizationLocalization_span {Œπ : Type _} (b : Basis Œπ R A) :\r\n    Submodule.span R (Set.range (b.localizationLocalization R‚Çõ S A‚Çõ)) =\r\n      LinearMap.range (IsScalarTower.toAlgHom R A A‚Çõ) :=\r\n  calc span R (Set.range ‚Üë(localizationLocalization R‚Çõ S A‚Çõ b))\r\n    _ = span R (‚Üë(IsScalarTower.toAlgHom R A A‚Çõ) '' Set.range ‚Üëb) := by congr; ext; simp\r\n    _ = map (IsScalarTower.toAlgHom R A A‚Çõ) (span R (Set.range b)) := by rw [Submodule.map_span]\r\n    _ = LinearMap.range (IsScalarTower.toAlgHom R A A‚Çõ) := by rw [b.span_eq, Submodule.map_top]\r\n```",
                    "createdAt": "2023-07-31T10:19:31Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5MPb3D",
                    "body": "Let's split this into two parts: showing the output of `localizationLocalization_span` is actually the algebra, and then connecting this with `integralBasis`:\r\n```suggestion\r\n-- This should be moved, perhaps to Mathlib.Algebra.Algebra.Subalgebra.Tower?\r\n@[simp]\r\nlemma _root_.Subalgebra.range_isScalarTower_toAlgHom {R A} [CommSemiring R] [CommSemiring A]\r\n    [Algebra R A] (S : Subalgebra R A) :\r\n    LinearMap.range (IsScalarTower.toAlgHom R S A) = Subalgebra.toSubmodule S := by\r\n  ext\r\n  simp only [‚Üê Submodule.range_subtype (Subalgebra.toSubmodule S), LinearMap.mem_range,\r\n    IsScalarTower.coe_toAlgHom', Subalgebra.mem_toSubmodule]\r\n  rfl\r\n\r\ntheorem mem_span_integralBasis {x : K} :\r\n    x ‚àà Submodule.span ‚Ñ§ (Set.range (integralBasis K)) ‚Üî x ‚àà ùìû K := by\r\n  rw [integralBasis, Basis.localizationLocalization_span, Subalgebra.range_isScalarTower_toAlgHom,\r\n      Subalgebra.mem_toSubmodule]\r\n```",
                    "createdAt": "2023-07-31T10:40:41Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjQ2MjAwMDcy",
              "login": "xroblot"
            },
            {
              "id": "MDQ6VXNlcjMyNDkwNTMy",
              "login": "riccardobrasca"
            },
            {
              "id": "MDQ6VXNlcjIxMTY1NzA=",
              "login": "Vierkantor"
            },
            {
              "id": "U_kgDOB75MNQ",
              "login": "leanprover-community-mathlib4-bot"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": null,
        "title": "[Merged by Bors] - feat(NumberTheory.NumberField.Basic): add  mem_span_integralBasis",
        "updatedAt": "2023-08-02T10:39:06Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/5996",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "5825419c8b9a5b291f4a21d1db7fb7d5dcbeeef9"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5r-xmezwAAAAJLvWJ2",
              "createdAt": "2023-07-19T10:07:15Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5r-xmezwAAAAJLvWKB",
              "createdAt": "2023-07-19T10:07:15Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5r-xmezwAAAAJLvWKJ",
              "createdAt": "2023-07-19T10:07:15Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJLNA",
                "name": "t-number-theory"
              }
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5NlOxp",
              "createdAt": "2023-07-19T10:07:52Z",
              "source": {
                "id": "PR_kwDOFcwZ1c5UaO3f",
                "title": "[Merged by Bors] - feat(NumberTheory.NumberField.CanonicalEmbedding): add exists_ne_zero_mem_ringOfIntegers_lt",
                "url": "https://github.com/leanprover-community/mathlib4/pull/5650"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5r-xmezwAAAAJLwPUG",
              "createdAt": "2023-07-19T10:32:13Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5ic2R-",
              "createdAt": "2023-07-26T12:41:38Z",
              "body": "Why not having an actual `Basis ... ‚Ñ§ (ùìû K)`? We have somewhere that this induces automatically a `‚Ñö`-basis of `K` I think.",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5igG66",
              "createdAt": "2023-07-26T22:15:11Z",
              "body": "> Why not having an actual `Basis ... ‚Ñ§ (ùìû K)`? We have somewhere that this induces automatically a `‚Ñö`-basis of `K` I think.\r\n\r\nThis is what we are doing here. We start with a ‚Ñ§-basis of `ùìû K`, that's `NumberField.RingOfIntegers.basis`, then we prove that it is a ‚Ñö-basis of `K`, that's `NumberField.integralBasis`, and this result closes the circle by proving that the ‚Ñ§-lattice generated by this basis inside `K` is indeed `ùìû K`.",
              "author": {
                "login": "xroblot"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5igVxs",
              "createdAt": "2023-07-26T22:49:38Z",
              "body": "Ah, I see, `NumberField.integralBasis` is defined using `RingOfIntegers.basis`  via `  Basis.localizationLocalization`. Can you state a general result about `Basis.localizationLocalization` instead of this particular case?",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "e93f55806df9851495bf0c6e9f9ed5d4a7a3705d"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "cfd346c4dbd69d68c646e263a30843d19433ae0b"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5ipdDT",
              "createdAt": "2023-07-28T05:15:59Z",
              "body": "> Ah, I see, `NumberField.integralBasis` is defined using `RingOfIntegers.basis` via ` Basis.localizationLocalization`. Can you state a general result about `Basis.localizationLocalization` instead of this particular case?\r\n\r\nI added the general result\r\n```lean\r\n theorem Basis.localizationLocalization_span {Œπ : Type _} (b : Basis Œπ R A) :\r\n     Submodule.span R (Set.range (b.localizationLocalization R‚Çõ S A‚Çõ)) =\r\n       Submodule.map (IsScalarTower.toAlgHom R A A‚Çõ) ‚ä§ \r\n```\r\nand used it to prove `mem_span_integralBasis`",
              "author": {
                "login": "xroblot"
              }
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5Nt2m8",
              "createdAt": "2023-07-28T05:19:40Z",
              "source": {
                "id": "PR_kwDOFcwZ1c5T__z7",
                "title": "[Merged by Bors] - refactor(NumberTheory.NumberField.CanonicalEmbedding): make the canonical embedding canonical",
                "url": "https://github.com/leanprover-community/mathlib4/pull/5518"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5cfG67",
              "createdAt": "2023-07-28T08:50:41Z",
              "body": "",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "6da1b303fbf30f27076ebd37bb0cbbefde79d9f9"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "b24a482a81d23a25d6757cab31578d9033b6627b"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "7215aa6298863da79f16b8a42ed32d745ec7b1ed"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "005ecbfbad9a3a91ab23f2189c19b1969e74f91c"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5iriu-",
              "createdAt": "2023-07-28T12:15:27Z",
              "body": "@Vierkantor can you have a look at this? Thanks!",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "ReviewRequestedEvent",
              "id": "RRE_lADOFcwZ1c5r-xmezwAAAAJQ6g9A",
              "createdAt": "2023-07-28T12:15:43Z",
              "requestedReviewer": {
                "id": "MDQ6VXNlcjIxMTY1NzA=",
                "login": "Vierkantor"
              }
            },
            {
              "__typename": "AssignedEvent",
              "id": "AE_lADOFcwZ1c5r-xmezwAAAAJQ7V6P",
              "createdAt": "2023-07-28T12:41:59Z",
              "assignee": {
                "id": "MDQ6VXNlcjIxMTY1NzA=",
                "login": "Vierkantor"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5irtiI",
              "createdAt": "2023-07-28T12:42:13Z",
              "body": "Sure! I will make some time in the coming days.",
              "author": {
                "login": "Vierkantor"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5itRTa",
              "createdAt": "2023-07-28T17:14:29Z",
              "body": "Not sure why \"Detect changes to header SHAs / Add annotations (pull_request) \" is taking forever...\r\n",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "c74e196049805bde549511b3c7f072bf98588dc1"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5ivZ_n",
              "createdAt": "2023-07-29T08:21:05Z",
              "body": "> Not sure why \"Detect changes to header SHAs / Add annotations (pull_request) \" is taking forever...\r\n\r\nIt seems merging master solved this.",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5iwwAV",
              "createdAt": "2023-07-29T23:01:40Z",
              "body": "> > Not sure why \"Detect changes to header SHAs / Add annotations (pull_request) \" is taking forever...\r\n> \r\n> It seems merging master solved this.\r\n\r\nRiccardo, thanks a lot for your improvements of this PR. I am in Japan at the moment and it is difficult to find time to work on Lean. I added your name as a co-author. Maybe I should also update the title and description? ",
              "author": {
                "login": "xroblot"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5cpvJE",
              "createdAt": "2023-07-31T10:19:31Z",
              "body": "This is indeed a useful result, thanks for spotting that we're missing it.",
              "author": {
                "login": "Vierkantor"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "d934f8f7a572c634b1cc153610981122114c2e07"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "41492980e48a41e51c9e1808f1b3ef1b9c6d91b1"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "b9f5144b438c27adf11ed5b9df093a5e08727de4"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5jBlJl",
              "createdAt": "2023-08-02T01:44:37Z",
              "body": "@Vierkantor Thanks for the review. As you suggested, I moved `Subalgebra.range_isScalarTower_toAlgHom` to `Mathlib.Algebra.Algebra.Subalgebra.Tower`",
              "author": {
                "login": "xroblot"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5c4sCR",
              "createdAt": "2023-08-02T07:21:52Z",
              "body": "LGTM, thanks!",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5c5Zu9",
              "createdAt": "2023-08-02T09:06:36Z",
              "body": "Thanks!\r\n\r\nbors r+",
              "author": {
                "login": "Vierkantor"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5r-xmezwAAAAJTL0Pt",
              "createdAt": "2023-08-02T09:06:49Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
                "name": "ready-to-merge"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5r-xmezwAAAAJTL0SA",
              "createdAt": "2023-08-02T09:06:50Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5jD7M8",
              "createdAt": "2023-08-02T10:39:02Z",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/5737063517/job/15547935639)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/5737063517/job/15547936080)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/5737063517/job/15547936277)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c5r-xmezwAAAAJTPigs",
              "createdAt": "2023-08-02T10:39:03Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c5r-xmezwAAAAJTPinE",
              "createdAt": "2023-08-02T10:39:06Z"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            }
          ]
        }
      }
    }
  }
}
