{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 138,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "ocfnash"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "---\r\n\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 3,
        "closed": true,
        "closedAt": "2023-08-02T08:13:11Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5iSm_Z",
              "body": "@ocfnash It would be really cool if we could generalize the statement of `IsReflexive` so that it is also applicable to Banach spaces (or LCTVSs more generally), but (a) I don't immediately see how to do that, and (b) it's not absolutely necessary, especially not for this PR. However, I'm mentioning it in case you see an immediately obvious idea.\r\n\r\nMaybe something like this, but it's not fully fleshed out:\r\n```\r\nclass IsSemireflexive {R M : Type _} [Semiring R] [AddCommMonoid M] [Module R M]\r\n    {D : Type _ → Type _ → Type _} [AddCommMonoid (D R (D R M))] [Module R (D R (D R M))]\r\n    (dual_eval : M →ₗ[R] D R (D R M)) : Prop where\r\n  bijective_dual_eval' := Function.Bijective dual_eval\r\n```\r\n\r\nNote that, in functional analysis, the condition you provided for `IsReflexive` is called \"semi-reflexive\" (i.e., bijectivity of the double dual map, using the strong dual), and \"reflexive\" is used to mean this map is an isomorphism (for Banach spaces, these conditions are equivalent). Maybe this warrants a rename, but perhaps not if it's going to be focused solely on the algebraic dual.",
              "createdAt": "2023-07-25T03:51:45Z",
              "author": {
                "login": "j-loreaux"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5iUpj6",
              "body": "@j-loreaux Thanks for the remarks, I like the idea but I don't see an easy way to implement it (I had actually thought a bit about this while making this PR).\r\n\r\nFor me the issue is that I don't see an easy way to abstract over the type of dual we're talking about.\r\n\r\nFor example, the type `D : Type _ → Type _ → Type _` in your sketch won't work because `D` would also need to take various typeclass parameters. For example, the type of `Module.Dual` is:\r\n```lean\r\n(R : Type u_1) → (M : Type u_2) → [CommSemiring R] → [AddCommMonoid M] → [Module R M] → Type (max u_2 u_1)\r\n```\r\nI expect we could unify things using our category theory library but I don't think it would be worth it.\r\n\r\nI think it is better just to have separate theories for this purely algebraic concept (which is called [reflexive](https://stacks.math.columbia.edu/tag/0AUY)) and the analytic versions (with lemmas connecting them in, say, finite dimensions). This is also what we do elsewhere, e.g., we have purely algebraic tensor products.",
              "createdAt": "2023-07-25T10:33:45Z",
              "author": {
                "login": "ocfnash"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5jBCn-",
              "body": ":v: ocfnash can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests).",
              "createdAt": "2023-08-01T23:04:13Z",
              "author": {
                "login": "bors"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5jCoVc",
              "body": "bors merge",
              "createdAt": "2023-08-02T07:12:51Z",
              "author": {
                "login": "ocfnash"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5jC9ea",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/5736003880/job/15544734681)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/5736003880/job/15544734237)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/5736003880/job/15544734434)",
              "createdAt": "2023-08-02T08:13:08Z",
              "author": {
                "login": "bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "849c1c37aced1d4537b3f1edee3beb3bf91938dc",
                "additions": 119,
                "deletions": 33,
                "committedDate": "2023-06-12T11:31:10Z",
                "author": {
                  "name": "Oliver Nash",
                  "email": "github@olivernash.org"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "e8f5cf4688e778fd3cc4969d352fef0afbd7a8df",
                "additions": 1,
                "deletions": 0,
                "committedDate": "2023-06-12T11:35:02Z",
                "author": {
                  "name": "Oliver Nash",
                  "email": "github@olivernash.org"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "02722669152dd33658892a51ff2d51755e252f83",
                "additions": 189082,
                "deletions": 32664,
                "committedDate": "2023-07-25T10:35:54Z",
                "author": {
                  "name": "Oliver Nash",
                  "email": "github@olivernash.org"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "e1469abe1cd7f6b6434a9b66e134a87cca147563",
                "additions": 2,
                "deletions": 10,
                "committedDate": "2023-08-01T10:24:20Z",
                "author": {
                  "name": "Oliver Nash",
                  "email": "github@olivernash.org"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "6fc738f5483eec1ee81f4f190a7663838d973fbb",
                "additions": 16,
                "deletions": 5,
                "committedDate": "2023-08-01T11:05:15Z",
                "author": {
                  "name": "Oliver Nash",
                  "email": "github@olivernash.org"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "f3f7f66d71aa4f86c4d11d817b7bb82c9f72d56e",
                "additions": 8810,
                "deletions": 3670,
                "committedDate": "2023-08-01T11:06:05Z",
                "author": {
                  "name": "Oliver Nash",
                  "email": "github@olivernash.org"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "e65a172744649e62906228f2e818faeee6bbbcf9",
                "additions": 4,
                "deletions": 5,
                "committedDate": "2023-08-01T15:21:58Z",
                "author": {
                  "name": "Oliver Nash",
                  "email": "github@olivernash.org"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "f1618ea76b8ec9f39e9c60b8d3cdb7c2f56fca11",
                "additions": 25,
                "deletions": 11,
                "committedDate": "2023-08-01T23:02:09Z",
                "author": {
                  "name": "Eric Wieser",
                  "email": "wieser.eric@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "fe67548a154e4e6a07d60e05ff5cbee65c5c8f10",
                "additions": 4,
                "deletions": 2,
                "committedDate": "2023-08-02T07:09:19Z",
                "author": {
                  "name": "Oliver Nash",
                  "email": "github@olivernash.org"
                },
                "statusCheckRollup": null
              }
            }
          ]
        },
        "createdAt": "2023-06-12T11:33:38Z",
        "deletions": 33,
        "files": {
          "nodes": [
            {
              "path": "Mathlib.lean",
              "additions": 1,
              "deletions": 0
            },
            {
              "path": "Mathlib/LinearAlgebra/Dual.lean",
              "additions": 81,
              "deletions": 33
            },
            {
              "path": "Mathlib/LinearAlgebra/PerfectPairing.lean",
              "additions": 56,
              "deletions": 0
            }
          ]
        },
        "headRefName": "ocfnash/feat_perfect_pairings",
        "headRefOid": "fe67548a154e4e6a07d60e05ff5cbee65c5c8f10",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5Swxqg",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABAt13Ow",
              "color": "bfd4f2",
              "name": "delegated"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
              "color": "06e039",
              "name": "ready-to-merge"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJjTQ",
              "color": "33DBEC",
              "name": "t-algebra"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5c5yN-",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-08-02T09:58:39Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 4989,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": "APPROVED",
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5cxpCu",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-08-01T09:10:18Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5cxpqa",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-08-01T09:11:44Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5cyODh",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-08-01T10:23:41Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5cyOI5",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-08-01T10:23:55Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5c1Oj3",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-08-01T17:04:21Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5c1Q0R",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-08-01T17:09:45Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5c3GvS",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-08-01T23:03:20Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5c3G8G",
              "body": "bors d+\r\n\r\nI gave up on `ULift` because I think we're missing some machinery, and it's not interesting enough to bother with here.",
              "state": "APPROVED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-08-01T23:04:12Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5c4oW2",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-08-02T07:12:20Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5c5yN-",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-08-02T09:58:39Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5MUEne",
                    "body": "This looks quite similar to `Module.subsingleton`; can that one be generalized/replaced?",
                    "createdAt": "2023-08-01T09:10:18Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5MUcTI",
                    "body": "Thanks, of course I should just be using `Module.subsingleton` --- I don't know how I didn't realise this!",
                    "createdAt": "2023-08-01T10:23:41Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5MUFAB",
                    "body": "style nit:\r\n```suggestion\r\n  bijective_dual_eval'\r\n```",
                    "createdAt": "2023-08-01T09:11:44Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5MUcWe",
                    "body": "Thanks",
                    "createdAt": "2023-08-01T10:23:54Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5MWU7R",
                    "body": "This could be a standalone `IsReflective.of_subsingleton [Subsingleton M]`, right?",
                    "createdAt": "2023-08-01T17:04:21Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5MWWSm",
                    "body": "I actually considered this but I didn't bother because it's just a special case of this lemma, specifically:\r\n```lean\r\nexample [Subsingleton M] : Finite R M := inferInstance\r\nexample [Subsingleton M] : Free R M := inferInstance\r\n```",
                    "createdAt": "2023-08-01T17:09:45Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5MXgD3",
                    "body": "What do you think of `LinearEquiv.dualSymm` as the name of this lemma, for dot notation?",
                    "createdAt": "2023-08-01T23:03:20Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5MYfxG",
                    "body": "I think I prefer `e.flip` for consistency / discoverability for someone who knows `LinearMap.flip`, and in a tie-break because it's got fewer characters!",
                    "createdAt": "2023-08-02T07:12:19Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5MZPF6",
                    "body": "Oh, I totally missed the lemma below that explains the current name. Yes, I agree what you have now is better.",
                    "createdAt": "2023-08-02T09:58:39Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjc3MzQzNjQ=",
              "login": "ocfnash"
            },
            {
              "id": "MDQ6VXNlcjg5MjA1OTg=",
              "login": "j-loreaux"
            },
            {
              "id": "MDQ6VXNlcjQyNTI2MA==",
              "login": "eric-wieser"
            },
            {
              "id": "MDQ6VXNlcjQ3Nzk1Ng==",
              "login": "kim-em"
            },
            {
              "id": "U_kgDOB75MNQ",
              "login": "leanprover-community-mathlib4-bot"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": null,
        "title": "[Merged by Bors] - feat: define reflexive modules and prove basics of perfect pairings",
        "updatedAt": "2023-08-02T09:58:40Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/4989",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "849c1c37aced1d4537b3f1edee3beb3bf91938dc"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5odb-8zwAAAAI2U0yB",
              "createdAt": "2023-06-12T11:33:38Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "e8f5cf4688e778fd3cc4969d352fef0afbd7a8df"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5odb-8zwAAAAI2VLOm",
              "createdAt": "2023-06-12T11:41:16Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABMtntmA",
                "name": "new-feature"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5odb-8zwAAAAI5j9zo",
              "createdAt": "2023-06-16T20:27:13Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABMJpquQ",
                "name": "after-port"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5iSm_Z",
              "createdAt": "2023-07-25T03:51:45Z",
              "body": "@ocfnash It would be really cool if we could generalize the statement of `IsReflexive` so that it is also applicable to Banach spaces (or LCTVSs more generally), but (a) I don't immediately see how to do that, and (b) it's not absolutely necessary, especially not for this PR. However, I'm mentioning it in case you see an immediately obvious idea.\r\n\r\nMaybe something like this, but it's not fully fleshed out:\r\n```\r\nclass IsSemireflexive {R M : Type _} [Semiring R] [AddCommMonoid M] [Module R M]\r\n    {D : Type _ → Type _ → Type _} [AddCommMonoid (D R (D R M))] [Module R (D R (D R M))]\r\n    (dual_eval : M →ₗ[R] D R (D R M)) : Prop where\r\n  bijective_dual_eval' := Function.Bijective dual_eval\r\n```\r\n\r\nNote that, in functional analysis, the condition you provided for `IsReflexive` is called \"semi-reflexive\" (i.e., bijectivity of the double dual map, using the strong dual), and \"reflexive\" is used to mean this map is an isomorphism (for Banach spaces, these conditions are equivalent). Maybe this warrants a rename, but perhaps not if it's going to be focused solely on the algebraic dual.",
              "author": {
                "login": "j-loreaux"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5odb-8zwAAAAJOgMRT",
              "createdAt": "2023-07-25T04:44:21Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABMJpquQ",
                "name": "after-port"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5iUpj6",
              "createdAt": "2023-07-25T10:33:45Z",
              "body": "@j-loreaux Thanks for the remarks, I like the idea but I don't see an easy way to implement it (I had actually thought a bit about this while making this PR).\r\n\r\nFor me the issue is that I don't see an easy way to abstract over the type of dual we're talking about.\r\n\r\nFor example, the type `D : Type _ → Type _ → Type _` in your sketch won't work because `D` would also need to take various typeclass parameters. For example, the type of `Module.Dual` is:\r\n```lean\r\n(R : Type u_1) → (M : Type u_2) → [CommSemiring R] → [AddCommMonoid M] → [Module R M] → Type (max u_2 u_1)\r\n```\r\nI expect we could unify things using our category theory library but I don't think it would be worth it.\r\n\r\nI think it is better just to have separate theories for this purely algebraic concept (which is called [reflexive](https://stacks.math.columbia.edu/tag/0AUY)) and the analytic versions (with lemmas connecting them in, say, finite dimensions). This is also what we do elsewhere, e.g., we have purely algebraic tensor products.",
              "author": {
                "login": "ocfnash"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "02722669152dd33658892a51ff2d51755e252f83"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5cxpCu",
              "createdAt": "2023-08-01T09:10:17Z",
              "body": "",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5cxpqa",
              "createdAt": "2023-08-01T09:11:44Z",
              "body": "",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "e1469abe1cd7f6b6434a9b66e134a87cca147563"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "6fc738f5483eec1ee81f4f190a7663838d973fbb"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "f3f7f66d71aa4f86c4d11d817b7bb82c9f72d56e"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5odb-8zwAAAAJSkNr0",
              "createdAt": "2023-08-01T11:06:29Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5odb-8zwAAAAJSlvVJ",
              "createdAt": "2023-08-01T11:50:07Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "e65a172744649e62906228f2e818faeee6bbbcf9"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5odb-8zwAAAAJSvhvM",
              "createdAt": "2023-08-01T15:23:18Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJjTQ",
                "name": "t-algebra"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5c1Oj3",
              "createdAt": "2023-08-01T17:04:21Z",
              "body": "",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "f1618ea76b8ec9f39e9c60b8d3cdb7c2f56fca11"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5c3GvS",
              "createdAt": "2023-08-01T23:03:20Z",
              "body": "",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5c3G8G",
              "createdAt": "2023-08-01T23:04:12Z",
              "body": "bors d+\r\n\r\nI gave up on `ULift` because I think we're missing some machinery, and it's not interesting enough to bother with here.",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5jBCn-",
              "createdAt": "2023-08-01T23:04:13Z",
              "body": ":v: ocfnash can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests).",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5odb-8zwAAAAJS9t4l",
              "createdAt": "2023-08-01T23:04:24Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABAt13Ow",
                "name": "delegated"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5odb-8zwAAAAJS9t5N",
              "createdAt": "2023-08-01T23:04:25Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "fe67548a154e4e6a07d60e05ff5cbee65c5c8f10"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5jCoVc",
              "createdAt": "2023-08-02T07:12:51Z",
              "body": "bors merge",
              "author": {
                "login": "ocfnash"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5odb-8zwAAAAJTHfWK",
              "createdAt": "2023-08-02T07:13:02Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
                "name": "ready-to-merge"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5jC9ea",
              "createdAt": "2023-08-02T08:13:08Z",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/5736003880/job/15544734681)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/5736003880/job/15544734237)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/5736003880/job/15544734434)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c5odb-8zwAAAAJTJqlX",
              "createdAt": "2023-08-02T08:13:12Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c5odb-8zwAAAAJTJqxs",
              "createdAt": "2023-08-02T08:13:16Z"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            }
          ]
        }
      }
    }
  }
}
