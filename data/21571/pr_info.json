{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 247,
        "assignees": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjMyNDkwNTMy",
              "login": "riccardobrasca"
            }
          ]
        },
        "author": {
          "login": "mistarro"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nFor details on the \"pull request lifecycle\" in mathlib, please see:\r\nhttps://leanprover-community.github.io/contribute/index.html\r\n\r\nIn particular, note that most reviewers will only notice your PR\r\nif it passes the continuous integration checks.\r\nPlease ask for help on https://leanprover.zulipchat.com if needed.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nIf you are moving or deleting declarations, please include these lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nMoves:\r\n- Vector.* -> List.Vector.*\r\n- ...\r\n\r\nDeletions:\r\n- Nat.bit1_add_bit1\r\n- ...\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 2,
        "closed": false,
        "closedAt": null,
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c6dp_A9",
              "body": "### PR summary [079cd875e6](https://github.com/leanprover-community/mathlib4/pull/21571/commits/079cd875e65e160c2ce5f367b614abca0776c965)\n\n#### Import changes for modified files\n\nNo significant changes to the import graph\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n| `Mathlib.FieldTheory.NormalizedTrace` (new file)|1594|\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ normalizedTrace`\n`+ normalizedTrace_algebraMap`\n`+ normalizedTrace_algebraMap_apply`\n`+ normalizedTrace_algebraMap_apply_eq_self`\n`+ normalizedTrace_algebraMap_eq_id`\n`+ normalizedTrace_algebraMap_of_lifts`\n`+ normalizedTrace_comp_algHom`\n`+ normalizedTrace_def`\n`+ normalizedTrace_eq_of_fininteDimensional`\n`+ normalizedTrace_eq_of_fininteDimensional_apply`\n`+ normalizedTrace_intermediateField`\n`+ normalizedTrace_map`\n`+ normalizedTrace_minpoly`\n`+ normalizedTrace_ne_zero`\n`+ normalizedTrace_self`\n`+ normalizedTrace_self_apply`\n`+ normalizedTrace_surjective`\n`+ normalizedTrace_trans`\n`+ normalizedTrace_trans_apply`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n</details>\n\n---\n\n<details><summary>No changes to technical debt.</summary>\n\nYou can run this locally as\n```\n./scripts/technical-debt-metrics.sh pr_summary\n```\n* The `relative` value is the weighted *sum* of the differences with weight given by the *inverse* of the current value of the statistic.\n* The `absolute` value is the `relative` value divided by the total sum of the inverses of the current values (i.e. the weighted *average* of the differences).\n</details>\n",
              "createdAt": "2025-02-08T11:18:38Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6dvDEm",
              "body": "Maybe you could add a `IsScalarTower` section to state several results on towers. Besides `normalizedTraceAux_intermediateField₁` I think there is another one: for an extension tower `K/E/F`, normalized trace from K to F is equal to the composition of normalized trace from K to E and the normalized trace from E to F.",
              "createdAt": "2025-02-09T15:26:06Z",
              "author": {
                "login": "acmepjz"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6dvEBm",
              "body": "> Maybe you could add a `IsScalarTower` section to state several results on towers. Besides `normalizedTraceAux_intermediateField₁` I think there is another one: for an extension tower `K/E/F`, normalized trace from K to F is equal to the composition of normalized trace from K to E and the normalized trace from E to F.\r\n\r\nI was thinking about it but the proof is not easy. If `E / F` is finite, then it's true, still working on proving it in generality. As always there are more and more results that we could add. I think we could start with what we have and then build on top of that. Otherwise the PR will become huge and nobody but you would want to review it ;)",
              "createdAt": "2025-02-09T15:35:19Z",
              "author": {
                "login": "mistarro"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6dvE3m",
              "body": "> I was thinking about it but the proof is not easy.\r\n\r\nDoesn't it follow from the similar tower law for unnormalized trace? Since now it's characteristic 0, all field extensions are separable.\r\n\r\n> If `E / F` is finite, then it's true, still working on proving it in generality.\r\n\r\nOh I mean that `K/F` is finite. Otherwise there must be a lot of corner cases :)",
              "createdAt": "2025-02-09T15:43:01Z",
              "author": {
                "login": "acmepjz"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6dvIVI",
              "body": "> > I was thinking about it but the proof is not easy.\r\n> \r\n> Doesn't it follow from the similar tower law for unnormalized trace? Since now it's characteristic 0, all field extensions are separable.\r\n> \r\n> > If `E / F` is finite, then it's true, still working on proving it in generality.\r\n> \r\n> Oh I mean that `K/F` is finite. Otherwise there must be a lot of corner cases :)\r\n\r\nThe thing is, normalized trace works for any *algebraic* extension. For finite it is easy, and even just for the bottom part (`E/F`) finite is easy. But I would like to prove in general, just there's a lot more work to be done.",
              "createdAt": "2025-02-09T16:12:43Z",
              "author": {
                "login": "mistarro"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6dvJlE",
              "body": "I see. Are you sure it's true for all cases? I think for now we can state a version with `[FiniteDimensional F E]` assumption (and we don't mention this assumption in the theorem name). Since it's an instance variable, later we can remove it safely.",
              "createdAt": "2025-02-09T16:20:54Z",
              "author": {
                "login": "acmepjz"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6dyZV6",
              "body": "> Do you think it's a good idea to put `normalizedTrace` into a namespace, just like `Algebra.trace`?\r\n\r\nAlso `Algebra`? Otherwise I have no idea...",
              "createdAt": "2025-02-10T08:17:33Z",
              "author": {
                "login": "mistarro"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6dy6Ee",
              "body": "> > Do you think it's a good idea to put `normalizedTrace` into a namespace, just like `Algebra.trace`?\r\n> \r\n> Also `Algebra`? Otherwise I have no idea...\r\n\r\nYes `Algebra`. (Or `Field` if it's only intended to defined over fields; I'm not sure...)",
              "createdAt": "2025-02-10T09:09:49Z",
              "author": {
                "login": "acmepjz"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6dy96w",
              "body": "> > > Do you think it's a good idea to put `normalizedTrace` into a namespace, just like `Algebra.trace`?\r\n> > \r\n> > \r\n> > Also `Algebra`? Otherwise I have no idea...\r\n> \r\n> Yes `Algebra`. (Or `Field` if it's only intended to defined over fields; I'm not sure...)\r\n\r\nSo maybe let's wait for another review. I don't mind putting it in a namespace but I'd like to do it with a good namespace.",
              "createdAt": "2025-02-10T09:15:47Z",
              "author": {
                "login": "mistarro"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6gcCb5",
              "body": "After merging some necessary results I was able to prove general tower law for the normalized trace (`normalizedTrace_trans[_apply]`).",
              "createdAt": "2025-02-28T23:18:11Z",
              "author": {
                "login": "mistarro"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6g-t-L",
              "body": "Thanks!\r\n\r\nbors merge",
              "createdAt": "2025-03-05T12:29:50Z",
              "author": {
                "login": "riccardobrasca"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "2bb04e0500d2a12cf9c5e2e03c9946809d9878fb",
                "additions": 244,
                "deletions": 0,
                "committedDate": "2025-03-01T00:18:05Z",
                "author": {
                  "name": "Michał Staromiejski",
                  "email": "michal.staromiejski@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI2j1rJw",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13598775340/job/38021196583"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI31zEOQ",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13633698263/job/38107137081"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI2j1unA",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13598775875/job/38021197468"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI31zMqw",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13633698287/job/38107139243"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI2j1uug",
                        "name": "post-or-update-summary-comment",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13598775891/job/38021197498"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI31zLWw",
                        "name": "Fix style issues from lint",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13633698289/job/38107138907"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI2j1qHw",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13598775337/job/38021196319"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI2j1vtQ",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13598775894/job/38021197749"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI2j1qOg",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13598775340/job/38021196346"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI2j1qow",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13598775337/job/38021196451"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI2j1u2w",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13598775894/job/38021197531"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI2j1r-A",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13598775340/job/38021196792"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI2kH0Mw",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13598775337/job/38021493811"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI2j1-zw",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/38021201615"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI2j3ADg",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=21571&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "ab92d1fb913a850af32c5a80c5e41f053d5d0709",
                "additions": 40,
                "deletions": 36,
                "committedDate": "2025-03-04T21:57:59Z",
                "author": {
                  "name": "Michał Staromiejski",
                  "email": "michal.staromiejski@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI5O0LiQ",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13663724805/job/38200478601"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI5O3Cqw",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13663738611/job/38200525483"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI5O0Mtg",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13663725115/job/38200478902"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI5O3CvQ",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13663738616/job/38200525501"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI5O0NFw",
                        "name": "post-or-update-summary-comment",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13663725108/job/38200478999"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI5O3CiA",
                        "name": "Fix style issues from lint",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13663738619/job/38200525448"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI5O0LFQ",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13663724803/job/38200478485"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI5O0Nyw",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13663725107/job/38200479179"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI5O0KMQ",
                        "name": "Build",
                        "conclusion": "FAILURE",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13663724803/job/38200478257"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI5O0KTA",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13663724805/job/38200478284"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI5O0MuQ",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13663725107/job/38200478905"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI5O0M5g",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13663724805/job/38200478950"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI5PO6Xg",
                        "name": "Post-CI job",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13663724803/job/38200916574"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI5O0jRw",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/38200484679"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI5O1lNQ",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=21571&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "079cd875e65e160c2ce5f367b614abca0776c965",
                "additions": 0,
                "deletions": 1,
                "committedDate": "2025-03-05T00:46:13Z",
                "author": {
                  "name": "Michał Staromiejski",
                  "email": "michal.staromiejski@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI5xRQ5A",
                        "name": "set_pr_emoji",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13676018736/job/38236606692"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI5VQGsQ",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13665953795/job/38207227569"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI5VQMrA",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13665954350/job/38207229100"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI5VQMxg",
                        "name": "post-or-update-summary-comment",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13665954356/job/38207229126"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI5VQH-Q",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13665953803/job/38207227897"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI5VQNHw",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13665954352/job/38207229215"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI5VQIUg",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13665953795/job/38207227986"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI5VQGrQ",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13665953803/job/38207227565"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI5VQOFA",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13665954352/job/38207229460"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI5VQJbw",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13665953795/job/38207228271"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI5VjFDA",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13665953803/job/38207538444"
                      },
                      {
                        "__typename": "StatusContext",
                        "id": "SC_kwDOFcwZ1c8AAAAIFErVXA",
                        "context": "bors",
                        "state": "PENDING",
                        "targetUrl": "https://mathlib-bors-ca18eefec4cb.herokuapp.com/batches/9853",
                        "description": "Running"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI5VQaug",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/38207232698"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI5VROiA",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=21571&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "createdAt": "2025-02-08T11:17:43Z",
        "deletions": 0,
        "files": {
          "nodes": [
            {
              "path": "Mathlib.lean",
              "additions": 1,
              "deletions": 0
            },
            {
              "path": "Mathlib/FieldTheory/NormalizedTrace.lean",
              "additions": 246,
              "deletions": 0
            }
          ]
        },
        "headRefName": "mistarro/normalized-trace",
        "headRefOid": "079cd875e65e160c2ce5f367b614abca0776c965",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c6KginV",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
              "color": "06e039",
              "name": "ready-to-merge"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJjTQ",
              "color": "33DBEC",
              "name": "t-algebra"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c6eNfoS",
              "body": "A general comment: [Algebra.trace](https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/Trace/Defs.html#Algebra.trace) is in the `Algebra` namespace, maybe this should apply also for the normalized trace?",
              "state": "COMMENTED",
              "author": {
                "login": "riccardobrasca"
              },
              "submittedAt": "2025-03-03T14:53:49Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6bPxo7",
              "body": "Thank you! I think this PR is good to go.\r\n\r\nDo you think it's a good idea to put `normalizedTrace` into a namespace, just like `Algebra.trace`?",
              "state": "APPROVED",
              "author": {
                "login": "acmepjz"
              },
              "submittedAt": "2025-02-10T03:04:14Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "BLOCKED",
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 21571,
        "potentialMergeCommit": {
          "oid": "47477f6137b895f5cd468817b2fb31c8b37ec965"
        },
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": [
                {
                  "login": "acmepjz"
                }
              ]
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": "APPROVED",
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c6bOAVX",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "acmepjz"
              },
              "submittedAt": "2025-02-09T07:37:55Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6bOAfn",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "acmepjz"
              },
              "submittedAt": "2025-02-09T07:42:09Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6bOJNX",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mistarro"
              },
              "submittedAt": "2025-02-09T10:24:57Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6bOKCQ",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mistarro"
              },
              "submittedAt": "2025-02-09T10:39:24Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6bOkyv",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "acmepjz"
              },
              "submittedAt": "2025-02-09T15:17:10Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6bOl_r",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mistarro"
              },
              "submittedAt": "2025-02-09T15:32:26Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6bOqeE",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "acmepjz"
              },
              "submittedAt": "2025-02-09T16:47:01Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6bOqlr",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "acmepjz"
              },
              "submittedAt": "2025-02-09T16:49:42Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6bOrjW",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mistarro"
              },
              "submittedAt": "2025-02-09T17:09:55Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6bOrm3",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mistarro"
              },
              "submittedAt": "2025-02-09T17:11:16Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6bOuUk",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "acmepjz"
              },
              "submittedAt": "2025-02-09T18:14:59Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6bOvzU",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mistarro"
              },
              "submittedAt": "2025-02-09T18:51:15Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6bPxo7",
              "body": "Thank you! I think this PR is good to go.\r\n\r\nDo you think it's a good idea to put `normalizedTrace` into a namespace, just like `Algebra.trace`?",
              "state": "APPROVED",
              "author": {
                "login": "acmepjz"
              },
              "submittedAt": "2025-02-10T03:04:14Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6bRJzO",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mistarro"
              },
              "submittedAt": "2025-02-10T08:16:34Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6eNfoS",
              "body": "A general comment: [Algebra.trace](https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/Trace/Defs.html#Algebra.trace) is in the `Algebra` namespace, maybe this should apply also for the normalized trace?",
              "state": "COMMENTED",
              "author": {
                "login": "riccardobrasca"
              },
              "submittedAt": "2025-03-03T14:53:49Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6ef5xx",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mistarro"
              },
              "submittedAt": "2025-03-04T21:59:27Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c50HIwZ",
                    "body": "Do you think it's better to have a version which only uses 3 abstract fields with `IsScalarTower` without mentioning  `IntermediateField`?",
                    "createdAt": "2025-02-09T07:37:55Z",
                    "author": {
                      "login": "acmepjz"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c50HP8U",
                    "body": "But there is no coercion from `E` to `K`, so i would have to use `algebraMap E K` explicitly?",
                    "createdAt": "2025-02-09T10:24:57Z",
                    "author": {
                      "login": "mistarro"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c50HQl7",
                    "body": "This is how it would look like:\r\n```lean4\r\ntheorem normalizedTraceAux_intermediateField₁ {E : Type*} [Field E] [Algebra F E] [Algebra E K]\r\n    [IsScalarTower F E K] (a : E) :\r\n    normalizedTraceAux F K (algebraMap E K a) = normalizedTraceAux F E a :=\r\n  normalizedTraceAux_map F K (IsScalarTower.toAlgHom F E K) a\r\n```\r\nso it is basically `normalizedTraceAux_map` with `f = IsScalarTower.toAlgHom F E K`.",
                    "createdAt": "2025-02-09T10:39:23Z",
                    "author": {
                      "login": "mistarro"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c50Hh00",
                    "body": "> use `algebraMap E K` explicitly\r\n\r\nYes that's reasonable.\r\n\r\n```lean\r\ntheorem normalizedTraceAux_intermediateField₁ {E : Type*} [Field E] [Algebra F E] [Algebra E K]\r\n    [IsScalarTower F E K] (a : E) :\r\n    normalizedTraceAux F K (algebraMap E K a) = normalizedTraceAux F E a :=\r\n  normalizedTraceAux_map F K (IsScalarTower.toAlgHom F E K) a\r\n```\r\n\r\n~~Maybe it's better called `normalizedTraceAux_algebraMap` I think.~~ Sorry I haven't noticed that `normalizedTraceAux_algebraMap` is for another result. But I think your old `normalizedTraceAux_algebraMap` will be a corollary of this new `normalizedTraceAux_algebraMap` and the `normalizedTrace_self`.\r\n\r\nAlso, your existing `normalizedTraceAux_intermediateField` will be just a special case of this newly added result.",
                    "createdAt": "2025-02-09T15:17:10Z",
                    "author": {
                      "login": "acmepjz"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c50Hilm",
                    "body": "Yup, I can do it",
                    "createdAt": "2025-02-09T15:32:26Z",
                    "author": {
                      "login": "mistarro"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c50HI8P",
                    "body": "Maybe this should called `normalizedTrace_ne_zero` as `nontrivial` in theorem name usually refers to Lean's `Nontrivial`.",
                    "createdAt": "2025-02-09T07:42:08Z",
                    "author": {
                      "login": "acmepjz"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c50Hl7j",
                    "body": "Maybe this should called `normalizedTrace_algebraMap_apply_eq_self`?\r\n\r\nAlso for the `simp can prove this` error, maybe you could remove `@[simp]` from these two results, and their proofs are all `simp`.",
                    "createdAt": "2025-02-09T16:47:01Z",
                    "author": {
                      "login": "acmepjz"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c50Hm5_",
                    "body": "Renamed and hopefully fixed.",
                    "createdAt": "2025-02-09T17:09:55Z",
                    "author": {
                      "login": "mistarro"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c50HmDT",
                    "body": "Is it possible to use `simp_rw [normalizedTraceAux_intermediateField F K, normalizedTraceAux_eq_of_fininteDimensional F, ← add_div, ← map_add]`? (untested)\r\n\r\nSame as the next one.",
                    "createdAt": "2025-02-09T16:49:42Z",
                    "author": {
                      "login": "acmepjz"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c50Hm-P",
                    "body": "Does not work :smiling_face_with_tear: ",
                    "createdAt": "2025-02-09T17:11:16Z",
                    "author": {
                      "login": "mistarro"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c50Hpsa",
                    "body": "I don't know if it's better to add a `LinearMap` version, namely, use `normalizedTrace F K ∘ₗ Algebra.linearMap E K` instead. The current version only states that they are equal after converting to maps.\r\n\r\nSame as another one below.",
                    "createdAt": "2025-02-09T18:14:59Z",
                    "author": {
                      "login": "acmepjz"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c50HrNg",
                    "body": "Indeed, this is nicer!",
                    "createdAt": "2025-02-09T18:51:15Z",
                    "author": {
                      "login": "mistarro"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c50IVQe",
                    "body": "```suggestion\r\n    ← Module.finrank_mul_finrank F F⟮a⟯ K,\r\n```",
                    "createdAt": "2025-02-10T02:58:36Z",
                    "author": {
                      "login": "acmepjz"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c50JMhj",
                    "body": "Compressed this `rw` a bit.",
                    "createdAt": "2025-02-10T08:16:33Z",
                    "author": {
                      "login": "mistarro"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c514GKw",
                    "body": "This doc seems confusing, can you describe the actual definition?",
                    "createdAt": "2025-03-03T14:43:46Z",
                    "author": {
                      "login": "riccardobrasca"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c514G89",
                    "body": "Here `K` can be implicit, but not very important since it is `private`.",
                    "createdAt": "2025-03-03T14:45:21Z",
                    "author": {
                      "login": "riccardobrasca"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c52CQKw",
                    "body": "Would leave it as is to have same \"implicitiness\" as `normalizedTrace`.",
                    "createdAt": "2025-03-04T21:59:27Z",
                    "author": {
                      "login": "mistarro"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c514IYL",
                    "body": "Can you add a lemma that can be rewritten here, instead of using `rfl`?",
                    "createdAt": "2025-03-03T14:48:33Z",
                    "author": {
                      "login": "riccardobrasca"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c514I9c",
                    "body": "```suggestion\r\n    have : FiniteDimensional F F⟮a⟯ := adjoin.finiteDimensional (Algebra.IsIntegral.isIntegral a)\r\n    have : FiniteDimensional F F⟮b⟯ := adjoin.finiteDimensional (Algebra.IsIntegral.isIntegral b)\r\n```",
                    "createdAt": "2025-03-03T14:49:53Z",
                    "author": {
                      "login": "riccardobrasca"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c514JE0",
                    "body": "Same as above.",
                    "createdAt": "2025-03-03T14:50:09Z",
                    "author": {
                      "login": "riccardobrasca"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c514JPB",
                    "body": "```suggestion\r\n    have : FiniteDimensional F F⟮a⟯ := adjoin.finiteDimensional (Algebra.IsIntegral.isIntegral a)\r\n```",
                    "createdAt": "2025-03-03T14:50:28Z",
                    "author": {
                      "login": "riccardobrasca"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c514JRE",
                    "body": "Same.",
                    "createdAt": "2025-03-03T14:50:33Z",
                    "author": {
                      "login": "riccardobrasca"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c514Jx3",
                    "body": "```suggestion\r\n/-- Could be an alternative definition but it is harder to work with linearity. -/\r\n```\r\nAlso, can you clarify when one should use this one?",
                    "createdAt": "2025-03-03T14:51:43Z",
                    "author": {
                      "login": "riccardobrasca"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c514KQB",
                    "body": "```suggestion\r\n  have : FiniteDimensional E E⟮a⟯ :=\r\n```",
                    "createdAt": "2025-03-03T14:52:44Z",
                    "author": {
                      "login": "riccardobrasca"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c514KTX",
                    "body": "```suggestion\r\n  have : FiniteDimensional F E' := Module.Finite.trans E E⟮a⟯\r\n```",
                    "createdAt": "2025-03-03T14:52:51Z",
                    "author": {
                      "login": "riccardobrasca"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c514KcB",
                    "body": "```suggestion\r\n  have : S.Finite := by simp_all only [Finset.finite_toSet, S]\r\n  have : FiniteDimensional F E₀ := IntermediateField.finiteDimensional_adjoin\r\n    fun x _ ↦ Algebra.IsIntegral.isIntegral x\r\n  have : Algebra.IsIntegral E₀ K := Algebra.IsIntegral.trans E\r\n```",
                    "createdAt": "2025-03-03T14:53:10Z",
                    "author": {
                      "login": "riccardobrasca"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjc3MDA1MDI=",
              "login": "mistarro"
            },
            {
              "id": "MDQ6VXNlcjMzOTc3Nzk=",
              "login": "acmepjz"
            },
            {
              "id": "MDQ6VXNlcjMyNDkwNTMy",
              "login": "riccardobrasca"
            },
            {
              "id": "U_kgDOB75MNQ",
              "login": "leanprover-community-mathlib4-bot"
            }
          ]
        },
        "state": "OPEN",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI5xRQ5A",
                "name": "set_pr_emoji",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13676018736/job/38236606692"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI5VQGsQ",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13665953795/job/38207227569"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI5VQMrA",
                "name": "label-and-report-new-contributor",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13665954350/job/38207229100"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI5VQMxg",
                "name": "post-or-update-summary-comment",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13665954356/job/38207229126"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI5VQH-Q",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13665953803/job/38207227897"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI5VQNHw",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13665954352/job/38207229215"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI5VQIUg",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13665953795/job/38207227986"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI5VQGrQ",
                "name": "Build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13665953803/job/38207227565"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI5VQOFA",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13665954352/job/38207229460"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI5VQJbw",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13665953795/job/38207228271"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI5VjFDA",
                "name": "Post-CI job",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13665953803/job/38207538444"
              },
              {
                "__typename": "StatusContext",
                "id": "SC_kwDOFcwZ1c8AAAAIFErVXA",
                "context": "bors",
                "state": "PENDING",
                "targetUrl": "https://mathlib-bors-ca18eefec4cb.herokuapp.com/batches/9853",
                "description": "Running"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI5VQaug",
                "name": "New Contributor Check",
                "conclusion": "NEUTRAL",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/38207232698"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI5VROiA",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=21571&login=leanprover-community&repository=mathlib4"
              }
            ]
          }
        },
        "title": "feat(FieldTheory): introduce normalized trace map",
        "updatedAt": "2025-03-05T12:30:01Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/21571",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6dp_A9",
              "createdAt": "2025-02-08T11:18:38Z",
              "body": "### PR summary [079cd875e6](https://github.com/leanprover-community/mathlib4/pull/21571/commits/079cd875e65e160c2ce5f367b614abca0776c965)\n\n#### Import changes for modified files\n\nNo significant changes to the import graph\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n| `Mathlib.FieldTheory.NormalizedTrace` (new file)|1594|\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ normalizedTrace`\n`+ normalizedTrace_algebraMap`\n`+ normalizedTrace_algebraMap_apply`\n`+ normalizedTrace_algebraMap_apply_eq_self`\n`+ normalizedTrace_algebraMap_eq_id`\n`+ normalizedTrace_algebraMap_of_lifts`\n`+ normalizedTrace_comp_algHom`\n`+ normalizedTrace_def`\n`+ normalizedTrace_eq_of_fininteDimensional`\n`+ normalizedTrace_eq_of_fininteDimensional_apply`\n`+ normalizedTrace_intermediateField`\n`+ normalizedTrace_map`\n`+ normalizedTrace_minpoly`\n`+ normalizedTrace_ne_zero`\n`+ normalizedTrace_self`\n`+ normalizedTrace_self_apply`\n`+ normalizedTrace_surjective`\n`+ normalizedTrace_trans`\n`+ normalizedTrace_trans_apply`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n</details>\n\n---\n\n<details><summary>No changes to technical debt.</summary>\n\nYou can run this locally as\n```\n./scripts/technical-debt-metrics.sh pr_summary\n```\n* The `relative` value is the weighted *sum* of the differences with weight given by the *inverse* of the current value of the statistic.\n* The `absolute` value is the `relative` value divided by the total sum of the inverses of the current values (i.e. the weighted *average* of the differences).\n</details>\n",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6pREeczwAAAAPHolrv",
              "createdAt": "2025-02-08T11:18:48Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJjTQ",
                "name": "t-algebra"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6bOAVX",
              "createdAt": "2025-02-09T07:37:54Z",
              "body": "",
              "author": {
                "login": "acmepjz"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6bOAfn",
              "createdAt": "2025-02-09T07:42:08Z",
              "body": "",
              "author": {
                "login": "acmepjz"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6dvDEm",
              "createdAt": "2025-02-09T15:26:06Z",
              "body": "Maybe you could add a `IsScalarTower` section to state several results on towers. Besides `normalizedTraceAux_intermediateField₁` I think there is another one: for an extension tower `K/E/F`, normalized trace from K to F is equal to the composition of normalized trace from K to E and the normalized trace from E to F.",
              "author": {
                "login": "acmepjz"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6dvEBm",
              "createdAt": "2025-02-09T15:35:19Z",
              "body": "> Maybe you could add a `IsScalarTower` section to state several results on towers. Besides `normalizedTraceAux_intermediateField₁` I think there is another one: for an extension tower `K/E/F`, normalized trace from K to F is equal to the composition of normalized trace from K to E and the normalized trace from E to F.\r\n\r\nI was thinking about it but the proof is not easy. If `E / F` is finite, then it's true, still working on proving it in generality. As always there are more and more results that we could add. I think we could start with what we have and then build on top of that. Otherwise the PR will become huge and nobody but you would want to review it ;)",
              "author": {
                "login": "mistarro"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6dvE3m",
              "createdAt": "2025-02-09T15:43:01Z",
              "body": "> I was thinking about it but the proof is not easy.\r\n\r\nDoesn't it follow from the similar tower law for unnormalized trace? Since now it's characteristic 0, all field extensions are separable.\r\n\r\n> If `E / F` is finite, then it's true, still working on proving it in generality.\r\n\r\nOh I mean that `K/F` is finite. Otherwise there must be a lot of corner cases :)",
              "author": {
                "login": "acmepjz"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6dvIVI",
              "createdAt": "2025-02-09T16:12:43Z",
              "body": "> > I was thinking about it but the proof is not easy.\r\n> \r\n> Doesn't it follow from the similar tower law for unnormalized trace? Since now it's characteristic 0, all field extensions are separable.\r\n> \r\n> > If `E / F` is finite, then it's true, still working on proving it in generality.\r\n> \r\n> Oh I mean that `K/F` is finite. Otherwise there must be a lot of corner cases :)\r\n\r\nThe thing is, normalized trace works for any *algebraic* extension. For finite it is easy, and even just for the bottom part (`E/F`) finite is easy. But I would like to prove in general, just there's a lot more work to be done.",
              "author": {
                "login": "mistarro"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6dvJlE",
              "createdAt": "2025-02-09T16:20:54Z",
              "body": "I see. Are you sure it's true for all cases? I think for now we can state a version with `[FiniteDimensional F E]` assumption (and we don't mention this assumption in the theorem name). Since it's an instance variable, later we can remove it safely.",
              "author": {
                "login": "acmepjz"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6bOqeE",
              "createdAt": "2025-02-09T16:47:01Z",
              "body": "",
              "author": {
                "login": "acmepjz"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6bOqlr",
              "createdAt": "2025-02-09T16:49:42Z",
              "body": "",
              "author": {
                "login": "acmepjz"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c6pREeczwAAAAPH6RcJ",
              "createdAt": "2025-02-09T17:31:10Z"
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6bOuUk",
              "createdAt": "2025-02-09T18:14:59Z",
              "body": "",
              "author": {
                "login": "acmepjz"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c6pREeczwAAAAPH8Wox",
              "createdAt": "2025-02-09T21:20:40Z"
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6bPxo7",
              "createdAt": "2025-02-10T02:58:36Z",
              "body": "Thank you! I think this PR is good to go.\r\n\r\nDo you think it's a good idea to put `normalizedTrace` into a namespace, just like `Algebra.trace`?",
              "author": {
                "login": "acmepjz"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6dyZV6",
              "createdAt": "2025-02-10T08:17:33Z",
              "body": "> Do you think it's a good idea to put `normalizedTrace` into a namespace, just like `Algebra.trace`?\r\n\r\nAlso `Algebra`? Otherwise I have no idea...",
              "author": {
                "login": "mistarro"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c6pREeczwAAAAPIMe-M",
              "createdAt": "2025-02-10T08:53:44Z"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6dy6Ee",
              "createdAt": "2025-02-10T09:09:49Z",
              "body": "> > Do you think it's a good idea to put `normalizedTrace` into a namespace, just like `Algebra.trace`?\r\n> \r\n> Also `Algebra`? Otherwise I have no idea...\r\n\r\nYes `Algebra`. (Or `Field` if it's only intended to defined over fields; I'm not sure...)",
              "author": {
                "login": "acmepjz"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6dy96w",
              "createdAt": "2025-02-10T09:15:47Z",
              "body": "> > > Do you think it's a good idea to put `normalizedTrace` into a namespace, just like `Algebra.trace`?\r\n> > \r\n> > \r\n> > Also `Algebra`? Otherwise I have no idea...\r\n> \r\n> Yes `Algebra`. (Or `Field` if it's only intended to defined over fields; I'm not sure...)\r\n\r\nSo maybe let's wait for another review. I don't mind putting it in a namespace but I'd like to do it with a good namespace.",
              "author": {
                "login": "mistarro"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c6pREeczwAAAAPYmrOL",
              "createdAt": "2025-02-28T23:16:16Z"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6gcCb5",
              "createdAt": "2025-02-28T23:18:11Z",
              "body": "After merging some necessary results I was able to prove general tower law for the normalized trace (`normalizedTrace_trans[_apply]`).",
              "author": {
                "login": "mistarro"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "2bb04e0500d2a12cf9c5e2e03c9946809d9878fb"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c6pREeczwAAAAPYoLFh",
              "createdAt": "2025-03-01T00:18:14Z"
            },
            {
              "__typename": "AssignedEvent",
              "id": "AE_lADOFcwZ1c6pREeczwAAAAPZUerL",
              "createdAt": "2025-03-03T09:21:38Z",
              "assignee": {
                "id": "MDQ6VXNlcjMyNDkwNTMy",
                "login": "riccardobrasca"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6eNfoS",
              "createdAt": "2025-03-03T14:43:46Z",
              "body": "A general comment: [Algebra.trace](https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/Trace/Defs.html#Algebra.trace) is in the `Algebra` namespace, maybe this should apply also for the normalized trace?",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "ab92d1fb913a850af32c5a80c5e41f053d5d0709"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "079cd875e65e160c2ce5f367b614abca0776c965"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6g-t-L",
              "createdAt": "2025-03-05T12:29:50Z",
              "body": "Thanks!\r\n\r\nbors merge",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6pREeczwAAAAPdX8W7",
              "createdAt": "2025-03-05T12:30:01Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
                "name": "ready-to-merge"
              }
            },
            {
              "__typename": "ReferencedEvent"
            }
          ]
        }
      }
    }
  }
}
