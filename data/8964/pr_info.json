{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 85,
        "assignees": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjE0MDYwODgz",
              "login": "PatrickMassot"
            }
          ]
        },
        "author": {
          "login": "llllvvuu"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "similar to `prod_sigma`, `prod_sigma'`, `iInf_sigma`, `iInf_sigma'`, `iSup_sigma`, `iSup_sigma'`\r\n\r\nFrom PFR\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 3,
        "closed": true,
        "closedAt": "2024-02-20T19:12:26Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5uPBl8",
              "body": "ðŸš€ Pull request has been placed on the maintainer queue by YaelDillies.",
              "createdAt": "2023-12-11T06:57:32Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5uTv1X",
              "body": "I think your suggested lemmas are good, but can't replace the ones here. Eg your lemmas would turn\r\n* `â‹‚ ij âˆˆ s.sigma t, f ij` into\r\n* `â‹‚ i j (_ : âŸ¨i, jâŸ© âˆˆ s.sigma t), f âŸ¨i, jâŸ©`, which will be further simplified (due to `Set.mem_sigma_iff`) to\r\n* `â‹‚ i j (_ : i âˆˆ s âˆ§ j âˆˆ t), f âŸ¨i, jâŸ©`. `Set.iInter_and` could then turn that into\r\n* `â‹‚ i j (_ : i âˆˆ s) (_ : j âˆˆ t), f âŸ¨i, jâŸ©` but note that it's not simp.\r\n\r\nAnd now you're in a pickle because swapping the second and third `â‹‚` is the most annoying common swap I've encountered.\r\n\r\nAlso note that we want `iInf` and `iSup` lemmas too.",
              "createdAt": "2023-12-11T18:39:51Z",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5uT5l2",
              "body": "> Also note that we want iInf and iSup lemmas too.\r\n\r\nAgreed!",
              "createdAt": "2023-12-11T19:06:33Z",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5uW7i-",
              "body": "I created both the bounded and unbounded variants (except for in the case of `iInf_sigma` which already exists so I only created `biInf_sigma`).\r\n\r\nIndeed I generally experienced some friction using the unbounded variants in bounded expressions.\r\n\r\nI also kept both the `Set` and `Finset` variants since I experienced some friction using `Set` lemmas in `Finset` expressions (needed a few explicit coercions AFAICT). But instead of keeping the `Finset.univ` variants I made #8995.",
              "createdAt": "2023-12-12T08:19:22Z",
              "author": {
                "login": "llllvvuu"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5ub7Sm",
              "body": "I must say it would be much easier for us to see what's going on if you did not force-push every single commit.",
              "createdAt": "2023-12-12T21:08:41Z",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5ul52Z",
              "body": "> I must say it would be much easier for us to see what's going on if you did not force-push every single commit.\r\n\r\nSorry about that; I edited it back to a full history and will be appending only going forward.",
              "createdAt": "2023-12-14T08:52:29Z",
              "author": {
                "login": "llllvvuu"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5zb1Tt",
              "body": "@ericrbg could you describe what you're envisioning a bit more? The following proof is one based on `mem_sigma_iff` and `iSup_and`:\r\n\r\n```lean\r\ntheorem _root_.biSup_sigma (s : Set Î¹) (t : âˆ€ i, Set (Î± i)) (f : Sigma Î± â†’ Î²) :\r\n    â¨† ij âˆˆ s.sigma t, f ij = â¨† (i âˆˆ s) (j âˆˆ t i), f âŸ¨i, jâŸ© := by\r\n  simp? [iSup_sigma, iSup_and] says simp only [mem_sigma_iff, iSup_and, iSup_sigma]\r\n  congr; ext; exact iSup_comm\r\n```\r\n\r\nBy \"systematic\" / \"general\", should I make that last line into a lemma (`iSup_iSup_comm` or something)?\r\n\r\n",
              "createdAt": "2024-02-09T22:16:17Z",
              "author": {
                "login": "llllvvuu"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5zdawy",
              "body": "Maybe the best way is to make a lemma for the set of sigmas, and then possibly specialise that to this case?",
              "createdAt": "2024-02-10T18:37:00Z",
              "author": {
                "login": "ericrbg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c50aduU",
              "body": "@YaelDillies, @ericrbg: What is the status of this PR?",
              "createdAt": "2024-02-19T20:03:44Z",
              "author": {
                "login": "PatrickMassot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c50azMC",
              "body": "I'd like to see these more general lemmas about sets of Sigmas first",
              "createdAt": "2024-02-19T21:33:22Z",
              "author": {
                "login": "ericrbg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c50bGkW",
              "body": "What is the \"set of sigmas\"? I tried `Set (Sigma a)` but it doesn't yield anything useful:\r\n```lean\r\ntheorem _root_.biSup_sigma (s : Set (Sigma Î±)) (f : Sigma Î± â†’ Î²) :\r\n    â¨† ij âˆˆ s, f ij = â¨† (i) (j) (_ : âŸ¨i, jâŸ© âˆˆ s), f âŸ¨i, jâŸ© :=\r\n  iSup_sigma\r\n```\r\nIn order to commute `(j)` to the right, I have to be able to break up the `(_ : âŸ¨i, jâŸ© âˆˆ s)` for which I need `s` to be some `S.sigma T` as the \"un-general\" version stated.\r\n\r\nCould I get an example of a possible theorem statement?",
              "createdAt": "2024-02-19T23:12:34Z",
              "author": {
                "login": "llllvvuu"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c50bIVe",
              "body": "```lean\r\nnonrec theorem biSup_sigma {Î³ Î²} {Î± : Î³ â†’ Type*} [CompleteLattice Î²] (s : Set (Sigma Î±)) (f : Sigma Î± â†’ Î²) :\r\n  â¨† ij âˆˆ s, f ij = â¨† (i : Î³) (_ : âˆƒ t, âŸ¨i, tâŸ© âˆˆ s) (j : Î± i) (_ : âŸ¨i, jâŸ© âˆˆ s), f âŸ¨i, jâŸ© :=\r\n  eq_of_forall_ge_iff fun _ â†¦ âŸ¨by simp_all, by aesopâŸ©\r\n\r\n\r\nvariable {Î² : Type*} [CompleteLattice Î²] {Î¹ : Type*} {Î± : Î¹ â†’ Type*}\r\n\r\nnonrec theorem _root_s.biSup_sigma (s : Set Î¹) (t : âˆ€ i, Set (Î± i)) (f : Sigma Î± â†’ Î²) :\r\n    â¨† ij âˆˆ s.sigma t, f ij = â¨† (i âˆˆ s) (j âˆˆ t i), f âŸ¨i, jâŸ© := by\r\n  convert biSup_sigma (s.sigma t) _\r\n  aesop\r\n  rename_i x\r\n  -- this seems like a nonsense goal\r\n```\r\n\r\nmaybe something like this? apologies these are not very tidy, and honestly the goal doesn't inspire confidence at the end, but something of that form may be okay. if you don't think this works and you don't have any other similar ideas, I'm happy to maintainer merge this tomorrow",
              "createdAt": "2024-02-19T23:24:13Z",
              "author": {
                "login": "ericrbg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c50bJZQ",
              "body": "I think `(_ : âˆƒ t, âŸ¨i, tâŸ© âˆˆ s)` and `(i âˆˆ s)` are probably not equivalent since `Nonempty (t i)` was not specified",
              "createdAt": "2024-02-19T23:30:57Z",
              "author": {
                "login": "llllvvuu"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c50dO_l",
              "body": "> @YaelDillies, @ericrbg: What is the status of this PR?\r\n\r\nI'm happy with it and I don't understand what theorems eric is after.",
              "createdAt": "2024-02-20T09:38:06Z",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c50dpxt",
              "body": "maintainer merge\r\n\r\n",
              "createdAt": "2024-02-20T10:39:34Z",
              "author": {
                "login": "ericrbg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c50dp3H",
              "body": "ðŸš€ Pull request has been placed on the maintainer queue by ericrbg.",
              "createdAt": "2024-02-20T10:39:45Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c50fYjv",
              "body": "bors merge",
              "createdAt": "2024-02-20T14:52:24Z",
              "author": {
                "login": "PatrickMassot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c50gQmg",
              "body": "Build failed (retrying...):\n  * Build",
              "createdAt": "2024-02-20T16:40:23Z",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c50hUfZ",
              "body": "Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/7977822577/job/21781590887)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/7977822577/job/21781591310)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/7977822577/job/21781590491)",
              "createdAt": "2024-02-20T19:12:25Z",
              "author": {
                "login": "mathlib-bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "86a1e60848039e191545b2f36cd78e2ee852e325",
                "additions": 14,
                "deletions": 3,
                "committedDate": "2023-12-14T08:46:21Z",
                "author": {
                  "name": "L Lllvvuu",
                  "email": "git@llllvvuu.dev"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "b1fd839d45f1a514a2124938843c8bd14c58dc45",
                "additions": 52,
                "deletions": 4,
                "committedDate": "2023-12-14T08:46:56Z",
                "author": {
                  "name": "L Lllvvuu",
                  "email": "git@llllvvuu.dev"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "3c54fb21b4405c07bdb6d9dde76d6202397c9065",
                "additions": 46,
                "deletions": 25,
                "committedDate": "2023-12-14T08:47:25Z",
                "author": {
                  "name": "L Lllvvuu",
                  "email": "git@llllvvuu.dev"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "a6808081982b50ec57bde59f1de4f787216553ee",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-12-14T08:48:21Z",
                "author": {
                  "name": "L Lllvvuu",
                  "email": "git@llllvvuu.dev"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "5ed5e884dabbd60023d3bee13cda09d92c6a153f",
                "additions": 5,
                "deletions": 5,
                "committedDate": "2023-12-14T08:48:48Z",
                "author": {
                  "name": "L Lllvvuu",
                  "email": "git@llllvvuu.dev"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "0a08c19997505cfa42b3ad4b26047bb8259694cf",
                "additions": 0,
                "deletions": 1,
                "committedDate": "2023-12-14T08:49:12Z",
                "author": {
                  "name": "L Lllvvuu",
                  "email": "git@llllvvuu.dev"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "6722285c4ce18de1f3c088b2e727089b2d32ae5e",
                "additions": 8,
                "deletions": 8,
                "committedDate": "2023-12-14T08:49:45Z",
                "author": {
                  "name": "L Lllvvuu",
                  "email": "git@llllvvuu.dev"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "89c01cb2015a3bbb6191c0c046bd5caaef7121e6",
                "additions": 28,
                "deletions": 22,
                "committedDate": "2023-12-14T08:50:35Z",
                "author": {
                  "name": "L Lllvvuu",
                  "email": "git@llllvvuu.dev"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "2c7fe67784c534e183fbc12c7ac1259596a0b5ba",
                "additions": 4,
                "deletions": 4,
                "committedDate": "2023-12-14T08:50:56Z",
                "author": {
                  "name": "L Lllvvuu",
                  "email": "git@llllvvuu.dev"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAE_BhNJg",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7845269113/job/21409320230"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAE_QLdrw",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7850048996/job/21424692655"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAE_BhLrQ",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7845269090/job/21409319853"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAE_BhNAQ",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7845269196/job/21409320193"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAE_QLdnw",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7850048999/job/21424692639"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEkiGH3A",
                        "name": "Add annotations",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7206530389/job/19631540188"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEkiGEJg",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7206529961/job/19631539238"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEkiGEiw",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7206529957/job/19631539339"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEkiGIPw",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7206530400/job/19631540287"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAE_BhMHg",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7845269113/job/21409319966"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAE_QLeNg",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7850048996/job/21424692790"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEkiGE-g",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7206529961/job/19631539450"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEkiGFkw",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7206529957/job/19631539603"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEkiGJGA",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7206530400/job/19631540504"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEkiGF7g",
                        "name": "Check all files imported (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7206529961/job/19631539694"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEkiGGdg",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7206529957/job/19631539830"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEkiGG8w",
                        "name": "check workflows (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7206529961/job/19631539955"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEkiGDpQ",
                        "name": "check workflows",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7206529957/job/19631539109"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEkiGIFQ",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7206529961/job/19631540245"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEkiGHYQ",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7206529957/job/19631540065"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEkiGJFw",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7206529961/job/19631540503"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEkkKPUA",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7206529957/job/19633704784"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAErGC7Qg",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/github/leanprover-community/repo/mathlib4/event-logs?pullRequestNumber=8964"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "79edc3293ceaafcbd54bb1426e8c3a1f1b9b7f2d",
                "additions": 98825,
                "deletions": 53815,
                "committedDate": "2024-02-09T20:34:51Z",
                "author": {
                  "name": "L Lllvvuu",
                  "email": "git@llllvvuu.dev"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "f9f18ac4146880988acf21215878b8eb5d5e5ef5",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2024-02-09T21:59:36Z",
                "author": {
                  "name": "L Lllvvuu",
                  "email": "git@llllvvuu.dev"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAE_ekpow",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7856722808/job/21439785379"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAE_ekpQA",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7856722811/job/21439785280"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAE_QN3SA",
                        "name": "Add annotations",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7850059985/job/21424731976"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAE_QOFGQ",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7850061423/job/21424735513"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAE_QOF8w",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7850061425/job/21424735731"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAE_QN3sA",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7850059979/job/21424732080"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAE_ekpQQ",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7856722808/job/21439785281"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAE_QOHVw",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7850061423/job/21424736087"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAE_QOHWA",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7850061425/job/21424736088"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAE_QN3Kg",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7850059979/job/21424731946"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAE_QOGTw",
                        "name": "Check all files imported (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7850061423/job/21424735823"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAE_QOGcA",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7850061425/job/21424735856"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAE_QOF1w",
                        "name": "check workflows (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7850061423/job/21424735703"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAE_QOG4g",
                        "name": "check workflows",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7850061425/job/21424735970"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAE_QOG0w",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7850061423/job/21424735955"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAE_QOFVw",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7850061425/job/21424735575"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAE_QOIEQ",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7850061423/job/21424736273"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAE_Ruv0w",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7850061425/job/21426319315"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAE_QOzLw",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/github/leanprover-community/repo/mathlib4/event-logs?pullRequestNumber=8964"
                      },
                      {
                        "__typename": "StatusContext",
                        "id": "SC_kwDOFcwZ1c8AAAAGbks4UA",
                        "context": "bors",
                        "state": "SUCCESS",
                        "targetUrl": "https://mathlib-bors-ca18eefec4cb.herokuapp.com/batches/1725",
                        "description": "Build succeeded"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "createdAt": "2023-12-11T06:22:39Z",
        "deletions": 0,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/Data/Finset/Sigma.lean",
              "additions": 32,
              "deletions": 0
            },
            {
              "path": "Mathlib/Data/Set/Lattice.lean",
              "additions": 14,
              "deletions": 0
            },
            {
              "path": "Mathlib/Data/Set/Sigma.lean",
              "additions": 39,
              "deletions": 0
            }
          ]
        },
        "headRefName": "feat/iinter_sigma",
        "headRefOid": "f9f18ac4146880988acf21215878b8eb5d5e5ef5",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5hpCe8",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
              "color": "06e039",
              "name": "ready-to-merge"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABh1mAHA",
              "color": "6BEB7E",
              "name": "maintainer-merge"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5vsY6u",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ericrbg"
              },
              "submittedAt": "2024-02-10T18:34:47Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5p8F95",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2023-12-12T12:32:53Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5p15pU",
              "body": "These lemmas feel rather contrived; I think we're missing something more general, like:\r\n```lean\r\ntheorem _root_.Set.iInter_sigma (s : (Î£ i, Î± i) â†’ Set Î²) :\r\n  â‹‚ ia, s ia = â‹‚ i, â‹‚ a, s âŸ¨i, aâŸ© := by ext; simp\r\n```\r\nand similarly for `prod` and `pi`.\r\n\r\nWhatever we decide, we certainly shouldn't add the `Inter` versions without also adding matching `Union` versions.",
              "state": "CHANGES_REQUESTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-12-11T17:28:39Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 8964,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": "CHANGES_REQUESTED",
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5pwvi8",
              "body": "Thanks!\r\n\r\nmaintainer merge",
              "state": "APPROVED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2023-12-11T06:57:18Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5p10Kz",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-12-11T17:18:42Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5p11Rw",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2023-12-11T17:20:55Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5p15pU",
              "body": "These lemmas feel rather contrived; I think we're missing something more general, like:\r\n```lean\r\ntheorem _root_.Set.iInter_sigma (s : (Î£ i, Î± i) â†’ Set Î²) :\r\n  â‹‚ ia, s ia = â‹‚ i, â‹‚ a, s âŸ¨i, aâŸ© := by ext; simp\r\n```\r\nand similarly for `prod` and `pi`.\r\n\r\nWhatever we decide, we certainly shouldn't add the `Inter` versions without also adding matching `Union` versions.",
              "state": "CHANGES_REQUESTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-12-11T17:28:39Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5p6R64",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2023-12-12T08:18:41Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5p6V8O",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "llllvvuu"
              },
              "submittedAt": "2023-12-12T08:27:14Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5p8F95",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2023-12-12T12:32:53Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5vnCyg",
              "body": "Is there a more systematic way to turn these sort of statements into general statements about `And` & `biSup`, or such like? (i.e. going through `Set.mem_sigma_iff` instead). ",
              "state": "COMMENTED",
              "author": {
                "login": "ericrbg"
              },
              "submittedAt": "2024-02-09T14:19:15Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5vp6jn",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "llllvvuu"
              },
              "submittedAt": "2024-02-09T21:58:03Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5vsY6u",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ericrbg"
              },
              "submittedAt": "2024-02-10T18:34:47Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5UzsVU",
                    "body": "This statement looks odd to me; shouldn't it be the following for symmetry?\r\n```suggestion\r\n    (u : âˆ€ i, Î± i â†’ Set Î²) : â‹‚ ij âˆˆ s.sigma t, u ij.1 ij.2 = â‹‚ i âˆˆ s, â‹‚ j âˆˆ t i, u i j := by aesop\r\n```",
                    "createdAt": "2023-12-11T17:18:42Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5UztDT",
                    "body": "Same here, I hadn't noticed\r\n```suggestion\r\n    â‹‚ ij âˆˆ s.sigma t, u ij.1 ij.2 = â‹‚ i âˆˆ s, â‹‚ j âˆˆ t i, u i j := by aesop\r\n```",
                    "createdAt": "2023-12-11T17:20:55Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5U2oyH",
                    "body": "```suggestion\r\ntheorem iUnion_sigma' {Î³ : Î± â†’ Type*} (s : âˆ€ i, Î³ i â†’ Set Î²) :\r\n```",
                    "createdAt": "2023-12-12T08:18:40Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5U2rwl",
                    "body": "`aesop` was messing with this theorem statement (i suspect due to `unhygienic` pulling in implicit variables), so i expanded it down to `intro; constructor <;> simp_all`",
                    "createdAt": "2023-12-12T08:27:14Z",
                    "author": {
                      "login": "llllvvuu"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5Yed0P",
                    "body": "what do you mean by this? the theorem statement should be fully evaluated before entering tactic mode",
                    "createdAt": "2024-02-09T14:17:04Z",
                    "author": {
                      "login": "ericrbg"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5YgOii",
                    "body": "<img width=\"753\" alt=\"Screenshot 2024-02-09 at 1 53 53â€¯PM\" src=\"https://github.com/leanprover-community/mathlib4/assets/5601392/9f90c0e8-4e9a-4543-84f4-8270127f9e6f\">\r\n<img width=\"713\" alt=\"Screenshot 2024-02-09 at 1 54 15â€¯PM\" src=\"https://github.com/leanprover-community/mathlib4/assets/5601392/9a85e519-884e-4ba8-a9cf-dc496f850268\">\r\n\r\n`aesop` introduces `x` as an implicit argument, which is undesired. I don't fully understand the mechanics behind this, but `clear x; aesop` works",
                    "createdAt": "2024-02-09T21:58:03Z",
                    "author": {
                      "login": "llllvvuu"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5Yho-S",
                    "body": "Oh wow, that's unhelpful, yes. Maybe worth raising this as an aesop issue",
                    "createdAt": "2024-02-10T18:34:47Z",
                    "author": {
                      "login": "ericrbg"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5U313S",
                    "body": "```suggestion\r\n  biSup_finsetSigma (Î² := Î²áµ’áµˆ) _ _ _\r\n```",
                    "createdAt": "2023-12-12T12:30:35Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5U32HN",
                    "body": "Sorry, I should have told you to keep `f`\r\n```suggestion\r\ntheorem _root_.Set.biUnion_finsetSigma (s : Finset Î¹) (t : âˆ€ i, Finset (Î± i))\r\n    (f : Sigma Î± â†’ Set Î²) : â‹ƒ ij âˆˆ s.sigma t, f ij = â‹ƒ i âˆˆ s, â‹ƒ j âˆˆ t i, f âŸ¨i, jâŸ© :=\r\n  biSup_finsetSigma _ _ _\r\n\r\ntheorem _root_.Set.biUnion_finsetSigma' (s : Finset Î¹) (t : âˆ€ i, Finset (Î± i))\r\n    (f : âˆ€ i, Î± i â†’ Set Î²) : â‹ƒ i âˆˆ s, â‹ƒ j âˆˆ t i, f i j = â‹ƒ ij âˆˆ s.sigma t, f ij.fst ij.snd :=\r\n  biSup_finsetSigma' _ _ _\r\n\r\ntheorem _root_.Set.biInter_finsetSigma (s : Finset Î¹) (t : âˆ€ i, Finset (Î± i))\r\n    (f : Sigma Î± â†’ Set Î²) : â‹‚ ij âˆˆ s.sigma t, f ij = â‹‚ i âˆˆ s, â‹‚ j âˆˆ t i, f âŸ¨i, jâŸ© :=\r\n  biInf_finsetSigma _ _ _\r\n\r\ntheorem _root_.Set.biInter_finsetSigma' (s : Finset Î¹) (t : âˆ€ i, Finset (Î± i))\r\n    (f : âˆ€ i, Î± i â†’ Set Î²) : â‹‚ i âˆˆ s, â‹‚ j âˆˆ t i, f i j = â‹‚ ij âˆˆ s.sigma t, f ij.1 ij.2 :=\r\n  biInf_finsetSigma' _ _ _\r\n```",
                    "createdAt": "2023-12-12T12:31:34Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5U32cJ",
                    "body": "`Î¹'` is not a great name for a lattice! Can you use `Î²` instead?\r\n```suggestion\r\ntheorem _root_.biSup_sigma [CompleteLattice Î¹'] (s : Set Î¹) (t : âˆ€ i, Set (Î± i))\r\n```",
                    "createdAt": "2023-12-12T12:32:47Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjU2MDEzOTI=",
              "login": "llllvvuu"
            },
            {
              "id": "MDQ6VXNlcjE0MDkwNTkz",
              "login": "YaelDillies"
            },
            {
              "id": "MDQ6VXNlcjQyNTI2MA==",
              "login": "eric-wieser"
            },
            {
              "id": "MDQ6VXNlcjM3OTg0ODUx",
              "login": "ericrbg"
            },
            {
              "id": "MDQ6VXNlcjE0MDYwODgz",
              "login": "PatrickMassot"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAE_ekpow",
                "name": "Add ready-to-merge label",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7856722808/job/21439785379"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAE_ekpQA",
                "name": "Ping maintainers on Zulip",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7856722811/job/21439785280"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAE_QN3SA",
                "name": "Add annotations",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7850059985/job/21424731976"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAE_QOFGQ",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7850061423/job/21424735513"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAE_QOF8w",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7850061425/job/21424735731"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAE_QN3sA",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7850059979/job/21424732080"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAE_ekpQQ",
                "name": "Add delegated label",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7856722808/job/21439785281"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAE_QOHVw",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7850061423/job/21424736087"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAE_QOHWA",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7850061425/job/21424736088"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAE_QN3Kg",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7850059979/job/21424731946"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAE_QOGTw",
                "name": "Check all files imported (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7850061423/job/21424735823"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAE_QOGcA",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7850061425/job/21424735856"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAE_QOF1w",
                "name": "check workflows (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7850061423/job/21424735703"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAE_QOG4g",
                "name": "check workflows",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7850061425/job/21424735970"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAE_QOG0w",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7850061423/job/21424735955"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAE_QOFVw",
                "name": "Build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7850061425/job/21424735575"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAE_QOIEQ",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7850061423/job/21424736273"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAE_Ruv0w",
                "name": "Post-CI job",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7850061425/job/21426319315"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAE_QOzLw",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/github/leanprover-community/repo/mathlib4/event-logs?pullRequestNumber=8964"
              },
              {
                "__typename": "StatusContext",
                "id": "SC_kwDOFcwZ1c8AAAAGbks4UA",
                "context": "bors",
                "state": "SUCCESS",
                "targetUrl": "https://mathlib-bors-ca18eefec4cb.herokuapp.com/batches/1725",
                "description": "Build succeeded"
              }
            ]
          }
        },
        "title": "[Merged by Bors] -  feat: `iInter_sigma`, `biInter_sigma`, `biSup_sigma`, `biInf_sigma`",
        "updatedAt": "2024-02-20T19:12:35Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/8964",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5Pzndl",
              "createdAt": "2023-12-11T06:22:48Z",
              "source": {
                "id": "PR_kwDOFcwZ1c5hlijH",
                "title": "feat: `iInter_sigma`",
                "url": "https://github.com/leanprover-community/mathlib4/pull/8925"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5pwvi8",
              "createdAt": "2023-12-11T06:57:18Z",
              "body": "Thanks!\r\n\r\nmaintainer merge",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5uPBl8",
              "createdAt": "2023-12-11T06:57:32Z",
              "body": "ðŸš€ Pull request has been placed on the maintainer queue by YaelDillies.",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5p10Kz",
              "createdAt": "2023-12-11T17:18:41Z",
              "body": "",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5p11Rw",
              "createdAt": "2023-12-11T17:20:55Z",
              "body": "",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5p15pU",
              "createdAt": "2023-12-11T17:28:39Z",
              "body": "These lemmas feel rather contrived; I think we're missing something more general, like:\r\n```lean\r\ntheorem _root_.Set.iInter_sigma (s : (Î£ i, Î± i) â†’ Set Î²) :\r\n  â‹‚ ia, s ia = â‹‚ i, â‹‚ a, s âŸ¨i, aâŸ© := by ext; simp\r\n```\r\nand similarly for `prod` and `pi`.\r\n\r\nWhatever we decide, we certainly shouldn't add the `Inter` versions without also adding matching `Union` versions.",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5uTv1X",
              "createdAt": "2023-12-11T18:39:51Z",
              "body": "I think your suggested lemmas are good, but can't replace the ones here. Eg your lemmas would turn\r\n* `â‹‚ ij âˆˆ s.sigma t, f ij` into\r\n* `â‹‚ i j (_ : âŸ¨i, jâŸ© âˆˆ s.sigma t), f âŸ¨i, jâŸ©`, which will be further simplified (due to `Set.mem_sigma_iff`) to\r\n* `â‹‚ i j (_ : i âˆˆ s âˆ§ j âˆˆ t), f âŸ¨i, jâŸ©`. `Set.iInter_and` could then turn that into\r\n* `â‹‚ i j (_ : i âˆˆ s) (_ : j âˆˆ t), f âŸ¨i, jâŸ©` but note that it's not simp.\r\n\r\nAnd now you're in a pickle because swapping the second and third `â‹‚` is the most annoying common swap I've encountered.\r\n\r\nAlso note that we want `iInf` and `iSup` lemmas too.",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5uT5l2",
              "createdAt": "2023-12-11T19:06:33Z",
              "body": "> Also note that we want iInf and iSup lemmas too.\r\n\r\nAgreed!",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c55Sl7VzwAAAAKceOtE",
              "createdAt": "2023-12-11T19:45:04Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c55Sl7VzwAAAAKctJxA",
              "createdAt": "2023-12-12T06:11:12Z"
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c55Sl7VzwAAAAKctQgk",
              "createdAt": "2023-12-12T06:15:32Z"
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c55Sl7VzwAAAAKcwIwd",
              "createdAt": "2023-12-12T07:55:21Z"
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5p6R64",
              "createdAt": "2023-12-12T08:18:40Z",
              "body": "",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5uW7i-",
              "createdAt": "2023-12-12T08:19:22Z",
              "body": "I created both the bounded and unbounded variants (except for in the case of `iInf_sigma` which already exists so I only created `biInf_sigma`).\r\n\r\nIndeed I generally experienced some friction using the unbounded variants in bounded expressions.\r\n\r\nI also kept both the `Set` and `Finset` variants since I experienced some friction using `Set` lemmas in `Finset` expressions (needed a few explicit coercions AFAICT). But instead of keeping the `Finset.univ` variants I made #8995.",
              "author": {
                "login": "llllvvuu"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c55Sl7VzwAAAAKcxEPh",
              "createdAt": "2023-12-12T08:20:58Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c55Sl7VzwAAAAKcxEPv",
              "createdAt": "2023-12-12T08:20:58Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c55Sl7VzwAAAAKcxLmn",
              "createdAt": "2023-12-12T08:23:54Z"
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c55Sl7VzwAAAAKcxQSe",
              "createdAt": "2023-12-12T08:25:30Z"
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5p6V8O",
              "createdAt": "2023-12-12T08:27:14Z",
              "body": "",
              "author": {
                "login": "llllvvuu"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c55Sl7VzwAAAAKcy9DB",
              "createdAt": "2023-12-12T09:06:11Z"
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5p8F95",
              "createdAt": "2023-12-12T12:30:35Z",
              "body": "",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c55Sl7VzwAAAAKdPMG0",
              "createdAt": "2023-12-12T19:40:55Z"
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c55Sl7VzwAAAAKdPptB",
              "createdAt": "2023-12-12T19:54:48Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c55Sl7VzwAAAAKdRS47",
              "createdAt": "2023-12-12T20:46:29Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c55Sl7VzwAAAAKdRwqv",
              "createdAt": "2023-12-12T21:02:15Z"
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c55Sl7VzwAAAAKdRw3Y",
              "createdAt": "2023-12-12T21:02:21Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5ub7Sm",
              "createdAt": "2023-12-12T21:08:41Z",
              "body": "I must say it would be much easier for us to see what's going on if you did not force-push every single commit.",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c55Sl7VzwAAAAKdTmHD",
              "createdAt": "2023-12-12T22:04:46Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c55Sl7VzwAAAAKeRQoj",
              "createdAt": "2023-12-14T08:52:24Z"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5ul52Z",
              "createdAt": "2023-12-14T08:52:29Z",
              "body": "> I must say it would be much easier for us to see what's going on if you did not force-push every single commit.\r\n\r\nSorry about that; I edited it back to a full history and will be appending only going forward.",
              "author": {
                "login": "llllvvuu"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5vnCyg",
              "createdAt": "2024-02-09T14:17:04Z",
              "body": "Is there a more systematic way to turn these sort of statements into general statements about `And` & `biSup`, or such like? (i.e. going through `Set.mem_sigma_iff` instead). ",
              "author": {
                "login": "ericrbg"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5zb1Tt",
              "createdAt": "2024-02-09T22:16:17Z",
              "body": "@ericrbg could you describe what you're envisioning a bit more? The following proof is one based on `mem_sigma_iff` and `iSup_and`:\r\n\r\n```lean\r\ntheorem _root_.biSup_sigma (s : Set Î¹) (t : âˆ€ i, Set (Î± i)) (f : Sigma Î± â†’ Î²) :\r\n    â¨† ij âˆˆ s.sigma t, f ij = â¨† (i âˆˆ s) (j âˆˆ t i), f âŸ¨i, jâŸ© := by\r\n  simp? [iSup_sigma, iSup_and] says simp only [mem_sigma_iff, iSup_and, iSup_sigma]\r\n  congr; ext; exact iSup_comm\r\n```\r\n\r\nBy \"systematic\" / \"general\", should I make that last line into a lemma (`iSup_iSup_comm` or something)?\r\n\r\n",
              "author": {
                "login": "llllvvuu"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5zdawy",
              "createdAt": "2024-02-10T18:37:00Z",
              "body": "Maybe the best way is to make a lemma for the set of sigmas, and then possibly specialise that to this case?",
              "author": {
                "login": "ericrbg"
              }
            },
            {
              "__typename": "AssignedEvent",
              "id": "AE_lADOFcwZ1c55Sl7VzwAAAALAXZ-a",
              "createdAt": "2024-02-15T15:39:43Z",
              "assignee": {
                "id": "MDQ6VXNlcjE0MDYwODgz",
                "login": "PatrickMassot"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c50aduU",
              "createdAt": "2024-02-19T20:03:44Z",
              "body": "@YaelDillies, @ericrbg: What is the status of this PR?",
              "author": {
                "login": "PatrickMassot"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c50azMC",
              "createdAt": "2024-02-19T21:33:22Z",
              "body": "I'd like to see these more general lemmas about sets of Sigmas first",
              "author": {
                "login": "ericrbg"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c55Sl7VzwAAAALClAR0",
              "createdAt": "2024-02-19T21:33:35Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c55Sl7VzwAAAALClAR3",
              "createdAt": "2024-02-19T21:33:35Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c50bGkW",
              "createdAt": "2024-02-19T23:12:34Z",
              "body": "What is the \"set of sigmas\"? I tried `Set (Sigma a)` but it doesn't yield anything useful:\r\n```lean\r\ntheorem _root_.biSup_sigma (s : Set (Sigma Î±)) (f : Sigma Î± â†’ Î²) :\r\n    â¨† ij âˆˆ s, f ij = â¨† (i) (j) (_ : âŸ¨i, jâŸ© âˆˆ s), f âŸ¨i, jâŸ© :=\r\n  iSup_sigma\r\n```\r\nIn order to commute `(j)` to the right, I have to be able to break up the `(_ : âŸ¨i, jâŸ© âˆˆ s)` for which I need `s` to be some `S.sigma T` as the \"un-general\" version stated.\r\n\r\nCould I get an example of a possible theorem statement?",
              "author": {
                "login": "llllvvuu"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c50bIVe",
              "createdAt": "2024-02-19T23:24:13Z",
              "body": "```lean\r\nnonrec theorem biSup_sigma {Î³ Î²} {Î± : Î³ â†’ Type*} [CompleteLattice Î²] (s : Set (Sigma Î±)) (f : Sigma Î± â†’ Î²) :\r\n  â¨† ij âˆˆ s, f ij = â¨† (i : Î³) (_ : âˆƒ t, âŸ¨i, tâŸ© âˆˆ s) (j : Î± i) (_ : âŸ¨i, jâŸ© âˆˆ s), f âŸ¨i, jâŸ© :=\r\n  eq_of_forall_ge_iff fun _ â†¦ âŸ¨by simp_all, by aesopâŸ©\r\n\r\n\r\nvariable {Î² : Type*} [CompleteLattice Î²] {Î¹ : Type*} {Î± : Î¹ â†’ Type*}\r\n\r\nnonrec theorem _root_s.biSup_sigma (s : Set Î¹) (t : âˆ€ i, Set (Î± i)) (f : Sigma Î± â†’ Î²) :\r\n    â¨† ij âˆˆ s.sigma t, f ij = â¨† (i âˆˆ s) (j âˆˆ t i), f âŸ¨i, jâŸ© := by\r\n  convert biSup_sigma (s.sigma t) _\r\n  aesop\r\n  rename_i x\r\n  -- this seems like a nonsense goal\r\n```\r\n\r\nmaybe something like this? apologies these are not very tidy, and honestly the goal doesn't inspire confidence at the end, but something of that form may be okay. if you don't think this works and you don't have any other similar ideas, I'm happy to maintainer merge this tomorrow",
              "author": {
                "login": "ericrbg"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c50bJZQ",
              "createdAt": "2024-02-19T23:30:57Z",
              "body": "I think `(_ : âˆƒ t, âŸ¨i, tâŸ© âˆˆ s)` and `(i âˆˆ s)` are probably not equivalent since `Nonempty (t i)` was not specified",
              "author": {
                "login": "llllvvuu"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c50dO_l",
              "createdAt": "2024-02-20T09:38:06Z",
              "body": "> @YaelDillies, @ericrbg: What is the status of this PR?\r\n\r\nI'm happy with it and I don't understand what theorems eric is after.",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c50dpxt",
              "createdAt": "2024-02-20T10:39:34Z",
              "body": "maintainer merge\r\n\r\n",
              "author": {
                "login": "ericrbg"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c55Sl7VzwAAAALC5wwC",
              "createdAt": "2024-02-20T10:39:42Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c55Sl7VzwAAAALC5wwN",
              "createdAt": "2024-02-20T10:39:43Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c50dp3H",
              "createdAt": "2024-02-20T10:39:45Z",
              "body": "ðŸš€ Pull request has been placed on the maintainer queue by ericrbg.",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c55Sl7VzwAAAALC5w9q",
              "createdAt": "2024-02-20T10:39:46Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABh1mAHA",
                "name": "maintainer-merge"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c50fYjv",
              "createdAt": "2024-02-20T14:52:24Z",
              "body": "bors merge",
              "author": {
                "login": "PatrickMassot"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c55Sl7VzwAAAALDFidN",
              "createdAt": "2024-02-20T14:52:37Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
                "name": "ready-to-merge"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c55Sl7VzwAAAALDFihu",
              "createdAt": "2024-02-20T14:52:37Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c50gQmg",
              "createdAt": "2024-02-20T16:40:23Z",
              "body": "Build failed (retrying...):\n  * Build",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c50hUfZ",
              "createdAt": "2024-02-20T19:12:25Z",
              "body": "Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/7977822577/job/21781590887)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/7977822577/job/21781591310)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/7977822577/job/21781590491)",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c55Sl7VzwAAAALDSXQB",
              "createdAt": "2024-02-20T19:12:26Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c55Sl7VzwAAAALDSXmu",
              "createdAt": "2024-02-20T19:12:35Z"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5RAYuO",
              "createdAt": "2024-02-22T09:44:30Z",
              "source": {
                "id": "PR_kwDOFcwZ1c5nn9Qj",
                "title": "[Merged by Bors] - feat: Unions and intersections indexed by `Finset.sigma`",
                "url": "https://github.com/leanprover-community/mathlib4/pull/10851"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5Z6_Wk",
              "createdAt": "2024-10-01T11:39:54Z",
              "source": {
                "id": "PR_kwDOFcwZ1c58WojD",
                "title": "[Merged by Bors] - chore(Data/Finset): split lattice file",
                "url": "https://github.com/leanprover-community/mathlib4/pull/17049"
              }
            }
          ]
        }
      }
    }
  }
}
