{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 36,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "eric-wieser"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nFor details on the \"pull request lifecycle\" in mathlib, please see:\r\nhttps://leanprover-community.github.io/contribute/index.html\r\n\r\nIn particular, note that most reviewers will only notice your PR\r\nif it passes the continuous integration checks.\r\nPlease ask for help on https://leanprover.zulipchat.com if needed.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nIf you are moving or deleting declarations, please include these lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nMoves:\r\n- Vector.* -> List.Vector.*\r\n- ...\r\n\r\nDeletions:\r\n- Nat.bit1_add_bit1\r\n- ...\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 1,
        "closed": false,
        "closedAt": null,
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c6Z8NAj",
              "body": "### PR summary [ad349f59d1](https://github.com/leanprover-community/mathlib4/pull/20636/commits/ad349f59d1c6255b47f550f6047a83c7e2f49298)\n\n#### Import changes for modified files\n\nNo significant changes to the import graph\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ NonemptyInterval.instMul`\n`+ fst_mul'`\n`+ instMulOfSemiring`\n`+ instance : MulZeroOneClass (NonemptyInterval α)`\n`+ snd_mul'`\n`- instance : Mul (NonemptyInterval α)`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n</details>\n\n---\n\n<details><summary>No changes to technical debt.</summary>\n\nYou can run this locally as\n```\n./scripts/technical-debt-metrics.sh pr_summary\n```\n* The `relative` value is the weighted *sum* of the differences with weight given by the *inverse* of the current value of the statistic.\n* The `absolute` value is the `relative` value divided by the total sum of the inverses of the current values (i.e. the weighted *average* of the differences).\n</details>",
              "createdAt": "2025-01-10T13:17:50Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6gQGTZ",
              "body": "I looked at this a bit, and unfortunately the `left_distrib` property actually _doesn't hold_, slightly to my surprise ... which explains why I had trouble proving it. (I tried, for a quite while, in the past when I was working on ComputableReals). Here's a concrete example:\r\n[live.lean-lang.org](https://live.lean-lang.org/#codez=JYWwDg9gTgLgBAWQIYwBYBtgCMBQOB2SIApgM5hIDGxcAchPseDAJ4CS+MxUAbkujj5RgSLOhoBtADLBGSKAHkoAE27FlAZSbBh+AOZxAjcABdPAHoAtBbgBVfJgDWNAAb1Gzdp2590AOlmkMAgArujOADRwaMCkcADu0A6xAGbQcKTaunqkvnAWZjgBMEj41HBFIegKyVogOrIGAFyIoXAAFG5MYKwcXLz8RgCU8ahqOHBwIK1IcFhwjQC84xNwAN5wyYHzC3BIvpvwAFSz+1uAyUS7p0cnpPjKcBd7t/fHWFcPl89wr77PyyvpO7bS4Hb4nUGAFKIQVsfl8oU8gT9IZ9ETc7v8VgcAPriLFfRazFgYgHKUigMDElZIMBgdAscr4ZI44h44JgXwwKAlWIAfixlImekoDD0UAFuxpdIZTNxpDZHK5+F5/IBAKFIrFqqpkvpshlLLl7M53LgfPFUGS6DgAF88MQgZ0PL1vPw8KIsFBiDxdvM4IAsQmBFgAzDh3Z7vXNmgGCQBGUNYD1euCUX3RnYAdnjie99yjwIAHFnw3AaHmCRY42Gk8lU8CAAx4ADEXoGbUAF+RtpDhLCAS/Ju/SLege2C2hMO5Rwso+1gB5bhwBqOAd4jhZLT2dDuDDZqO7qePo+f2DJstq3tzvd9dwQfD47jydXm9wRcdru9/vXudgpdtldrj9PjuDBdD0Xj9FafqDEAA)\r\n\r\nWith `a = (-3,1)`, `b = (7,8)`, `c = (-1,0)`, then we have `a * (b + c) = (-24, 8)`, but `a * b + a * c = (-25, 11)`. This isn't a total surprise, because (for instance) interval arithmetic is typically defined in a way such that `a^2 != a*a` for essentially the same reason ... when an expression is used twice, we could take a different value at each site. This means we can't have `Distrib`, or indeed any kind `...Ring`-ish type.\r\n\r\nWe do have associativity of multiplication, and negation is well-behaved, and adding zero etc.\r\nSo some instances we *could* have:\r\n * `OrderedRing α` -> `InvolutiveNeg (NonemptyInterval α)`\r\n * `OrderedCommMonoid α` -> `CommMonoid (NonemptyInterval α)`\r\n ",
              "createdAt": "2025-02-27T17:03:00Z",
              "author": {
                "login": "Timeroot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6gShAm",
              "body": "Btw this is also hurt by the fact that addition isn't a group, even when the underlying structure is. e.g. Take `x = (-3,1)`, then `-x = (-1,3)`, and so `x + (-x) = (-4, 4)`. There aren't additive inverses. Similarly, there aren't multiplicative inverses (even for strictly positive elements.)\r\n\r\nSo, after a bit of work, I think the best one can do (for \"nice\" structures like Z/Q/R) is:\r\n\r\n```\r\nOrderedCancelAddCommMonoid, AddCommMonoidWithOne, CancelCommMonoidWithZero,\r\nSubtractionCommMonoid, HasDistribNeg, ZeroLEOneClass, Archimedean\r\n```\r\nI tried pretty hard to \"optimize\" this list as in, it's maximal (it has all the true properties) and minimal (there's no redundant classes, and no classes that combine two of these), but I could've made a mistake.\r\n\r\nThen there's accompanying `NatCast, IntCast, RatCast` ... and probably with some variants of `StrictPosMulMono`.\r\n\r\nI think `OrderedCancelAddCommMonoid`+`AddCommMonoidWithOne` kind of \"conflict\" in the sense that they both extend `Add`, so we couldn't provide separate instances for each, right? Like we'd need a class that combines these. And similarly for `CancelCommMonoidWithZero`+`SubtractionCommMonoid` each building off `Mul`.\r\n\r\nA `NatCast` instance would come from `AddCommMonoidWithOne`, but then `IntCast` and `RatCast` don't, so those would need to be given separately.\r\n\r\nWould it be desirable to define a class that essentially combines these those first 7 together, something like `IntervalRing`? Not a great name though. Either that, or defining `OrderedCancelAddCommMonoidWithOne` and `CancelSubtractionCommMonoidWithZero`, and then just giving the various instance?\r\n",
              "createdAt": "2025-02-27T22:03:05Z",
              "author": {
                "login": "Timeroot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6gShrA",
              "body": "FWIW, the \"just throw all the instances together\" is the approach I have [here](https://github.com/Timeroot/ComputableReal/blob/f68d40377c4ef1459a95727e5ad281d988b48b22/ComputableReal/ComputableRSeq.lean#L1027C1-L1029C76).",
              "createdAt": "2025-02-27T22:04:43Z",
              "author": {
                "login": "Timeroot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6g2niG",
              "body": "> Would it be desirable to define a class that essentially combines these those first 7 together, something like `IntervalRing`? Not a great name though. Either that, or defining `OrderedCancelAddCommMonoidWithOne` and `CancelSubtractionCommMonoidWithZero`, and then just giving the various instance?\r\n\r\nDefining the instances separately is what we do for sets and finsets already, so I would rather go with that",
              "createdAt": "2025-03-04T19:17:24Z",
              "author": {
                "login": "YaelDillies"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "ad349f59d1c6255b47f550f6047a83c7e2f49298",
                "additions": 36,
                "deletions": 1,
                "committedDate": "2025-01-10T13:16:30Z",
                "author": {
                  "name": "Eric Wieser",
                  "email": "efw@google.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAISaYy9Q",
                        "name": "Fix style issues from lint",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12770460220/job/35595367157"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAISk_leg",
                        "name": "Fix style issues from lint",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12773787907/job/35606488442"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIS9oKXQ",
                        "name": "Fix style issues from lint",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12782587832/job/35632319069"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAITrwXRw",
                        "name": "Fix style issues from lint",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12797858901/job/35680687943"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAITso6hw",
                        "name": "Fix style issues from lint",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12798165706/job/35681614471"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAITsvS5Q",
                        "name": "Fix style issues from lint",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12798199466/job/35681719013"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAITvEkHQ",
                        "name": "Fix style issues from lint",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12799001293/job/35684164637"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIP9m7HA",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12710261477/job/35430972188"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIcDamog",
                        "name": "set_pr_emoji",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12995511145/job/36242368162"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAISaYxXQ",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12770460253/job/35595366749"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAISk_jKw",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12773787905/job/35606487851"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIS9oKzg",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12782587826/job/35632319182"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAITrwWwQ",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12797858904/job/35680687809"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAITso6ng",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12798165701/job/35681614494"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAITsvTfw",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12798199465/job/35681719167"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAITvEkmQ",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12799001283/job/35684164761"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIVGRQJw",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12829472369/job/35775598631"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIVHjDUg",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12829911698/job/35776938834"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIVKrnwg",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12830940629/job/35780224962"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIVMJsjA",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12831406081/job/35781766284"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIP9n7uA",
                        "name": "Add topic label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12710265952/job/35430988728"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIP9n6qw",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12710265946/job/35430988459"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAISaYwxg",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12770460216/job/35595366598"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAISk_jMQ",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12773787906/job/35606487857"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIS9oKGg",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12782587827/job/35632319002"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAITrwXYA",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12797858917/job/35680687968"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAITso6kQ",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12798165707/job/35681614481"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAITsvSzQ",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12798199470/job/35681718989"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAITvEkDQ",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12799001289/job/35684164621"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIVGRP6g",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12829472366/job/35775598570"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIVHjEWA",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12829911685/job/35776939096"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIVKroLA",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12830940632/job/35780225068"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIVMJsvQ",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12831406076/job/35781766333"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIP9n6sw",
                        "name": "post-or-update-summary-comment",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12710265950/job/35430988467"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIVGRP3g",
                        "name": "Fix style issues from lint",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12829472367/job/35775598558"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIVHjEdg",
                        "name": "Fix style issues from lint",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12829911683/job/35776939126"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIVKroRQ",
                        "name": "Fix style issues from lint",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12830940627/job/35780225093"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIVMJvIg",
                        "name": "Fix style issues from lint",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12831406065/job/35781766946"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIP9m61w",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12710261478/job/35430972119"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIP9n7BQ",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12710265940/job/35430988549"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIP9m8tw",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12710261477/job/35430972599"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIP9m8DQ",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12710261478/job/35430972429"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIP9n8ow",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12710265940/job/35430988963"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIP9m95A",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12710261477/job/35430972900"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIP9_PVw",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12710261478/job/35431370583"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIP9o54g",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/35431004642"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIP9oqtQ",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=20636&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "createdAt": "2025-01-10T13:16:56Z",
        "deletions": 1,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/Algebra/Order/Interval/Basic.lean",
              "additions": 36,
              "deletions": 1
            }
          ]
        },
        "headRefName": "interval_mul",
        "headRefOid": "ad349f59d1c6255b47f550f6047a83c7e2f49298",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c6HVM3x",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c7P265b",
              "color": "f9d0c4",
              "name": "awaiting-author"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJjTQ",
              "color": "33DBEC",
              "name": "t-algebra"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c6YipaW",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2025-01-17T14:53:00Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 20636,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c6X_fOT",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2025-01-14T15:04:46Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6YCDMV",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2025-01-14T18:12:45Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6YFtra",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2025-01-15T06:11:59Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6YPLqt",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2025-01-15T22:07:33Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6YPYyK",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2025-01-15T22:29:36Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6YPaGJ",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2025-01-15T22:32:05Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6YP9N_",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2025-01-15T23:40:54Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6YhmVw",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2025-01-17T12:54:19Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6Yh0-S",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2025-01-17T13:21:22Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6YiZMn",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2025-01-17T14:25:14Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6YipaW",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2025-01-17T14:53:00Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5yJHF5",
                    "body": "This generalises the existing multiplication, right? Maybe we can merge both instances",
                    "createdAt": "2025-01-14T15:04:46Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5yKnvp",
                    "body": "I think only under certain assumptions. Right now I don't think either satisfies the requirements of the other.",
                    "createdAt": "2025-01-14T18:12:45Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5yM7Sv",
                    "body": "Really? The existing one has `[MulLeftMono α] [MulRightMono α]`, which implies `a.fst * b.fst ⊓ a.fst * b.snd ⊓ a.snd * b.fst ⊓ a.snd * b.snd = a.fst * b.fst ⊓ a.snd * b.snd` and similarly for `⊔`",
                    "createdAt": "2025-01-15T06:11:58Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5ySSqD",
                    "body": "Ah, I'm confusing the lawfulness with the definition.\r\n\r\nIndeed, I could define it as you say, but this would make the definition of `+` much less efficient on `Rat`.\r\n\r\nShould I break the `to_additive` connection?",
                    "createdAt": "2025-01-15T22:07:33Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5ySYBJ",
                    "body": "> this would make the definition of `+` much less efficient on `Rat`.\r\n\r\nI think this doesn't really matter?",
                    "createdAt": "2025-01-15T22:29:36Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5ySYep",
                    "body": "> Should I break the `to_additive` connection?\r\n\r\nNot sure what you mean. Your definition can additivised, right?",
                    "createdAt": "2025-01-15T22:32:05Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5ySmG1",
                    "body": "I'm now starting to realize my argument doesn't work, because already my implementation of `*` is much less efficient on `NNRat`. I've opened #20783 with the `CommSemiring` instance for `NNRat`.",
                    "createdAt": "2025-01-15T23:40:54Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5ycysD",
                    "body": "What do you think of handling this with a typeclass like\r\n```lean\r\nclass IntervalMul (α : Type*) [Preorder α] [Mul α] where\r\n  mul (x y : NonemptyInterval α) : NonemptyInterval α\r\n  isGLB_fst_mul (x y : NonemptyInterval α) : IsGLB (x * y : Set α) (mul x y).fst\r\n  isLUB_snd_mul (x y : NonemptyInterval α) : IsLUB (x * y : Set α) (mul x y).snd\r\n```",
                    "createdAt": "2025-01-17T12:54:18Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5yc7CA",
                    "body": "I don't understand why efficiency of the *definition* matters. Are you going to use this in meta code? If so, wouldn't it be better to add the lemma that `(x * y) = x.1 * y.1` when multiplication is monotone as a `csimp` lemma?",
                    "createdAt": "2025-01-17T13:21:22Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5ydP6Q",
                    "body": "> Are you going to use this in meta code?\r\n\r\nYes, or perhaps even a standalone binary (though I guess the `Float` can of worms opens there)\r\n\r\n> If so, wouldn't it be better to add the lemma that `(x * y) = x.1 * y.1` when multiplication is monotone as a `csimp` lemma?\r\n\r\n`csimp` lemmas can't be conditional, they have to have exactly the same arguments as the definition.",
                    "createdAt": "2025-01-17T14:25:14Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5ydZgU",
                    "body": "Ah right, annoying. Then maybe we should have `mul` and `fastMul`, where the only lemma we have about `fastMul` is that it's equal to `mul`?",
                    "createdAt": "2025-01-17T14:53:00Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjQyNTI2MA==",
              "login": "eric-wieser"
            },
            {
              "id": "MDQ6VXNlcjU2ODczMw==",
              "login": "Timeroot"
            },
            {
              "id": "MDQ6VXNlcjE0MDkwNTkz",
              "login": "YaelDillies"
            }
          ]
        },
        "state": "OPEN",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAISaYy9Q",
                "name": "Fix style issues from lint",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12770460220/job/35595367157"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAISk_leg",
                "name": "Fix style issues from lint",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12773787907/job/35606488442"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIS9oKXQ",
                "name": "Fix style issues from lint",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12782587832/job/35632319069"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAITrwXRw",
                "name": "Fix style issues from lint",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12797858901/job/35680687943"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAITso6hw",
                "name": "Fix style issues from lint",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12798165706/job/35681614471"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAITsvS5Q",
                "name": "Fix style issues from lint",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12798199466/job/35681719013"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAITvEkHQ",
                "name": "Fix style issues from lint",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12799001293/job/35684164637"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIP9m7HA",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12710261477/job/35430972188"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIcDamog",
                "name": "set_pr_emoji",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12995511145/job/36242368162"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAISaYxXQ",
                "name": "Add ready-to-merge or delegated label",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12770460253/job/35595366749"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAISk_jKw",
                "name": "Add ready-to-merge or delegated label",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12773787905/job/35606487851"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIS9oKzg",
                "name": "Add ready-to-merge or delegated label",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12782587826/job/35632319182"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAITrwWwQ",
                "name": "Add ready-to-merge or delegated label",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12797858904/job/35680687809"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAITso6ng",
                "name": "Add ready-to-merge or delegated label",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12798165701/job/35681614494"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAITsvTfw",
                "name": "Add ready-to-merge or delegated label",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12798199465/job/35681719167"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAITvEkmQ",
                "name": "Add ready-to-merge or delegated label",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12799001283/job/35684164761"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIVGRQJw",
                "name": "Add ready-to-merge or delegated label",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12829472369/job/35775598631"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIVHjDUg",
                "name": "Add ready-to-merge or delegated label",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12829911698/job/35776938834"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIVKrnwg",
                "name": "Add ready-to-merge or delegated label",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12830940629/job/35780224962"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIVMJsjA",
                "name": "Add ready-to-merge or delegated label",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12831406081/job/35781766284"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIP9n7uA",
                "name": "Add topic label",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12710265952/job/35430988728"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIP9n6qw",
                "name": "label-and-report-new-contributor",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12710265946/job/35430988459"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAISaYwxg",
                "name": "Ping maintainers on Zulip",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12770460216/job/35595366598"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAISk_jMQ",
                "name": "Ping maintainers on Zulip",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12773787906/job/35606487857"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIS9oKGg",
                "name": "Ping maintainers on Zulip",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12782587827/job/35632319002"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAITrwXYA",
                "name": "Ping maintainers on Zulip",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12797858917/job/35680687968"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAITso6kQ",
                "name": "Ping maintainers on Zulip",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12798165707/job/35681614481"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAITsvSzQ",
                "name": "Ping maintainers on Zulip",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12798199470/job/35681718989"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAITvEkDQ",
                "name": "Ping maintainers on Zulip",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12799001289/job/35684164621"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIVGRP6g",
                "name": "Ping maintainers on Zulip",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12829472366/job/35775598570"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIVHjEWA",
                "name": "Ping maintainers on Zulip",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12829911685/job/35776939096"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIVKroLA",
                "name": "Ping maintainers on Zulip",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12830940632/job/35780225068"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIVMJsvQ",
                "name": "Ping maintainers on Zulip",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12831406076/job/35781766333"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIP9n6sw",
                "name": "post-or-update-summary-comment",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12710265950/job/35430988467"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIVGRP3g",
                "name": "Fix style issues from lint",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12829472367/job/35775598558"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIVHjEdg",
                "name": "Fix style issues from lint",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12829911683/job/35776939126"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIVKroRQ",
                "name": "Fix style issues from lint",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12830940627/job/35780225093"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIVMJvIg",
                "name": "Fix style issues from lint",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12831406065/job/35781766946"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIP9m61w",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12710261478/job/35430972119"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIP9n7BQ",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12710265940/job/35430988549"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIP9m8tw",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12710261477/job/35430972599"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIP9m8DQ",
                "name": "Build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12710261478/job/35430972429"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIP9n8ow",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12710265940/job/35430988963"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIP9m95A",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12710261477/job/35430972900"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIP9_PVw",
                "name": "Post-CI job",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12710261478/job/35431370583"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIP9o54g",
                "name": "New Contributor Check",
                "conclusion": "NEUTRAL",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/35431004642"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIP9oqtQ",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=20636&login=leanprover-community&repository=mathlib4"
              }
            ]
          }
        },
        "title": "feat: multiplication of intervals in rings",
        "updatedAt": "2025-03-04T19:17:25Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/20636",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "ad349f59d1c6255b47f550f6047a83c7e2f49298"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6Z8NAj",
              "createdAt": "2025-01-10T13:17:50Z",
              "body": "### PR summary [ad349f59d1](https://github.com/leanprover-community/mathlib4/pull/20636/commits/ad349f59d1c6255b47f550f6047a83c7e2f49298)\n\n#### Import changes for modified files\n\nNo significant changes to the import graph\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ NonemptyInterval.instMul`\n`+ fst_mul'`\n`+ instMulOfSemiring`\n`+ instance : MulZeroOneClass (NonemptyInterval α)`\n`+ snd_mul'`\n`- instance : Mul (NonemptyInterval α)`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n</details>\n\n---\n\n<details><summary>No changes to technical debt.</summary>\n\nYou can run this locally as\n```\n./scripts/technical-debt-metrics.sh pr_summary\n```\n* The `relative` value is the weighted *sum* of the differences with weight given by the *inverse* of the current value of the statistic.\n* The `absolute` value is the `relative` value divided by the total sum of the inverses of the current values (i.e. the weighted *average* of the differences).\n</details>",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6ltg2_zwAAAAOypZr_",
              "createdAt": "2025-01-10T13:17:53Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJjTQ",
                "name": "t-algebra"
              }
            },
            {
              "__typename": "ReviewRequestedEvent",
              "id": "RRE_lADOFcwZ1c6ltg2_zwAAAAO0A14L",
              "createdAt": "2025-01-13T13:33:21Z",
              "requestedReviewer": {
                "id": "MDQ6VXNlcjE0MDkwNTkz",
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6X_fOT",
              "createdAt": "2025-01-14T15:04:46Z",
              "body": "",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6ltg2_zwAAAAO-k7H4",
              "createdAt": "2025-01-27T18:14:28Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6gQGTZ",
              "createdAt": "2025-02-27T17:03:00Z",
              "body": "I looked at this a bit, and unfortunately the `left_distrib` property actually _doesn't hold_, slightly to my surprise ... which explains why I had trouble proving it. (I tried, for a quite while, in the past when I was working on ComputableReals). Here's a concrete example:\r\n[live.lean-lang.org](https://live.lean-lang.org/#codez=JYWwDg9gTgLgBAWQIYwBYBtgCMBQOB2SIApgM5hIDGxcAchPseDAJ4CS+MxUAbkujj5RgSLOhoBtADLBGSKAHkoAE27FlAZSbBh+AOZxAjcABdPAHoAtBbgBVfJgDWNAAb1Gzdp2590AOlmkMAgArujOADRwaMCkcADu0A6xAGbQcKTaunqkvnAWZjgBMEj41HBFIegKyVogOrIGAFyIoXAAFG5MYKwcXLz8RgCU8ahqOHBwIK1IcFhwjQC84xNwAN5wyYHzC3BIvpvwAFSz+1uAyUS7p0cnpPjKcBd7t/fHWFcPl89wr77PyyvpO7bS4Hb4nUGAFKIQVsfl8oU8gT9IZ9ETc7v8VgcAPriLFfRazFgYgHKUigMDElZIMBgdAscr4ZI44h44JgXwwKAlWIAfixlImekoDD0UAFuxpdIZTNxpDZHK5+F5/IBAKFIrFqqpkvpshlLLl7M53LgfPFUGS6DgAF88MQgZ0PL1vPw8KIsFBiDxdvM4IAsQmBFgAzDh3Z7vXNmgGCQBGUNYD1euCUX3RnYAdnjie99yjwIAHFnw3AaHmCRY42Gk8lU8CAAx4ADEXoGbUAF+RtpDhLCAS/Ju/SLege2C2hMO5Rwso+1gB5bhwBqOAd4jhZLT2dDuDDZqO7qePo+f2DJstq3tzvd9dwQfD47jydXm9wRcdru9/vXudgpdtldrj9PjuDBdD0Xj9FafqDEAA)\r\n\r\nWith `a = (-3,1)`, `b = (7,8)`, `c = (-1,0)`, then we have `a * (b + c) = (-24, 8)`, but `a * b + a * c = (-25, 11)`. This isn't a total surprise, because (for instance) interval arithmetic is typically defined in a way such that `a^2 != a*a` for essentially the same reason ... when an expression is used twice, we could take a different value at each site. This means we can't have `Distrib`, or indeed any kind `...Ring`-ish type.\r\n\r\nWe do have associativity of multiplication, and negation is well-behaved, and adding zero etc.\r\nSo some instances we *could* have:\r\n * `OrderedRing α` -> `InvolutiveNeg (NonemptyInterval α)`\r\n * `OrderedCommMonoid α` -> `CommMonoid (NonemptyInterval α)`\r\n ",
              "author": {
                "login": "Timeroot"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6gShAm",
              "createdAt": "2025-02-27T22:03:05Z",
              "body": "Btw this is also hurt by the fact that addition isn't a group, even when the underlying structure is. e.g. Take `x = (-3,1)`, then `-x = (-1,3)`, and so `x + (-x) = (-4, 4)`. There aren't additive inverses. Similarly, there aren't multiplicative inverses (even for strictly positive elements.)\r\n\r\nSo, after a bit of work, I think the best one can do (for \"nice\" structures like Z/Q/R) is:\r\n\r\n```\r\nOrderedCancelAddCommMonoid, AddCommMonoidWithOne, CancelCommMonoidWithZero,\r\nSubtractionCommMonoid, HasDistribNeg, ZeroLEOneClass, Archimedean\r\n```\r\nI tried pretty hard to \"optimize\" this list as in, it's maximal (it has all the true properties) and minimal (there's no redundant classes, and no classes that combine two of these), but I could've made a mistake.\r\n\r\nThen there's accompanying `NatCast, IntCast, RatCast` ... and probably with some variants of `StrictPosMulMono`.\r\n\r\nI think `OrderedCancelAddCommMonoid`+`AddCommMonoidWithOne` kind of \"conflict\" in the sense that they both extend `Add`, so we couldn't provide separate instances for each, right? Like we'd need a class that combines these. And similarly for `CancelCommMonoidWithZero`+`SubtractionCommMonoid` each building off `Mul`.\r\n\r\nA `NatCast` instance would come from `AddCommMonoidWithOne`, but then `IntCast` and `RatCast` don't, so those would need to be given separately.\r\n\r\nWould it be desirable to define a class that essentially combines these those first 7 together, something like `IntervalRing`? Not a great name though. Either that, or defining `OrderedCancelAddCommMonoidWithOne` and `CancelSubtractionCommMonoidWithZero`, and then just giving the various instance?\r\n",
              "author": {
                "login": "Timeroot"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6gShrA",
              "createdAt": "2025-02-27T22:04:43Z",
              "body": "FWIW, the \"just throw all the instances together\" is the approach I have [here](https://github.com/Timeroot/ComputableReal/blob/f68d40377c4ef1459a95727e5ad281d988b48b22/ComputableReal/ComputableRSeq.lean#L1027C1-L1029C76).",
              "author": {
                "login": "Timeroot"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6g2niG",
              "createdAt": "2025-03-04T19:17:24Z",
              "body": "> Would it be desirable to define a class that essentially combines these those first 7 together, something like `IntervalRing`? Not a great name though. Either that, or defining `OrderedCancelAddCommMonoidWithOne` and `CancelSubtractionCommMonoidWithZero`, and then just giving the various instance?\r\n\r\nDefining the instances separately is what we do for sets and finsets already, so I would rather go with that",
              "author": {
                "login": "YaelDillies"
              }
            }
          ]
        }
      }
    }
  }
}
