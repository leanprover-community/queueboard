{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 63,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "robertylewis"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "In @hrmacbeth 's tutorial on `polyrith`, there were examples of problems that it could almost solve, but failed. The goal was not expressible as a linear combination of the hypotheses but a power of the goal was. \r\n\r\n```lean\r\nexample (x y z : ‚Ñö) (h : x = y) (h2 : x * y = 0) : x + y*z = 0 :=\r\nsorry\r\n```\r\n\r\nMathematically, `x+y*z` is in the radical of the ideal generated by `x-y, x*y`. There's a \"standard trick\" for testing membership in the radical without a search for the proper exponent: see e.g. section 2.2 of [arxiv.org/pdf/1007.3615.pdf](https://arxiv.org/pdf/1007.3615.pdf) or 4.2 Prop 8 of Cox, Little, O'Shea.\r\n\r\nThis PR implements the trick in the Sage call made by `polyrith`. When the power returned is `n > 1`, we use `linear_combination (exp := n)` to check the certificate (#7789 ).\r\n\r\nThe `polyrith` test infrastructure still needs to be ported from mathlib3. All tests in the test file succeed when they are uncommented. A future PR will restore the old test suite.\r\n",
        "changedFiles": 3,
        "closed": true,
        "closedAt": "2023-11-07T18:02:35Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5pu_wA",
              "body": "Note: I have pushed an update to the lean toolchain because this PR was on a [buggy version](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Potential.20data.20loss.20from.20.60lake.20clean.60.20with.204.2E2.2E0-rc2.2F3/near/397875701) of the toolchain. **WARNING**: checking out old commits of this PR using v4.2.0-rc2 or v4.2.0-rc3 can cause `lake clean` to delete your mathlib folder! If you need to do so, make sure to delete `lakefile.olean` manually before running any `lake` commands.",
              "createdAt": "2023-10-21T21:32:29Z",
              "author": {
                "login": "digama0"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qIIlz",
              "body": "The code is above what I actually feel that I understand, but is this testing membership in the radical or whether some explicit power of the element lies in the ideal?  More explicitly, could it not be the case that a larger power than what is being used would work?\n\nAs I said, I do not really understand the code, so I hope that this question is not just noise!",
              "createdAt": "2023-10-26T06:52:42Z",
              "author": {
                "login": "adomani"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qK_mD",
              "body": "It tests for membership in the radical. \r\n\r\nTo start, the goal is `H‚ÇÅ = 0, ..., H‚Çô = 0 ‚ä¢ P = 0`.  This follows if we can find `Q·µ¢` and `r` such that `P ≥ = Q‚ÇÅH‚ÇÅ + ... + Q‚ÇôH‚Çô`, i.e. `P` is in the radical of `<H·µ¢>`.\r\n\r\nIn Sage: introduce a new variable `z` and use a Grobner basis algorithm to compute `h·µ¢` such that `1 = h‚ÇÅH‚ÇÅ + ... + h‚ÇôH‚Çô + h(1 - zP)`. \r\n\r\nTake `r` to be the maximum power of `z` that appears in the `h·µ¢`s. Substitute `1/P` (formally) for `z` and multiply `1 = h‚ÇÅH‚ÇÅ + ... + h‚ÇôH‚Çô + h(1 - zP)` by `P ≥` to get our desired equation: the coeffs are `Q·µ¢ = P ≥h·µ¢[z ‚Üê 1/P]`.\r\n \r\nSo the Grobner basis computation produces `r` without a search. In principle, if there is an `r` that works, this should find it. Of course it may be computationally infeasible.\r\n\r\nI'm not sure that this procedure makes any claim about finding a *minimal* `r`. This must depend on the details of the Grobner basis algorithm. In practice, on all the `polyrith` tests, it correctly finds `r = 1` (and finds a minimal `r > 1` on the new tests). ",
              "createdAt": "2023-10-26T14:40:10Z",
              "author": {
                "login": "robertylewis"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qLFMm",
              "body": "Robert, thank you for the explanation!  I had missed that there was a first Gr√∂bner basis computation and then you used the degrees of the elements of that basis to get the bound on `r`: this clears my doubts!\r\n\r\nIn terms of improving feasibility, it may be good to have an option to ask Sage to check if the given element is a member of the ideal itself or whether it is contained in the radical: I expect these two computations to perform differently (where testing for membership in the ideal is likely often faster) and you may be satisfied with the answer to one of the two questions.  I am thinking of something in the style of\r\n* `polyrith` -- check membership in the ideal;\r\n* `polyrith!` -- check membership in the radical.\r\n\r\nAnyway, this is just a suggestion: I am very happy that `polyrith` even exists!",
              "createdAt": "2023-10-26T14:52:14Z",
              "author": {
                "login": "adomani"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qLLa0",
              "body": "I thought about the two versions, but decided against it for a few reasons:\r\n\r\n* It's confusing for newcomers/people who don't want to think about how `polyrith` works, which is probably most people. They just want to know whether the goal is provable.\r\n* `polyrith` is self-replacing, so minor slowdowns don't matter nearly as much as for tactics that will remain source code.\r\n* It's not even clear to me that the radical problem is significantly slower on average. The computation has one more variable and similar degree. Grobner basis algorithms are fickle and adding an option to use a different term order would probably help a lot more than falling back to the original non-radical check.\r\n* Some non-scientific testing at the end of https://github.com/leanprover-community/mathlib/pull/15425 indicated that there's not much/any slowdown, although this isn't a strong data point!",
              "createdAt": "2023-10-26T15:06:17Z",
              "author": {
                "login": "robertylewis"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qLQNp",
              "body": "Rob, thanks for the further comments!  I agree that specifying term orders normally has a *much* larger impact on feasibility of a Gr√∂bner basis computation!\r\n\r\nThanks for taking the time to explain: it turns out that my comments were indeed noise, but I am grateful for the explanations, since they taught me something!",
              "createdAt": "2023-10-26T15:17:04Z",
              "author": {
                "login": "adomani"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5q3g1k",
              "body": "maintainer merge",
              "createdAt": "2023-11-03T18:27:23Z",
              "author": {
                "login": "alexjbest"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5q3g5b",
              "body": "üöÄ Pull request has been placed on the maintainer queue by alexjbest.",
              "createdAt": "2023-11-03T18:27:35Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5rPz_u",
              "body": "bors merge",
              "createdAt": "2023-11-07T17:37:14Z",
              "author": {
                "login": "robertylewis"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5rQAon",
              "body": "Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6788288480/job/18452949217)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6788288480/job/18452948081)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6788288480/job/18452948982)",
              "createdAt": "2023-11-07T18:02:34Z",
              "author": {
                "login": "mathlib-bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "67e53ae5f3f2c4b2a8b99377bf23b894b6db38cd",
                "additions": 0,
                "deletions": 14,
                "committedDate": "2023-10-20T01:43:10Z",
                "author": {
                  "name": "Rob Lewis",
                  "email": "rob.y.lewis@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "acbdf9156a0497b607d0268bd88a41d3808db29d",
                "additions": 42,
                "deletions": 6,
                "committedDate": "2023-10-20T01:43:33Z",
                "author": {
                  "name": "Rob Lewis",
                  "email": "rob.y.lewis@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "400655056cb0a447948268a0c6a6d142400b523f",
                "additions": 9,
                "deletions": 10,
                "committedDate": "2023-10-20T01:57:29Z",
                "author": {
                  "name": "Rob Lewis",
                  "email": "rob.y.lewis@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "5278e4d15f810e6eded64893ed33f5b2d88ef0a3",
                "additions": 8,
                "deletions": 0,
                "committedDate": "2023-10-20T02:02:29Z",
                "author": {
                  "name": "Rob Lewis",
                  "email": "rob.y.lewis@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "74c822dff7356e5bfbbfdf1e1286fa59d442cdd0",
                "additions": 26,
                "deletions": 15,
                "committedDate": "2023-10-20T02:06:13Z",
                "author": {
                  "name": "Rob Lewis",
                  "email": "rob.y.lewis@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "93445f90439c0088c95eac935563347706b41256",
                "additions": 2,
                "deletions": 1,
                "committedDate": "2023-10-20T02:11:18Z",
                "author": {
                  "name": "Rob Lewis",
                  "email": "rob.y.lewis@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "8d7e896f627c1e0a7e7d73ea72d89e8a648dae8d",
                "additions": 54,
                "deletions": 18,
                "committedDate": "2023-10-20T03:27:36Z",
                "author": {
                  "name": "Rob Lewis",
                  "email": "rob.y.lewis@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "e4685b3695fc33adb67a5e8aae9595da176a27ce",
                "additions": 3211,
                "deletions": 2479,
                "committedDate": "2023-10-20T03:42:09Z",
                "author": {
                  "name": "Rob Lewis",
                  "email": "Rob.y.lewis@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "1a199f93087916aae8808b4f3a712a6e2f8ae1f8",
                "additions": 188,
                "deletions": 204,
                "committedDate": "2023-10-20T12:57:26Z",
                "author": {
                  "name": "Rob Lewis",
                  "email": "Rob.y.lewis@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "c30c0459948502979983f5c0f1c6b290a0c1df68",
                "additions": 4,
                "deletions": 0,
                "committedDate": "2023-10-20T13:01:59Z",
                "author": {
                  "name": "Rob Lewis",
                  "email": "Rob.y.lewis@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "bc33e63c4d7b8dcc306ef854198fe89134ae3a39",
                "additions": 5,
                "deletions": 0,
                "committedDate": "2023-10-20T15:41:41Z",
                "author": {
                  "name": "Rob Lewis",
                  "email": "rob.y.lewis@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "d8873f0ca16f1323128687564ff7655ec08f2ce2",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-10-21T21:32:27Z",
                "author": {
                  "name": "Mario Carneiro",
                  "email": "di.gama@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "0a410d0f301e62ffeb06dc61e4e116c1e12cbae9",
                "additions": 2736,
                "deletions": 658,
                "committedDate": "2023-10-22T12:48:17Z",
                "author": {
                  "name": "Rob Lewis",
                  "email": "Rob.y.lewis@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "bbcb66dc4b4b8eeea07f186f8f03fa1600a0a429",
                "additions": 0,
                "deletions": 5,
                "committedDate": "2023-10-24T16:30:33Z",
                "author": {
                  "name": "Rob Lewis",
                  "email": "Rob.y.lewis@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "677d35e28e2b836ee41e068ae55857c51bbdcf2d",
                "additions": 3,
                "deletions": 0,
                "committedDate": "2023-11-03T18:18:58Z",
                "author": {
                  "name": "Rob Lewis",
                  "email": "Rob.y.lewis@gmail.com"
                },
                "statusCheckRollup": null
              }
            }
          ]
        },
        "createdAt": "2023-10-20T03:39:17Z",
        "deletions": 12,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/Tactic/Polyrith.lean",
              "additions": 20,
              "deletions": 4
            },
            {
              "path": "scripts/polyrith_sage.py",
              "additions": 23,
              "deletions": 8
            },
            {
              "path": "test/polyrith.lean",
              "additions": 20,
              "deletions": 0
            }
          ]
        },
        "headRefName": "polyrith-radical",
        "headRefOid": "677d35e28e2b836ee41e068ae55857c51bbdcf2d",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5dVoux",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
              "color": "06e039",
              "name": "ready-to-merge"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABKAKYew",
              "color": "33DBEC",
              "name": "t-meta"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5mGQ9f",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-11-03T15:05:07Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mH4OL",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alexjbest"
              },
              "submittedAt": "2023-11-03T18:26:50Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 7790,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": [
                {
                  "login": "hrmacbeth"
                },
                {
                  "login": "tb65536"
                },
                {
                  "login": "adomani"
                },
                {
                  "login": "Shamrock-Frost"
                }
              ]
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5kuzbz",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "robertylewis"
              },
              "submittedAt": "2023-10-20T13:01:33Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mFLrh",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alexjbest"
              },
              "submittedAt": "2023-11-03T13:03:45Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mGQ9f",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-11-03T15:05:07Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mGeN_",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alexjbest"
              },
              "submittedAt": "2023-11-03T15:22:43Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mHwYd",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "robertylewis"
              },
              "submittedAt": "2023-11-03T18:16:08Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mHypN",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "robertylewis"
              },
              "submittedAt": "2023-11-03T18:19:17Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mH4OL",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alexjbest"
              },
              "submittedAt": "2023-11-03T18:26:50Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mJMFF",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "robertylewis"
              },
              "submittedAt": "2023-11-04T01:57:38Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Ree6G",
                    "body": "```suggestion\r\n  /-- Sage produces an exponent (default 1) in the case where the hypothesess\r\n  sum to a power of the goal. -/\r\n  power  : ‚Ñï\r\n```",
                    "createdAt": "2023-10-20T13:01:00Z",
                    "author": {
                      "login": "robertylewis"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5RefBq",
                    "body": "```suggestion\r\n  /-- The main result of the function call is an array of polynomials\r\n  parallel to the input list of hypotheses and an exponent for the goal. -/\r\n  data : Option SageCoeffAndPower := none\r\n```",
                    "createdAt": "2023-10-20T13:01:24Z",
                    "author": {
                      "login": "robertylewis"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SWlow",
                    "body": "I don't really understand why this is done with this trick of checking if 1 is in the ideal `<hyps, 1/goal>`, I would expect singular/sage has a way to ask for a lift to the radical ideal directly which I would hope would be easier to maintain in the long run (especially if we have aspirations of making this work for non-char 0 rings properly). Did you consider this approach?\r\nI'm not completely against merging this, but the whole thing is starting to look a bit scary ;)",
                    "createdAt": "2023-11-03T13:03:45Z",
                    "author": {
                      "login": "alexjbest"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SXZPG",
                    "body": "After experimenting a bit I believe that using the builtin radical support, while probably a better algorithm underneath, is not very convenient to use with the way things are set up here, so I'm happy with this I guess",
                    "createdAt": "2023-11-03T15:22:43Z",
                    "author": {
                      "login": "alexjbest"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SYLjy",
                    "body": "Yeah, I remember looking for this when I first implemented this (granted, a year and a half ago) and not turning up anything useful. Sage/Singular will check for membership in the radical just fine but extracting the power and coefficient is a pain. My impression is that what I do in this PR is a \"standard\" approach and that a native Sage implementation would do roughly the same, although I'm somewhat out of my element here.",
                    "createdAt": "2023-11-03T18:16:08Z",
                    "author": {
                      "login": "robertylewis"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SYPxS",
                    "body": "When I read the sage docstring for radical earlier it said:\r\n```\r\n             From the Singular manual: A combination of the algorithms\r\n            of Krick/Logar and Kemper is used. Works also in positive\r\n            characteristic (Kempers algorithm).\r\n```\r\nbut I have no idea how accurate that is!",
                    "createdAt": "2023-11-03T18:26:50Z",
                    "author": {
                      "login": "alexjbest"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SZHRv",
                    "body": "Right -- but there's space between the membership check $p \\in \\sqrt{\\langle H_1, \\ldots, H_n \\rangle}$, and explicitly producing $k$ and $Q_i$ such that $p^k = \\sum Q_iH_i$. Sage's `radical` makes the former easy, but I don't see how to get from there to the latter. Maybe there's a way, I'd love to hear it.\r\n\r\n(It sounds like you came to a similar conclusion, just leaving this comment for reference later!)",
                    "createdAt": "2023-11-04T01:57:38Z",
                    "author": {
                      "login": "robertylewis"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SXQlp",
                    "body": "Can you add a comment explaining why this needs to be in the \"workaround\" branch?",
                    "createdAt": "2023-11-03T15:05:07Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SYM0G",
                    "body": "Done!",
                    "createdAt": "2023-11-03T18:19:17Z",
                    "author": {
                      "login": "robertylewis"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjQ5Njc0Njk=",
              "login": "robertylewis"
            },
            {
              "id": "MDQ6VXNlcjg2ODU4OA==",
              "login": "digama0"
            },
            {
              "id": "MDQ6VXNlcjI5NDY3NzQ1",
              "login": "adomani"
            },
            {
              "id": "MDQ6VXNlcjE2ODg1MzM=",
              "login": "alexjbest"
            },
            {
              "id": "MDQ6VXNlcjQyNTI2MA==",
              "login": "eric-wieser"
            },
            {
              "id": "U_kgDOB75MNQ",
              "login": "leanprover-community-mathlib4-bot"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": null,
        "title": "[Merged by Bors] - feat: improve `polyrith` by testing for membership in the radical",
        "updatedAt": "2023-11-07T18:02:39Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/7790",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "67e53ae5f3f2c4b2a8b99377bf23b894b6db38cd"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "acbdf9156a0497b607d0268bd88a41d3808db29d"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "400655056cb0a447948268a0c6a6d142400b523f"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "5278e4d15f810e6eded64893ed33f5b2d88ef0a3"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "74c822dff7356e5bfbbfdf1e1286fa59d442cdd0"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "93445f90439c0088c95eac935563347706b41256"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "8d7e896f627c1e0a7e7d73ea72d89e8a648dae8d"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c50b1cEzwAAAAJ-7Q_C",
              "createdAt": "2023-10-20T03:41:06Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKAKYew",
                "name": "t-meta"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "e4685b3695fc33adb67a5e8aae9595da176a27ce"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c50b1cEzwAAAAJ-7ZGP",
              "createdAt": "2023-10-20T03:46:45Z",
              "label": {
                "id": "MDU6TGFiZWwzMjg4OTQyMDg2",
                "name": "blocked-by-other-PR"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c50b1cEzwAAAAJ_CRJ-",
              "createdAt": "2023-10-20T08:02:31Z",
              "label": {
                "id": "MDU6TGFiZWwzMjg4OTQyMDg2",
                "name": "blocked-by-other-PR"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "1a199f93087916aae8808b4f3a712a6e2f8ae1f8"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c50b1cEzwAAAAJ_NmVi",
              "createdAt": "2023-10-20T12:58:38Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5kuzbz",
              "createdAt": "2023-10-20T13:01:00Z",
              "body": "",
              "author": {
                "login": "robertylewis"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "c30c0459948502979983f5c0f1c6b290a0c1df68"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "bc33e63c4d7b8dcc306ef854198fe89134ae3a39"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "d8873f0ca16f1323128687564ff7655ec08f2ce2"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5pu_wA",
              "createdAt": "2023-10-21T21:32:29Z",
              "body": "Note: I have pushed an update to the lean toolchain because this PR was on a [buggy version](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Potential.20data.20loss.20from.20.60lake.20clean.60.20with.204.2E2.2E0-rc2.2F3/near/397875701) of the toolchain. **WARNING**: checking out old commits of this PR using v4.2.0-rc2 or v4.2.0-rc3 can cause `lake clean` to delete your mathlib folder! If you need to do so, make sure to delete `lakefile.olean` manually before running any `lake` commands.",
              "author": {
                "login": "digama0"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "0a410d0f301e62ffeb06dc61e4e116c1e12cbae9"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "bbcb66dc4b4b8eeea07f186f8f03fa1600a0a429"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qIIlz",
              "createdAt": "2023-10-26T06:52:42Z",
              "body": "The code is above what I actually feel that I understand, but is this testing membership in the radical or whether some explicit power of the element lies in the ideal?  More explicitly, could it not be the case that a larger power than what is being used would work?\n\nAs I said, I do not really understand the code, so I hope that this question is not just noise!",
              "author": {
                "login": "adomani"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qK_mD",
              "createdAt": "2023-10-26T14:40:10Z",
              "body": "It tests for membership in the radical. \r\n\r\nTo start, the goal is `H‚ÇÅ = 0, ..., H‚Çô = 0 ‚ä¢ P = 0`.  This follows if we can find `Q·µ¢` and `r` such that `P ≥ = Q‚ÇÅH‚ÇÅ + ... + Q‚ÇôH‚Çô`, i.e. `P` is in the radical of `<H·µ¢>`.\r\n\r\nIn Sage: introduce a new variable `z` and use a Grobner basis algorithm to compute `h·µ¢` such that `1 = h‚ÇÅH‚ÇÅ + ... + h‚ÇôH‚Çô + h(1 - zP)`. \r\n\r\nTake `r` to be the maximum power of `z` that appears in the `h·µ¢`s. Substitute `1/P` (formally) for `z` and multiply `1 = h‚ÇÅH‚ÇÅ + ... + h‚ÇôH‚Çô + h(1 - zP)` by `P ≥` to get our desired equation: the coeffs are `Q·µ¢ = P ≥h·µ¢[z ‚Üê 1/P]`.\r\n \r\nSo the Grobner basis computation produces `r` without a search. In principle, if there is an `r` that works, this should find it. Of course it may be computationally infeasible.\r\n\r\nI'm not sure that this procedure makes any claim about finding a *minimal* `r`. This must depend on the details of the Grobner basis algorithm. In practice, on all the `polyrith` tests, it correctly finds `r = 1` (and finds a minimal `r > 1` on the new tests). ",
              "author": {
                "login": "robertylewis"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qLFMm",
              "createdAt": "2023-10-26T14:52:14Z",
              "body": "Robert, thank you for the explanation!  I had missed that there was a first Gr√∂bner basis computation and then you used the degrees of the elements of that basis to get the bound on `r`: this clears my doubts!\r\n\r\nIn terms of improving feasibility, it may be good to have an option to ask Sage to check if the given element is a member of the ideal itself or whether it is contained in the radical: I expect these two computations to perform differently (where testing for membership in the ideal is likely often faster) and you may be satisfied with the answer to one of the two questions.  I am thinking of something in the style of\r\n* `polyrith` -- check membership in the ideal;\r\n* `polyrith!` -- check membership in the radical.\r\n\r\nAnyway, this is just a suggestion: I am very happy that `polyrith` even exists!",
              "author": {
                "login": "adomani"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qLLa0",
              "createdAt": "2023-10-26T15:06:17Z",
              "body": "I thought about the two versions, but decided against it for a few reasons:\r\n\r\n* It's confusing for newcomers/people who don't want to think about how `polyrith` works, which is probably most people. They just want to know whether the goal is provable.\r\n* `polyrith` is self-replacing, so minor slowdowns don't matter nearly as much as for tactics that will remain source code.\r\n* It's not even clear to me that the radical problem is significantly slower on average. The computation has one more variable and similar degree. Grobner basis algorithms are fickle and adding an option to use a different term order would probably help a lot more than falling back to the original non-radical check.\r\n* Some non-scientific testing at the end of https://github.com/leanprover-community/mathlib/pull/15425 indicated that there's not much/any slowdown, although this isn't a strong data point!",
              "author": {
                "login": "robertylewis"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qLQNp",
              "createdAt": "2023-10-26T15:17:04Z",
              "body": "Rob, thanks for the further comments!  I agree that specifying term orders normally has a *much* larger impact on feasibility of a Gr√∂bner basis computation!\r\n\r\nThanks for taking the time to explain: it turns out that my comments were indeed noise, but I am grateful for the explanations, since they taught me something!",
              "author": {
                "login": "adomani"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5mFLrh",
              "createdAt": "2023-11-03T13:03:44Z",
              "body": "",
              "author": {
                "login": "alexjbest"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5mGQ9f",
              "createdAt": "2023-11-03T15:05:07Z",
              "body": "",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "677d35e28e2b836ee41e068ae55857c51bbdcf2d"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5q3g1k",
              "createdAt": "2023-11-03T18:27:23Z",
              "body": "maintainer merge",
              "author": {
                "login": "alexjbest"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5q3g5b",
              "createdAt": "2023-11-03T18:27:35Z",
              "body": "üöÄ Pull request has been placed on the maintainer queue by alexjbest.",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "AddedToMergeQueueEvent"
            },
            {
              "__typename": "RemovedFromMergeQueueEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5rPz_u",
              "createdAt": "2023-11-07T17:37:14Z",
              "body": "bors merge",
              "author": {
                "login": "robertylewis"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c50b1cEzwAAAAKJGs4w",
              "createdAt": "2023-11-07T17:37:28Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
                "name": "ready-to-merge"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c50b1cEzwAAAAKJGs7g",
              "createdAt": "2023-11-07T17:37:29Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5rQAon",
              "createdAt": "2023-11-07T18:02:34Z",
              "body": "Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6788288480/job/18452949217)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6788288480/job/18452948081)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6788288480/job/18452948982)",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c50b1cEzwAAAAKJHvrR",
              "createdAt": "2023-11-07T18:02:36Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c50b1cEzwAAAAKJHv42",
              "createdAt": "2023-11-07T18:02:39Z"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOBdYtcs5RnyQG",
              "createdAt": "2024-03-23T12:12:27Z",
              "source": {
                "id": "PR_kwDOBdYtcs47gxEi",
                "title": "feat(tactic/polyrith): solve more problems by testing for membership in the radical",
                "url": "https://github.com/leanprover-community/mathlib3/pull/15425"
              }
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5S4gwB",
              "createdAt": "2024-05-23T20:53:30Z",
              "source": {
                "id": "PR_kwDOFcwZ1c5wYVOv",
                "title": "[Merged by Bors] - fix: make polyrith succeed when target is identically zero",
                "url": "https://github.com/leanprover-community/mathlib4/pull/13150"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            }
          ]
        }
      }
    }
  }
}
