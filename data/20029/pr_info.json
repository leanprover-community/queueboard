{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 34,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "FrederickPu"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "Allow for Config attributes to be set directly when using initialize_simp_projection as per issue #19895\r\nBasically modified initialize_simp_projection so that the user has the option of specifying a tuple of config option values.\r\nEx:\r\n```\r\ninitialize_simp_projection MulEquiv (toFun → apply, invFun → symm_apply) (fullyApplied := false)\r\n```\r\nThese config options are then converted into projections.\r\n ---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nFor details on the \"pull request lifecycle\" in mathlib, please see:\r\nhttps://leanprover-community.github.io/contribute/index.html\r\n\r\nIn particular, note that most reviewers will only notice your PR\r\nif it passes the continuous integration checks.\r\nPlease ask for help on https://leanprover.zulipchat.com if needed.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nIf you are moving or deleting declarations, please include these lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nMoves:\r\n- Vector.* -> List.Vector.*\r\n- ...\r\n\r\nDeletions:\r\n- Nat.bit1_add_bit1\r\n- ...\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 1,
        "closed": false,
        "closedAt": null,
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c6X_sIG",
              "body": " Please note that the current code may not work, and only intended to sketch the general approach as the PR is still in draft",
              "createdAt": "2024-12-18T01:14:43Z",
              "author": {
                "login": "FrederickPu"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6X_sY9",
              "body": "### PR summary [cd065b4a1f](https://github.com/leanprover-community/mathlib4/pull/20029/commits/cd065b4a1fcf28f24e17840eca134670806c91dd)\n\n#### Import changes for modified files\n\nNo significant changes to the import graph\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n\n</details>\n\n---\n\n#### Declarations diff\n\n`+ applyConfigOptions`\n`+ elabConfigOption`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n---\n\n<details><summary>No changes to technical debt.</summary>\n\nYou can run this locally as\n```\n./scripts/technical-debt-metrics.sh pr_summary\n```\n* The `relative` value is the weighted *sum* of the differences with weight given by the *inverse* of the current value of the statistic.\n* The `absolute` value is the `relative` value divided by the total sum of the inverses of the current values (i.e. the weighted *average* of the differences).\n</details>",
              "createdAt": "2024-12-18T01:15:28Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6YDNA9",
              "body": "The `simps` configuration options should be split in two: lemma-specific configuration (`fullyApplied`/`simpRhs`/`isSimp`/`attrs`), and \"general\" configuration options that are for a full attribute application (the rest, I think - most of them decide which simp-lemmas will be generated by this attribute).\r\n\r\nMy plan - once I have time - was to:\r\n\r\n* split up the configuration options in two, as described above.\r\n* the general configuration options can only be placed directly after the word `simps` in the attribute\r\n* for the lemma-specific configuration options, allow to specify them in three locations: after a specific projection in the `initialize_simps_projections` command, after the word `simps`, and after the projection name (and potentially a 4th location: directly after the word `initialize_simps_projections` which then applies to all projections). There should be a precedence where if a user specifies it for a projection name that should have the highest priority, otherwise look at the value for the `simps` call, otherwise look at the value given by the `initialize_simps_projections`-call (for the last projection applied), and otherwise it has the default value. To do this, I was planning to change the type of all these configuration options to `Option ...` so that we can detect whether the user has specified its value.\r\n* Complication: this design probably conflicts with Kyle's nice `+isSimp` `-fullyApplied` syntax. Probably good to discuss this with Kyle to see if there is a solution (maybe by changing this design).\r\n* To store the configuration option, need to add a field `config` with lemma-specific configuration to `ProjectionData` (and `ParsedProjectionData`)\r\n\r\nDoes this make sense?",
              "createdAt": "2024-12-18T10:41:07Z",
              "author": {
                "login": "fpvandoorn"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6YFwk6",
              "body": "I'm not quite sure what you mean by \"the general configuration options can only be placed directly after the word simps in the attribute\". Also what is the mechanism for actually storing the config options? I notice for the projections you're writing to a NameMapExtension. Where when does the data from the NameMapExtension actually get used to create a config type? Overall, I think I'm just having a bit of trouble understanding the data lifecycle.\r\n",
              "createdAt": "2024-12-18T15:39:39Z",
              "author": {
                "login": "FrederickPu"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6YF9Bk",
              "body": "Here an entry to the environment extension gets written. This never gets modified afterwards:\r\nhttps://github.com/leanprover-community/mathlib4/blob/cd065b4a1fcf28f24e17840eca134670806c91dd/Mathlib/Tactic/Simps/Basic.lean#L828\r\nCurrently there is no Config options in this environment extension, but it will be if you add some Config options to `ProjectionData`\r\n\r\n> I'm not quite sure what you mean by \"the general configuration options can only be placed directly after the word simps in the attribute\".\r\n\r\nCurrently, the syntax for the `simps` attribute is `@[simps (config options)? (list of names)]`, e.g. `@[simps (config := {}) apply symm_apply]`.\r\nIf we make some configuration options lemma-specific, then these options should be applied to only one lemma, e.g. `@[simps (config := {rhsMd := .none}) coe (config := {fullyApplied := false}) apply]`. Here the second `config` option will only be used for the lemma `coe`, not for the lemma `apply`.\r\n\r\nBut maybe I'm overcomplicating things, and it's fine if we only allow such options in the `initialize_simps_projections` command? \r\n\r\n@urkud @YaelDillies @sgouezel and others might have an opinion on the design. (We can also move this to a Zulip thread.)",
              "createdAt": "2024-12-18T15:56:31Z",
              "author": {
                "login": "fpvandoorn"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6YF_gn",
              "body": "don't you already need to encode some config options in order to support the + and - notation.\r\nAlso, how does structureExt work, like where is the value of structureExt being read?",
              "createdAt": "2024-12-18T16:00:50Z",
              "author": {
                "login": "FrederickPu"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6YGGrk",
              "body": "The configuration elaborator gets generated here, with :\r\nhttps://github.com/leanprover-community/mathlib4/blob/cd065b4a1fcf28f24e17840eca134670806c91dd/Mathlib/Tactic/Simps/Basic.lean#L904\r\nIt requires that the syntax gets declared as `optConfig`:\r\nhttps://github.com/leanprover-community/mathlib4/blob/cd065b4a1fcf28f24e17840eca134670806c91dd/Mathlib/Tactic/Simps/Basic.lean#L133\r\n\r\nPlace where structureExt gets read:\r\nhttps://github.com/leanprover-community/mathlib4/blob/cd065b4a1fcf28f24e17840eca134670806c91dd/Mathlib/Tactic/Simps/Basic.lean#L803\r\n\r\nDo you have prior experience with metaprogramming? This might be a bit too complicated as a first metaprogramming task.",
              "createdAt": "2024-12-18T16:13:41Z",
              "author": {
                "login": "fpvandoorn"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6YGLok",
              "body": "I've done quite a bit of metaproggraming in lean3 and I've worked my way through most of the lean4 metaproggraming book. I think I have a pretty good understanding of elaborators as well as the metaprogramming monad system. I think my main weakness is understanding how things get stored in the environment such as NamedMapExtension",
              "createdAt": "2024-12-18T16:22:45Z",
              "author": {
                "login": "FrederickPu"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6YGQ0W",
              "body": "So how does getRawProjections get used. Cause it seems like the return value is just thrown out:\r\n```lean\r\n/-- Function elaborating `initialize_simps_projections`. -/\r\n@[command_elab «initialize_simps_projections»] def elabInitializeSimpsProjections : CommandElab\r\n  | stx@`(initialize_simps_projections $[?%$trc]? $id $[($stxs,*)]? $[($stxs',*)]?) => do\r\n    let stxs := stxs.getD <| .mk #[]\r\n    let rules ← stxs.getElems.raw.mapM elabSimpsRule\r\n    let stxs' := stxs'.getD <| .mk #[]\r\n    let configs ← stxs'.getElems.raw.mapM elabConfigOption\r\n    let nm ← resolveGlobalConstNoOverload id\r\n    _ ← liftTermElabM <| addTermInfo id.raw <| ← mkConstWithLevelParams nm\r\n    _ ← liftCoreM <| getRawProjections stx nm true rules trc.isSome configs\r\n  | _ => throwUnsupportedSyntax\r\n```\r\nIs its purpose in the elaborator just to write to to `structureExt` using `structureExt.add`?\r\nI'm trying to understand where the output of `getRawProjections` is actually being used. Which to my current understanding seems to be in `getProjectionExprs` which is used in `addProjections` which is used in `simpsTac`",
              "createdAt": "2024-12-18T16:32:23Z",
              "author": {
                "login": "FrederickPu"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "cd065b4a1fcf28f24e17840eca134670806c91dd",
                "additions": 34,
                "deletions": 4,
                "committedDate": "2024-12-18T01:06:43Z",
                "author": {
                  "name": "FrederickPu",
                  "email": "pufrederick51@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIDZzrBQ",
                        "name": "set_pr_emoji",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12391308195/job/34588125957"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIDHinZg",
                        "name": "Add topic label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12384431636/job/34568972134"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIDHinbA",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12384431632/job/34568972140"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIDHineg",
                        "name": "post-or-update-summary-comment",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12384431631/job/34568972154"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIDHT2cQ",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12384344954/job/34568730225"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIDHT1ag",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12384344968/job/34568729962"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIDHioRw",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12384431686/job/34568972359"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIDHT4BQ",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12384344954/job/34568730629"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIDHT2cg",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12384344968/job/34568730226"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIDHineA",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12384431686/job/34568972152"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIDHT1aA",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12384344954/job/34568729960"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIDHT4Dg",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12384344968/job/34568730638"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIDHT4yQ",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12384344954/job/34568730825"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIDIkg1A",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12384344968/job/34570051796"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIDHi3KQ",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/34568976169"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIDHjrVw",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=20029&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "createdAt": "2024-12-18T01:14:32Z",
        "deletions": 4,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/Tactic/Simps/Basic.lean",
              "additions": 34,
              "deletions": 4
            }
          ]
        },
        "headRefName": "explicitly-set-options-in-initialize_simps_projections",
        "headRefOid": "cd065b4a1fcf28f24e17840eca134670806c91dd",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c6Fk9XY",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "MDU6TGFiZWwzMjcxMjQ0NzU5",
              "color": "e899cd",
              "name": "WIP"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABKAKYew",
              "color": "33DBEC",
              "name": "t-meta"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABb5aSCQ",
              "color": "8BBA68",
              "name": "new-contributor"
            }
          ]
        },
        "latestReviews": {
          "nodes": []
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "BLOCKED",
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 20029,
        "potentialMergeCommit": {
          "oid": "e6fea09a8c279644a2adb6deb0d698f95efcfccd"
        },
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": []
        },
        "reviewThreads": {
          "nodes": []
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "U_kgDOByQ4cw",
              "login": "FrederickPu"
            },
            {
              "id": "MDQ6VXNlcjczNzYwMTI=",
              "login": "fpvandoorn"
            }
          ]
        },
        "state": "OPEN",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIDZzrBQ",
                "name": "set_pr_emoji",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12391308195/job/34588125957"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIDHinZg",
                "name": "Add topic label",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12384431636/job/34568972134"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIDHinbA",
                "name": "label-and-report-new-contributor",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12384431632/job/34568972140"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIDHineg",
                "name": "post-or-update-summary-comment",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12384431631/job/34568972154"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIDHT2cQ",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12384344954/job/34568730225"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIDHT1ag",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12384344968/job/34568729962"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIDHioRw",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12384431686/job/34568972359"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIDHT4BQ",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12384344954/job/34568730629"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIDHT2cg",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12384344968/job/34568730226"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIDHineA",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12384431686/job/34568972152"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIDHT1aA",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12384344954/job/34568729960"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIDHT4Dg",
                "name": "Build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12384344968/job/34568730638"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIDHT4yQ",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12384344954/job/34568730825"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIDIkg1A",
                "name": "Post-CI job",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12384344968/job/34570051796"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIDHi3KQ",
                "name": "New Contributor Check",
                "conclusion": "NEUTRAL",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/34568976169"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIDHjrVw",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=20029&login=leanprover-community&repository=mathlib4"
              }
            ]
          }
        },
        "title": "Allow for Config attributes to be set directly",
        "updatedAt": "2024-12-18T16:32:34Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/20029",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6X_sIG",
              "createdAt": "2024-12-18T01:14:43Z",
              "body": " Please note that the current code may not work, and only intended to sketch the general approach as the PR is still in draft",
              "author": {
                "login": "FrederickPu"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6jtAhSzwAAAAOnhuXd",
              "createdAt": "2024-12-18T01:14:48Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABb5aSCQ",
                "name": "new-contributor"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6jtAhSzwAAAAOnhvUi",
              "createdAt": "2024-12-18T01:15:27Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKAKYew",
                "name": "t-meta"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6X_sY9",
              "createdAt": "2024-12-18T01:15:28Z",
              "body": "### PR summary [cd065b4a1f](https://github.com/leanprover-community/mathlib4/pull/20029/commits/cd065b4a1fcf28f24e17840eca134670806c91dd)\n\n#### Import changes for modified files\n\nNo significant changes to the import graph\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n\n</details>\n\n---\n\n#### Declarations diff\n\n`+ applyConfigOptions`\n`+ elabConfigOption`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n---\n\n<details><summary>No changes to technical debt.</summary>\n\nYou can run this locally as\n```\n./scripts/technical-debt-metrics.sh pr_summary\n```\n* The `relative` value is the weighted *sum* of the differences with weight given by the *inverse* of the current value of the statistic.\n* The `absolute` value is the `relative` value divided by the total sum of the inverses of the current values (i.e. the weighted *average* of the differences).\n</details>",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5tXUUT",
              "createdAt": "2024-12-18T01:15:47Z",
              "source": {
                "id": "I_kwDOFcwZ1c6i7DfV",
                "title": "simps: allow specifying configuration options in initialize_simps_projections",
                "url": "https://github.com/leanprover-community/mathlib4/issues/19895"
              }
            },
            {
              "__typename": "ReviewRequestedEvent",
              "id": "RRE_lADOFcwZ1c6jtAhSzwAAAAOnjOCP",
              "createdAt": "2024-12-18T01:58:45Z",
              "requestedReviewer": {
                "id": "MDQ6VXNlcjczNzYwMTI=",
                "login": "fpvandoorn"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6YDNA9",
              "createdAt": "2024-12-18T10:41:07Z",
              "body": "The `simps` configuration options should be split in two: lemma-specific configuration (`fullyApplied`/`simpRhs`/`isSimp`/`attrs`), and \"general\" configuration options that are for a full attribute application (the rest, I think - most of them decide which simp-lemmas will be generated by this attribute).\r\n\r\nMy plan - once I have time - was to:\r\n\r\n* split up the configuration options in two, as described above.\r\n* the general configuration options can only be placed directly after the word `simps` in the attribute\r\n* for the lemma-specific configuration options, allow to specify them in three locations: after a specific projection in the `initialize_simps_projections` command, after the word `simps`, and after the projection name (and potentially a 4th location: directly after the word `initialize_simps_projections` which then applies to all projections). There should be a precedence where if a user specifies it for a projection name that should have the highest priority, otherwise look at the value for the `simps` call, otherwise look at the value given by the `initialize_simps_projections`-call (for the last projection applied), and otherwise it has the default value. To do this, I was planning to change the type of all these configuration options to `Option ...` so that we can detect whether the user has specified its value.\r\n* Complication: this design probably conflicts with Kyle's nice `+isSimp` `-fullyApplied` syntax. Probably good to discuss this with Kyle to see if there is a solution (maybe by changing this design).\r\n* To store the configuration option, need to add a field `config` with lemma-specific configuration to `ProjectionData` (and `ParsedProjectionData`)\r\n\r\nDoes this make sense?",
              "author": {
                "login": "fpvandoorn"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6jtAhSzwAAAAOn3moL",
              "createdAt": "2024-12-18T10:42:33Z",
              "label": {
                "id": "MDU6TGFiZWwzMjcxMjQ0NzU5",
                "name": "WIP"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6YFwk6",
              "createdAt": "2024-12-18T15:39:39Z",
              "body": "I'm not quite sure what you mean by \"the general configuration options can only be placed directly after the word simps in the attribute\". Also what is the mechanism for actually storing the config options? I notice for the projections you're writing to a NameMapExtension. Where when does the data from the NameMapExtension actually get used to create a config type? Overall, I think I'm just having a bit of trouble understanding the data lifecycle.\r\n",
              "author": {
                "login": "FrederickPu"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6YF9Bk",
              "createdAt": "2024-12-18T15:56:31Z",
              "body": "Here an entry to the environment extension gets written. This never gets modified afterwards:\r\nhttps://github.com/leanprover-community/mathlib4/blob/cd065b4a1fcf28f24e17840eca134670806c91dd/Mathlib/Tactic/Simps/Basic.lean#L828\r\nCurrently there is no Config options in this environment extension, but it will be if you add some Config options to `ProjectionData`\r\n\r\n> I'm not quite sure what you mean by \"the general configuration options can only be placed directly after the word simps in the attribute\".\r\n\r\nCurrently, the syntax for the `simps` attribute is `@[simps (config options)? (list of names)]`, e.g. `@[simps (config := {}) apply symm_apply]`.\r\nIf we make some configuration options lemma-specific, then these options should be applied to only one lemma, e.g. `@[simps (config := {rhsMd := .none}) coe (config := {fullyApplied := false}) apply]`. Here the second `config` option will only be used for the lemma `coe`, not for the lemma `apply`.\r\n\r\nBut maybe I'm overcomplicating things, and it's fine if we only allow such options in the `initialize_simps_projections` command? \r\n\r\n@urkud @YaelDillies @sgouezel and others might have an opinion on the design. (We can also move this to a Zulip thread.)",
              "author": {
                "login": "fpvandoorn"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6YF_gn",
              "createdAt": "2024-12-18T16:00:50Z",
              "body": "don't you already need to encode some config options in order to support the + and - notation.\r\nAlso, how does structureExt work, like where is the value of structureExt being read?",
              "author": {
                "login": "FrederickPu"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6YGGrk",
              "createdAt": "2024-12-18T16:13:41Z",
              "body": "The configuration elaborator gets generated here, with :\r\nhttps://github.com/leanprover-community/mathlib4/blob/cd065b4a1fcf28f24e17840eca134670806c91dd/Mathlib/Tactic/Simps/Basic.lean#L904\r\nIt requires that the syntax gets declared as `optConfig`:\r\nhttps://github.com/leanprover-community/mathlib4/blob/cd065b4a1fcf28f24e17840eca134670806c91dd/Mathlib/Tactic/Simps/Basic.lean#L133\r\n\r\nPlace where structureExt gets read:\r\nhttps://github.com/leanprover-community/mathlib4/blob/cd065b4a1fcf28f24e17840eca134670806c91dd/Mathlib/Tactic/Simps/Basic.lean#L803\r\n\r\nDo you have prior experience with metaprogramming? This might be a bit too complicated as a first metaprogramming task.",
              "author": {
                "login": "fpvandoorn"
              }
            },
            {
              "__typename": "ReviewRequestRemovedEvent",
              "id": "RRRE_lADOFcwZ1c6jtAhSzwAAAAOoJbpQ",
              "createdAt": "2024-12-18T16:21:19Z",
              "requestedReviewer": {
                "id": "MDQ6VXNlcjczNzYwMTI=",
                "login": "fpvandoorn"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6YGLok",
              "createdAt": "2024-12-18T16:22:45Z",
              "body": "I've done quite a bit of metaproggraming in lean3 and I've worked my way through most of the lean4 metaproggraming book. I think I have a pretty good understanding of elaborators as well as the metaprogramming monad system. I think my main weakness is understanding how things get stored in the environment such as NamedMapExtension",
              "author": {
                "login": "FrederickPu"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6YGQ0W",
              "createdAt": "2024-12-18T16:32:23Z",
              "body": "So how does getRawProjections get used. Cause it seems like the return value is just thrown out:\r\n```lean\r\n/-- Function elaborating `initialize_simps_projections`. -/\r\n@[command_elab «initialize_simps_projections»] def elabInitializeSimpsProjections : CommandElab\r\n  | stx@`(initialize_simps_projections $[?%$trc]? $id $[($stxs,*)]? $[($stxs',*)]?) => do\r\n    let stxs := stxs.getD <| .mk #[]\r\n    let rules ← stxs.getElems.raw.mapM elabSimpsRule\r\n    let stxs' := stxs'.getD <| .mk #[]\r\n    let configs ← stxs'.getElems.raw.mapM elabConfigOption\r\n    let nm ← resolveGlobalConstNoOverload id\r\n    _ ← liftTermElabM <| addTermInfo id.raw <| ← mkConstWithLevelParams nm\r\n    _ ← liftCoreM <| getRawProjections stx nm true rules trc.isSome configs\r\n  | _ => throwUnsupportedSyntax\r\n```\r\nIs its purpose in the elaborator just to write to to `structureExt` using `structureExt.add`?\r\nI'm trying to understand where the output of `getRawProjections` is actually being used. Which to my current understanding seems to be in `getProjectionExprs` which is used in `addProjections` which is used in `simpsTac`",
              "author": {
                "login": "FrederickPu"
              }
            }
          ]
        }
      }
    }
  }
}
