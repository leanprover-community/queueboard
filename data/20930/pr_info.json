{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 1506,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "YaelDillies"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "The current name is vestigial.\r\n\r\nFrom my PhD (LeanCamCombi)\r\n\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nFor details on the \"pull request lifecycle\" in mathlib, please see:\r\nhttps://leanprover-community.github.io/contribute/index.html\r\n\r\nIn particular, note that most reviewers will only notice your PR\r\nif it passes the continuous integration checks.\r\nPlease ask for help on https://leanprover.zulipchat.com if needed.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nIf you are moving or deleting declarations, please include these lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nMoves:\r\n- Vector.* -> List.Vector.*\r\n- ...\r\n\r\nDeletions:\r\n- Nat.bit1_add_bit1\r\n- ...\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 23,
        "closed": true,
        "closedAt": "2025-01-22T13:57:39Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c6bUgxR",
              "body": "### PR summary [c6d13da479](https://github.com/leanprover-community/mathlib4/pull/20930/commits/c6d13da479a2acaea167c7b4d09b30297c996d82)\n\n#### Import changes for modified files\n\nNo significant changes to the import graph\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ Integrable.tendsto_ae_condExp`\n`+ Integrable.tendsto_eLpNorm_condExp`\n`+ Integrable.tendsto_snorm_condExp`\n`+ Integrable.uniformIntegrable_condExp`\n`+ Integrable.uniformIntegrable_condExp_filtration`\n`+ Martingale.ae_eq_condExp_limitProcess`\n`+ Martingale.eq_condExp_of_tendsto_eLpNorm`\n`+ Martingale.eq_condExp_of_tendsto_snorm`\n`+ Submartingale.condExp_sub_nonneg`\n`+ _root_.MeasureTheory.AEStronglyMeasurable.integral_condExpKernel`\n`+ _root_.MeasureTheory.Integrable.condExpKernel_ae`\n`+ _root_.MeasureTheory.Integrable.integral_condExpKernel`\n`+ _root_.MeasureTheory.Integrable.integral_norm_condExpKernel`\n`+ _root_.MeasureTheory.Integrable.norm_integral_condExpKernel`\n`+ aeStronglyMeasurable'_condExpIndSMul`\n`+ aeStronglyMeasurable'_condExpL2`\n`+ ae_bdd_condExp_of_ae_bdd`\n`+ ae_eq_condExp_of_forall_setIntegral_eq`\n`+ ae_eq_condExp_of_forall_set_integral_eq`\n`+ ae_le_condExp`\n`+ aestronglyMeasurable'_condExpInd`\n`+ aestronglyMeasurable'_condExpL1`\n`+ aestronglyMeasurable'_condExpL1CLM`\n`+ aestronglyMeasurable'_integral_condExpKernel`\n`+ condDistrib_ae_eq_condExp`\n`+ condExpInd`\n`+ condExpIndL1`\n`+ condExpIndL1Fin`\n`+ condExpIndL1Fin_add`\n`+ condExpIndL1Fin_ae_eq_condExpIndSMul`\n`+ condExpIndL1Fin_disjoint_union`\n`+ condExpIndL1Fin_smul`\n`+ condExpIndL1Fin_smul'`\n`+ condExpIndL1_add`\n`+ condExpIndL1_disjoint_union`\n`+ condExpIndL1_of_measurableSet_of_measure_ne_top`\n`+ condExpIndL1_of_measure_eq_top`\n`+ condExpIndL1_of_not_measurableSet`\n`+ condExpIndL1_smul`\n`+ condExpIndL1_smul'`\n`+ condExpIndSMul`\n`+ condExpIndSMul_add`\n`+ condExpIndSMul_ae_eq_smul`\n`+ condExpIndSMul_empty`\n`+ condExpIndSMul_nonneg`\n`+ condExpIndSMul_smul`\n`+ condExpIndSMul_smul'`\n`+ condExpInd_ae_eq_condExpIndSMul`\n`+ condExpInd_disjoint_union`\n`+ condExpInd_disjoint_union_apply`\n`+ condExpInd_empty`\n`+ condExpInd_nonneg`\n`+ condExpInd_of_measurable`\n`+ condExpInd_smul'`\n`+ condExpKernel_ae_eq_condExp`\n`+ condExpKernel_ae_eq_condExp'`\n`+ condExpKernel_ae_eq_trim_condExp`\n`+ condExpKernel_apply_eq_condDistrib`\n`+ condExpKernel_eq`\n`+ condExpKernel_singleton_ae_eq_cond`\n`+ condExpL1`\n`+ condExpL1CLM`\n`+ condExpL1CLM_indicatorConst`\n`+ condExpL1CLM_indicatorConstLp`\n`+ condExpL1CLM_lpMeas`\n`+ condExpL1CLM_of_aestronglyMeasurable'`\n`+ condExpL1CLM_smul`\n`+ condExpL1_add`\n`+ condExpL1_congr_ae`\n`+ condExpL1_eq`\n`+ condExpL1_measure_zero`\n`+ condExpL1_mono`\n`+ condExpL1_neg`\n`+ condExpL1_of_aestronglyMeasurable'`\n`+ condExpL1_smul`\n`+ condExpL1_sub`\n`+ condExpL1_undef`\n`+ condExpL1_zero`\n`+ condExpL2`\n`+ condExpL2_ae_eq_zero_of_ae_eq_zero`\n`+ condExpL2_comp_continuousLinearMap`\n`+ condExpL2_const_inner`\n`+ condExpL2_indicator_ae_eq_smul`\n`+ condExpL2_indicator_eq_toSpanSingleton_comp`\n`+ condExpL2_indicator_nonneg`\n`+ condExpL2_indicator_of_measurable`\n`+ condExp_add`\n`+ condExp_ae_eq`\n`+ condExp_ae_eq_condExpL1`\n`+ condExp_ae_eq_condExpL1CLM`\n`+ condExp_ae_eq_integral_condDistrib`\n`+ condExp_ae_eq_integral_condDistrib'`\n`+ condExp_ae_eq_integral_condDistrib_id`\n`+ condExp_ae_eq_integral_condExpKernel`\n`+ condExp_ae_eq_integral_condExpKernel'`\n`+ condExp_ae_eq_restrict_of_measurableSpace_eq_on`\n`+ condExp_ae_eq_restrict_zero`\n`+ condExp_ae_le`\n`+ condExp_bot`\n`+ condExp_bot'`\n`+ condExp_bot_ae_eq`\n`+ condExp_condExp_of_le`\n`+ condExp_congr_ae`\n`+ condExp_const`\n`+ condExp_densityProcess`\n`+ condExp_eq_zero_or_one_of_condIndepSet_self`\n`+ condExp_finset_sum`\n`+ condExp_generateFrom_singleton`\n`+ condExp_indep_eq`\n`+ condExp_indicator`\n`+ condExp_indicator_aux`\n`+ condExp_min_stopping_time_ae_eq_restrict_le`\n`+ condExp_min_stopping_time_ae_eq_restrict_le_const`\n`+ condExp_mono`\n`+ condExp_mul_of_aestronglyMeasurable_left`\n`+ condExp_mul_of_aestronglyMeasurable_right`\n`+ condExp_mul_of_stronglyMeasurable_left`\n`+ condExp_mul_of_stronglyMeasurable_right`\n`+ condExp_neg`\n`+ condExp_nonneg`\n`+ condExp_nonpos`\n`+ condExp_of_aestronglyMeasurable'`\n`+ condExp_of_not_le`\n`+ condExp_of_not_sigmaFinite`\n`+ condExp_of_sigmaFinite`\n`+ condExp_of_stronglyMeasurable`\n`+ condExp_prod_ae_eq_integral_condDistrib`\n`+ condExp_prod_ae_eq_integral_condDistrib'`\n`+ condExp_prod_ae_eq_integral_condDistrib₀`\n`+ condExp_restrict_ae_eq_restrict`\n`+ condExp_set_generateFrom_singleton`\n`+ condExp_smul`\n`+ condExp_stoppedValue_stopping_time_ae_eq_restrict_le`\n`+ condExp_stopping_time_ae_eq_restrict_eq`\n`+ condExp_stopping_time_ae_eq_restrict_eq_const`\n`+ condExp_stopping_time_ae_eq_restrict_eq_const_of_le_const`\n`+ condExp_stopping_time_ae_eq_restrict_eq_of_countable`\n`+ condExp_stopping_time_ae_eq_restrict_eq_of_countable_range`\n`+ condExp_stronglyMeasurable_mul_of_bound`\n`+ condExp_stronglyMeasurable_mul_of_bound₀`\n`+ condExp_stronglyMeasurable_simpleFunc_mul`\n`+ condExp_sub`\n`+ condExp_undef`\n`+ condExp_zero`\n`+ condExp_zero_or_one_of_measurableSet_limsup`\n`+ condExp_zero_or_one_of_measurableSet_limsup_atBot`\n`+ condExp_zero_or_one_of_measurableSet_limsup_atTop`\n`+ condIndepFun_iff_condExp_inter_preimage_eq_mul`\n`+ condexp`\n`+ condexpKernel`\n`+ continuous_condExpIndL1`\n`+ dominatedFinMeasAdditive_condExpInd`\n`+ eLpNorm_condExpL2_le`\n`+ eLpNorm_one_condExp_le_eLpNorm`\n`+ iCondIndepFun_iff_condExp_inter_preimage_eq_mul`\n`+ iIndepFun.condExp_natural_ae_eq_of_lt`\n`+ iIndepSet.condExp_indicator_filtrationOfSet_ae_eq`\n`+ inner_condExpL2_eq_inner_fun`\n`+ inner_condExpL2_left_eq_right`\n`+ instance : IsMarkovKernel (condExpKernel μ m) := by`\n`+ integrableOn_condExpL2_of_measure_ne_top`\n`+ integrable_condExp`\n`+ integrable_condExpIndSMul`\n`+ integrable_condExpL1`\n`+ integrable_condExpL2_indicator`\n`+ integrable_condExpL2_of_isFiniteMeasure`\n`+ integrable_toReal_condExpKernel`\n`+ integral_abs_condExp_le`\n`+ integral_condExp`\n`+ integral_condExpL2_eq`\n`+ integral_condExpL2_eq_of_fin_meas_real`\n`+ integral_condExp_indicator`\n`+ lintegral_nnnorm_condExpIndSMul_le`\n`+ lintegral_nnnorm_condExpL2_indicator_le`\n`+ lintegral_nnnorm_condExpL2_indicator_le_real`\n`+ lintegral_nnnorm_condExpL2_le`\n`+ martingale_condExp`\n`+ martingale_of_condExp_sub_eq_zero_nat`\n`+ measurable_condExpKernel`\n`+ norm_condExpIndL1Fin_le`\n`+ norm_condExpIndL1_le`\n`+ norm_condExpInd_apply_le`\n`+ norm_condExpInd_le`\n`+ norm_condExpL2_coe_le`\n`+ norm_condExpL2_le`\n`+ norm_condExpL2_le_one`\n`+ rnDeriv_ae_eq_condExp`\n`+ setIntegral_abs_condExp_le`\n`+ setIntegral_condExp`\n`+ setIntegral_condExpInd`\n`+ setIntegral_condExpIndSMul`\n`+ setIntegral_condExpL1`\n`+ setIntegral_condExpL1CLM`\n`+ setIntegral_condExpL1CLM_of_measure_ne_top`\n`+ setIntegral_condExpL2_indicator`\n`+ setLIntegral_nnnorm_condExpIndSMul_le`\n`+ setLIntegral_nnnorm_condExpL2_indicator_le`\n`+ set_integral_abs_condExp_le`\n`+ set_integral_condExpInd`\n`+ set_integral_condExpIndSMul`\n`+ set_integral_condExpL1`\n`+ set_integral_condExpL1CLM`\n`+ set_integral_condExpL2_indicator`\n`+ set_lintegral_nnnorm_condExpIndSMul_le`\n`+ set_lintegral_nnnorm_condExpL2_indicator_le`\n`+ snorm_condExpL2_le`\n`+ snorm_one_condExp_le_snorm`\n`+ stoppedValue_ae_eq_condExp_of_le`\n`+ stoppedValue_ae_eq_condExp_of_le_const`\n`+ stoppedValue_ae_eq_condExp_of_le_const_of_countable_range`\n`+ stoppedValue_ae_eq_condExp_of_le_of_countable_range`\n`+ stoppedValue_min_ae_eq_condExp`\n`+ stronglyMeasurable_condExp`\n`+ stronglyMeasurable_condExpKernel`\n`+ submartingale_iff_condExp_sub_nonneg`\n`+ submartingale_of_condExp_sub_nonneg`\n`+ submartingale_of_condExp_sub_nonneg_nat`\n`+ supermartingale_of_condExp_sub_nonneg_nat`\n`+ tendsto_ae_condExp`\n`+ tendsto_condExpL1_of_dominated_convergence`\n`+ tendsto_condExp_unique`\n`+ tendsto_eLpNorm_condExp`\n`+ tendsto_snorm_condExp`\n`- condexp_mul_of_aestronglyMeasurable_left`\n`- condexp_mul_of_aestronglyMeasurable_right`\n`- condexp_mul_of_stronglyMeasurable_left`\n`- condexp_mul_of_stronglyMeasurable_right`\n`- instance : IsMarkovKernel (condexpKernel μ m) := by`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n</details>\n\n---\n\n<details><summary>No changes to technical debt.</summary>\n\nYou can run this locally as\n```\n./scripts/technical-debt-metrics.sh pr_summary\n```\n* The `relative` value is the weighted *sum* of the differences with weight given by the *inverse* of the current value of the statistic.\n* The `absolute` value is the `relative` value divided by the total sum of the inverses of the current values (i.e. the weighted *average* of the differences).\n</details>\n",
              "createdAt": "2025-01-21T22:12:29Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6bXX0H",
              "body": "That's indeed a better name. Thanks!\r\nbors r+",
              "createdAt": "2025-01-22T08:34:16Z",
              "author": {
                "login": "RemyDegenne"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6bXY59",
              "body": "bors r-",
              "createdAt": "2025-01-22T08:36:33Z",
              "author": {
                "login": "RemyDegenne"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6bXY6_",
              "body": "Canceled.",
              "createdAt": "2025-01-22T08:36:36Z",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6bXZKb",
              "body": "You forgot a few deprecations. See the list of removed lemmas in the declaration diff of the automated message.",
              "createdAt": "2025-01-22T08:37:07Z",
              "author": {
                "login": "RemyDegenne"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6bYjG5",
              "body": "That's weird, because it was automatically generated by @adomani's `add_deprecations` script. For the record, here's how it looks like before I add the missing deprecations:\r\n<details><summary>\r\n\r\n#### Declarations diff\r\n\r\n</summary>\r\n\r\n`+ Integrable.tendsto_ae_condExp`\r\n`+ Integrable.tendsto_eLpNorm_condExp`\r\n`+ Integrable.tendsto_snorm_condExp`\r\n`+ Integrable.uniformIntegrable_condExp`\r\n`+ Integrable.uniformIntegrable_condExp_filtration`\r\n`+ Martingale.ae_eq_condExp_limitProcess`\r\n`+ Martingale.eq_condExp_of_tendsto_eLpNorm`\r\n`+ Martingale.eq_condExp_of_tendsto_snorm`\r\n`+ Submartingale.condExp_sub_nonneg`\r\n`+ _root_.MeasureTheory.AEStronglyMeasurable.integral_condExpKernel`\r\n`+ _root_.MeasureTheory.Integrable.condExpKernel_ae`\r\n`+ _root_.MeasureTheory.Integrable.integral_condExpKernel`\r\n`+ _root_.MeasureTheory.Integrable.integral_norm_condExpKernel`\r\n`+ _root_.MeasureTheory.Integrable.norm_integral_condExpKernel`\r\n`+ aeStronglyMeasurable'_condExpIndSMul`\r\n`+ aeStronglyMeasurable'_condExpL2`\r\n`+ ae_bdd_condExp_of_ae_bdd`\r\n`+ ae_eq_condExp_of_forall_setIntegral_eq`\r\n`+ ae_eq_condExp_of_forall_set_integral_eq`\r\n`+ ae_le_condExp`\r\n`+ aestronglyMeasurable'_condExpInd`\r\n`+ aestronglyMeasurable'_condExpL1`\r\n`+ aestronglyMeasurable'_condExpL1CLM`\r\n`+ aestronglyMeasurable'_integral_condExpKernel`\r\n`+ condDistrib_ae_eq_condExp`\r\n`+ condExpInd`\r\n`+ condExpIndL1`\r\n`+ condExpIndL1Fin`\r\n`+ condExpIndL1Fin_add`\r\n`+ condExpIndL1Fin_ae_eq_condExpIndSMul`\r\n`+ condExpIndL1Fin_disjoint_union`\r\n`+ condExpIndL1Fin_smul`\r\n`+ condExpIndL1Fin_smul'`\r\n`+ condExpIndL1_add`\r\n`+ condExpIndL1_disjoint_union`\r\n`+ condExpIndL1_of_measurableSet_of_measure_ne_top`\r\n`+ condExpIndL1_of_measure_eq_top`\r\n`+ condExpIndL1_of_not_measurableSet`\r\n`+ condExpIndL1_smul`\r\n`+ condExpIndL1_smul'`\r\n`+ condExpIndSMul`\r\n`+ condExpIndSMul_add`\r\n`+ condExpIndSMul_ae_eq_smul`\r\n`+ condExpIndSMul_empty`\r\n`+ condExpIndSMul_nonneg`\r\n`+ condExpIndSMul_smul`\r\n`+ condExpIndSMul_smul'`\r\n`+ condExpInd_ae_eq_condExpIndSMul`\r\n`+ condExpInd_disjoint_union`\r\n`+ condExpInd_disjoint_union_apply`\r\n`+ condExpInd_empty`\r\n`+ condExpInd_nonneg`\r\n`+ condExpInd_of_measurable`\r\n`+ condExpInd_smul'`\r\n`+ condExpKernel_ae_eq_condExp`\r\n`+ condExpKernel_ae_eq_condExp'`\r\n`+ condExpKernel_ae_eq_trim_condExp`\r\n`+ condExpKernel_apply_eq_condDistrib`\r\n`+ condExpKernel_eq`\r\n`+ condExpKernel_singleton_ae_eq_cond`\r\n`+ condExpL1`\r\n`+ condExpL1CLM`\r\n`+ condExpL1CLM_indicatorConst`\r\n`+ condExpL1CLM_indicatorConstLp`\r\n`+ condExpL1CLM_lpMeas`\r\n`+ condExpL1CLM_of_aestronglyMeasurable'`\r\n`+ condExpL1CLM_smul`\r\n`+ condExpL1_add`\r\n`+ condExpL1_congr_ae`\r\n`+ condExpL1_eq`\r\n`+ condExpL1_measure_zero`\r\n`+ condExpL1_mono`\r\n`+ condExpL1_neg`\r\n`+ condExpL1_of_aestronglyMeasurable'`\r\n`+ condExpL1_smul`\r\n`+ condExpL1_sub`\r\n`+ condExpL1_undef`\r\n`+ condExpL1_zero`\r\n`+ condExpL2`\r\n`+ condExpL2_ae_eq_zero_of_ae_eq_zero`\r\n`+ condExpL2_comp_continuousLinearMap`\r\n`+ condExpL2_const_inner`\r\n`+ condExpL2_indicator_ae_eq_smul`\r\n`+ condExpL2_indicator_eq_toSpanSingleton_comp`\r\n`+ condExpL2_indicator_nonneg`\r\n`+ condExpL2_indicator_of_measurable`\r\n`+ condExp_add`\r\n`+ condExp_ae_eq`\r\n`+ condExp_ae_eq_condExpL1`\r\n`+ condExp_ae_eq_condExpL1CLM`\r\n`+ condExp_ae_eq_integral_condDistrib`\r\n`+ condExp_ae_eq_integral_condDistrib'`\r\n`+ condExp_ae_eq_integral_condDistrib_id`\r\n`+ condExp_ae_eq_integral_condExpKernel`\r\n`+ condExp_ae_eq_integral_condExpKernel'`\r\n`+ condExp_ae_eq_restrict_of_measurableSpace_eq_on`\r\n`+ condExp_ae_eq_restrict_zero`\r\n`+ condExp_ae_le`\r\n`+ condExp_bot`\r\n`+ condExp_bot'`\r\n`+ condExp_bot_ae_eq`\r\n`+ condExp_condExp_of_le`\r\n`+ condExp_congr_ae`\r\n`+ condExp_const`\r\n`+ condExp_densityProcess`\r\n`+ condExp_eq_zero_or_one_of_condIndepSet_self`\r\n`+ condExp_finset_sum`\r\n`+ condExp_generateFrom_singleton`\r\n`+ condExp_indep_eq`\r\n`+ condExp_indicator`\r\n`+ condExp_indicator_aux`\r\n`+ condExp_min_stopping_time_ae_eq_restrict_le`\r\n`+ condExp_min_stopping_time_ae_eq_restrict_le_const`\r\n`+ condExp_mono`\r\n`+ condExp_neg`\r\n`+ condExp_nonneg`\r\n`+ condExp_nonpos`\r\n`+ condExp_of_aestronglyMeasurable'`\r\n`+ condExp_of_not_le`\r\n`+ condExp_of_not_sigmaFinite`\r\n`+ condExp_of_sigmaFinite`\r\n`+ condExp_of_stronglyMeasurable`\r\n`+ condExp_prod_ae_eq_integral_condDistrib`\r\n`+ condExp_prod_ae_eq_integral_condDistrib'`\r\n`+ condExp_prod_ae_eq_integral_condDistrib₀`\r\n`+ condExp_restrict_ae_eq_restrict`\r\n`+ condExp_set_generateFrom_singleton`\r\n`+ condExp_smul`\r\n`+ condExp_stoppedValue_stopping_time_ae_eq_restrict_le`\r\n`+ condExp_stopping_time_ae_eq_restrict_eq`\r\n`+ condExp_stopping_time_ae_eq_restrict_eq_const`\r\n`+ condExp_stopping_time_ae_eq_restrict_eq_const_of_le_const`\r\n`+ condExp_stopping_time_ae_eq_restrict_eq_of_countable`\r\n`+ condExp_stopping_time_ae_eq_restrict_eq_of_countable_range`\r\n`+ condExp_stronglyMeasurable_mul`\r\n`+ condExp_stronglyMeasurable_mul_of_bound`\r\n`+ condExp_stronglyMeasurable_mul_of_bound₀`\r\n`+ condExp_stronglyMeasurable_mul₀`\r\n`+ condExp_stronglyMeasurable_simpleFunc_mul`\r\n`+ condExp_sub`\r\n`+ condExp_undef`\r\n`+ condExp_zero`\r\n`+ condExp_zero_or_one_of_measurableSet_limsup`\r\n`+ condExp_zero_or_one_of_measurableSet_limsup_atBot`\r\n`+ condExp_zero_or_one_of_measurableSet_limsup_atTop`\r\n`+ condIndepFun_iff_condExp_inter_preimage_eq_mul`\r\n`+ condexp`\r\n`+ condexpKernel`\r\n`+ continuous_condExpIndL1`\r\n`+ dominatedFinMeasAdditive_condExpInd`\r\n`+ eLpNorm_condExpL2_le`\r\n`+ eLpNorm_one_condExp_le_eLpNorm`\r\n`+ iCondIndepFun_iff_condExp_inter_preimage_eq_mul`\r\n`+ iIndepFun.condExp_natural_ae_eq_of_lt`\r\n`+ iIndepSet.condExp_indicator_filtrationOfSet_ae_eq`\r\n`+ inner_condExpL2_eq_inner_fun`\r\n`+ inner_condExpL2_left_eq_right`\r\n`+ instance : IsMarkovKernel (condExpKernel μ m) := by`\r\n`+ integrableOn_condExpL2_of_measure_ne_top`\r\n`+ integrable_condExp`\r\n`+ integrable_condExpIndSMul`\r\n`+ integrable_condExpL1`\r\n`+ integrable_condExpL2_indicator`\r\n`+ integrable_condExpL2_of_isFiniteMeasure`\r\n`+ integrable_toReal_condExpKernel`\r\n`+ integral_abs_condExp_le`\r\n`+ integral_condExp`\r\n`+ integral_condExpL2_eq`\r\n`+ integral_condExpL2_eq_of_fin_meas_real`\r\n`+ integral_condExp_indicator`\r\n`+ lintegral_nnnorm_condExpIndSMul_le`\r\n`+ lintegral_nnnorm_condExpL2_indicator_le`\r\n`+ lintegral_nnnorm_condExpL2_indicator_le_real`\r\n`+ lintegral_nnnorm_condExpL2_le`\r\n`+ martingale_condExp`\r\n`+ martingale_of_condExp_sub_eq_zero_nat`\r\n`+ measurable_condExpKernel`\r\n`+ norm_condExpIndL1Fin_le`\r\n`+ norm_condExpIndL1_le`\r\n`+ norm_condExpInd_apply_le`\r\n`+ norm_condExpInd_le`\r\n`+ norm_condExpL2_coe_le`\r\n`+ norm_condExpL2_le`\r\n`+ norm_condExpL2_le_one`\r\n`+ rnDeriv_ae_eq_condExp`\r\n`+ setIntegral_abs_condExp_le`\r\n`+ setIntegral_condExp`\r\n`+ setIntegral_condExpInd`\r\n`+ setIntegral_condExpIndSMul`\r\n`+ setIntegral_condExpL1`\r\n`+ setIntegral_condExpL1CLM`\r\n`+ setIntegral_condExpL1CLM_of_measure_ne_top`\r\n`+ setIntegral_condExpL2_indicator`\r\n`+ setLIntegral_nnnorm_condExpIndSMul_le`\r\n`+ setLIntegral_nnnorm_condExpL2_indicator_le`\r\n`+ set_integral_abs_condExp_le`\r\n`+ set_integral_condExp`\r\n`+ set_integral_condExpInd`\r\n`+ set_integral_condExpIndSMul`\r\n`+ set_integral_condExpL1`\r\n`+ set_integral_condExpL1CLM`\r\n`+ set_integral_condExpL1CLM_of_measure_ne_top`\r\n`+ set_integral_condExpL2_indicator`\r\n`+ set_lintegral_nnnorm_condExpIndSMul_le`\r\n`+ set_lintegral_nnnorm_condExpL2_indicator_le`\r\n`+ snorm_condExpL2_le`\r\n`+ snorm_one_condExp_le_snorm`\r\n`+ stoppedValue_ae_eq_condExp_of_le`\r\n`+ stoppedValue_ae_eq_condExp_of_le_const`\r\n`+ stoppedValue_ae_eq_condExp_of_le_const_of_countable_range`\r\n`+ stoppedValue_ae_eq_condExp_of_le_of_countable_range`\r\n`+ stoppedValue_min_ae_eq_condExp`\r\n`+ stronglyMeasurable_condExp`\r\n`+ stronglyMeasurable_condExpKernel`\r\n`+ submartingale_iff_condExp_sub_nonneg`\r\n`+ submartingale_of_condExp_sub_nonneg`\r\n`+ submartingale_of_condExp_sub_nonneg_nat`\r\n`+ supermartingale_of_condExp_sub_nonneg_nat`\r\n`+ tendsto_ae_condExp`\r\n`+ tendsto_condExpL1_of_dominated_convergence`\r\n`+ tendsto_condExp_unique`\r\n`+ tendsto_eLpNorm_condExp`\r\n`+ tendsto_snorm_condExp`\r\n`- condexpKernel_ae_eq_condexp`\r\n`- condexpKernel_ae_eq_trim_condexp`\r\n`- condexp_eq_zero_or_one_of_condIndepSet_self`\r\n`- condexp_stopping_time_ae_eq_restrict_eq_const`\r\n`- instance : IsMarkovKernel (condexpKernel μ m) := by`\r\n`- set_integral_condexp`\r\n`- set_integral_condexpL1CLM_of_measure_ne_top`\r\n</details>\r\n",
              "createdAt": "2025-01-22T10:49:10Z",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6bZ_42",
              "body": "Thanks!\r\nbors r+",
              "createdAt": "2025-01-22T13:42:03Z",
              "author": {
                "login": "RemyDegenne"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6baIsH",
              "body": "Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/12909631158/job/35997765810)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/12909631158/job/35997766254)",
              "createdAt": "2025-01-22T13:57:38Z",
              "author": {
                "login": "mathlib-bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "6cc50f3e7c10c2201ff79640f86991be49cbf91c",
                "additions": 939,
                "deletions": 939,
                "committedDate": "2025-01-22T13:06:32Z",
                "author": {
                  "name": "Yaël Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "e0152e67a9be368fc3775f74e9726fd7cf40a278",
                "additions": 557,
                "deletions": 0,
                "committedDate": "2025-01-22T13:07:24Z",
                "author": {
                  "name": "Yaël Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "5affe34201c5e54203c0752a1eb9c7bc06ce1dda",
                "additions": 5,
                "deletions": 5,
                "committedDate": "2025-01-22T13:07:24Z",
                "author": {
                  "name": "Yaël Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "c6d13da479a2acaea167c7b4d09b30297c996d82",
                "additions": 15,
                "deletions": 3,
                "committedDate": "2025-01-22T13:07:24Z",
                "author": {
                  "name": "Yaël Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIYZkmTQ",
                        "name": "set_pr_emoji",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12909457135/job/35997165133"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIYZv5jQ",
                        "name": "set_pr_emoji",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12909511832/job/35997350285"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIYX2qJg",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12908887583/job/35995363878"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIYX2uCg",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12908888107/job/35995364874"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIYX2sIA",
                        "name": "post-or-update-summary-comment",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12908888096/job/35995364384"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIYX2pUw",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12908887587/job/35995363667"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIYX2ssA",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12908888111/job/35995364528"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIYX2n8g",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12908887583/job/35995363314"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIYX2nwg",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12908887587/job/35995363266"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIYX2ukA",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12908888111/job/35995365008"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIYX2sKA",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12908887583/job/35995364392"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIYYZFdA",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12908887587/job/35995927924"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIYX4HXQ",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/35995387741"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIYX4t9Q",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=20930&login=leanprover-community&repository=mathlib4"
                      },
                      {
                        "__typename": "StatusContext",
                        "id": "SC_kwDOFcwZ1c8AAAAH3Vy8gQ",
                        "context": "bors",
                        "state": "SUCCESS",
                        "targetUrl": "https://mathlib-bors-ca18eefec4cb.herokuapp.com/batches/8758",
                        "description": "Build succeeded"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "createdAt": "2025-01-21T22:11:35Z",
        "deletions": 937,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.lean",
              "additions": 211,
              "deletions": 140
            },
            {
              "path": "Mathlib/MeasureTheory/Function/ConditionalExpectation/CondexpL1.lean",
              "additions": 352,
              "deletions": 219
            },
            {
              "path": "Mathlib/MeasureTheory/Function/ConditionalExpectation/CondexpL2.lean",
              "additions": 268,
              "deletions": 160
            },
            {
              "path": "Mathlib/MeasureTheory/Function/ConditionalExpectation/Indicator.lean",
              "additions": 51,
              "deletions": 37
            },
            {
              "path": "Mathlib/MeasureTheory/Function/ConditionalExpectation/Real.lean",
              "additions": 110,
              "deletions": 82
            },
            {
              "path": "Mathlib/Probability/BorelCantelli.lean",
              "additions": 12,
              "deletions": 5
            },
            {
              "path": "Mathlib/Probability/ConditionalExpectation.lean",
              "additions": 6,
              "deletions": 4
            },
            {
              "path": "Mathlib/Probability/Independence/Conditional.lean",
              "additions": 44,
              "deletions": 36
            },
            {
              "path": "Mathlib/Probability/Independence/Kernel.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Probability/Independence/ZeroOne.lean",
              "additions": 23,
              "deletions": 9
            },
            {
              "path": "Mathlib/Probability/Kernel/CondDistrib.lean",
              "additions": 36,
              "deletions": 16
            },
            {
              "path": "Mathlib/Probability/Kernel/Condexp.lean",
              "additions": 133,
              "deletions": 71
            },
            {
              "path": "Mathlib/Probability/Kernel/Disintegration/Density.lean",
              "additions": 5,
              "deletions": 3
            },
            {
              "path": "Mathlib/Probability/Martingale/Basic.lean",
              "additions": 80,
              "deletions": 54
            },
            {
              "path": "Mathlib/Probability/Martingale/BorelCantelli.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Probability/Martingale/Centering.lean",
              "additions": 15,
              "deletions": 15
            },
            {
              "path": "Mathlib/Probability/Martingale/Convergence.lean",
              "additions": 54,
              "deletions": 30
            },
            {
              "path": "Mathlib/Probability/Martingale/OptionalSampling.lean",
              "additions": 57,
              "deletions": 29
            },
            {
              "path": "Mathlib/Probability/Notation.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/Probability/Process/Filtration.lean",
              "additions": 6,
              "deletions": 2
            },
            {
              "path": "Mathlib/Probability/Process/Stopping.lean",
              "additions": 28,
              "deletions": 10
            },
            {
              "path": "docs/overview.yaml",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "scripts/nolints_prime_decls.txt",
              "additions": 10,
              "deletions": 10
            }
          ]
        },
        "headRefName": "cond_exp",
        "headRefOid": "c6d13da479a2acaea167c7b4d09b30297c996d82",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c6IjQSa",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
              "color": "06e039",
              "name": "ready-to-merge"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJqVA",
              "color": "33DBEC",
              "name": "t-measure-probability"
            }
          ]
        },
        "latestReviews": {
          "nodes": []
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 20930,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": []
        },
        "reviewThreads": {
          "nodes": []
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjE0MDkwNTkz",
              "login": "YaelDillies"
            },
            {
              "id": "MDQ6VXNlcjQwOTQ3MzI=",
              "login": "RemyDegenne"
            },
            {
              "id": "U_kgDOBcsTTQ",
              "login": "leanprover-community-bot-assistant"
            },
            {
              "id": "U_kgDOB75MNQ",
              "login": "leanprover-community-mathlib4-bot"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIYZkmTQ",
                "name": "set_pr_emoji",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12909457135/job/35997165133"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIYZv5jQ",
                "name": "set_pr_emoji",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12909511832/job/35997350285"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIYX2qJg",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12908887583/job/35995363878"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIYX2uCg",
                "name": "label-and-report-new-contributor",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12908888107/job/35995364874"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIYX2sIA",
                "name": "post-or-update-summary-comment",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12908888096/job/35995364384"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIYX2pUw",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12908887587/job/35995363667"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIYX2ssA",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12908888111/job/35995364528"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIYX2n8g",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12908887583/job/35995363314"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIYX2nwg",
                "name": "Build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12908887587/job/35995363266"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIYX2ukA",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12908888111/job/35995365008"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIYX2sKA",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12908887583/job/35995364392"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIYYZFdA",
                "name": "Post-CI job",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12908887587/job/35995927924"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIYX4HXQ",
                "name": "New Contributor Check",
                "conclusion": "NEUTRAL",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/35995387741"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIYX4t9Q",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=20930&login=leanprover-community&repository=mathlib4"
              },
              {
                "__typename": "StatusContext",
                "id": "SC_kwDOFcwZ1c8AAAAH3Vy8gQ",
                "context": "bors",
                "state": "SUCCESS",
                "targetUrl": "https://mathlib-bors-ca18eefec4cb.herokuapp.com/batches/8758",
                "description": "Build succeeded"
              }
            ]
          }
        },
        "title": "[Merged by Bors] - chore: rename `condexp` to `condExp`",
        "updatedAt": "2025-01-22T13:57:42Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/20930",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6bUgxR",
              "createdAt": "2025-01-21T22:12:29Z",
              "body": "### PR summary [c6d13da479](https://github.com/leanprover-community/mathlib4/pull/20930/commits/c6d13da479a2acaea167c7b4d09b30297c996d82)\n\n#### Import changes for modified files\n\nNo significant changes to the import graph\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ Integrable.tendsto_ae_condExp`\n`+ Integrable.tendsto_eLpNorm_condExp`\n`+ Integrable.tendsto_snorm_condExp`\n`+ Integrable.uniformIntegrable_condExp`\n`+ Integrable.uniformIntegrable_condExp_filtration`\n`+ Martingale.ae_eq_condExp_limitProcess`\n`+ Martingale.eq_condExp_of_tendsto_eLpNorm`\n`+ Martingale.eq_condExp_of_tendsto_snorm`\n`+ Submartingale.condExp_sub_nonneg`\n`+ _root_.MeasureTheory.AEStronglyMeasurable.integral_condExpKernel`\n`+ _root_.MeasureTheory.Integrable.condExpKernel_ae`\n`+ _root_.MeasureTheory.Integrable.integral_condExpKernel`\n`+ _root_.MeasureTheory.Integrable.integral_norm_condExpKernel`\n`+ _root_.MeasureTheory.Integrable.norm_integral_condExpKernel`\n`+ aeStronglyMeasurable'_condExpIndSMul`\n`+ aeStronglyMeasurable'_condExpL2`\n`+ ae_bdd_condExp_of_ae_bdd`\n`+ ae_eq_condExp_of_forall_setIntegral_eq`\n`+ ae_eq_condExp_of_forall_set_integral_eq`\n`+ ae_le_condExp`\n`+ aestronglyMeasurable'_condExpInd`\n`+ aestronglyMeasurable'_condExpL1`\n`+ aestronglyMeasurable'_condExpL1CLM`\n`+ aestronglyMeasurable'_integral_condExpKernel`\n`+ condDistrib_ae_eq_condExp`\n`+ condExpInd`\n`+ condExpIndL1`\n`+ condExpIndL1Fin`\n`+ condExpIndL1Fin_add`\n`+ condExpIndL1Fin_ae_eq_condExpIndSMul`\n`+ condExpIndL1Fin_disjoint_union`\n`+ condExpIndL1Fin_smul`\n`+ condExpIndL1Fin_smul'`\n`+ condExpIndL1_add`\n`+ condExpIndL1_disjoint_union`\n`+ condExpIndL1_of_measurableSet_of_measure_ne_top`\n`+ condExpIndL1_of_measure_eq_top`\n`+ condExpIndL1_of_not_measurableSet`\n`+ condExpIndL1_smul`\n`+ condExpIndL1_smul'`\n`+ condExpIndSMul`\n`+ condExpIndSMul_add`\n`+ condExpIndSMul_ae_eq_smul`\n`+ condExpIndSMul_empty`\n`+ condExpIndSMul_nonneg`\n`+ condExpIndSMul_smul`\n`+ condExpIndSMul_smul'`\n`+ condExpInd_ae_eq_condExpIndSMul`\n`+ condExpInd_disjoint_union`\n`+ condExpInd_disjoint_union_apply`\n`+ condExpInd_empty`\n`+ condExpInd_nonneg`\n`+ condExpInd_of_measurable`\n`+ condExpInd_smul'`\n`+ condExpKernel_ae_eq_condExp`\n`+ condExpKernel_ae_eq_condExp'`\n`+ condExpKernel_ae_eq_trim_condExp`\n`+ condExpKernel_apply_eq_condDistrib`\n`+ condExpKernel_eq`\n`+ condExpKernel_singleton_ae_eq_cond`\n`+ condExpL1`\n`+ condExpL1CLM`\n`+ condExpL1CLM_indicatorConst`\n`+ condExpL1CLM_indicatorConstLp`\n`+ condExpL1CLM_lpMeas`\n`+ condExpL1CLM_of_aestronglyMeasurable'`\n`+ condExpL1CLM_smul`\n`+ condExpL1_add`\n`+ condExpL1_congr_ae`\n`+ condExpL1_eq`\n`+ condExpL1_measure_zero`\n`+ condExpL1_mono`\n`+ condExpL1_neg`\n`+ condExpL1_of_aestronglyMeasurable'`\n`+ condExpL1_smul`\n`+ condExpL1_sub`\n`+ condExpL1_undef`\n`+ condExpL1_zero`\n`+ condExpL2`\n`+ condExpL2_ae_eq_zero_of_ae_eq_zero`\n`+ condExpL2_comp_continuousLinearMap`\n`+ condExpL2_const_inner`\n`+ condExpL2_indicator_ae_eq_smul`\n`+ condExpL2_indicator_eq_toSpanSingleton_comp`\n`+ condExpL2_indicator_nonneg`\n`+ condExpL2_indicator_of_measurable`\n`+ condExp_add`\n`+ condExp_ae_eq`\n`+ condExp_ae_eq_condExpL1`\n`+ condExp_ae_eq_condExpL1CLM`\n`+ condExp_ae_eq_integral_condDistrib`\n`+ condExp_ae_eq_integral_condDistrib'`\n`+ condExp_ae_eq_integral_condDistrib_id`\n`+ condExp_ae_eq_integral_condExpKernel`\n`+ condExp_ae_eq_integral_condExpKernel'`\n`+ condExp_ae_eq_restrict_of_measurableSpace_eq_on`\n`+ condExp_ae_eq_restrict_zero`\n`+ condExp_ae_le`\n`+ condExp_bot`\n`+ condExp_bot'`\n`+ condExp_bot_ae_eq`\n`+ condExp_condExp_of_le`\n`+ condExp_congr_ae`\n`+ condExp_const`\n`+ condExp_densityProcess`\n`+ condExp_eq_zero_or_one_of_condIndepSet_self`\n`+ condExp_finset_sum`\n`+ condExp_generateFrom_singleton`\n`+ condExp_indep_eq`\n`+ condExp_indicator`\n`+ condExp_indicator_aux`\n`+ condExp_min_stopping_time_ae_eq_restrict_le`\n`+ condExp_min_stopping_time_ae_eq_restrict_le_const`\n`+ condExp_mono`\n`+ condExp_mul_of_aestronglyMeasurable_left`\n`+ condExp_mul_of_aestronglyMeasurable_right`\n`+ condExp_mul_of_stronglyMeasurable_left`\n`+ condExp_mul_of_stronglyMeasurable_right`\n`+ condExp_neg`\n`+ condExp_nonneg`\n`+ condExp_nonpos`\n`+ condExp_of_aestronglyMeasurable'`\n`+ condExp_of_not_le`\n`+ condExp_of_not_sigmaFinite`\n`+ condExp_of_sigmaFinite`\n`+ condExp_of_stronglyMeasurable`\n`+ condExp_prod_ae_eq_integral_condDistrib`\n`+ condExp_prod_ae_eq_integral_condDistrib'`\n`+ condExp_prod_ae_eq_integral_condDistrib₀`\n`+ condExp_restrict_ae_eq_restrict`\n`+ condExp_set_generateFrom_singleton`\n`+ condExp_smul`\n`+ condExp_stoppedValue_stopping_time_ae_eq_restrict_le`\n`+ condExp_stopping_time_ae_eq_restrict_eq`\n`+ condExp_stopping_time_ae_eq_restrict_eq_const`\n`+ condExp_stopping_time_ae_eq_restrict_eq_const_of_le_const`\n`+ condExp_stopping_time_ae_eq_restrict_eq_of_countable`\n`+ condExp_stopping_time_ae_eq_restrict_eq_of_countable_range`\n`+ condExp_stronglyMeasurable_mul_of_bound`\n`+ condExp_stronglyMeasurable_mul_of_bound₀`\n`+ condExp_stronglyMeasurable_simpleFunc_mul`\n`+ condExp_sub`\n`+ condExp_undef`\n`+ condExp_zero`\n`+ condExp_zero_or_one_of_measurableSet_limsup`\n`+ condExp_zero_or_one_of_measurableSet_limsup_atBot`\n`+ condExp_zero_or_one_of_measurableSet_limsup_atTop`\n`+ condIndepFun_iff_condExp_inter_preimage_eq_mul`\n`+ condexp`\n`+ condexpKernel`\n`+ continuous_condExpIndL1`\n`+ dominatedFinMeasAdditive_condExpInd`\n`+ eLpNorm_condExpL2_le`\n`+ eLpNorm_one_condExp_le_eLpNorm`\n`+ iCondIndepFun_iff_condExp_inter_preimage_eq_mul`\n`+ iIndepFun.condExp_natural_ae_eq_of_lt`\n`+ iIndepSet.condExp_indicator_filtrationOfSet_ae_eq`\n`+ inner_condExpL2_eq_inner_fun`\n`+ inner_condExpL2_left_eq_right`\n`+ instance : IsMarkovKernel (condExpKernel μ m) := by`\n`+ integrableOn_condExpL2_of_measure_ne_top`\n`+ integrable_condExp`\n`+ integrable_condExpIndSMul`\n`+ integrable_condExpL1`\n`+ integrable_condExpL2_indicator`\n`+ integrable_condExpL2_of_isFiniteMeasure`\n`+ integrable_toReal_condExpKernel`\n`+ integral_abs_condExp_le`\n`+ integral_condExp`\n`+ integral_condExpL2_eq`\n`+ integral_condExpL2_eq_of_fin_meas_real`\n`+ integral_condExp_indicator`\n`+ lintegral_nnnorm_condExpIndSMul_le`\n`+ lintegral_nnnorm_condExpL2_indicator_le`\n`+ lintegral_nnnorm_condExpL2_indicator_le_real`\n`+ lintegral_nnnorm_condExpL2_le`\n`+ martingale_condExp`\n`+ martingale_of_condExp_sub_eq_zero_nat`\n`+ measurable_condExpKernel`\n`+ norm_condExpIndL1Fin_le`\n`+ norm_condExpIndL1_le`\n`+ norm_condExpInd_apply_le`\n`+ norm_condExpInd_le`\n`+ norm_condExpL2_coe_le`\n`+ norm_condExpL2_le`\n`+ norm_condExpL2_le_one`\n`+ rnDeriv_ae_eq_condExp`\n`+ setIntegral_abs_condExp_le`\n`+ setIntegral_condExp`\n`+ setIntegral_condExpInd`\n`+ setIntegral_condExpIndSMul`\n`+ setIntegral_condExpL1`\n`+ setIntegral_condExpL1CLM`\n`+ setIntegral_condExpL1CLM_of_measure_ne_top`\n`+ setIntegral_condExpL2_indicator`\n`+ setLIntegral_nnnorm_condExpIndSMul_le`\n`+ setLIntegral_nnnorm_condExpL2_indicator_le`\n`+ set_integral_abs_condExp_le`\n`+ set_integral_condExpInd`\n`+ set_integral_condExpIndSMul`\n`+ set_integral_condExpL1`\n`+ set_integral_condExpL1CLM`\n`+ set_integral_condExpL2_indicator`\n`+ set_lintegral_nnnorm_condExpIndSMul_le`\n`+ set_lintegral_nnnorm_condExpL2_indicator_le`\n`+ snorm_condExpL2_le`\n`+ snorm_one_condExp_le_snorm`\n`+ stoppedValue_ae_eq_condExp_of_le`\n`+ stoppedValue_ae_eq_condExp_of_le_const`\n`+ stoppedValue_ae_eq_condExp_of_le_const_of_countable_range`\n`+ stoppedValue_ae_eq_condExp_of_le_of_countable_range`\n`+ stoppedValue_min_ae_eq_condExp`\n`+ stronglyMeasurable_condExp`\n`+ stronglyMeasurable_condExpKernel`\n`+ submartingale_iff_condExp_sub_nonneg`\n`+ submartingale_of_condExp_sub_nonneg`\n`+ submartingale_of_condExp_sub_nonneg_nat`\n`+ supermartingale_of_condExp_sub_nonneg_nat`\n`+ tendsto_ae_condExp`\n`+ tendsto_condExpL1_of_dominated_convergence`\n`+ tendsto_condExp_unique`\n`+ tendsto_eLpNorm_condExp`\n`+ tendsto_snorm_condExp`\n`- condexp_mul_of_aestronglyMeasurable_left`\n`- condexp_mul_of_aestronglyMeasurable_right`\n`- condexp_mul_of_stronglyMeasurable_left`\n`- condexp_mul_of_stronglyMeasurable_right`\n`- instance : IsMarkovKernel (condexpKernel μ m) := by`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n</details>\n\n---\n\n<details><summary>No changes to technical debt.</summary>\n\nYou can run this locally as\n```\n./scripts/technical-debt-metrics.sh pr_summary\n```\n* The `relative` value is the weighted *sum* of the differences with weight given by the *inverse* of the current value of the statistic.\n* The `absolute` value is the `relative` value divided by the total sum of the inverses of the current values (i.e. the weighted *average* of the differences).\n</details>\n",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6nEShnzwAAAAO66mEk",
              "createdAt": "2025-01-21T22:12:34Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJqVA",
                "name": "t-measure-probability"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6bXX0H",
              "createdAt": "2025-01-22T08:34:16Z",
              "body": "That's indeed a better name. Thanks!\r\nbors r+",
              "author": {
                "login": "RemyDegenne"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6nEShnzwAAAAO7LpL6",
              "createdAt": "2025-01-22T08:34:27Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
                "name": "ready-to-merge"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6bXY59",
              "createdAt": "2025-01-22T08:36:33Z",
              "body": "bors r-",
              "author": {
                "login": "RemyDegenne"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6bXY6_",
              "createdAt": "2025-01-22T08:36:36Z",
              "body": "Canceled.",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6bXZKb",
              "createdAt": "2025-01-22T08:37:07Z",
              "body": "You forgot a few deprecations. See the list of removed lemmas in the declaration diff of the automated message.",
              "author": {
                "login": "RemyDegenne"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6nEShnzwAAAAO7LyP4",
              "createdAt": "2025-01-22T08:37:29Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
                "name": "ready-to-merge"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6nEShnzwAAAAO7LyQD",
              "createdAt": "2025-01-22T08:37:29Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6bYjG5",
              "createdAt": "2025-01-22T10:49:10Z",
              "body": "That's weird, because it was automatically generated by @adomani's `add_deprecations` script. For the record, here's how it looks like before I add the missing deprecations:\r\n<details><summary>\r\n\r\n#### Declarations diff\r\n\r\n</summary>\r\n\r\n`+ Integrable.tendsto_ae_condExp`\r\n`+ Integrable.tendsto_eLpNorm_condExp`\r\n`+ Integrable.tendsto_snorm_condExp`\r\n`+ Integrable.uniformIntegrable_condExp`\r\n`+ Integrable.uniformIntegrable_condExp_filtration`\r\n`+ Martingale.ae_eq_condExp_limitProcess`\r\n`+ Martingale.eq_condExp_of_tendsto_eLpNorm`\r\n`+ Martingale.eq_condExp_of_tendsto_snorm`\r\n`+ Submartingale.condExp_sub_nonneg`\r\n`+ _root_.MeasureTheory.AEStronglyMeasurable.integral_condExpKernel`\r\n`+ _root_.MeasureTheory.Integrable.condExpKernel_ae`\r\n`+ _root_.MeasureTheory.Integrable.integral_condExpKernel`\r\n`+ _root_.MeasureTheory.Integrable.integral_norm_condExpKernel`\r\n`+ _root_.MeasureTheory.Integrable.norm_integral_condExpKernel`\r\n`+ aeStronglyMeasurable'_condExpIndSMul`\r\n`+ aeStronglyMeasurable'_condExpL2`\r\n`+ ae_bdd_condExp_of_ae_bdd`\r\n`+ ae_eq_condExp_of_forall_setIntegral_eq`\r\n`+ ae_eq_condExp_of_forall_set_integral_eq`\r\n`+ ae_le_condExp`\r\n`+ aestronglyMeasurable'_condExpInd`\r\n`+ aestronglyMeasurable'_condExpL1`\r\n`+ aestronglyMeasurable'_condExpL1CLM`\r\n`+ aestronglyMeasurable'_integral_condExpKernel`\r\n`+ condDistrib_ae_eq_condExp`\r\n`+ condExpInd`\r\n`+ condExpIndL1`\r\n`+ condExpIndL1Fin`\r\n`+ condExpIndL1Fin_add`\r\n`+ condExpIndL1Fin_ae_eq_condExpIndSMul`\r\n`+ condExpIndL1Fin_disjoint_union`\r\n`+ condExpIndL1Fin_smul`\r\n`+ condExpIndL1Fin_smul'`\r\n`+ condExpIndL1_add`\r\n`+ condExpIndL1_disjoint_union`\r\n`+ condExpIndL1_of_measurableSet_of_measure_ne_top`\r\n`+ condExpIndL1_of_measure_eq_top`\r\n`+ condExpIndL1_of_not_measurableSet`\r\n`+ condExpIndL1_smul`\r\n`+ condExpIndL1_smul'`\r\n`+ condExpIndSMul`\r\n`+ condExpIndSMul_add`\r\n`+ condExpIndSMul_ae_eq_smul`\r\n`+ condExpIndSMul_empty`\r\n`+ condExpIndSMul_nonneg`\r\n`+ condExpIndSMul_smul`\r\n`+ condExpIndSMul_smul'`\r\n`+ condExpInd_ae_eq_condExpIndSMul`\r\n`+ condExpInd_disjoint_union`\r\n`+ condExpInd_disjoint_union_apply`\r\n`+ condExpInd_empty`\r\n`+ condExpInd_nonneg`\r\n`+ condExpInd_of_measurable`\r\n`+ condExpInd_smul'`\r\n`+ condExpKernel_ae_eq_condExp`\r\n`+ condExpKernel_ae_eq_condExp'`\r\n`+ condExpKernel_ae_eq_trim_condExp`\r\n`+ condExpKernel_apply_eq_condDistrib`\r\n`+ condExpKernel_eq`\r\n`+ condExpKernel_singleton_ae_eq_cond`\r\n`+ condExpL1`\r\n`+ condExpL1CLM`\r\n`+ condExpL1CLM_indicatorConst`\r\n`+ condExpL1CLM_indicatorConstLp`\r\n`+ condExpL1CLM_lpMeas`\r\n`+ condExpL1CLM_of_aestronglyMeasurable'`\r\n`+ condExpL1CLM_smul`\r\n`+ condExpL1_add`\r\n`+ condExpL1_congr_ae`\r\n`+ condExpL1_eq`\r\n`+ condExpL1_measure_zero`\r\n`+ condExpL1_mono`\r\n`+ condExpL1_neg`\r\n`+ condExpL1_of_aestronglyMeasurable'`\r\n`+ condExpL1_smul`\r\n`+ condExpL1_sub`\r\n`+ condExpL1_undef`\r\n`+ condExpL1_zero`\r\n`+ condExpL2`\r\n`+ condExpL2_ae_eq_zero_of_ae_eq_zero`\r\n`+ condExpL2_comp_continuousLinearMap`\r\n`+ condExpL2_const_inner`\r\n`+ condExpL2_indicator_ae_eq_smul`\r\n`+ condExpL2_indicator_eq_toSpanSingleton_comp`\r\n`+ condExpL2_indicator_nonneg`\r\n`+ condExpL2_indicator_of_measurable`\r\n`+ condExp_add`\r\n`+ condExp_ae_eq`\r\n`+ condExp_ae_eq_condExpL1`\r\n`+ condExp_ae_eq_condExpL1CLM`\r\n`+ condExp_ae_eq_integral_condDistrib`\r\n`+ condExp_ae_eq_integral_condDistrib'`\r\n`+ condExp_ae_eq_integral_condDistrib_id`\r\n`+ condExp_ae_eq_integral_condExpKernel`\r\n`+ condExp_ae_eq_integral_condExpKernel'`\r\n`+ condExp_ae_eq_restrict_of_measurableSpace_eq_on`\r\n`+ condExp_ae_eq_restrict_zero`\r\n`+ condExp_ae_le`\r\n`+ condExp_bot`\r\n`+ condExp_bot'`\r\n`+ condExp_bot_ae_eq`\r\n`+ condExp_condExp_of_le`\r\n`+ condExp_congr_ae`\r\n`+ condExp_const`\r\n`+ condExp_densityProcess`\r\n`+ condExp_eq_zero_or_one_of_condIndepSet_self`\r\n`+ condExp_finset_sum`\r\n`+ condExp_generateFrom_singleton`\r\n`+ condExp_indep_eq`\r\n`+ condExp_indicator`\r\n`+ condExp_indicator_aux`\r\n`+ condExp_min_stopping_time_ae_eq_restrict_le`\r\n`+ condExp_min_stopping_time_ae_eq_restrict_le_const`\r\n`+ condExp_mono`\r\n`+ condExp_neg`\r\n`+ condExp_nonneg`\r\n`+ condExp_nonpos`\r\n`+ condExp_of_aestronglyMeasurable'`\r\n`+ condExp_of_not_le`\r\n`+ condExp_of_not_sigmaFinite`\r\n`+ condExp_of_sigmaFinite`\r\n`+ condExp_of_stronglyMeasurable`\r\n`+ condExp_prod_ae_eq_integral_condDistrib`\r\n`+ condExp_prod_ae_eq_integral_condDistrib'`\r\n`+ condExp_prod_ae_eq_integral_condDistrib₀`\r\n`+ condExp_restrict_ae_eq_restrict`\r\n`+ condExp_set_generateFrom_singleton`\r\n`+ condExp_smul`\r\n`+ condExp_stoppedValue_stopping_time_ae_eq_restrict_le`\r\n`+ condExp_stopping_time_ae_eq_restrict_eq`\r\n`+ condExp_stopping_time_ae_eq_restrict_eq_const`\r\n`+ condExp_stopping_time_ae_eq_restrict_eq_const_of_le_const`\r\n`+ condExp_stopping_time_ae_eq_restrict_eq_of_countable`\r\n`+ condExp_stopping_time_ae_eq_restrict_eq_of_countable_range`\r\n`+ condExp_stronglyMeasurable_mul`\r\n`+ condExp_stronglyMeasurable_mul_of_bound`\r\n`+ condExp_stronglyMeasurable_mul_of_bound₀`\r\n`+ condExp_stronglyMeasurable_mul₀`\r\n`+ condExp_stronglyMeasurable_simpleFunc_mul`\r\n`+ condExp_sub`\r\n`+ condExp_undef`\r\n`+ condExp_zero`\r\n`+ condExp_zero_or_one_of_measurableSet_limsup`\r\n`+ condExp_zero_or_one_of_measurableSet_limsup_atBot`\r\n`+ condExp_zero_or_one_of_measurableSet_limsup_atTop`\r\n`+ condIndepFun_iff_condExp_inter_preimage_eq_mul`\r\n`+ condexp`\r\n`+ condexpKernel`\r\n`+ continuous_condExpIndL1`\r\n`+ dominatedFinMeasAdditive_condExpInd`\r\n`+ eLpNorm_condExpL2_le`\r\n`+ eLpNorm_one_condExp_le_eLpNorm`\r\n`+ iCondIndepFun_iff_condExp_inter_preimage_eq_mul`\r\n`+ iIndepFun.condExp_natural_ae_eq_of_lt`\r\n`+ iIndepSet.condExp_indicator_filtrationOfSet_ae_eq`\r\n`+ inner_condExpL2_eq_inner_fun`\r\n`+ inner_condExpL2_left_eq_right`\r\n`+ instance : IsMarkovKernel (condExpKernel μ m) := by`\r\n`+ integrableOn_condExpL2_of_measure_ne_top`\r\n`+ integrable_condExp`\r\n`+ integrable_condExpIndSMul`\r\n`+ integrable_condExpL1`\r\n`+ integrable_condExpL2_indicator`\r\n`+ integrable_condExpL2_of_isFiniteMeasure`\r\n`+ integrable_toReal_condExpKernel`\r\n`+ integral_abs_condExp_le`\r\n`+ integral_condExp`\r\n`+ integral_condExpL2_eq`\r\n`+ integral_condExpL2_eq_of_fin_meas_real`\r\n`+ integral_condExp_indicator`\r\n`+ lintegral_nnnorm_condExpIndSMul_le`\r\n`+ lintegral_nnnorm_condExpL2_indicator_le`\r\n`+ lintegral_nnnorm_condExpL2_indicator_le_real`\r\n`+ lintegral_nnnorm_condExpL2_le`\r\n`+ martingale_condExp`\r\n`+ martingale_of_condExp_sub_eq_zero_nat`\r\n`+ measurable_condExpKernel`\r\n`+ norm_condExpIndL1Fin_le`\r\n`+ norm_condExpIndL1_le`\r\n`+ norm_condExpInd_apply_le`\r\n`+ norm_condExpInd_le`\r\n`+ norm_condExpL2_coe_le`\r\n`+ norm_condExpL2_le`\r\n`+ norm_condExpL2_le_one`\r\n`+ rnDeriv_ae_eq_condExp`\r\n`+ setIntegral_abs_condExp_le`\r\n`+ setIntegral_condExp`\r\n`+ setIntegral_condExpInd`\r\n`+ setIntegral_condExpIndSMul`\r\n`+ setIntegral_condExpL1`\r\n`+ setIntegral_condExpL1CLM`\r\n`+ setIntegral_condExpL1CLM_of_measure_ne_top`\r\n`+ setIntegral_condExpL2_indicator`\r\n`+ setLIntegral_nnnorm_condExpIndSMul_le`\r\n`+ setLIntegral_nnnorm_condExpL2_indicator_le`\r\n`+ set_integral_abs_condExp_le`\r\n`+ set_integral_condExp`\r\n`+ set_integral_condExpInd`\r\n`+ set_integral_condExpIndSMul`\r\n`+ set_integral_condExpL1`\r\n`+ set_integral_condExpL1CLM`\r\n`+ set_integral_condExpL1CLM_of_measure_ne_top`\r\n`+ set_integral_condExpL2_indicator`\r\n`+ set_lintegral_nnnorm_condExpIndSMul_le`\r\n`+ set_lintegral_nnnorm_condExpL2_indicator_le`\r\n`+ snorm_condExpL2_le`\r\n`+ snorm_one_condExp_le_snorm`\r\n`+ stoppedValue_ae_eq_condExp_of_le`\r\n`+ stoppedValue_ae_eq_condExp_of_le_const`\r\n`+ stoppedValue_ae_eq_condExp_of_le_const_of_countable_range`\r\n`+ stoppedValue_ae_eq_condExp_of_le_of_countable_range`\r\n`+ stoppedValue_min_ae_eq_condExp`\r\n`+ stronglyMeasurable_condExp`\r\n`+ stronglyMeasurable_condExpKernel`\r\n`+ submartingale_iff_condExp_sub_nonneg`\r\n`+ submartingale_of_condExp_sub_nonneg`\r\n`+ submartingale_of_condExp_sub_nonneg_nat`\r\n`+ supermartingale_of_condExp_sub_nonneg_nat`\r\n`+ tendsto_ae_condExp`\r\n`+ tendsto_condExpL1_of_dominated_convergence`\r\n`+ tendsto_condExp_unique`\r\n`+ tendsto_eLpNorm_condExp`\r\n`+ tendsto_snorm_condExp`\r\n`- condexpKernel_ae_eq_condexp`\r\n`- condexpKernel_ae_eq_trim_condexp`\r\n`- condexp_eq_zero_or_one_of_condIndepSet_self`\r\n`- condexp_stopping_time_ae_eq_restrict_eq_const`\r\n`- instance : IsMarkovKernel (condexpKernel μ m) := by`\r\n`- set_integral_condexp`\r\n`- set_integral_condexpL1CLM_of_measure_ne_top`\r\n</details>\r\n",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6nEShnzwAAAAO7UyTZ",
              "createdAt": "2025-01-22T11:37:02Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6nEShnzwAAAAO7U88x",
              "createdAt": "2025-01-22T11:40:44Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "6cc50f3e7c10c2201ff79640f86991be49cbf91c"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "e0152e67a9be368fc3775f74e9726fd7cf40a278"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "5affe34201c5e54203c0752a1eb9c7bc06ce1dda"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "c6d13da479a2acaea167c7b4d09b30297c996d82"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c6nEShnzwAAAAO7ZGEl",
              "createdAt": "2025-01-22T13:07:40Z"
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6nEShnzwAAAAO7as70",
              "createdAt": "2025-01-22T13:39:03Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6bZ_42",
              "createdAt": "2025-01-22T13:42:03Z",
              "body": "Thanks!\r\nbors r+",
              "author": {
                "login": "RemyDegenne"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6nEShnzwAAAAO7a4qT",
              "createdAt": "2025-01-22T13:42:18Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
                "name": "ready-to-merge"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6baIsH",
              "createdAt": "2025-01-22T13:57:38Z",
              "body": "Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/12909631158/job/35997765810)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/12909631158/job/35997766254)",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c6nEShnzwAAAAO7btY0",
              "createdAt": "2025-01-22T13:57:39Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c6nEShnzwAAAAO7btkq",
              "createdAt": "2025-01-22T13:57:42Z"
            }
          ]
        }
      }
    }
  }
}
