{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 52,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "kbuzzard"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "There are changes of two types: first I add some `.{w}` in some declarations to ensure that universes are in the right order. Secondly I generalise some results from `Category.{max u1 v1, u2}` to `Category.{v2, u2}`.\r\n\r\nFrom the Copenhagen workshop.\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 3,
        "closed": true,
        "closedAt": "2023-08-06T23:34:41Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5gV53i",
              "body": "Some results about functors C.{v1,u1} => D.{v2,u2} really do need an assumption of the form v2>=max(v1,u1). For example in the theory of Grothendieck topologies (D-valued presheaves on C) you want to take a product in D over some collection of arrows indexed by a collection of objects in C, and this is often solved via tricks like defining v2 to be max(v1,u1). However overuse of this ended up putting universe restrictions in random places. For example the type of `CategoryTheory.sheafCompose` in `master` begins\r\n```\r\nCategoryTheory.sheafCompose.{v₁, u₁, u₂, u₃} {C : Type u₁} [inst✝ : Category.{v₁, u₁} C] {A : Type u₂}\r\n  [inst✝¹ : Category.{max v₁ u₁, u₂} A] {B : Type u₃} [inst✝² : Category.{max v₁ u₁, u₃} B]\r\n...\r\n```\r\nand in particular the morphism universes for A and B had to be equal. In particular it was not possible to use `CategoryTheory.sheafCompose` to bump universe levels.\r\n\r\nAfter this PR, the universes for `sheafCompose` are completely general:\r\n\r\n```\r\nCategoryTheory.sheafCompose.{v₁, v₂, v₃, u₁, u₂, u₃} {C : Type u₁} [inst✝ : Category.{v₁, u₁} C] {A : Type u₂}\r\n  [inst✝¹ : Category.{v₂, u₂} A] {B : Type u₃} [inst✝² : Category.{v₃, u₃} B] (J : GrothendieckTopology.{v₁, u₁} C)\r\n  (F : Functor.{v₂, v₃, u₂, u₃} A B)\r\n```\r\n\r\nbut the results which actually need the extra hypothesis still have them; I call these universe-restricted variables `A'` and `P'` to distinguish them from the universe polymorphic `A` and `P`.",
              "createdAt": "2023-07-02T04:39:07Z",
              "author": {
                "login": "kbuzzard"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5irK7P",
              "body": ":v: kbuzzard can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests).",
              "createdAt": "2023-07-28T10:52:01Z",
              "author": {
                "login": "bors"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5jXFIn",
              "body": "I tried to use UnivLE but couldn't get it to work. I asked about it [here](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/UnivLE.20in.20CategoryTheory.2ESites.2ESheafOfTypes.20.3F/near/380295399).\r\n\r\nbors r+",
              "createdAt": "2023-08-06T22:43:52Z",
              "author": {
                "login": "kbuzzard"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5jXHm6",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/5779165230/job/15661133662)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/5779165230/job/15661133612)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/5779165230/job/15661133561)",
              "createdAt": "2023-08-06T23:34:41Z",
              "author": {
                "login": "bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "bdbfb1f57ec23e4937122bc72528f5f196a03c66",
                "additions": 34,
                "deletions": 26,
                "committedDate": "2023-07-02T03:03:56Z",
                "author": {
                  "name": "Kevin Buzzard",
                  "email": "k.buzzard@imperial.ac.uk"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "1cd3887c20c64c8f6b362b72131278919c1b190a",
                "additions": 4,
                "deletions": 4,
                "committedDate": "2023-07-02T03:55:04Z",
                "author": {
                  "name": "Kevin Buzzard",
                  "email": "k.buzzard@imperial.ac.uk"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "e7a3ae8005033a6d0b5218683bfa6e6050f2f13b",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-07-02T04:19:15Z",
                "author": {
                  "name": "Kevin Buzzard",
                  "email": "k.buzzard@imperial.ac.uk"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "cc117881076a4a2ad4c0d8ff3eaaeac70c09a5d9",
                "additions": 1,
                "deletions": 2,
                "committedDate": "2023-07-28T15:41:23Z",
                "author": {
                  "name": "Kevin Buzzard",
                  "email": "k.buzzard@imperial.ac.uk"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "40a3a4174cecfafc1fe431438cc1d8629854690c",
                "additions": 1,
                "deletions": 3,
                "committedDate": "2023-07-28T15:41:36Z",
                "author": {
                  "name": "Kevin Buzzard",
                  "email": "k.buzzard@imperial.ac.uk"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "b60c656ca2b4edde87c5c33db4cce262783074c7",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-07-28T15:41:49Z",
                "author": {
                  "name": "Kevin Buzzard",
                  "email": "k.buzzard@imperial.ac.uk"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "db243bd864656c711cc59e74f8897a1632e9dbef",
                "additions": 61322,
                "deletions": 30114,
                "committedDate": "2023-07-31T08:55:12Z",
                "author": {
                  "name": "Kevin Buzzard",
                  "email": "k.buzzard@imperial.ac.uk"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "bddc817e6ffaaf8a97a8a6345701df5af440242c",
                "additions": 4,
                "deletions": 1,
                "committedDate": "2023-07-31T09:01:05Z",
                "author": {
                  "name": "Kevin Buzzard",
                  "email": "k.buzzard@imperial.ac.uk"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "46624dbb7944b48fbdcbe0adca35bc57770bdb09",
                "additions": 16,
                "deletions": 2,
                "committedDate": "2023-08-06T22:39:55Z",
                "author": {
                  "name": "Kevin Buzzard",
                  "email": "k.buzzard@imperial.ac.uk"
                },
                "statusCheckRollup": null
              }
            }
          ]
        },
        "createdAt": "2023-07-02T03:06:39Z",
        "deletions": 30,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/CategoryTheory/Limits/Shapes/Multiequalizer.lean",
              "additions": 16,
              "deletions": 16
            },
            {
              "path": "Mathlib/CategoryTheory/Sites/Sheaf.lean",
              "additions": 33,
              "deletions": 11
            },
            {
              "path": "Mathlib/CategoryTheory/Sites/Whiskering.lean",
              "additions": 3,
              "deletions": 3
            }
          ]
        },
        "headRefName": "kb-more-universe-generalisations",
        "headRefOid": "46624dbb7944b48fbdcbe0adca35bc57770bdb09",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5UbqqY",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABAt13Ow",
              "color": "bfd4f2",
              "name": "delegated"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5cfziI",
              "body": "I note that [UnivLE](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Logic/UnivLE.html#UnivLE) was created after the work here was done, so I think it would be worth exploring if it could be used instead of the `A'` and `P'` trick proposed.\r\n\r\nHowever, this is clearly a strict improvement either way.\r\n\r\nThanks!\r\n\r\nbors d+",
              "state": "APPROVED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-07-28T10:52:00Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 5659,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": "APPROVED",
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5cfziI",
              "body": "I note that [UnivLE](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Logic/UnivLE.html#UnivLE) was created after the work here was done, so I think it would be worth exploring if it could be used instead of the `A'` and `P'` trick proposed.\r\n\r\nHowever, this is clearly a strict improvement either way.\r\n\r\nThanks!\r\n\r\nbors d+",
              "state": "APPROVED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-07-28T10:52:00Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5MI41T",
                    "body": "I think it's easier to follow the design if we declare `A` first. \r\n```suggestion\r\nvariable {A : Type u₂} [Category.{v₂} A]\r\nvariable {A' : Type u₂} [Category.{max v₁ u₁} A'] -- An alternative to `A` with universes satisfying inequalities.\r\n```",
                    "createdAt": "2023-07-28T10:48:13Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5MI4-J",
                    "body": "```suggestion\r\nvariable (P : Cᵒᵖ ⥤ A) (P' : Cᵒᵖ ⥤ A')\r\n```",
                    "createdAt": "2023-07-28T10:48:53Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5MI5Ha",
                    "body": "```suggestion\r\n-- TODO: Can the universes in `s` be generalised?\r\n```",
                    "createdAt": "2023-07-28T10:49:44Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjMxODY3ODI3",
              "login": "kbuzzard"
            },
            {
              "id": "MDQ6VXNlcjc3MzQzNjQ=",
              "login": "ocfnash"
            },
            {
              "id": "MDQ6VXNlcjQ3Nzk1Ng==",
              "login": "kim-em"
            },
            {
              "id": "U_kgDOB75MNQ",
              "login": "leanprover-community-mathlib4-bot"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": null,
        "title": "[Merged by Bors] - chore: more universe generalisations / fixes",
        "updatedAt": "2023-08-06T23:34:45Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/5659",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "bdbfb1f57ec23e4937122bc72528f5f196a03c66"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5qW95mzwAAAAJCEuRk",
              "createdAt": "2023-07-02T03:06:39Z",
              "label": {
                "id": "MDU6TGFiZWwzMjcxMjQ0NzU5",
                "name": "WIP"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "1cd3887c20c64c8f6b362b72131278919c1b190a"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "e7a3ae8005033a6d0b5218683bfa6e6050f2f13b"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5qW95mzwAAAAJCFe5Z",
              "createdAt": "2023-07-02T04:19:32Z",
              "label": {
                "id": "MDU6TGFiZWwzMjcxMjQ0NzU5",
                "name": "WIP"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5qW95mzwAAAAJCFe5a",
              "createdAt": "2023-07-02T04:19:32Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5gV53i",
              "createdAt": "2023-07-02T04:39:07Z",
              "body": "Some results about functors C.{v1,u1} => D.{v2,u2} really do need an assumption of the form v2>=max(v1,u1). For example in the theory of Grothendieck topologies (D-valued presheaves on C) you want to take a product in D over some collection of arrows indexed by a collection of objects in C, and this is often solved via tricks like defining v2 to be max(v1,u1). However overuse of this ended up putting universe restrictions in random places. For example the type of `CategoryTheory.sheafCompose` in `master` begins\r\n```\r\nCategoryTheory.sheafCompose.{v₁, u₁, u₂, u₃} {C : Type u₁} [inst✝ : Category.{v₁, u₁} C] {A : Type u₂}\r\n  [inst✝¹ : Category.{max v₁ u₁, u₂} A] {B : Type u₃} [inst✝² : Category.{max v₁ u₁, u₃} B]\r\n...\r\n```\r\nand in particular the morphism universes for A and B had to be equal. In particular it was not possible to use `CategoryTheory.sheafCompose` to bump universe levels.\r\n\r\nAfter this PR, the universes for `sheafCompose` are completely general:\r\n\r\n```\r\nCategoryTheory.sheafCompose.{v₁, v₂, v₃, u₁, u₂, u₃} {C : Type u₁} [inst✝ : Category.{v₁, u₁} C] {A : Type u₂}\r\n  [inst✝¹ : Category.{v₂, u₂} A] {B : Type u₃} [inst✝² : Category.{v₃, u₃} B] (J : GrothendieckTopology.{v₁, u₁} C)\r\n  (F : Functor.{v₂, v₃, u₂, u₃} A B)\r\n```\r\n\r\nbut the results which actually need the extra hypothesis still have them; I call these universe-restricted variables `A'` and `P'` to distinguish them from the universe polymorphic `A` and `P`.",
              "author": {
                "login": "kbuzzard"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5qW95mzwAAAAJCFkZK",
              "createdAt": "2023-07-02T04:39:45Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABMtntmA",
                "name": "new-feature"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5qW95mzwAAAAJKzlmv",
              "createdAt": "2023-07-18T03:29:12Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABMJpquQ",
                "name": "after-port"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5qW95mzwAAAAJOgMOH",
              "createdAt": "2023-07-25T04:44:21Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABMJpquQ",
                "name": "after-port"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5cfziI",
              "createdAt": "2023-07-28T10:48:12Z",
              "body": "I note that [UnivLE](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Logic/UnivLE.html#UnivLE) was created after the work here was done, so I think it would be worth exploring if it could be used instead of the `A'` and `P'` trick proposed.\r\n\r\nHowever, this is clearly a strict improvement either way.\r\n\r\nThanks!\r\n\r\nbors d+",
              "author": {
                "login": "ocfnash"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5irK7P",
              "createdAt": "2023-07-28T10:52:01Z",
              "body": ":v: kbuzzard can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests).",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5qW95mzwAAAAJQ37VO",
              "createdAt": "2023-07-28T10:52:14Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABAt13Ow",
                "name": "delegated"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5qW95mzwAAAAJQ37Wp",
              "createdAt": "2023-07-28T10:52:15Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "cc117881076a4a2ad4c0d8ff3eaaeac70c09a5d9"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "40a3a4174cecfafc1fe431438cc1d8629854690c"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "b60c656ca2b4edde87c5c33db4cce262783074c7"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "db243bd864656c711cc59e74f8897a1632e9dbef"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "bddc817e6ffaaf8a97a8a6345701df5af440242c"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "46624dbb7944b48fbdcbe0adca35bc57770bdb09"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5jXFIn",
              "createdAt": "2023-08-06T22:43:52Z",
              "body": "I tried to use UnivLE but couldn't get it to work. I asked about it [here](https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/UnivLE.20in.20CategoryTheory.2ESites.2ESheafOfTypes.20.3F/near/380295399).\r\n\r\nbors r+",
              "author": {
                "login": "kbuzzard"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5jXHm6",
              "createdAt": "2023-08-06T23:34:41Z",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/5779165230/job/15661133662)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/5779165230/job/15661133612)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/5779165230/job/15661133561)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c5qW95mzwAAAAJVIMU_",
              "createdAt": "2023-08-06T23:34:42Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c5qW95mzwAAAAJVIMXY",
              "createdAt": "2023-08-06T23:34:45Z"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5O3sJO",
              "createdAt": "2023-10-14T04:50:16Z",
              "source": {
                "id": "PR_kwDOFcwZ1c5ctKSr",
                "title": "[Merged by Bors] - feat: universe generalizations in UniqueGluing and Forget",
                "url": "https://github.com/leanprover-community/mathlib4/pull/7654"
              }
            }
          ]
        }
      }
    }
  }
}
