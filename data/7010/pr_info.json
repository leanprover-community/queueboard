{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 57,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "mo271"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "- [x] depends on: #7013 \r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 3,
        "closed": true,
        "closedAt": "2023-09-19T14:37:56Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5l7APQ",
              "body": "This is part of a port of \r\nhttps://github.com/laughinggas/p-adic-L-functions/blob/main/src/dirichlet_character/basic.lean",
              "createdAt": "2023-09-07T11:14:33Z",
              "author": {
                "login": "mo271"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5l8fBN",
              "body": "Is there a specific reason for not using `MulChar (ZMod n) R` as the definition of `DirichletCharacter R n`?",
              "createdAt": "2023-09-07T15:26:50Z",
              "author": {
                "login": "MichaelStollBayreuth"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5l8gJR",
              "body": "Also, there is maybe some ambiguity as to what should be the correct definition of a \"Dirichlet character mod n\".\r\nI'm more used to it being defined as a map from the integers to (some monoid with zero) R that is obtained as the composition of the reduction map $\\mathbb Z \\to \\mathbb Z/n \\mathbb Z$ and a multiplicative character on $\\mathbb Z/n \\mathbb Z$. Of course, both versions are equivalent, and it is perhaps a question of what is more convenient...",
              "createdAt": "2023-09-07T15:29:53Z",
              "author": {
                "login": "MichaelStollBayreuth"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5l_TgE",
              "body": "> Is there a specific reason for not using `MulChar (ZMod n) R` as the definition of `DirichletCharacter R n`?\r\n\r\nI thought it makes sense to give it a separate name since there will be a few files on it. Also, I think `MulChar` is more in sync with `asso_dirichlet_character`, which has now been replaced in terms of `ofUnitHom`.",
              "createdAt": "2023-09-08T05:24:52Z",
              "author": {
                "login": "laughinggas"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5l_Urj",
              "body": "> Also, there is maybe some ambiguity as to what should be the correct definition of a \"Dirichlet character mod n\". I'm more used to it being defined as a map from the integers to (some monoid with zero) R that is obtained as the composition of the reduction map Z→Z/nZ and a multiplicative character on Z/nZ. Of course, both versions are equivalent, and it is perhaps a question of what is more convenient...\r\n\r\nI have at least 300-500 lines of code (in the folder `dirichlet_character` here : https://github.com/laughinggas/p-adic-L-functions/tree/main/src/dirichlet_character )  based on this definition. It comes with a lot of nice properties such as `change_level`, which is a monoid homomorphism. One can choose to make a second definition as a function from the integers (I am happy to contribute to that!), and show the equivalence of the two definitions.",
              "createdAt": "2023-09-08T05:30:58Z",
              "author": {
                "login": "laughinggas"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5mANOA",
              "body": "This PR/issue depends on:\n* ~~leanprover-community/mathlib4#7013~~\nBy **[Dependent Issues](https://github.com/z0al/dependent-issues)** (🤖). Happy coding!\n<!-- By Dependent Issues (Action) - DO NOT REMOVE -->",
              "createdAt": "2023-09-08T09:02:32Z",
              "author": {
                "login": "leanprover-community-mathlib4-bot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5mARiM",
              "body": "> > Is there a specific reason for not using `MulChar (ZMod n) R` as the definition of `DirichletCharacter R n`?\r\n> \r\n> I thought it makes sense to give it a separate name since there will be a few files on it. Also, I think `MulChar` is more in sync with `asso_dirichlet_character`, which has now been replaced in terms of `ofUnitHom`.\r\n\r\nIt certainly makes sense to give it a separate name. What I mean is why not define it as\r\n```lean\r\n@[reducible] def DirichletCharacter (R : Type) [CommMonoidWithZero R] (n : ℕ) := MulChar (ZMod n) R\r\n```\r\ninstead? The rationale being that in many (most?) applications, you also want to evaluate the characters at non-units. (And, of course, that there is already an API for `MulChar`s.)",
              "createdAt": "2023-09-08T09:15:32Z",
              "author": {
                "login": "MichaelStollBayreuth"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5mATOr",
              "body": "> > Also, there is maybe some ambiguity as to what should be the correct definition of a \"Dirichlet character mod n\". I'm more used to it being defined as a map from the integers to (some monoid with zero) R that is obtained as the composition of the reduction map Z→Z/nZ and a multiplicative character on Z/nZ. Of course, both versions are equivalent, and it is perhaps a question of what is more convenient...\r\n> \r\n> I have at least 300-500 lines of code (in the folder `dirichlet_character` here : https://github.com/laughinggas/p-adic-L-functions/tree/main/src/dirichlet_character ) based on this definition. It comes with a lot of nice properties such as `change_level`, which is a monoid homomorphism. One can choose to make a second definition as a function from the integers (I am happy to contribute to that!), and show the equivalence of the two definitions.\r\n\r\nAfter some consideration, I think it is best to use `MulChar (ZMod n) R` (as opposed to maps from integers to `R`), since if `χ` is an object of this type, `χ a` for an integer `a` just works. And, as you indicate, this definition seems to be better suited for proving properties (which, I think, comes down to the fact that the units of `ZMod n` are a thing, whereas their preimage in the integers isn't really).",
              "createdAt": "2023-09-08T09:20:54Z",
              "author": {
                "login": "MichaelStollBayreuth"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5mAUjg",
              "body": "> > > Is there a specific reason for not using `MulChar (ZMod n) R` as the definition of `DirichletCharacter R n`?\r\n> > \r\n> > \r\n> > I thought it makes sense to give it a separate name since there will be a few files on it. Also, I think `MulChar` is more in sync with `asso_dirichlet_character`, which has now been replaced in terms of `ofUnitHom`.\r\n> \r\n> It certainly makes sense to give it a separate name. What I mean is why not define it as\r\n> \r\n> ```lean\r\n> @[reducible] def DirichletCharacter (R : Type) [CommMonoidWithZero R] (n : ℕ) := MulChar (ZMod n) R\r\n> ```\r\n> \r\n> instead? The rationale being that in many (most?) applications, you also want to evaluate the characters at non-units. (And, of course, that there is already an API for `MulChar`s.)\r\n\r\nIf you look at the following : https://github.com/laughinggas/p-adic-L-functions/blob/88c5750b71f90ae9a9964968f4eabcb994d6d279/src/dirichlet_character/basic.lean#L54 , I think the definition of `MulChar` is related more to `asso_dirichlet_character`. I removed the definition of `asso_dirichlet_character` from this port and have instead used the properties of `MulChar` instead.",
              "createdAt": "2023-09-08T09:25:15Z",
              "author": {
                "login": "laughinggas"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5mAbTt",
              "body": "Defining it as `(ZMod n)ˣ →* Rˣ` has the conceptual advantage of defining it on the smallest possible object, instead of either on `ZMod n` or even `\\Z` with extra conditions. I agree that we should have convenient api to switch between the different incarnations.",
              "createdAt": "2023-09-08T09:45:25Z",
              "author": {
                "login": "mo271"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5mAe7h",
              "body": "OK; I guess the one reason why you want to work with homomorphisms on the unit group is that this gives you the correct notion of changing the level. I would suggest using the `MulChar` definition as the main one and then go via the equivalence to \"unit homs\" (`toUnitHom`/`ofUnitHom`) to do the level change etc:\r\n\r\n```lean\r\ndef ZMod.unitsMap {n m : ℕ} (hm : n ∣ m) : (ZMod m)ˣ →* (ZMod n)ˣ := Units.map (ZMod.castHom hm (ZMod n))\r\n\r\n@[reducible]\r\ndef DirichletCharacter (R : Type) [CommMonoidWithZero R] (n : ℕ) := MulChar (ZMod n) R\r\n\r\nnamespace DirichletCharacter\r\n\r\nnoncomputable def change_level {R : Type} [CommMonoidWithZero R] {n m : ℕ} (hm : n ∣ m) :\r\n    DirichletCharacter R n →* DirichletCharacter R m :=\r\n  { toFun := fun ψ ↦ MulChar.ofUnitHom (ψ.toUnitHom.comp (ZMod.unitsMap hm)),\r\n    map_one' := by ext; simp,\r\n    map_mul' := fun ψ₁ ψ₂ ↦ by ext; simp }\r\n```\r\n(I was working on that while you were already answering; this refers to the earlier point.\r\nEDIT: (hopefully) corrected `units_map` to `unitsMap`...)",
              "createdAt": "2023-09-08T09:57:08Z",
              "author": {
                "login": "MichaelStollBayreuth"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5mZ0co",
              "body": "> OK; I guess the one reason why you want to work with homomorphisms on the unit group is that this gives you the correct notion of changing the level. I would suggest using the `MulChar` definition as the main one and then go via the equivalence to \"unit homs\" (`toUnitHom`/`ofUnitHom`) to do the level change etc:\r\n> \r\n> ```lean\r\n> def ZMod.unitsMap {n m : ℕ} (hm : n ∣ m) : (ZMod m)ˣ →* (ZMod n)ˣ := Units.map (ZMod.castHom hm (ZMod n))\r\n> \r\n> @[reducible]\r\n> def DirichletCharacter (R : Type) [CommMonoidWithZero R] (n : ℕ) := MulChar (ZMod n) R\r\n> \r\n> namespace DirichletCharacter\r\n> \r\n> noncomputable def change_level {R : Type} [CommMonoidWithZero R] {n m : ℕ} (hm : n ∣ m) :\r\n>     DirichletCharacter R n →* DirichletCharacter R m :=\r\n>   { toFun := fun ψ ↦ MulChar.ofUnitHom (ψ.toUnitHom.comp (ZMod.unitsMap hm)),\r\n>     map_one' := by ext; simp,\r\n>     map_mul' := fun ψ₁ ψ₂ ↦ by ext; simp }\r\n> ```\r\n> \r\n> (I was working on that while you were already answering; this refers to the earlier point. EDIT: (hopefully) corrected `units_map` to `unitsMap`...)\r\n\r\n`change_level` is not the only reason I wish to work with the units. I am using Dirichlet characters to define the p-adic L-function. The definition of the p-adic L-function (attached below) and its properties (which is about 3000-5000 lines of code) depend on the Dirichlet character being defined on the units. I understand that this is equivalent to the definition you have given, however, it is not the same. Your definition coincides with the definition of the associated Dirichlet character, `asso_dirichlet_character` in the p-adic L-functions repository, which I reworded in terms of `MulChar.ofUnitHom`. The main reason why I am hesitant to completely remove the units is because it will involve rewriting a lot of proofs going ahead.\r\n\r\n![image](https://github.com/leanprover-community/mathlib4/assets/58670661/76215124-e07a-4cad-be37-1d71cebf2a0e)\r\n\r\n![image](https://github.com/leanprover-community/mathlib4/assets/58670661/ce03abcb-f36a-423e-9e9c-c5cc65b1d312)\r\n",
              "createdAt": "2023-09-13T17:34:49Z",
              "author": {
                "login": "laughinggas"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5mZ7Nr",
              "body": "@MichaelStollBayreuth I can change the definition to be the following :\r\n`def DirichletCharacter (R : Type) [CommMonoidWithZero R] (n : ℕ) := MulChar.toUnitHom (ZMod n) R `\r\nbut given the equivalence `equivToUnitHom`, I think it might be easier to keep the original definition?\r\n\r\nYour help is much appreciated, thank you!",
              "createdAt": "2023-09-13T17:55:21Z",
              "author": {
                "login": "laughinggas"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5mg0Nw",
              "body": "Sorry for being slow to reply (I'm trying to finish a long and involved paper...).\r\nBut Kevin has already pretty much said what I would have written. In particular, you can applpy a `MulHom` to units via the coercions from units to the monoid, and you can get the homomorphism on units via `toUnitHom` if you need it. Also (again repeating what Kevin said), in most applications I know of, you want to apply the character also to non-units, so down the line, using `MulChar` as the primary definition should be less painful.",
              "createdAt": "2023-09-14T17:40:29Z",
              "author": {
                "login": "MichaelStollBayreuth"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5msKoh",
              "body": "Thanks for the input @MichaelStollBayreuth and @kbuzzard! I agree that a definition from `ZMod n` might make later theorems nicer. Please have a look if what we have now makes sense, so we can build on that.",
              "createdAt": "2023-09-18T07:04:28Z",
              "author": {
                "login": "mo271"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5mt567",
              "body": "Looks good to me so far.",
              "createdAt": "2023-09-18T12:29:27Z",
              "author": {
                "login": "MichaelStollBayreuth"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5m1wPf",
              "body": "@MichaelStollBayreuth Do you think this can be merged now?",
              "createdAt": "2023-09-19T12:00:00Z",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5m105-",
              "body": "> @MichaelStollBayreuth Do you think this can be merged now?\r\n\r\nYes.",
              "createdAt": "2023-09-19T12:08:49Z",
              "author": {
                "login": "MichaelStollBayreuth"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5m13Ed",
              "body": "One small comment about using the API for periodic but LGTM, thanks!\r\n\r\nbors d+",
              "createdAt": "2023-09-19T12:13:31Z",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5m13FM",
              "body": ":v: mo271 can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests).",
              "createdAt": "2023-09-19T12:13:33Z",
              "author": {
                "login": "bors"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5m2_x2",
              "body": "bors r+",
              "createdAt": "2023-09-19T14:14:41Z",
              "author": {
                "login": "mo271"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5m3UEj",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6236806699/job/16928965137)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6236806699/job/16928966208)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6236806699/job/16928965491)",
              "createdAt": "2023-09-19T14:37:55Z",
              "author": {
                "login": "bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "2d9d9bfaad3dcbae305bb85bd7e0652d846b61db",
                "additions": 351,
                "deletions": 0,
                "committedDate": "2023-09-06T06:00:23Z",
                "author": {
                  "name": "Moritz Firsching",
                  "email": "firsching@google.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "a6eb63c43f99c7ba3966e9c97422b693a96b7e56",
                "additions": 69,
                "deletions": 63,
                "committedDate": "2023-09-07T10:43:10Z",
                "author": {
                  "name": "Moritz Firsching",
                  "email": "firsching@google.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "97b689134c3218532334dc2e112aad42d78cfd74",
                "additions": 2,
                "deletions": 250,
                "committedDate": "2023-09-07T10:48:06Z",
                "author": {
                  "name": "Moritz Firsching",
                  "email": "firsching@google.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "418670dddfae531a57d8ae53d41bccbe6d8f1578",
                "additions": 2,
                "deletions": 2,
                "committedDate": "2023-09-07T10:52:06Z",
                "author": {
                  "name": "Moritz Firsching",
                  "email": "firsching@google.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "cb06331f02c2d3c554b7296dfb95d7d550544381",
                "additions": 1,
                "deletions": 0,
                "committedDate": "2023-09-07T10:58:59Z",
                "author": {
                  "name": "Moritz Firsching",
                  "email": "firsching@google.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "cb7f3504bed2ce3ecf0630deebe774ebae49c92f",
                "additions": 4,
                "deletions": 44,
                "committedDate": "2023-09-07T11:23:30Z",
                "author": {
                  "name": "Moritz Firsching",
                  "email": "firsching@google.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "9ab97294fc30b90c120416c682ce8487006c196d",
                "additions": 2,
                "deletions": 2,
                "committedDate": "2023-09-08T05:48:39Z",
                "author": {
                  "name": "Moritz Firsching",
                  "email": "firsching@google.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "0350cadcce75c910ea0899eab787c2616b34dee7",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-09-08T09:37:39Z",
                "author": {
                  "name": "Moritz Firsching",
                  "email": "firsching@google.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "d39632a86b5ea0eac4d4fe58be5ae0c65ac9d775",
                "additions": 0,
                "deletions": 4,
                "committedDate": "2023-09-08T09:38:39Z",
                "author": {
                  "name": "Moritz Firsching",
                  "email": "firsching@google.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "8c589cd5f2bcc4a203e8b63069bf0c2893912706",
                "additions": 8,
                "deletions": 16,
                "committedDate": "2023-09-16T14:28:24Z",
                "author": {
                  "name": "laughinggas",
                  "email": "58670661+laughinggas@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "18acaf0cec10783f32123d4946376c83e7a58b98",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-09-16T14:39:53Z",
                "author": {
                  "name": "laughinggas",
                  "email": "58670661+laughinggas@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "ee223f613b7b604413fe8d518ce864e068fbb31f",
                "additions": 6,
                "deletions": 8,
                "committedDate": "2023-09-18T06:21:53Z",
                "author": {
                  "name": "Moritz Firsching",
                  "email": "firsching@google.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "22ad8e3b9dd0fbd1dc5153bb66496b9cd30af579",
                "additions": 1,
                "deletions": 2,
                "committedDate": "2023-09-18T15:31:43Z",
                "author": {
                  "name": "Moritz Firsching",
                  "email": "firsching@google.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "3d5b0abea1941deb06f3310800fc6dc7a8cd1ce4",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-09-18T15:33:07Z",
                "author": {
                  "name": "Moritz Firsching",
                  "email": "firsching@google.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "ef1308130279010eab0dc50bbfe9045b0a69292b",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-09-18T15:38:23Z",
                "author": {
                  "name": "Moritz Firsching",
                  "email": "firsching@google.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "1d13f8337a5a555dba92d347aafbd2ae997279d5",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-09-18T15:38:30Z",
                "author": {
                  "name": "Moritz Firsching",
                  "email": "firsching@google.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "c763e0bff8b5e269ac22c82ff6f9ce204d6e5133",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-09-18T15:47:38Z",
                "author": {
                  "name": "Moritz Firsching",
                  "email": "firsching@google.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "59a60190fde4b6e5f74931d83c0e8535ef4e1984",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-09-18T15:48:38Z",
                "author": {
                  "name": "Moritz Firsching",
                  "email": "firsching@google.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "a65eae30b46dccf7b9498f8234509094e9dcf4be",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-09-18T18:58:54Z",
                "author": {
                  "name": "Moritz Firsching",
                  "email": "firsching@google.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "c257cdaca0ec5d69d61de0b4e7a8619c384e57f0",
                "additions": 2,
                "deletions": 1,
                "committedDate": "2023-09-18T21:19:58Z",
                "author": {
                  "name": "Moritz Firsching",
                  "email": "firsching@google.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "53332ddd4251fa537ee21a45fe89cab8078dad65",
                "additions": 4,
                "deletions": 3,
                "committedDate": "2023-09-19T12:39:45Z",
                "author": {
                  "name": "Moritz Firsching",
                  "email": "firsching@google.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "1086ce2fe0ccc2a144b917680c7fad0b4a46102f",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-09-19T12:44:59Z",
                "author": {
                  "name": "Moritz Firsching",
                  "email": "firsching@google.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "fd14edae4434b77fc66cefe601d473f0cdb6ce01",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-09-19T12:45:54Z",
                "author": {
                  "name": "Moritz Firsching",
                  "email": "firsching@google.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "989dc5b3bbcfe0cd3c2d0d5170c0ef2d66d1c976",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-09-19T13:23:48Z",
                "author": {
                  "name": "Moritz Firsching",
                  "email": "firsching@google.com"
                },
                "statusCheckRollup": null
              }
            }
          ]
        },
        "createdAt": "2023-09-07T10:51:25Z",
        "deletions": 0,
        "files": {
          "nodes": [
            {
              "path": "Mathlib.lean",
              "additions": 1,
              "deletions": 0
            },
            {
              "path": "Mathlib/NumberTheory/DirichletCharacter/Basic.lean",
              "additions": 52,
              "deletions": 0
            },
            {
              "path": "Mathlib/NumberTheory/LegendreSymbol/MulCharacter.lean",
              "additions": 4,
              "deletions": 0
            }
          ]
        },
        "headRefName": "mo271/dirichlet_character_change_level",
        "headRefOid": "989dc5b3bbcfe0cd3c2d0d5170c0ef2d66d1c976",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5ZxQaL",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABAt13Ow",
              "color": "bfd4f2",
              "name": "delegated"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5hPRvL",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alexjbest"
              },
              "submittedAt": "2023-09-18T15:42:12Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hWFAW",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "riccardobrasca"
              },
              "submittedAt": "2023-09-19T12:43:22Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hWNwb",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-09-19T13:01:09Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hQh4F",
              "body": "",
              "state": "APPROVED",
              "author": {
                "login": "kbuzzard"
              },
              "submittedAt": "2023-09-18T18:25:47Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 7010,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": "APPROVED",
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5gTe1e",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-09-07T15:31:04Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5gTg4F",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-09-07T15:35:00Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5gXUJH",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mo271"
              },
              "submittedAt": "2023-09-08T05:48:54Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5gXUKV",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mo271"
              },
              "submittedAt": "2023-09-08T05:49:00Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5gYlku",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-09-08T09:24:54Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5gYqek",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mo271"
              },
              "submittedAt": "2023-09-08T09:37:29Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5gYq5J",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mo271"
              },
              "submittedAt": "2023-09-08T09:38:34Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5gYrlY",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mo271"
              },
              "submittedAt": "2023-09-08T09:40:05Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5g_x3k",
              "body": "My initial instinct is the same as Michael's. With Dirichlet characters you want to write things like $\\sum \\chi(n)n^{-s}$ for the L-function, and this will involve some pain if the Dirichlet character is only defined on the units (whereas there will be a coercion from the naturals to Z/mZ). I'm not sure I understand the counterarguments yet: Moritz said that using units defines chi on the smallest object possible -- but why is that a good thing? Ashvni talks about `asso_dirichlet_character` -- this seems to be the extension of the (Z/nZ)^* definition to the (Z/nZ) definition and it looks like it's some work; conversely the restriction is a triviality. I'm not sure that it will be too painful to switch to this definition; right now Ashvni's code has dirichlet characters on the units and `asso_dirichlet_character` on Z/nZ, and Michael is suggesting defining `DirichletCharacter` to be `asso_dirichlet_character` and then using this units hom trick to get what Ashvni was calling Dirichlet characters, so if Ashvni makes Michael's suggested change then all they have to do is replace their asso_dirichlet_character by DirichletCharacter and replace their Dirichlet character by the units hom map. In fact it should make the proofs simpler, because Ashvni is using `function.extend` to go one way, and this is not so easy to work with (cf their proofs of the proof fields of `asso_dirichlet_character`) whereas with the definition on all of Z/nZ the proofs should be much easier.\r\n\r\nDirichlet characters won't just be used for p-adic L-functions, they'll be used for classical L-functions and character sums and various other things, and in all these applications it makes like a lot easier to just be able to evaluate them on non-units. With Michael's approach we will see `\\chi n` whereas with Ashvni's we'll see `asso_dirichlet_character \\chi n`.\r\n\r\nIn short I am not concerned about proofs breaking with this change -- I think that they might get easier.",
              "state": "COMMENTED",
              "author": {
                "login": "kbuzzard"
              },
              "submittedAt": "2023-09-14T16:34:38Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hPJSH",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alexjbest"
              },
              "submittedAt": "2023-09-18T15:30:34Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hPKCp",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alexjbest"
              },
              "submittedAt": "2023-09-18T15:32:12Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hPKnJ",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mo271"
              },
              "submittedAt": "2023-09-18T15:33:04Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hPK39",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alexjbest"
              },
              "submittedAt": "2023-09-18T15:33:31Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hPLYo",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alexjbest"
              },
              "submittedAt": "2023-09-18T15:35:07Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hPMQt",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alexjbest"
              },
              "submittedAt": "2023-09-18T15:35:28Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hPNG6",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alexjbest"
              },
              "submittedAt": "2023-09-18T15:36:21Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hPPD6",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mo271"
              },
              "submittedAt": "2023-09-18T15:39:27Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hPPpF",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mo271"
              },
              "submittedAt": "2023-09-18T15:40:06Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hPRvL",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alexjbest"
              },
              "submittedAt": "2023-09-18T15:42:12Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hPU4b",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mo271"
              },
              "submittedAt": "2023-09-18T15:48:04Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hPVRr",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mo271"
              },
              "submittedAt": "2023-09-18T15:48:50Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hQh4F",
              "body": "",
              "state": "APPROVED",
              "author": {
                "login": "kbuzzard"
              },
              "submittedAt": "2023-09-18T18:25:47Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hVs7t",
              "body": "",
              "state": "APPROVED",
              "author": {
                "login": "riccardobrasca"
              },
              "submittedAt": "2023-09-19T12:02:00Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hWDqO",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mo271"
              },
              "submittedAt": "2023-09-19T12:40:24Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hWDyO",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mo271"
              },
              "submittedAt": "2023-09-19T12:40:40Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hWFAW",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "riccardobrasca"
              },
              "submittedAt": "2023-09-19T12:43:22Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hWFg1",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mo271"
              },
              "submittedAt": "2023-09-19T12:44:28Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hWFwJ",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-09-19T12:45:01Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hWGQ2",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mo271"
              },
              "submittedAt": "2023-09-19T12:46:08Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hWNwb",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-09-19T13:01:09Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hWazG",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mo271"
              },
              "submittedAt": "2023-09-19T13:23:38Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hWa_R",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mo271"
              },
              "submittedAt": "2023-09-19T13:24:01Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5OmxQQ",
                    "body": "Better \"The type of Dirichlet characters of level `n`\".\r\n(The current version sounds like there is exactly one Dirichlet character of level `n`, which is `DirichletCharacter R n`.)",
                    "createdAt": "2023-09-07T15:31:04Z",
                    "author": {
                      "login": "MichaelStollBayreuth"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5OpFS3",
                    "body": "Yes, much better, done",
                    "createdAt": "2023-09-08T05:48:54Z",
                    "author": {
                      "login": "mo271"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Omye5",
                    "body": "`conv_lhs => rw [← ha.unit_spec]` should also work.",
                    "createdAt": "2023-09-07T15:34:59Z",
                    "author": {
                      "login": "MichaelStollBayreuth"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5OpFTy",
                    "body": "done",
                    "createdAt": "2023-09-08T05:48:59Z",
                    "author": {
                      "login": "mo271"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Op46F",
                    "body": "`m` could be implicit here (it can be deduced from `hm`).",
                    "createdAt": "2023-09-08T09:24:53Z",
                    "author": {
                      "login": "MichaelStollBayreuth"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5Op819",
                    "body": "done",
                    "createdAt": "2023-09-08T09:40:05Z",
                    "author": {
                      "login": "mo271"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Op8JK",
                    "body": "```suggestion\r\nlemma isPeriodic {m : ℕ} (hm : n ∣ m) (a : ℤ) :\r\n```",
                    "createdAt": "2023-09-08T09:37:29Z",
                    "author": {
                      "login": "mo271"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Op8bz",
                    "body": "```suggestion\r\n```\r\n```suggestion\r\n-- TODO: move to Data.ZMod.Basic?!\r\n@[simp]\r\nlemma cast_hom_self {n : ℕ} : ZMod.castHom dvd_rfl (ZMod n) = RingHom.id (ZMod n) :=\r\n  RingHom.ext_zmod (ZMod.castHom dvd_rfl (ZMod n)) (RingHom.id (ZMod n))\r\n```",
                    "createdAt": "2023-09-08T09:38:33Z",
                    "author": {
                      "login": "mo271"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5PNY0s",
                    "body": "```suggestion\r\nabbrev DirichletCharacter (R : Type) [CommMonoidWithZero R] (n : ℕ) := MulChar (ZMod n) R\r\n```",
                    "createdAt": "2023-09-18T15:30:33Z",
                    "author": {
                      "login": "alexjbest"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5PNZS_",
                    "body": "```suggestion\r\n    (x : R) : χ.toMonoidHom x = χ x := rfl\r\n```\r\n(untested but I would expect it to work)",
                    "createdAt": "2023-09-18T15:32:11Z",
                    "author": {
                      "login": "alexjbest"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PNZqd",
                    "body": "yes, it does",
                    "createdAt": "2023-09-18T15:33:04Z",
                    "author": {
                      "login": "mo271"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5PNZ0M",
                    "body": "This name seems the right name for the reversed statement to the statement",
                    "createdAt": "2023-09-18T15:33:30Z",
                    "author": {
                      "login": "alexjbest"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PNcjE",
                    "body": "will change to the reversed statement...",
                    "createdAt": "2023-09-18T15:40:06Z",
                    "author": {
                      "login": "mo271"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PNfY3",
                    "body": "done",
                    "createdAt": "2023-09-18T15:48:04Z",
                    "author": {
                      "login": "mo271"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5PNaIV",
                    "body": "Is this used later? it seems a bit odd to have it as a lemma if the proof is just `by simp`",
                    "createdAt": "2023-09-18T15:34:32Z",
                    "author": {
                      "login": "alexjbest"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PNcNV",
                    "body": "yes, we plan to use it later, but we can also add it later...",
                    "createdAt": "2023-09-18T15:39:27Z",
                    "author": {
                      "login": "mo271"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PNdpn",
                    "body": "Ok I would probably call it `eval_modulus_sub` or something like that",
                    "createdAt": "2023-09-18T15:42:12Z",
                    "author": {
                      "login": "alexjbest"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PNfnm",
                    "body": "done",
                    "createdAt": "2023-09-18T15:48:50Z",
                    "author": {
                      "login": "mo271"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5PNapT",
                    "body": "```suggestion\r\nLet `R` be a commutative monoid with zero. A Dirichlet character `χ` of level `n` over `R` is a\r\n```",
                    "createdAt": "2023-09-18T15:35:27Z",
                    "author": {
                      "login": "alexjbest"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5PNbEx",
                    "body": "```suggestion\r\n    χ (a + m) = χ a := by\r\n```",
                    "createdAt": "2023-09-18T15:36:21Z",
                    "author": {
                      "login": "alexjbest"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5PONRE",
                    "body": "```suggestion\r\nmultiplicative character from `ZMod n` to `R` sending non-units to 0. We then obtain some properties of `toUnitHom χ`, the restriction of `χ` to a group homomorphism `(ZMod n)ˣ →* Rˣ`.\r\n```",
                    "createdAt": "2023-09-18T18:25:11Z",
                    "author": {
                      "login": "kbuzzard"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5PRjuT",
                    "body": "Maybe we want to use [Function.Periodic](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Periodic.html#Function.Periodic) (to have all the API)?",
                    "createdAt": "2023-09-19T12:01:47Z",
                    "author": {
                      "login": "riccardobrasca"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PRypR",
                    "body": "Is `isPeriodic` a good name?",
                    "createdAt": "2023-09-19T12:40:24Z",
                    "author": {
                      "login": "mo271"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PRyvP",
                    "body": "done: now using `Function.Periodic`",
                    "createdAt": "2023-09-19T12:40:40Z",
                    "author": {
                      "login": "mo271"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PRzke",
                    "body": "Looking at stuff like [Real.sin_periodic](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/SpecialFunctions/Trigonometric/Basic.html#Real.sin_periodic) I don't see a clear convention.. maybe just `periodic`, but I don't think it is very important, we can always change it later.",
                    "createdAt": "2023-09-19T12:43:22Z",
                    "author": {
                      "login": "riccardobrasca"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PRz4o",
                    "body": "ok, changing it to `periodic`",
                    "createdAt": "2023-09-19T12:44:28Z",
                    "author": {
                      "login": "mo271"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5PR0C1",
                    "body": "`lemma isPeriodic {m : ℕ} (hm : n ∣ m) : Function.Periodic χ m := by`\r\n(`a` is no longer necessary as an argument; I assume the linter will complain anyway...)",
                    "createdAt": "2023-09-19T12:45:01Z",
                    "author": {
                      "login": "MichaelStollBayreuth"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PR0X9",
                    "body": "done",
                    "createdAt": "2023-09-19T12:46:08Z",
                    "author": {
                      "login": "mo271"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5PR5PF",
                    "body": "Are the two spaces at the beginning of the line there by mistake?",
                    "createdAt": "2023-09-19T13:01:09Z",
                    "author": {
                      "login": "MichaelStollBayreuth"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PSAzG",
                    "body": "yes, coming from using the github ui to fix the line length lint...",
                    "createdAt": "2023-09-19T13:23:38Z",
                    "author": {
                      "login": "mo271"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PSA6X",
                    "body": "fixed",
                    "createdAt": "2023-09-19T13:24:01Z",
                    "author": {
                      "login": "mo271"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjM0OTE2Mjc=",
              "login": "mo271"
            },
            {
              "id": "U_kgDOBfNrCg",
              "login": "MichaelStollBayreuth"
            },
            {
              "id": "MDQ6VXNlcjU4NjcwNjYx",
              "login": "laughinggas"
            },
            {
              "id": "U_kgDOB75MNQ",
              "login": "leanprover-community-mathlib4-bot"
            },
            {
              "id": "MDQ6VXNlcjMyNDkwNTMy",
              "login": "riccardobrasca"
            },
            {
              "id": "MDQ6VXNlcjE2ODg1MzM=",
              "login": "alexjbest"
            },
            {
              "id": "MDQ6VXNlcjMxODY3ODI3",
              "login": "kbuzzard"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": null,
        "title": "[Merged by Bors] - feat: Dirichlet character",
        "updatedAt": "2023-09-19T14:38:01Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/7010",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "2d9d9bfaad3dcbae305bb85bd7e0652d846b61db"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "a6eb63c43f99c7ba3966e9c97422b693a96b7e56"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "97b689134c3218532334dc2e112aad42d78cfd74"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "418670dddfae531a57d8ae53d41bccbe6d8f1578"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "cb06331f02c2d3c554b7296dfb95d7d550544381"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5l7APQ",
              "createdAt": "2023-09-07T11:14:33Z",
              "body": "This is part of a port of \r\nhttps://github.com/laughinggas/p-adic-L-functions/blob/main/src/dirichlet_character/basic.lean",
              "author": {
                "login": "mo271"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "cb7f3504bed2ce3ecf0630deebe774ebae49c92f"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5wZLgSzwAAAAJmVxa6",
              "createdAt": "2023-09-07T12:39:12Z",
              "label": {
                "id": "MDU6TGFiZWwzMjg4OTQyMDg2",
                "name": "blocked-by-other-PR"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5l8fBN",
              "createdAt": "2023-09-07T15:26:50Z",
              "body": "Is there a specific reason for not using `MulChar (ZMod n) R` as the definition of `DirichletCharacter R n`?",
              "author": {
                "login": "MichaelStollBayreuth"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5l8gJR",
              "createdAt": "2023-09-07T15:29:53Z",
              "body": "Also, there is maybe some ambiguity as to what should be the correct definition of a \"Dirichlet character mod n\".\r\nI'm more used to it being defined as a map from the integers to (some monoid with zero) R that is obtained as the composition of the reduction map $\\mathbb Z \\to \\mathbb Z/n \\mathbb Z$ and a multiplicative character on $\\mathbb Z/n \\mathbb Z$. Of course, both versions are equivalent, and it is perhaps a question of what is more convenient...",
              "author": {
                "login": "MichaelStollBayreuth"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5gTe1e",
              "createdAt": "2023-09-07T15:31:04Z",
              "body": "",
              "author": {
                "login": "MichaelStollBayreuth"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5gTg4F",
              "createdAt": "2023-09-07T15:34:59Z",
              "body": "",
              "author": {
                "login": "MichaelStollBayreuth"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5l_TgE",
              "createdAt": "2023-09-08T05:24:52Z",
              "body": "> Is there a specific reason for not using `MulChar (ZMod n) R` as the definition of `DirichletCharacter R n`?\r\n\r\nI thought it makes sense to give it a separate name since there will be a few files on it. Also, I think `MulChar` is more in sync with `asso_dirichlet_character`, which has now been replaced in terms of `ofUnitHom`.",
              "author": {
                "login": "laughinggas"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5l_Urj",
              "createdAt": "2023-09-08T05:30:58Z",
              "body": "> Also, there is maybe some ambiguity as to what should be the correct definition of a \"Dirichlet character mod n\". I'm more used to it being defined as a map from the integers to (some monoid with zero) R that is obtained as the composition of the reduction map Z→Z/nZ and a multiplicative character on Z/nZ. Of course, both versions are equivalent, and it is perhaps a question of what is more convenient...\r\n\r\nI have at least 300-500 lines of code (in the folder `dirichlet_character` here : https://github.com/laughinggas/p-adic-L-functions/tree/main/src/dirichlet_character )  based on this definition. It comes with a lot of nice properties such as `change_level`, which is a monoid homomorphism. One can choose to make a second definition as a function from the integers (I am happy to contribute to that!), and show the equivalence of the two definitions.",
              "author": {
                "login": "laughinggas"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "9ab97294fc30b90c120416c682ce8487006c196d"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5wZLgSzwAAAAJm3IA1",
              "createdAt": "2023-09-08T09:02:30Z",
              "label": {
                "id": "MDU6TGFiZWwzMjg4OTQyMDg2",
                "name": "blocked-by-other-PR"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5mANOA",
              "createdAt": "2023-09-08T09:02:32Z",
              "body": "This PR/issue depends on:\n* ~~leanprover-community/mathlib4#7013~~\nBy **[Dependent Issues](https://github.com/z0al/dependent-issues)** (🤖). Happy coding!\n<!-- By Dependent Issues (Action) - DO NOT REMOVE -->",
              "author": {
                "login": "leanprover-community-mathlib4-bot"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5mARiM",
              "createdAt": "2023-09-08T09:15:32Z",
              "body": "> > Is there a specific reason for not using `MulChar (ZMod n) R` as the definition of `DirichletCharacter R n`?\r\n> \r\n> I thought it makes sense to give it a separate name since there will be a few files on it. Also, I think `MulChar` is more in sync with `asso_dirichlet_character`, which has now been replaced in terms of `ofUnitHom`.\r\n\r\nIt certainly makes sense to give it a separate name. What I mean is why not define it as\r\n```lean\r\n@[reducible] def DirichletCharacter (R : Type) [CommMonoidWithZero R] (n : ℕ) := MulChar (ZMod n) R\r\n```\r\ninstead? The rationale being that in many (most?) applications, you also want to evaluate the characters at non-units. (And, of course, that there is already an API for `MulChar`s.)",
              "author": {
                "login": "MichaelStollBayreuth"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5mATOr",
              "createdAt": "2023-09-08T09:20:54Z",
              "body": "> > Also, there is maybe some ambiguity as to what should be the correct definition of a \"Dirichlet character mod n\". I'm more used to it being defined as a map from the integers to (some monoid with zero) R that is obtained as the composition of the reduction map Z→Z/nZ and a multiplicative character on Z/nZ. Of course, both versions are equivalent, and it is perhaps a question of what is more convenient...\r\n> \r\n> I have at least 300-500 lines of code (in the folder `dirichlet_character` here : https://github.com/laughinggas/p-adic-L-functions/tree/main/src/dirichlet_character ) based on this definition. It comes with a lot of nice properties such as `change_level`, which is a monoid homomorphism. One can choose to make a second definition as a function from the integers (I am happy to contribute to that!), and show the equivalence of the two definitions.\r\n\r\nAfter some consideration, I think it is best to use `MulChar (ZMod n) R` (as opposed to maps from integers to `R`), since if `χ` is an object of this type, `χ a` for an integer `a` just works. And, as you indicate, this definition seems to be better suited for proving properties (which, I think, comes down to the fact that the units of `ZMod n` are a thing, whereas their preimage in the integers isn't really).",
              "author": {
                "login": "MichaelStollBayreuth"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5gYlku",
              "createdAt": "2023-09-08T09:24:53Z",
              "body": "",
              "author": {
                "login": "MichaelStollBayreuth"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5mAUjg",
              "createdAt": "2023-09-08T09:25:15Z",
              "body": "> > > Is there a specific reason for not using `MulChar (ZMod n) R` as the definition of `DirichletCharacter R n`?\r\n> > \r\n> > \r\n> > I thought it makes sense to give it a separate name since there will be a few files on it. Also, I think `MulChar` is more in sync with `asso_dirichlet_character`, which has now been replaced in terms of `ofUnitHom`.\r\n> \r\n> It certainly makes sense to give it a separate name. What I mean is why not define it as\r\n> \r\n> ```lean\r\n> @[reducible] def DirichletCharacter (R : Type) [CommMonoidWithZero R] (n : ℕ) := MulChar (ZMod n) R\r\n> ```\r\n> \r\n> instead? The rationale being that in many (most?) applications, you also want to evaluate the characters at non-units. (And, of course, that there is already an API for `MulChar`s.)\r\n\r\nIf you look at the following : https://github.com/laughinggas/p-adic-L-functions/blob/88c5750b71f90ae9a9964968f4eabcb994d6d279/src/dirichlet_character/basic.lean#L54 , I think the definition of `MulChar` is related more to `asso_dirichlet_character`. I removed the definition of `asso_dirichlet_character` from this port and have instead used the properties of `MulChar` instead.",
              "author": {
                "login": "laughinggas"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5gYqek",
              "createdAt": "2023-09-08T09:37:29Z",
              "body": "",
              "author": {
                "login": "mo271"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "0350cadcce75c910ea0899eab787c2616b34dee7"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5gYq5J",
              "createdAt": "2023-09-08T09:38:33Z",
              "body": "",
              "author": {
                "login": "mo271"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "d39632a86b5ea0eac4d4fe58be5ae0c65ac9d775"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5mAbTt",
              "createdAt": "2023-09-08T09:45:25Z",
              "body": "Defining it as `(ZMod n)ˣ →* Rˣ` has the conceptual advantage of defining it on the smallest possible object, instead of either on `ZMod n` or even `\\Z` with extra conditions. I agree that we should have convenient api to switch between the different incarnations.",
              "author": {
                "login": "mo271"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5mAe7h",
              "createdAt": "2023-09-08T09:57:08Z",
              "body": "OK; I guess the one reason why you want to work with homomorphisms on the unit group is that this gives you the correct notion of changing the level. I would suggest using the `MulChar` definition as the main one and then go via the equivalence to \"unit homs\" (`toUnitHom`/`ofUnitHom`) to do the level change etc:\r\n\r\n```lean\r\ndef ZMod.unitsMap {n m : ℕ} (hm : n ∣ m) : (ZMod m)ˣ →* (ZMod n)ˣ := Units.map (ZMod.castHom hm (ZMod n))\r\n\r\n@[reducible]\r\ndef DirichletCharacter (R : Type) [CommMonoidWithZero R] (n : ℕ) := MulChar (ZMod n) R\r\n\r\nnamespace DirichletCharacter\r\n\r\nnoncomputable def change_level {R : Type} [CommMonoidWithZero R] {n m : ℕ} (hm : n ∣ m) :\r\n    DirichletCharacter R n →* DirichletCharacter R m :=\r\n  { toFun := fun ψ ↦ MulChar.ofUnitHom (ψ.toUnitHom.comp (ZMod.unitsMap hm)),\r\n    map_one' := by ext; simp,\r\n    map_mul' := fun ψ₁ ψ₂ ↦ by ext; simp }\r\n```\r\n(I was working on that while you were already answering; this refers to the earlier point.\r\nEDIT: (hopefully) corrected `units_map` to `unitsMap`...)",
              "author": {
                "login": "MichaelStollBayreuth"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5mZ0co",
              "createdAt": "2023-09-13T17:34:49Z",
              "body": "> OK; I guess the one reason why you want to work with homomorphisms on the unit group is that this gives you the correct notion of changing the level. I would suggest using the `MulChar` definition as the main one and then go via the equivalence to \"unit homs\" (`toUnitHom`/`ofUnitHom`) to do the level change etc:\r\n> \r\n> ```lean\r\n> def ZMod.unitsMap {n m : ℕ} (hm : n ∣ m) : (ZMod m)ˣ →* (ZMod n)ˣ := Units.map (ZMod.castHom hm (ZMod n))\r\n> \r\n> @[reducible]\r\n> def DirichletCharacter (R : Type) [CommMonoidWithZero R] (n : ℕ) := MulChar (ZMod n) R\r\n> \r\n> namespace DirichletCharacter\r\n> \r\n> noncomputable def change_level {R : Type} [CommMonoidWithZero R] {n m : ℕ} (hm : n ∣ m) :\r\n>     DirichletCharacter R n →* DirichletCharacter R m :=\r\n>   { toFun := fun ψ ↦ MulChar.ofUnitHom (ψ.toUnitHom.comp (ZMod.unitsMap hm)),\r\n>     map_one' := by ext; simp,\r\n>     map_mul' := fun ψ₁ ψ₂ ↦ by ext; simp }\r\n> ```\r\n> \r\n> (I was working on that while you were already answering; this refers to the earlier point. EDIT: (hopefully) corrected `units_map` to `unitsMap`...)\r\n\r\n`change_level` is not the only reason I wish to work with the units. I am using Dirichlet characters to define the p-adic L-function. The definition of the p-adic L-function (attached below) and its properties (which is about 3000-5000 lines of code) depend on the Dirichlet character being defined on the units. I understand that this is equivalent to the definition you have given, however, it is not the same. Your definition coincides with the definition of the associated Dirichlet character, `asso_dirichlet_character` in the p-adic L-functions repository, which I reworded in terms of `MulChar.ofUnitHom`. The main reason why I am hesitant to completely remove the units is because it will involve rewriting a lot of proofs going ahead.\r\n\r\n![image](https://github.com/leanprover-community/mathlib4/assets/58670661/76215124-e07a-4cad-be37-1d71cebf2a0e)\r\n\r\n![image](https://github.com/leanprover-community/mathlib4/assets/58670661/ce03abcb-f36a-423e-9e9c-c5cc65b1d312)\r\n",
              "author": {
                "login": "laughinggas"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5mZ7Nr",
              "createdAt": "2023-09-13T17:55:21Z",
              "body": "@MichaelStollBayreuth I can change the definition to be the following :\r\n`def DirichletCharacter (R : Type) [CommMonoidWithZero R] (n : ℕ) := MulChar.toUnitHom (ZMod n) R `\r\nbut given the equivalence `equivToUnitHom`, I think it might be easier to keep the original definition?\r\n\r\nYour help is much appreciated, thank you!",
              "author": {
                "login": "laughinggas"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "ReviewRequestedEvent",
              "id": "RRE_lADOFcwZ1c5wZLgSzwAAAAJpqwNG",
              "createdAt": "2023-09-13T17:59:17Z",
              "requestedReviewer": {
                "id": "MDQ6VXNlcjMxODY3ODI3",
                "login": "kbuzzard"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5g_x3k",
              "createdAt": "2023-09-14T16:34:38Z",
              "body": "My initial instinct is the same as Michael's. With Dirichlet characters you want to write things like $\\sum \\chi(n)n^{-s}$ for the L-function, and this will involve some pain if the Dirichlet character is only defined on the units (whereas there will be a coercion from the naturals to Z/mZ). I'm not sure I understand the counterarguments yet: Moritz said that using units defines chi on the smallest object possible -- but why is that a good thing? Ashvni talks about `asso_dirichlet_character` -- this seems to be the extension of the (Z/nZ)^* definition to the (Z/nZ) definition and it looks like it's some work; conversely the restriction is a triviality. I'm not sure that it will be too painful to switch to this definition; right now Ashvni's code has dirichlet characters on the units and `asso_dirichlet_character` on Z/nZ, and Michael is suggesting defining `DirichletCharacter` to be `asso_dirichlet_character` and then using this units hom trick to get what Ashvni was calling Dirichlet characters, so if Ashvni makes Michael's suggested change then all they have to do is replace their asso_dirichlet_character by DirichletCharacter and replace their Dirichlet character by the units hom map. In fact it should make the proofs simpler, because Ashvni is using `function.extend` to go one way, and this is not so easy to work with (cf their proofs of the proof fields of `asso_dirichlet_character`) whereas with the definition on all of Z/nZ the proofs should be much easier.\r\n\r\nDirichlet characters won't just be used for p-adic L-functions, they'll be used for classical L-functions and character sums and various other things, and in all these applications it makes like a lot easier to just be able to evaluate them on non-units. With Michael's approach we will see `\\chi n` whereas with Ashvni's we'll see `asso_dirichlet_character \\chi n`.\r\n\r\nIn short I am not concerned about proofs breaking with this change -- I think that they might get easier.",
              "author": {
                "login": "kbuzzard"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5mg0Nw",
              "createdAt": "2023-09-14T17:40:29Z",
              "body": "Sorry for being slow to reply (I'm trying to finish a long and involved paper...).\r\nBut Kevin has already pretty much said what I would have written. In particular, you can applpy a `MulHom` to units via the coercions from units to the monoid, and you can get the homomorphism on units via `toUnitHom` if you need it. Also (again repeating what Kevin said), in most applications I know of, you want to apply the character also to non-units, so down the line, using `MulChar` as the primary definition should be less painful.",
              "author": {
                "login": "MichaelStollBayreuth"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "8c589cd5f2bcc4a203e8b63069bf0c2893912706"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "18acaf0cec10783f32123d4946376c83e7a58b98"
              }
            },
            {
              "__typename": "BaseRefChangedEvent"
            },
            {
              "__typename": "BaseRefChangedEvent"
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "ee223f613b7b604413fe8d518ce864e068fbb31f"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5msKoh",
              "createdAt": "2023-09-18T07:04:28Z",
              "body": "Thanks for the input @MichaelStollBayreuth and @kbuzzard! I agree that a definition from `ZMod n` might make later theorems nicer. Please have a look if what we have now makes sense, so we can build on that.",
              "author": {
                "login": "mo271"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "ReadyForReviewEvent",
              "id": "RFRE_lADOFcwZ1c5wZLgSzwAAAAJriF93",
              "createdAt": "2023-09-18T07:04:30Z"
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5wZLgSzwAAAAJriGiv",
              "createdAt": "2023-09-18T07:04:47Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5mt567",
              "createdAt": "2023-09-18T12:29:27Z",
              "body": "Looks good to me so far.",
              "author": {
                "login": "MichaelStollBayreuth"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5hPJSH",
              "createdAt": "2023-09-18T15:30:33Z",
              "body": "",
              "author": {
                "login": "alexjbest"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "22ad8e3b9dd0fbd1dc5153bb66496b9cd30af579"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5hPKCp",
              "createdAt": "2023-09-18T15:32:11Z",
              "body": "",
              "author": {
                "login": "alexjbest"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "3d5b0abea1941deb06f3310800fc6dc7a8cd1ce4"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5hPK39",
              "createdAt": "2023-09-18T15:33:30Z",
              "body": "",
              "author": {
                "login": "alexjbest"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5hPLYo",
              "createdAt": "2023-09-18T15:34:32Z",
              "body": "",
              "author": {
                "login": "alexjbest"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5hPMQt",
              "createdAt": "2023-09-18T15:35:27Z",
              "body": "",
              "author": {
                "login": "alexjbest"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5hPNG6",
              "createdAt": "2023-09-18T15:36:21Z",
              "body": "",
              "author": {
                "login": "alexjbest"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "ef1308130279010eab0dc50bbfe9045b0a69292b"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "1d13f8337a5a555dba92d347aafbd2ae997279d5"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "c763e0bff8b5e269ac22c82ff6f9ce204d6e5133"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "59a60190fde4b6e5f74931d83c0e8535ef4e1984"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5hQh4F",
              "createdAt": "2023-09-18T18:25:11Z",
              "body": "",
              "author": {
                "login": "kbuzzard"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "a65eae30b46dccf7b9498f8234509094e9dcf4be"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "c257cdaca0ec5d69d61de0b4e7a8619c384e57f0"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5m1wPf",
              "createdAt": "2023-09-19T12:00:00Z",
              "body": "@MichaelStollBayreuth Do you think this can be merged now?",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5hVs7t",
              "createdAt": "2023-09-19T12:01:46Z",
              "body": "",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5m105-",
              "createdAt": "2023-09-19T12:08:49Z",
              "body": "> @MichaelStollBayreuth Do you think this can be merged now?\r\n\r\nYes.",
              "author": {
                "login": "MichaelStollBayreuth"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5m13Ed",
              "createdAt": "2023-09-19T12:13:31Z",
              "body": "One small comment about using the API for periodic but LGTM, thanks!\r\n\r\nbors d+",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5m13FM",
              "createdAt": "2023-09-19T12:13:33Z",
              "body": ":v: mo271 can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests).",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5wZLgSzwAAAAJseAZm",
              "createdAt": "2023-09-19T12:13:46Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABAt13Ow",
                "name": "delegated"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5wZLgSzwAAAAJseAdI",
              "createdAt": "2023-09-19T12:13:48Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "53332ddd4251fa537ee21a45fe89cab8078dad65"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "1086ce2fe0ccc2a144b917680c7fad0b4a46102f"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5hWFwJ",
              "createdAt": "2023-09-19T12:45:00Z",
              "body": "",
              "author": {
                "login": "MichaelStollBayreuth"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "fd14edae4434b77fc66cefe601d473f0cdb6ce01"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5hWNwb",
              "createdAt": "2023-09-19T13:01:08Z",
              "body": "",
              "author": {
                "login": "MichaelStollBayreuth"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "989dc5b3bbcfe0cd3c2d0d5170c0ef2d66d1c976"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5m2_x2",
              "createdAt": "2023-09-19T14:14:41Z",
              "body": "bors r+",
              "author": {
                "login": "mo271"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5m3UEj",
              "createdAt": "2023-09-19T14:37:55Z",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6236806699/job/16928965137)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6236806699/job/16928966208)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6236806699/job/16928965491)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c5wZLgSzwAAAAJslHvD",
              "createdAt": "2023-09-19T14:37:57Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c5wZLgSzwAAAAJslH-k",
              "createdAt": "2023-09-19T14:38:01Z"
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5OfaQz",
              "createdAt": "2023-09-19T20:31:02Z",
              "source": {
                "id": "PR_kwDOFcwZ1c5atuXi",
                "title": "[Merged by Bors] - feat: changeLevel for Dirichlet characters",
                "url": "https://github.com/leanprover-community/mathlib4/pull/7263"
              }
            },
            {
              "__typename": "ReferencedEvent"
            }
          ]
        }
      }
    }
  }
}
