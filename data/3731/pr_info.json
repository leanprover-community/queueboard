{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 1655,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "YaelDillies"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "This is a proposal to rename what was in mathlib `Group` and in mathlib4 `GroupCat` to its literature name `Grp`. This has the advantage not to conflict with `group` that has been capitalised to `Group` and to be shorter.\n\n---\n<!-- The text above the `---` will become the commit message when your\nPR is merged. Please leave a blank newline before the `---`, otherwise\nGitHub will format the text above it as a title.\n\nTo indicate co-authors, include lines at the bottom of the commit message\n(that is, before the `---`) using the following format:\n\nCo-authored-by: Author Name <author@email.com>\n\nAny other comments you want to keep out of the PR commit should go\nbelow the `---`, and placed outside this HTML comment, or else they\nwill be invisible to reviewers.\n\nIf this PR depends on other PRs, please list them below this comment,\nusing the following format:\n- [ ] depends on: #abc [optional extra text]\n- [ ] depends on: #xyz [optional extra text]\n-->\n\nA similar decision could be applied to `ModuleCat` and `MonCat`.\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\n",
        "changedFiles": 70,
        "closed": true,
        "closedAt": "2024-06-20T02:21:41Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5bIBnp",
              "body": "The `Cat` suffix was added intentionally, see \r\nhttps://github.com/leanprover-community/mathlib4/wiki/Porting-wiki#categories \"Categories are suffixed with `Cat`\"",
              "createdAt": "2023-04-29T17:05:00Z",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5bIHSg",
              "body": "Yes I know. This is an alternative to that last resort solution.",
              "createdAt": "2023-04-29T19:13:43Z",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5dQ0sP",
              "body": "Please reach a consensus about this renaming on Zulip first",
              "createdAt": "2023-05-26T17:14:45Z",
              "author": {
                "login": "fpvandoorn"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5dQ2BK",
              "body": "It seems like the consensus is that this is a good thing. @semorrison, can you confirm?",
              "createdAt": "2023-05-26T17:20:07Z",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5gG5KG",
              "body": "Could you link to Zulip discussion, please?",
              "createdAt": "2023-06-29T04:39:00Z",
              "author": {
                "login": "urkud"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5lBBDS",
              "body": "See https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Naming.20convention/near/354445098 and below.",
              "createdAt": "2023-08-27T21:24:00Z",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6AZJgc",
              "body": "### Import summary\n\n<details><summary>Dependency changes</summary>\n\n| File | Base Count | Head Count | Change |\n| --- | --- | --- | --- |\n| Mathlib.Algebra.Category.GroupCat.EquivalenceGroupAddGroup | 490 | 0 | -490 (-100.00%) |\n| Mathlib.Analysis.Normed.Group.SemiNormedGroupCat | 1114 | 0 | -1114 (-100.00%) |\n</details>",
              "createdAt": "2024-06-07T05:27:59Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6Ag99Z",
              "body": "### PR summary [d7c9e44165](https://github.com/leanprover-community/mathlib4/pull/3731/commits/d7c9e441653cb41e56989fd20da70313ee17a685)\n\n#### Import changes\n\nDependency changes\n\n| File | Base Count | Head Count | Change |\n| --- | --- | --- | --- |\n| Mathlib.Algebra.Category.GroupCat.EquivalenceGroupAddGroup | 461 | 0 | -461 (-100.00%) |\n| Mathlib.Analysis.Normed.Group.SemiNormedGroupCat | 1094 | 0 | -1094 (-100.00%) |\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ AddCommGrp.coyonedaObjIsoForget`\n`+ AddCommGrp.forget_corepresentable`\n`+ AddGrp.coyonedaObjIsoForget`\n`+ AddGrp.forget_corepresentable`\n`+ CommGrp`\n`+ CommGrp.coyonedaObjIsoForget`\n`+ CommGrp.forget_corepresentable`\n`+ CommGrp.forget_reflects_isos`\n`+ CommGrp.forget₂CommMonAdj`\n`+ Grp`\n`+ Grp.coyonedaObjIsoForget`\n`+ Grp.forget_corepresentable`\n`+ Grp.forget_reflects_isos`\n`+ Grp.forget₂MonAdj`\n`+ GrpWithZero`\n`+ MonoidHom.comp_id_commGrp`\n`+ MonoidHom.comp_id_grp`\n`+ MonoidHom.id_commGrp_comp`\n`+ MonoidHom.id_grp_comp`\n`+ MulEquiv.toCommGrpIso`\n`+ MulEquiv.toGrpIso`\n`+ MulEquiv.toSemigrpIso`\n`+ SemiNormedGrp`\n`+ SemiNormedGrp₁`\n`+ Semigrp`\n`+ Semigrp.forgetReflectsIsos`\n`+ Semigrp.forget₂_full`\n`+ forget_commGrp_preserves_epi`\n`+ forget_commGrp_preserves_mono`\n`+ forget_grp_preserves_epi`\n`+ forget_grp_preserves_mono`\n`+ forget₂_addCommGrp_additive`\n`+ forget₂_addCommGrp_essSurj`\n`+ hasForgetToAddCommGrp`\n`+ instance (G : CommGrp) : CommGroup <| (forget CommGrp).obj G`\n`+ instance (G : Grp) : Group G.α`\n`+ instance (G H : CommGrp) : One (G ⟶ H) := (inferInstance : One (MonoidHom G H))`\n`+ instance (G H : Grp) : One (G ⟶ H) := (inferInstance : One (MonoidHom G H))`\n`+ instance (M : SemiNormedGrp) : SeminormedAddCommGroup M`\n`+ instance (M : SemiNormedGrp₁) : SeminormedAddCommGroup M`\n`+ instance (P Q : AddCommGrp) : AddCommGroup (P ⟶ Q)`\n`+ instance (X : Grp) : Group X := X.str`\n`+ instance (X : GrpWithZero) : GroupWithZero X`\n`+ instance (X : Semigrp) : Semigroup X := X.str`\n`+ instance (X Y : SemiNormedGrp₁) : Zero (X ⟶ Y)`\n`+ instance : (forget AddCommGrp.{u}).IsRightAdjoint`\n`+ instance : (forget Grp.{u}).IsRightAdjoint`\n`+ instance : (forget₂ (ModuleCat.{v} R) AddCommGrp.{v}).ReflectsIsomorphisms`\n`+ instance : (forget₂ CommGrp.{u} Grp.{u}).ReflectsIsomorphisms`\n`+ instance : Abelian AddCommGrp.{u}`\n`+ instance : Coe CommGrp.{u} CommMonCat.{u} where coe := (forget₂ CommGrp CommMonCat).obj`\n`+ instance : Coe CommGrp.{u} Grp.{u} where coe := (forget₂ CommGrp Grp).obj`\n`+ instance : Coe Grp.{u} MonCat.{u} where coe := (forget₂ Grp MonCat).obj`\n`+ instance : CoeSort CommGrp Type*`\n`+ instance : CoeSort Grp Type*`\n`+ instance : CoeSort GrpWithZero Type*`\n`+ instance : CoeSort SemiNormedGrp Type*`\n`+ instance : CoeSort SemiNormedGrp₁ Type*`\n`+ instance : CoeSort Semigrp Type*`\n`+ instance : ConcreteCategory SemiNormedGrp := by`\n`+ instance : ConcreteCategory.{u} SemiNormedGrp₁`\n`+ instance : HasBinaryBiproducts AddCommGrp`\n`+ instance : HasCokernels SemiNormedGrp.{u}`\n`+ instance : HasCokernels SemiNormedGrp₁.{u}`\n`+ instance : HasColimitsOfSize.{0, 0} (AddCommGrp.{u}) := hasColimitsOfSize.{u, 0, 0}`\n`+ instance : HasColimitsOfSize.{u, u} (AddCommGrpMax.{u, v}) := hasColimitsOfSize.{v}`\n`+ instance : HasColimitsOfSize.{u, v} (AddCommGrpMax.{u, v}) := hasColimitsOfSize.{u}`\n`+ instance : HasColimitsOfSize.{v, u} (AddCommGrpMax.{u, v}) := hasColimitsOfSize.{u}`\n`+ instance : HasColimitsOfSize.{v, v} (AddCommGrpMax.{u, v}) := hasColimitsOfSize.{u}`\n`+ instance : HasFiniteBiproducts AddCommGrp`\n`+ instance : HasForget₂ SemiNormedGrp₁ SemiNormedGrp`\n`+ instance : HasZeroObject CommGrp`\n`+ instance : HasZeroObject Grp`\n`+ instance : Inhabited (Action AddCommGrp G)`\n`+ instance : Inhabited CommGrp`\n`+ instance : Inhabited Grp`\n`+ instance : Inhabited GrpWithZero`\n`+ instance : Inhabited SemiNormedGrp`\n`+ instance : Inhabited SemiNormedGrp₁`\n`+ instance : Inhabited Semigrp`\n`+ instance : LargeCategory.{u} GrpWithZero`\n`+ instance : LargeCategory.{u} SemiNormedGrp₁`\n`+ instance : Limits.HasEqualizers.{u, u + 1} SemiNormedGrp`\n`+ instance : Limits.HasZeroMorphisms.{u, u + 1} SemiNormedGrp`\n`+ instance : Limits.HasZeroMorphisms.{u, u + 1} SemiNormedGrp₁`\n`+ instance : Preadditive AddCommGrp`\n`+ instance : Preadditive SemiNormedGrp.{u}`\n`+ instance : PreservesColimit F (forget₂ _ AddCommGrp)`\n`+ instance : Small.{u} (Functor.sections ((F ⋙ forget₂ Grp MonCat) ⋙ forget MonCat))`\n`+ instance _root_.AddCommGrp.forgetPreservesLimits :`\n`+ instance {M N : GrpWithZero} : FunLike (M ⟶ N) M N`\n`+ instance {M N : SemiNormedGrp} : Zero (M ⟶ N)`\n`+ instance {V W : SemiNormedGrp.{u}} : NNNorm (V ⟶ W)`\n`+ instance {V W : SemiNormedGrp.{u}} : Norm (V ⟶ W)`\n`+ instance {V W : SemiNormedGrp.{u}} : Sub (V ⟶ W)`\n`+ instance {X Y : CommGrp} : CoeFun (X ⟶ Y) fun _ => X → Y`\n`+ instance {X Y : Grp} : CoeFun (X ⟶ Y) fun _ => X → Y`\n`+ mulEquivIsoSemigrpIso`\n`+ semigrpIsoToMulEquiv`\n`+ toAddCommGrp`\n`+ toAddGrp`\n`+ toCommGrp`\n`+ toGrp`\n`+ wellPowered_addCommGrp`\n`- AddCommGroupCat.coyonedaObjIsoForget`\n`- AddCommGroupCat.forget_corepresentable`\n`- AddGroupCat.coyonedaObjIsoForget`\n`- AddGroupCat.forget_corepresentable`\n`- CommGroupCat`\n`- CommGroupCat.coyonedaObjIsoForget`\n`- CommGroupCat.forget_corepresentable`\n`- CommGroupCat.forget_reflects_isos`\n`- CommGroupCat.forget₂CommMonAdj`\n`- GroupCat`\n`- GroupCat.coyonedaObjIsoForget`\n`- GroupCat.forget_corepresentable`\n`- GroupCat.forget_reflects_isos`\n`- GroupCat.forget₂MonAdj`\n`- GroupWithZeroCat`\n`- MonoidHom.comp_id_commGroupCat`\n`- MonoidHom.comp_id_groupCat`\n`- MonoidHom.id_commGroupCat_comp`\n`- MonoidHom.id_groupCat_comp`\n`- MulEquiv.toCommGroupCatIso`\n`- MulEquiv.toGroupCatIso`\n`- MulEquiv.toSemigroupCatIso`\n`- SemiNormedGroupCat`\n`- SemiNormedGroupCat₁`\n`- SemigroupCat`\n`- SemigroupCat.forgetReflectsIsos`\n`- SemigroupCat.forget₂_full`\n`- forget_commGroupCat_preserves_epi`\n`- forget_commGroupCat_preserves_mono`\n`- forget_groupCat_preserves_epi`\n`- forget_groupCat_preserves_mono`\n`- forget₂_addCommGroupCat_additive`\n`- forget₂_addCommGroupCat_essSurj`\n`- hasForgetToAddCommGroupCat`\n`- instance (G : CommGroupCat) : CommGroup <| (forget CommGroupCat).obj G`\n`- instance (G : GroupCat) : Group G.α`\n`- instance (G H : CommGroupCat) : One (G ⟶ H) := (inferInstance : One (MonoidHom G H))`\n`- instance (G H : GroupCat) : One (G ⟶ H) := (inferInstance : One (MonoidHom G H))`\n`- instance (M : SemiNormedGroupCat) : SeminormedAddCommGroup M`\n`- instance (M : SemiNormedGroupCat₁) : SeminormedAddCommGroup M`\n`- instance (P Q : AddCommGroupCat) : AddCommGroup (P ⟶ Q)`\n`- instance (X : GroupCat) : Group X := X.str`\n`- instance (X : GroupWithZeroCat) : GroupWithZero X`\n`- instance (X : SemigroupCat) : Semigroup X := X.str`\n`- instance (X Y : SemiNormedGroupCat₁) : Zero (X ⟶ Y)`\n`- instance : (forget AddCommGroupCat.{u}).IsRightAdjoint`\n`- instance : (forget GroupCat.{u}).IsRightAdjoint`\n`- instance : (forget₂ (ModuleCat.{v} R) AddCommGroupCat.{v}).ReflectsIsomorphisms`\n`- instance : (forget₂ CommGroupCat.{u} GroupCat.{u}).ReflectsIsomorphisms`\n`- instance : Abelian AddCommGroupCat.{u}`\n`- instance : Coe CommGroupCat.{u} CommMonCat.{u} where coe := (forget₂ CommGroupCat CommMonCat).obj`\n`- instance : Coe CommGroupCat.{u} GroupCat.{u} where coe := (forget₂ CommGroupCat GroupCat).obj`\n`- instance : Coe GroupCat.{u} MonCat.{u} where coe := (forget₂ GroupCat MonCat).obj`\n`- instance : CoeSort CommGroupCat Type*`\n`- instance : CoeSort GroupCat Type*`\n`- instance : CoeSort GroupWithZeroCat Type*`\n`- instance : CoeSort SemiNormedGroupCat Type*`\n`- instance : CoeSort SemiNormedGroupCat₁ Type*`\n`- instance : CoeSort SemigroupCat Type*`\n`- instance : ConcreteCategory SemiNormedGroupCat := by`\n`- instance : ConcreteCategory.{u} SemiNormedGroupCat₁`\n`- instance : HasBinaryBiproducts AddCommGroupCat`\n`- instance : HasCokernels SemiNormedGroupCat.{u}`\n`- instance : HasCokernels SemiNormedGroupCat₁.{u}`\n`- instance : HasColimitsOfSize.{0, 0} (AddCommGroupCat.{u}) := hasColimitsOfSize.{u, 0, 0}`\n`- instance : HasColimitsOfSize.{u, u} (AddCommGroupCatMax.{u, v}) := hasColimitsOfSize.{v}`\n`- instance : HasColimitsOfSize.{u, v} (AddCommGroupCatMax.{u, v}) := hasColimitsOfSize.{u}`\n`- instance : HasColimitsOfSize.{v, u} (AddCommGroupCatMax.{u, v}) := hasColimitsOfSize.{u}`\n`- instance : HasColimitsOfSize.{v, v} (AddCommGroupCatMax.{u, v}) := hasColimitsOfSize.{u}`\n`- instance : HasFiniteBiproducts AddCommGroupCat`\n`- instance : HasForget₂ SemiNormedGroupCat₁ SemiNormedGroupCat`\n`- instance : HasZeroObject CommGroupCat`\n`- instance : HasZeroObject GroupCat`\n`- instance : Inhabited (Action AddCommGroupCat G)`\n`- instance : Inhabited CommGroupCat`\n`- instance : Inhabited GroupCat`\n`- instance : Inhabited GroupWithZeroCat`\n`- instance : Inhabited SemiNormedGroupCat`\n`- instance : Inhabited SemiNormedGroupCat₁`\n`- instance : Inhabited SemigroupCat`\n`- instance : LargeCategory.{u} GroupWithZeroCat`\n`- instance : LargeCategory.{u} SemiNormedGroupCat₁`\n`- instance : Limits.HasEqualizers.{u, u + 1} SemiNormedGroupCat`\n`- instance : Limits.HasZeroMorphisms.{u, u + 1} SemiNormedGroupCat`\n`- instance : Limits.HasZeroMorphisms.{u, u + 1} SemiNormedGroupCat₁`\n`- instance : Preadditive AddCommGroupCat`\n`- instance : Preadditive SemiNormedGroupCat.{u}`\n`- instance : PreservesColimit F (forget₂ _ AddCommGroupCat)`\n`- instance : Small.{u} (Functor.sections ((F ⋙ forget₂ GroupCat MonCat) ⋙ forget MonCat))`\n`- instance _root_.AddCommGroupCat.forgetPreservesLimits :`\n`- instance {M N : GroupWithZeroCat} : FunLike (M ⟶ N) M N`\n`- instance {M N : SemiNormedGroupCat} : Zero (M ⟶ N)`\n`- instance {V W : SemiNormedGroupCat.{u}} : NNNorm (V ⟶ W)`\n`- instance {V W : SemiNormedGroupCat.{u}} : Norm (V ⟶ W)`\n`- instance {V W : SemiNormedGroupCat.{u}} : Sub (V ⟶ W)`\n`- instance {X Y : CommGroupCat} : CoeFun (X ⟶ Y) fun _ => X → Y`\n`- instance {X Y : GroupCat} : CoeFun (X ⟶ Y) fun _ => X → Y`\n`- mulEquivIsoSemigroupCatIso`\n`- semigroupCatIsoToMulEquiv`\n`- toAddCommGroupCat`\n`- toAddGroupCat`\n`- toCommGroupCat`\n`- toGroupCat`\n`- wellPowered_addCommGroupCat`\n`-+-+ adj`\n`-+-+ comp_def`\n`-+-+ concreteCategory`\n`-+-+ enoughInjectives`\n`-+-+ forgetPreservesLimits`\n`-+-+ free`\n`-+-+ hasColimitsOfShape`\n`-+-+ hasColimitsOfSize`\n`-+-+ hasLimits`\n`-+-+ hasLimitsOfShape`\n`-+-+ hasLimitsOfSize`\n`-+-+ one_apply`\n`-+-+ uliftFunctor`\n`-+-+-+ colimit`\n`-+-+-+ ext`\n`-+-+-+-+ instFunLike`\n`-+-+-+--++ coe_of`\n`-+-+--++ isZero_of_subsingleton`\n`-+-+--++ ofUnique`\n`-+-+--++-+-+ of`\n`-+--++ forget_map`\n`-+--++--++ coe_comp`\n`-+--++--++ coe_id`\n`--++ cokernelCocone`\n`--++ cokernelLift`\n`--++ hasZeroObject`\n`--++ toAddMonoidHomClass`\n`--++ zero_apply`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/no_lost_declarations.sh short <optional_commit>\n\n## more verbose report:\n./scripts/no_lost_declarations.sh <optional_commit>\n```\n</details>\n\n</details>",
              "createdAt": "2024-06-08T18:10:28Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6B61-t",
              "body": "bors merge",
              "createdAt": "2024-06-20T02:11:08Z",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6B63ui",
              "body": "Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/9590544703/job/26446053523)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/9590544703/job/26446053970)",
              "createdAt": "2024-06-20T02:21:41Z",
              "author": {
                "login": "mathlib-bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "fa821f46a68103d5adfdbb66fc5dbe3b70538072",
                "additions": 1628,
                "deletions": 1628,
                "committedDate": "2024-06-19T23:03:05Z",
                "author": {
                  "name": "Yaël Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "01772193fb71147e5cf9929807096094454984c0",
                "additions": 2,
                "deletions": 0,
                "committedDate": "2024-06-19T23:03:05Z",
                "author": {
                  "name": "Yaël Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "d7c9e441653cb41e56989fd20da70313ee17a685",
                "additions": 25,
                "deletions": 25,
                "committedDate": "2024-06-19T23:03:36Z",
                "author": {
                  "name": "Yaël Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGKBPF6w",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9589047717/job/26442188267"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGKBPGAw",
                        "name": "build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9589047718/job/26442188291"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGKBPB4A",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9589047216/job/26442187232"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGKBPCSw",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9589047217/job/26442187339"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGKBPGdA",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9589047716/job/26442188404"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGKBPCsQ",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9589047216/job/26442187441"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGKBPDoA",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9589047217/job/26442187680"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGKBPFmw",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9589047716/job/26442188187"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGKBPEzQ",
                        "name": "check workflows (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9589047216/job/26442187981"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGKBPC4g",
                        "name": "check workflows",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9589047217/job/26442187490"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGKBPDcw",
                        "name": "summarize_declarations",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9589047216/job/26442187635"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGKBPENw",
                        "name": "summarize_declarations",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9589047217/job/26442187831"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGKBPELg",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9589047216/job/26442187822"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGKBPE0Q",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9589047217/job/26442187985"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGKBPFiw",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9589047216/job/26442188171"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGKCM3Ug",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9589047217/job/26443200338"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGKBPV5A",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/26442192356"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGKBP5kw",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=3731&login=leanprover-community&repository=mathlib4"
                      },
                      {
                        "__typename": "StatusContext",
                        "id": "SC_kwDOFcwZ1c8AAAAG7wvWXA",
                        "context": "bors",
                        "state": "SUCCESS",
                        "targetUrl": "https://mathlib-bors-ca18eefec4cb.herokuapp.com/batches/3843",
                        "description": "Build succeeded"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "createdAt": "2023-04-29T15:45:18Z",
        "deletions": 1653,
        "files": {
          "nodes": [
            {
              "path": "Mathlib.lean",
              "additions": 23,
              "deletions": 23
            },
            {
              "path": "Mathlib/Algebra/Category/GroupCat/EquivalenceGroupAddGroup.lean",
              "additions": 0,
              "deletions": 94
            },
            {
              "path": "Mathlib/Algebra/Category/Grp/Abelian.lean",
              "additions": 14,
              "deletions": 14
            },
            {
              "path": "Mathlib/Algebra/Category/Grp/Adjunctions.lean",
              "additions": 42,
              "deletions": 42
            },
            {
              "path": "Mathlib/Algebra/Category/Grp/Basic.lean",
              "additions": 185,
              "deletions": 185
            },
            {
              "path": "Mathlib/Algebra/Category/Grp/Biproducts.lean",
              "additions": 40,
              "deletions": 40
            },
            {
              "path": "Mathlib/Algebra/Category/Grp/Colimits.lean",
              "additions": 44,
              "deletions": 44
            },
            {
              "path": "Mathlib/Algebra/Category/Grp/EnoughInjectives.lean",
              "additions": 11,
              "deletions": 11
            },
            {
              "path": "Mathlib/Algebra/Category/Grp/EpiMono.lean",
              "additions": 82,
              "deletions": 82
            },
            {
              "path": "Mathlib/Algebra/Category/Grp/EquivalenceGroupAddGroup.lean",
              "additions": 94,
              "deletions": 0
            },
            {
              "path": "Mathlib/Algebra/Category/Grp/FilteredColimits.lean",
              "additions": 95,
              "deletions": 95
            },
            {
              "path": "Mathlib/Algebra/Category/Grp/ForgetCorepresentable.lean",
              "additions": 28,
              "deletions": 28
            },
            {
              "path": "Mathlib/Algebra/Category/Grp/Images.lean",
              "additions": 23,
              "deletions": 23
            },
            {
              "path": "Mathlib/Algebra/Category/Grp/Injective.lean",
              "additions": 10,
              "deletions": 10
            },
            {
              "path": "Mathlib/Algebra/Category/Grp/Kernels.lean",
              "additions": 5,
              "deletions": 5
            },
            {
              "path": "Mathlib/Algebra/Category/Grp/Limits.lean",
              "additions": 184,
              "deletions": 184
            },
            {
              "path": "Mathlib/Algebra/Category/Grp/Preadditive.lean",
              "additions": 7,
              "deletions": 7
            },
            {
              "path": "Mathlib/Algebra/Category/Grp/Subobject.lean",
              "additions": 6,
              "deletions": 6
            },
            {
              "path": "Mathlib/Algebra/Category/Grp/ZModuleEquivalence.lean",
              "additions": 6,
              "deletions": 6
            },
            {
              "path": "Mathlib/Algebra/Category/Grp/Zero.lean",
              "additions": 15,
              "deletions": 15
            },
            {
              "path": "Mathlib/Algebra/Category/GrpWithZero.lean",
              "additions": 24,
              "deletions": 24
            },
            {
              "path": "Mathlib/Algebra/Category/ModuleCat/Abelian.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/Algebra/Category/ModuleCat/Basic.lean",
              "additions": 26,
              "deletions": 26
            },
            {
              "path": "Mathlib/Algebra/Category/ModuleCat/ChangeOfRings.lean",
              "additions": 7,
              "deletions": 7
            },
            {
              "path": "Mathlib/Algebra/Category/ModuleCat/Colimits.lean",
              "additions": 29,
              "deletions": 29
            },
            {
              "path": "Mathlib/Algebra/Category/ModuleCat/FilteredColimits.lean",
              "additions": 18,
              "deletions": 18
            },
            {
              "path": "Mathlib/Algebra/Category/ModuleCat/Injective.lean",
              "additions": 3,
              "deletions": 3
            },
            {
              "path": "Mathlib/Algebra/Category/ModuleCat/Limits.lean",
              "additions": 12,
              "deletions": 12
            },
            {
              "path": "Mathlib/Algebra/Category/ModuleCat/Presheaf.lean",
              "additions": 6,
              "deletions": 6
            },
            {
              "path": "Mathlib/Algebra/Category/ModuleCat/Presheaf/Colimits.lean",
              "additions": 3,
              "deletions": 3
            },
            {
              "path": "Mathlib/Algebra/Category/ModuleCat/Presheaf/Limits.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Algebra/Category/ModuleCat/Presheaf/Sheafification.lean",
              "additions": 10,
              "deletions": 10
            },
            {
              "path": "Mathlib/Algebra/Category/ModuleCat/Presheaf/Sheafify.lean",
              "additions": 5,
              "deletions": 5
            },
            {
              "path": "Mathlib/Algebra/Category/ModuleCat/Sheaf.lean",
              "additions": 7,
              "deletions": 7
            },
            {
              "path": "Mathlib/Algebra/Category/ModuleCat/Sheaf/Abelian.lean",
              "additions": 5,
              "deletions": 5
            },
            {
              "path": "Mathlib/Algebra/Category/ModuleCat/Sheaf/Limits.lean",
              "additions": 3,
              "deletions": 3
            },
            {
              "path": "Mathlib/Algebra/Category/ModuleCat/Tannaka.lean",
              "additions": 4,
              "deletions": 4
            },
            {
              "path": "Mathlib/Algebra/Category/MonCat/Adjunctions.lean",
              "additions": 7,
              "deletions": 7
            },
            {
              "path": "Mathlib/Algebra/Category/Ring/Basic.lean",
              "additions": 5,
              "deletions": 5
            },
            {
              "path": "Mathlib/Algebra/Category/Ring/FilteredColimits.lean",
              "additions": 3,
              "deletions": 3
            },
            {
              "path": "Mathlib/Algebra/Category/Ring/Limits.lean",
              "additions": 10,
              "deletions": 10
            },
            {
              "path": "Mathlib/Algebra/Category/Semigrp/Basic.lean",
              "additions": 60,
              "deletions": 60
            },
            {
              "path": "Mathlib/Algebra/HierarchyDesign.lean",
              "additions": 3,
              "deletions": 3
            },
            {
              "path": "Mathlib/Algebra/Homology/HomotopyCategory/HomComplex.lean",
              "additions": 5,
              "deletions": 5
            },
            {
              "path": "Mathlib/Algebra/Homology/LocalCohomology.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Algebra/Homology/ShortComplex/Ab.lean",
              "additions": 11,
              "deletions": 11
            },
            {
              "path": "Mathlib/Algebra/Homology/ShortComplex/ConcreteCategory.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/Algebra/Module/CharacterModule.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Analysis/Normed/Group/SemiNormedGroupCat.lean",
              "additions": 0,
              "deletions": 270
            },
            {
              "path": "Mathlib/Analysis/Normed/Group/SemiNormedGrp.lean",
              "additions": 270,
              "deletions": 0
            },
            {
              "path": "Mathlib/Analysis/Normed/Group/SemiNormedGrp/Completion.lean",
              "additions": 34,
              "deletions": 34
            },
            {
              "path": "Mathlib/Analysis/Normed/Group/SemiNormedGrp/Kernels.lean",
              "additions": 97,
              "deletions": 97
            },
            {
              "path": "Mathlib/CategoryTheory/Galois/Prorepresentability.lean",
              "additions": 6,
              "deletions": 6
            },
            {
              "path": "Mathlib/CategoryTheory/Linear/Yoneda.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/CategoryTheory/Monoidal/Mon_.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/CategoryTheory/Preadditive/Generator.lean",
              "additions": 4,
              "deletions": 4
            },
            {
              "path": "Mathlib/CategoryTheory/Preadditive/Yoneda/Basic.lean",
              "additions": 15,
              "deletions": 15
            },
            {
              "path": "Mathlib/CategoryTheory/Preadditive/Yoneda/Injective.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/CategoryTheory/Preadditive/Yoneda/Projective.lean",
              "additions": 3,
              "deletions": 3
            },
            {
              "path": "Mathlib/CategoryTheory/Sites/NonabelianCohomology/H1.lean",
              "additions": 5,
              "deletions": 5
            },
            {
              "path": "Mathlib/Geometry/Manifold/Sheaf/Smooth.lean",
              "additions": 13,
              "deletions": 13
            },
            {
              "path": "Mathlib/RepresentationTheory/Action/Basic.lean",
              "additions": 5,
              "deletions": 5
            },
            {
              "path": "Mathlib/RepresentationTheory/Action/Monoidal.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/RepresentationTheory/Character.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/RepresentationTheory/FdRep.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/RepresentationTheory/Invariants.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/Tactic/ToAdditive.lean",
              "additions": 2,
              "deletions": 0
            },
            {
              "path": "Mathlib/Topology/Sheaves/SheafCondition/UniqueGluing.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Topology/VectorBundle/Basic.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "scripts/nolints.json",
              "additions": 2,
              "deletions": 2
            }
          ]
        },
        "headRefName": "Grp",
        "headRefOid": "d7c9e441653cb41e56989fd20da70313ee17a685",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5PcNkQ",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
              "color": "06e039",
              "name": "ready-to-merge"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJTYQ",
              "color": "33dbec",
              "name": "t-category-theory"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5yALT1",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "github-actions"
              },
              "submittedAt": "2024-03-02T12:00:57Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 3731,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5oKOQ6",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "github-actions"
              },
              "submittedAt": "2023-11-24T08:31:00Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5yALT1",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "github-actions"
              },
              "submittedAt": "2024-03-02T12:00:57Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5TsG_T",
                    "body": "**[imports]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\n```\n",
                    "createdAt": "2023-11-24T08:31:00Z",
                    "author": {
                      "login": "github-actions"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5TsG_V",
                    "body": "**[imports]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\nimport Mathlib.Algebra.Category.GrpWithZero\nimport Mathlib.Algebra.Category.ModuleCat.Abelian\n```\n",
                    "createdAt": "2023-11-24T08:31:00Z",
                    "author": {
                      "login": "github-actions"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5aABMv",
                    "body": "**[imports]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\nimport Mathlib.Algebra.Category.Grp.EquivalenceGrpAddGrp\n```\n",
                    "createdAt": "2024-03-02T12:00:57Z",
                    "author": {
                      "login": "github-actions"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5aABMw",
                    "body": "**[imports]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\nimport Mathlib.Algebra.Category.GrpWithZero\n```\n",
                    "createdAt": "2024-03-02T12:00:57Z",
                    "author": {
                      "login": "github-actions"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjE0MDkwNTkz",
              "login": "YaelDillies"
            },
            {
              "id": "MDQ6VXNlcjM3NzcyOTQ5",
              "login": "joelriou"
            },
            {
              "id": "MDQ6VXNlcjczNzYwMTI=",
              "login": "fpvandoorn"
            },
            {
              "id": "MDQ6VXNlcjE4ODgxMw==",
              "login": "urkud"
            },
            {
              "id": "MDQ6VXNlcjQ3Nzk1Ng==",
              "login": "kim-em"
            },
            {
              "id": "U_kgDOB75MNQ",
              "login": "leanprover-community-mathlib4-bot"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGKBPF6w",
                "name": "label-and-report-new-contributor",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9589047717/job/26442188267"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGKBPGAw",
                "name": "build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9589047718/job/26442188291"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGKBPB4A",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9589047216/job/26442187232"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGKBPCSw",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9589047217/job/26442187339"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGKBPGdA",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9589047716/job/26442188404"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGKBPCsQ",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9589047216/job/26442187441"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGKBPDoA",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9589047217/job/26442187680"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGKBPFmw",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9589047716/job/26442188187"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGKBPEzQ",
                "name": "check workflows (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9589047216/job/26442187981"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGKBPC4g",
                "name": "check workflows",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9589047217/job/26442187490"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGKBPDcw",
                "name": "summarize_declarations",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9589047216/job/26442187635"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGKBPENw",
                "name": "summarize_declarations",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9589047217/job/26442187831"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGKBPELg",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9589047216/job/26442187822"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGKBPE0Q",
                "name": "Build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9589047217/job/26442187985"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGKBPFiw",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9589047216/job/26442188171"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGKCM3Ug",
                "name": "Post-CI job",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/9589047217/job/26443200338"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGKBPV5A",
                "name": "New Contributor Check",
                "conclusion": "NEUTRAL",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/26442192356"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGKBP5kw",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=3731&login=leanprover-community&repository=mathlib4"
              },
              {
                "__typename": "StatusContext",
                "id": "SC_kwDOFcwZ1c8AAAAG7wvWXA",
                "context": "bors",
                "state": "SUCCESS",
                "targetUrl": "https://mathlib-bors-ca18eefec4cb.herokuapp.com/batches/3843",
                "description": "Build succeeded"
              }
            ]
          }
        },
        "title": "[Merged by Bors] - chore: Rename to `Grp`",
        "updatedAt": "2024-06-20T02:21:43Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/3731",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5ktUPqzwAAAAIgPrcz",
              "createdAt": "2023-04-29T15:45:43Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5bIBnp",
              "createdAt": "2023-04-29T17:05:00Z",
              "body": "The `Cat` suffix was added intentionally, see \r\nhttps://github.com/leanprover-community/mathlib4/wiki/Porting-wiki#categories \"Categories are suffixed with `Cat`\"",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5ktUPqzwAAAAIgQDGQ",
              "createdAt": "2023-04-29T17:05:09Z",
              "label": {
                "id": "LA_kwDOFcwZ1c6x5GG5",
                "name": "wontfix"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5bIHSg",
              "createdAt": "2023-04-29T19:13:43Z",
              "body": "Yes I know. This is an alternative to that last resort solution.",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5ktUPqzwAAAAIgRnSJ",
              "createdAt": "2023-04-29T23:48:54Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5ktUPqzwAAAAIgg9zX",
              "createdAt": "2023-05-01T09:03:47Z",
              "label": {
                "id": "LA_kwDOFcwZ1c6x5GG5",
                "name": "wontfix"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5ktUPqzwAAAAIgg9zf",
              "createdAt": "2023-05-01T09:03:47Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c5ktUPqzwAAAAIgzKhh",
              "createdAt": "2023-05-01T22:45:17Z"
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5ktUPqzwAAAAIkvqnd",
              "createdAt": "2023-05-10T02:07:06Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5ktUPqzwAAAAIte3Wi",
              "createdAt": "2023-05-26T17:12:47Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5ktUPqzwAAAAIte4TN",
              "createdAt": "2023-05-26T17:13:20Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5dQ0sP",
              "createdAt": "2023-05-26T17:14:45Z",
              "body": "Please reach a consensus about this renaming on Zulip first",
              "author": {
                "login": "fpvandoorn"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5ktUPqzwAAAAIte7NZ",
              "createdAt": "2023-05-26T17:14:49Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5dQ2BK",
              "createdAt": "2023-05-26T17:20:07Z",
              "body": "It seems like the consensus is that this is a good thing. @semorrison, can you confirm?",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5gG5KG",
              "createdAt": "2023-06-29T04:39:00Z",
              "body": "Could you link to Zulip discussion, please?",
              "author": {
                "login": "urkud"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5ktUPqzwAAAAJVBZdK",
              "createdAt": "2023-08-06T01:25:11Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJTYQ",
                "name": "t-category-theory"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5ktUPqzwAAAAJgHQ5S",
              "createdAt": "2023-08-27T20:34:05Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5lBBDS",
              "createdAt": "2023-08-27T21:24:00Z",
              "body": "See https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Naming.20convention/near/354445098 and below.",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5ktUPqzwAAAAJgHgc_",
              "createdAt": "2023-08-27T21:24:06Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5ktUPqzwAAAAJgHgdC",
              "createdAt": "2023-08-27T21:24:06Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5ktUPqzwAAAAJhDgOl",
              "createdAt": "2023-08-29T08:51:11Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5ktUPqzwAAAAJhckpK",
              "createdAt": "2023-08-29T19:02:54Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "BaseRefChangedEvent"
            },
            {
              "__typename": "BaseRefChangedEvent"
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5oKOQ6",
              "createdAt": "2023-11-24T08:30:59Z",
              "body": "",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5ktUPqzwAAAAKS3z1U",
              "createdAt": "2023-11-24T08:34:26Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5ktUPqzwAAAAKXXIr8",
              "createdAt": "2023-12-02T16:36:53Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5yALT1",
              "createdAt": "2024-03-02T12:00:57Z",
              "body": "",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5ktUPqzwAAAALKfyAT",
              "createdAt": "2024-03-02T12:06:33Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5ktUPqzwAAAALLU586",
              "createdAt": "2024-03-04T15:51:15Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c5ktUPqzwAAAAMKneII",
              "createdAt": "2024-06-06T08:33:06Z"
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5ktUPqzwAAAAMKnkdD",
              "createdAt": "2024-06-06T08:35:02Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5ktUPqzwAAAAMLTkxP",
              "createdAt": "2024-06-07T03:36:48Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c5ktUPqzwAAAAMLV9Jc",
              "createdAt": "2024-06-07T05:27:16Z"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6AZJgc",
              "createdAt": "2024-06-07T05:27:59Z",
              "body": "### Import summary\n\n<details><summary>Dependency changes</summary>\n\n| File | Base Count | Head Count | Change |\n| --- | --- | --- | --- |\n| Mathlib.Algebra.Category.GroupCat.EquivalenceGroupAddGroup | 490 | 0 | -490 (-100.00%) |\n| Mathlib.Analysis.Normed.Group.SemiNormedGroupCat | 1114 | 0 | -1114 (-100.00%) |\n</details>",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5ktUPqzwAAAAMLWIMn",
              "createdAt": "2024-06-07T05:34:28Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5ktUPqzwAAAAMMKbOy",
              "createdAt": "2024-06-08T17:36:00Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c5ktUPqzwAAAAMMKnmX",
              "createdAt": "2024-06-08T18:09:47Z"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6Ag99Z",
              "createdAt": "2024-06-08T18:10:28Z",
              "body": "### PR summary [d7c9e44165](https://github.com/leanprover-community/mathlib4/pull/3731/commits/d7c9e441653cb41e56989fd20da70313ee17a685)\n\n#### Import changes\n\nDependency changes\n\n| File | Base Count | Head Count | Change |\n| --- | --- | --- | --- |\n| Mathlib.Algebra.Category.GroupCat.EquivalenceGroupAddGroup | 461 | 0 | -461 (-100.00%) |\n| Mathlib.Analysis.Normed.Group.SemiNormedGroupCat | 1094 | 0 | -1094 (-100.00%) |\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ AddCommGrp.coyonedaObjIsoForget`\n`+ AddCommGrp.forget_corepresentable`\n`+ AddGrp.coyonedaObjIsoForget`\n`+ AddGrp.forget_corepresentable`\n`+ CommGrp`\n`+ CommGrp.coyonedaObjIsoForget`\n`+ CommGrp.forget_corepresentable`\n`+ CommGrp.forget_reflects_isos`\n`+ CommGrp.forget₂CommMonAdj`\n`+ Grp`\n`+ Grp.coyonedaObjIsoForget`\n`+ Grp.forget_corepresentable`\n`+ Grp.forget_reflects_isos`\n`+ Grp.forget₂MonAdj`\n`+ GrpWithZero`\n`+ MonoidHom.comp_id_commGrp`\n`+ MonoidHom.comp_id_grp`\n`+ MonoidHom.id_commGrp_comp`\n`+ MonoidHom.id_grp_comp`\n`+ MulEquiv.toCommGrpIso`\n`+ MulEquiv.toGrpIso`\n`+ MulEquiv.toSemigrpIso`\n`+ SemiNormedGrp`\n`+ SemiNormedGrp₁`\n`+ Semigrp`\n`+ Semigrp.forgetReflectsIsos`\n`+ Semigrp.forget₂_full`\n`+ forget_commGrp_preserves_epi`\n`+ forget_commGrp_preserves_mono`\n`+ forget_grp_preserves_epi`\n`+ forget_grp_preserves_mono`\n`+ forget₂_addCommGrp_additive`\n`+ forget₂_addCommGrp_essSurj`\n`+ hasForgetToAddCommGrp`\n`+ instance (G : CommGrp) : CommGroup <| (forget CommGrp).obj G`\n`+ instance (G : Grp) : Group G.α`\n`+ instance (G H : CommGrp) : One (G ⟶ H) := (inferInstance : One (MonoidHom G H))`\n`+ instance (G H : Grp) : One (G ⟶ H) := (inferInstance : One (MonoidHom G H))`\n`+ instance (M : SemiNormedGrp) : SeminormedAddCommGroup M`\n`+ instance (M : SemiNormedGrp₁) : SeminormedAddCommGroup M`\n`+ instance (P Q : AddCommGrp) : AddCommGroup (P ⟶ Q)`\n`+ instance (X : Grp) : Group X := X.str`\n`+ instance (X : GrpWithZero) : GroupWithZero X`\n`+ instance (X : Semigrp) : Semigroup X := X.str`\n`+ instance (X Y : SemiNormedGrp₁) : Zero (X ⟶ Y)`\n`+ instance : (forget AddCommGrp.{u}).IsRightAdjoint`\n`+ instance : (forget Grp.{u}).IsRightAdjoint`\n`+ instance : (forget₂ (ModuleCat.{v} R) AddCommGrp.{v}).ReflectsIsomorphisms`\n`+ instance : (forget₂ CommGrp.{u} Grp.{u}).ReflectsIsomorphisms`\n`+ instance : Abelian AddCommGrp.{u}`\n`+ instance : Coe CommGrp.{u} CommMonCat.{u} where coe := (forget₂ CommGrp CommMonCat).obj`\n`+ instance : Coe CommGrp.{u} Grp.{u} where coe := (forget₂ CommGrp Grp).obj`\n`+ instance : Coe Grp.{u} MonCat.{u} where coe := (forget₂ Grp MonCat).obj`\n`+ instance : CoeSort CommGrp Type*`\n`+ instance : CoeSort Grp Type*`\n`+ instance : CoeSort GrpWithZero Type*`\n`+ instance : CoeSort SemiNormedGrp Type*`\n`+ instance : CoeSort SemiNormedGrp₁ Type*`\n`+ instance : CoeSort Semigrp Type*`\n`+ instance : ConcreteCategory SemiNormedGrp := by`\n`+ instance : ConcreteCategory.{u} SemiNormedGrp₁`\n`+ instance : HasBinaryBiproducts AddCommGrp`\n`+ instance : HasCokernels SemiNormedGrp.{u}`\n`+ instance : HasCokernels SemiNormedGrp₁.{u}`\n`+ instance : HasColimitsOfSize.{0, 0} (AddCommGrp.{u}) := hasColimitsOfSize.{u, 0, 0}`\n`+ instance : HasColimitsOfSize.{u, u} (AddCommGrpMax.{u, v}) := hasColimitsOfSize.{v}`\n`+ instance : HasColimitsOfSize.{u, v} (AddCommGrpMax.{u, v}) := hasColimitsOfSize.{u}`\n`+ instance : HasColimitsOfSize.{v, u} (AddCommGrpMax.{u, v}) := hasColimitsOfSize.{u}`\n`+ instance : HasColimitsOfSize.{v, v} (AddCommGrpMax.{u, v}) := hasColimitsOfSize.{u}`\n`+ instance : HasFiniteBiproducts AddCommGrp`\n`+ instance : HasForget₂ SemiNormedGrp₁ SemiNormedGrp`\n`+ instance : HasZeroObject CommGrp`\n`+ instance : HasZeroObject Grp`\n`+ instance : Inhabited (Action AddCommGrp G)`\n`+ instance : Inhabited CommGrp`\n`+ instance : Inhabited Grp`\n`+ instance : Inhabited GrpWithZero`\n`+ instance : Inhabited SemiNormedGrp`\n`+ instance : Inhabited SemiNormedGrp₁`\n`+ instance : Inhabited Semigrp`\n`+ instance : LargeCategory.{u} GrpWithZero`\n`+ instance : LargeCategory.{u} SemiNormedGrp₁`\n`+ instance : Limits.HasEqualizers.{u, u + 1} SemiNormedGrp`\n`+ instance : Limits.HasZeroMorphisms.{u, u + 1} SemiNormedGrp`\n`+ instance : Limits.HasZeroMorphisms.{u, u + 1} SemiNormedGrp₁`\n`+ instance : Preadditive AddCommGrp`\n`+ instance : Preadditive SemiNormedGrp.{u}`\n`+ instance : PreservesColimit F (forget₂ _ AddCommGrp)`\n`+ instance : Small.{u} (Functor.sections ((F ⋙ forget₂ Grp MonCat) ⋙ forget MonCat))`\n`+ instance _root_.AddCommGrp.forgetPreservesLimits :`\n`+ instance {M N : GrpWithZero} : FunLike (M ⟶ N) M N`\n`+ instance {M N : SemiNormedGrp} : Zero (M ⟶ N)`\n`+ instance {V W : SemiNormedGrp.{u}} : NNNorm (V ⟶ W)`\n`+ instance {V W : SemiNormedGrp.{u}} : Norm (V ⟶ W)`\n`+ instance {V W : SemiNormedGrp.{u}} : Sub (V ⟶ W)`\n`+ instance {X Y : CommGrp} : CoeFun (X ⟶ Y) fun _ => X → Y`\n`+ instance {X Y : Grp} : CoeFun (X ⟶ Y) fun _ => X → Y`\n`+ mulEquivIsoSemigrpIso`\n`+ semigrpIsoToMulEquiv`\n`+ toAddCommGrp`\n`+ toAddGrp`\n`+ toCommGrp`\n`+ toGrp`\n`+ wellPowered_addCommGrp`\n`- AddCommGroupCat.coyonedaObjIsoForget`\n`- AddCommGroupCat.forget_corepresentable`\n`- AddGroupCat.coyonedaObjIsoForget`\n`- AddGroupCat.forget_corepresentable`\n`- CommGroupCat`\n`- CommGroupCat.coyonedaObjIsoForget`\n`- CommGroupCat.forget_corepresentable`\n`- CommGroupCat.forget_reflects_isos`\n`- CommGroupCat.forget₂CommMonAdj`\n`- GroupCat`\n`- GroupCat.coyonedaObjIsoForget`\n`- GroupCat.forget_corepresentable`\n`- GroupCat.forget_reflects_isos`\n`- GroupCat.forget₂MonAdj`\n`- GroupWithZeroCat`\n`- MonoidHom.comp_id_commGroupCat`\n`- MonoidHom.comp_id_groupCat`\n`- MonoidHom.id_commGroupCat_comp`\n`- MonoidHom.id_groupCat_comp`\n`- MulEquiv.toCommGroupCatIso`\n`- MulEquiv.toGroupCatIso`\n`- MulEquiv.toSemigroupCatIso`\n`- SemiNormedGroupCat`\n`- SemiNormedGroupCat₁`\n`- SemigroupCat`\n`- SemigroupCat.forgetReflectsIsos`\n`- SemigroupCat.forget₂_full`\n`- forget_commGroupCat_preserves_epi`\n`- forget_commGroupCat_preserves_mono`\n`- forget_groupCat_preserves_epi`\n`- forget_groupCat_preserves_mono`\n`- forget₂_addCommGroupCat_additive`\n`- forget₂_addCommGroupCat_essSurj`\n`- hasForgetToAddCommGroupCat`\n`- instance (G : CommGroupCat) : CommGroup <| (forget CommGroupCat).obj G`\n`- instance (G : GroupCat) : Group G.α`\n`- instance (G H : CommGroupCat) : One (G ⟶ H) := (inferInstance : One (MonoidHom G H))`\n`- instance (G H : GroupCat) : One (G ⟶ H) := (inferInstance : One (MonoidHom G H))`\n`- instance (M : SemiNormedGroupCat) : SeminormedAddCommGroup M`\n`- instance (M : SemiNormedGroupCat₁) : SeminormedAddCommGroup M`\n`- instance (P Q : AddCommGroupCat) : AddCommGroup (P ⟶ Q)`\n`- instance (X : GroupCat) : Group X := X.str`\n`- instance (X : GroupWithZeroCat) : GroupWithZero X`\n`- instance (X : SemigroupCat) : Semigroup X := X.str`\n`- instance (X Y : SemiNormedGroupCat₁) : Zero (X ⟶ Y)`\n`- instance : (forget AddCommGroupCat.{u}).IsRightAdjoint`\n`- instance : (forget GroupCat.{u}).IsRightAdjoint`\n`- instance : (forget₂ (ModuleCat.{v} R) AddCommGroupCat.{v}).ReflectsIsomorphisms`\n`- instance : (forget₂ CommGroupCat.{u} GroupCat.{u}).ReflectsIsomorphisms`\n`- instance : Abelian AddCommGroupCat.{u}`\n`- instance : Coe CommGroupCat.{u} CommMonCat.{u} where coe := (forget₂ CommGroupCat CommMonCat).obj`\n`- instance : Coe CommGroupCat.{u} GroupCat.{u} where coe := (forget₂ CommGroupCat GroupCat).obj`\n`- instance : Coe GroupCat.{u} MonCat.{u} where coe := (forget₂ GroupCat MonCat).obj`\n`- instance : CoeSort CommGroupCat Type*`\n`- instance : CoeSort GroupCat Type*`\n`- instance : CoeSort GroupWithZeroCat Type*`\n`- instance : CoeSort SemiNormedGroupCat Type*`\n`- instance : CoeSort SemiNormedGroupCat₁ Type*`\n`- instance : CoeSort SemigroupCat Type*`\n`- instance : ConcreteCategory SemiNormedGroupCat := by`\n`- instance : ConcreteCategory.{u} SemiNormedGroupCat₁`\n`- instance : HasBinaryBiproducts AddCommGroupCat`\n`- instance : HasCokernels SemiNormedGroupCat.{u}`\n`- instance : HasCokernels SemiNormedGroupCat₁.{u}`\n`- instance : HasColimitsOfSize.{0, 0} (AddCommGroupCat.{u}) := hasColimitsOfSize.{u, 0, 0}`\n`- instance : HasColimitsOfSize.{u, u} (AddCommGroupCatMax.{u, v}) := hasColimitsOfSize.{v}`\n`- instance : HasColimitsOfSize.{u, v} (AddCommGroupCatMax.{u, v}) := hasColimitsOfSize.{u}`\n`- instance : HasColimitsOfSize.{v, u} (AddCommGroupCatMax.{u, v}) := hasColimitsOfSize.{u}`\n`- instance : HasColimitsOfSize.{v, v} (AddCommGroupCatMax.{u, v}) := hasColimitsOfSize.{u}`\n`- instance : HasFiniteBiproducts AddCommGroupCat`\n`- instance : HasForget₂ SemiNormedGroupCat₁ SemiNormedGroupCat`\n`- instance : HasZeroObject CommGroupCat`\n`- instance : HasZeroObject GroupCat`\n`- instance : Inhabited (Action AddCommGroupCat G)`\n`- instance : Inhabited CommGroupCat`\n`- instance : Inhabited GroupCat`\n`- instance : Inhabited GroupWithZeroCat`\n`- instance : Inhabited SemiNormedGroupCat`\n`- instance : Inhabited SemiNormedGroupCat₁`\n`- instance : Inhabited SemigroupCat`\n`- instance : LargeCategory.{u} GroupWithZeroCat`\n`- instance : LargeCategory.{u} SemiNormedGroupCat₁`\n`- instance : Limits.HasEqualizers.{u, u + 1} SemiNormedGroupCat`\n`- instance : Limits.HasZeroMorphisms.{u, u + 1} SemiNormedGroupCat`\n`- instance : Limits.HasZeroMorphisms.{u, u + 1} SemiNormedGroupCat₁`\n`- instance : Preadditive AddCommGroupCat`\n`- instance : Preadditive SemiNormedGroupCat.{u}`\n`- instance : PreservesColimit F (forget₂ _ AddCommGroupCat)`\n`- instance : Small.{u} (Functor.sections ((F ⋙ forget₂ GroupCat MonCat) ⋙ forget MonCat))`\n`- instance _root_.AddCommGroupCat.forgetPreservesLimits :`\n`- instance {M N : GroupWithZeroCat} : FunLike (M ⟶ N) M N`\n`- instance {M N : SemiNormedGroupCat} : Zero (M ⟶ N)`\n`- instance {V W : SemiNormedGroupCat.{u}} : NNNorm (V ⟶ W)`\n`- instance {V W : SemiNormedGroupCat.{u}} : Norm (V ⟶ W)`\n`- instance {V W : SemiNormedGroupCat.{u}} : Sub (V ⟶ W)`\n`- instance {X Y : CommGroupCat} : CoeFun (X ⟶ Y) fun _ => X → Y`\n`- instance {X Y : GroupCat} : CoeFun (X ⟶ Y) fun _ => X → Y`\n`- mulEquivIsoSemigroupCatIso`\n`- semigroupCatIsoToMulEquiv`\n`- toAddCommGroupCat`\n`- toAddGroupCat`\n`- toCommGroupCat`\n`- toGroupCat`\n`- wellPowered_addCommGroupCat`\n`-+-+ adj`\n`-+-+ comp_def`\n`-+-+ concreteCategory`\n`-+-+ enoughInjectives`\n`-+-+ forgetPreservesLimits`\n`-+-+ free`\n`-+-+ hasColimitsOfShape`\n`-+-+ hasColimitsOfSize`\n`-+-+ hasLimits`\n`-+-+ hasLimitsOfShape`\n`-+-+ hasLimitsOfSize`\n`-+-+ one_apply`\n`-+-+ uliftFunctor`\n`-+-+-+ colimit`\n`-+-+-+ ext`\n`-+-+-+-+ instFunLike`\n`-+-+-+--++ coe_of`\n`-+-+--++ isZero_of_subsingleton`\n`-+-+--++ ofUnique`\n`-+-+--++-+-+ of`\n`-+--++ forget_map`\n`-+--++--++ coe_comp`\n`-+--++--++ coe_id`\n`--++ cokernelCocone`\n`--++ cokernelLift`\n`--++ hasZeroObject`\n`--++ toAddMonoidHomClass`\n`--++ zero_apply`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/no_lost_declarations.sh short <optional_commit>\n\n## more verbose report:\n./scripts/no_lost_declarations.sh <optional_commit>\n```\n</details>\n\n</details>",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5ktUPqzwAAAAMMKtJ_",
              "createdAt": "2024-06-08T18:24:21Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5ktUPqzwAAAAMP7zQq",
              "createdAt": "2024-06-13T20:07:51Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c5ktUPqzwAAAAMQIhvV",
              "createdAt": "2024-06-14T04:55:08Z"
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5ktUPqzwAAAAMQIwi2",
              "createdAt": "2024-06-14T05:05:40Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5ktUPqzwAAAAMSFySc",
              "createdAt": "2024-06-17T16:26:35Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c5ktUPqzwAAAAMSREqs",
              "createdAt": "2024-06-17T20:32:59Z"
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5ktUPqzwAAAAMSRHt4",
              "createdAt": "2024-06-17T20:34:21Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5ktUPqzwAAAAMUCPXv",
              "createdAt": "2024-06-19T21:23:53Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c5ktUPqzwAAAAMUEAhQ",
              "createdAt": "2024-06-19T23:03:42Z"
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5ktUPqzwAAAAMUECeM",
              "createdAt": "2024-06-19T23:05:44Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6B61-t",
              "createdAt": "2024-06-20T02:11:08Z",
              "body": "bors merge",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5ktUPqzwAAAAMUHS04",
              "createdAt": "2024-06-20T02:11:19Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
                "name": "ready-to-merge"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5ktUPqzwAAAAMUHS1z",
              "createdAt": "2024-06-20T02:11:20Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6B63ui",
              "createdAt": "2024-06-20T02:21:41Z",
              "body": "Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/9590544703/job/26446053523)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/9590544703/job/26446053970)",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c5ktUPqzwAAAAMUHe7W",
              "createdAt": "2024-06-20T02:21:41Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c5ktUPqzwAAAAMUHe9s",
              "createdAt": "2024-06-20T02:21:43Z"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            }
          ]
        }
      }
    }
  }
}
