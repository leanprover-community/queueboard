{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 11,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "FLDutchmann"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "These lemmas will be used to develop a basic theory of arithmetic functions $n \\mapsto \\prod_{p\\mid n} f(p)$.\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 1,
        "closed": true,
        "closedAt": "2023-08-18T08:08:16Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5kVtJ9",
              "body": "bors merge\r\n\r\nThanks!",
              "createdAt": "2023-08-18T06:22:05Z",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5kWKZF",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/5899967166/job/16003343998)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/5899967166/job/16003343731)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/5899967166/job/16003343881)",
              "createdAt": "2023-08-18T08:08:14Z",
              "author": {
                "login": "bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "a40b740dc7513a02899f3fd11ebd466f7af46284",
                "additions": 12,
                "deletions": 0,
                "committedDate": "2023-08-03T15:18:26Z",
                "author": {
                  "name": "Arend Mellendijk",
                  "email": "arend.mellendijk@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "87281800e9d4f0e34035ab86a813aa16cb0e60b3",
                "additions": 10,
                "deletions": 4,
                "committedDate": "2023-08-03T16:28:22Z",
                "author": {
                  "name": "Arend Mellendijk",
                  "email": "arend.mellendijk@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "3306cc24a84584732a4d06dd67b68f2d6bbec21f",
                "additions": 3,
                "deletions": 3,
                "committedDate": "2023-08-03T16:38:08Z",
                "author": {
                  "name": "Arend Mellendijk",
                  "email": "arend.mellendijk@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "2b1c968ed3b930ccb1f5c74bf2e9afaba5fc4e42",
                "additions": 0,
                "deletions": 7,
                "committedDate": "2023-08-14T15:42:46Z",
                "author": {
                  "name": "Arend Mellendijk",
                  "email": "arend.mellendijk@gmail.com"
                },
                "statusCheckRollup": null
              }
            }
          ]
        },
        "createdAt": "2023-08-03T15:23:52Z",
        "deletions": 0,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/Data/Nat/Squarefree.lean",
              "additions": 11,
              "deletions": 0
            }
          ]
        },
        "headRefName": "arend/prod_factors_finset_squarefree",
        "headRefOid": "2b1c968ed3b930ccb1f5c74bf2e9afaba5fc4e42",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5XHypD",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
              "color": "06e039",
              "name": "ready-to-merge"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJLNA",
              "color": "33DBEC",
              "name": "t-number-theory"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5dEVY1",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-08-03T15:59:24Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5d_FPw",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "jcommelin"
              },
              "submittedAt": "2023-08-14T13:11:13Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5dp-S8",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kbuzzard"
              },
              "submittedAt": "2023-08-10T08:09:17Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 6344,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5dEVY1",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-08-03T15:59:24Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5dn1y_",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kbuzzard"
              },
              "submittedAt": "2023-08-09T22:39:28Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5doLom",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "FLDutchmann"
              },
              "submittedAt": "2023-08-10T00:33:24Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5dp-S8",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kbuzzard"
              },
              "submittedAt": "2023-08-10T08:09:17Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5dqy8g",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "FLDutchmann"
              },
              "submittedAt": "2023-08-10T09:52:35Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5d_FPw",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "jcommelin"
              },
              "submittedAt": "2023-08-14T13:11:13Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5eAGVt",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "FLDutchmann"
              },
              "submittedAt": "2023-08-14T15:20:30Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Mf1CL",
                    "body": "Can you add this as a separate `Squarefree.nodup_factors` helper lemma?",
                    "createdAt": "2023-08-03T15:59:23Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5M2YAf",
                    "body": "The other two theorems are fine but this one strikes me as a bit odd. Firstly, any theorem about division of the form X = Y / Z when Z actually divides Y is strictly weaker than the corresponding statement about multiplication X * Z = Y, because natural division is a pathological operation (e.g. 5/2=2). So surely it's better stated as a lemma about multiplication? And then it basically becomes `Finset.prod_sdiff`. Are you sure you need this theorem? I would avoid natural division and subtraction if at all possible, rather than proving lemmas about them.",
                    "createdAt": "2023-08-09T22:39:25Z",
                    "author": {
                      "login": "kbuzzard"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5M2pWH",
                    "body": "I agree that this looks dubious, but I think it might take quite a lot of effort to properly avoid. Roughly speaking natural division comes up when working with Dirichlet convolution and in my case is difficult to avoid because `Nat.sum_divisors_filter_squarefree` only really makes sense for a sum over `divisors` instead of `divisorsAntidiagonal`.\r\n\r\nI actually originally extracted this as a rewrite lemma because both sides came up nested in subexpressions, but I could just call `congr` and not make it a lemma. Would that be preferable?\r\n\r\nTo give a little more detail on why natural division comes up, I want to prove that for $f, g$ multiplicative arithmetic functions and squarefree $n$ we have $\\prod_{p\\mid n} (f+g)(p) = (f*g) (n)$. In the proof, I write both sides as a sum over subsets of `factors n`. Expanding the product then naturally gives the LHS of the lemma. Writing the convolution as $\\sum _{d\\mid n} f(d) g(n/d)$ and applying `Nat.sum_divisors_filter_squarefree` produces the expression on the RHS. \r\n",
                    "createdAt": "2023-08-10T00:33:24Z",
                    "author": {
                      "login": "FLDutchmann"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5M38_K",
                    "body": "If you are convinced you need a lemma with division then this is an argument for having the lemma. I am not convinced yet but I certainly remain open to becoming convinced. \r\n\r\nI agree that `Nat.sum_divisors_filter_squarefree` should be a sum over `divisors`. I agree that *if* you write the convolution as a sum involving division (which my instinct is where the code smell is) as opposed to `divisorsAntidiagonal` then you will have to deal with divisions. Because I haven't seen the explicit code I am currently unclear about why you think that it's helpful to write the convolution using division rather than using `divisorsAntidiagonal`. Could it be that you're missing a trick involving manipulating finite sums over different sets?\r\n\r\nLook at this this way. Division is a pathological operation, so the moment you have a term `a / b` you are essentially unable to do anything at all with it until you have multiplied by b again, proved that actually b did divide a, and then applied some div_mul_cancel lemma. You are saying \"I need division\" but I am saying \"my mental model is that division cannot ever help because it basically freezes part of the code until you undivide, so why not just delay the division until you discover that it's gone\". \r\n\r\nCan you link to some code where you think that division is making your life easier? Then this PR would make a whole lot more sense to me.",
                    "createdAt": "2023-08-10T08:09:17Z",
                    "author": {
                      "login": "kbuzzard"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5M4doy",
                    "body": "[Here's the proof](https://github.com/FLDutchmann/selberg-sieve4/blob/38c9db4fdb2784a09113c04df4e6195196e1a6d0/SelbergSieve/ForArithmeticFunction.lean#L78), for reference. I claim that `Nat.sum_divisors_filter_squarefree` makes the proof much simpler by lining up the sums perfectly along the powerset of `factors n`.\r\n\r\nIf you want something to copy-paste:\r\n<details>\r\n<summary> Code </summary>\r\n\r\n```lean\r\nimport Mathlib.NumberTheory.ArithmeticFunction\r\n\r\nopen BigOperators Nat ArithmeticFunction\r\n\r\ntheorem prod_toFinset_factors_of_squarefree {l : ℕ} (hl : Squarefree l) :\r\n    ∏ p in l.factors.toFinset, p = l := by\r\n  erw [List.prod_toFinset, List.map_id, Nat.prod_factors hl.ne_zero]\r\n  exact (Nat.squarefree_iff_nodup_factors hl.ne_zero).mp hl\r\n\r\ntheorem prod_factors_sdiff_of_squarefree {n : ℕ} (hn : Squarefree n) {t : Finset ℕ}\r\n    (ht : t ⊆ n.factors.toFinset) :\r\n    ∏ a in (n.factors.toFinset \\ t), a = n / ∏ a in t, a := by\r\n  refine symm $ Nat.div_eq_of_eq_mul_left (Finset.prod_pos\r\n    fun p hp => (prime_of_mem_factors (List.mem_toFinset.mp (ht hp))).pos) ?_\r\n  rw [Finset.prod_sdiff ht, prod_toFinset_factors_of_squarefree hn]\r\n\r\nvariable {R : Type _}\r\n\r\ndef prodDistinctFactors [CommMonoidWithZero R] (f : ℕ → R) : ArithmeticFunction R := \r\n  ⟨fun d => if d = 0 then 0 else ∏ p in d.factors.toFinset, f p, if_pos rfl⟩\r\n\r\ntheorem prodDistinctFactors_apply_of_ne_zero [CommMonoidWithZero R] {f: ℕ → R} {n : ℕ} (hn : n ≠ 0) :\r\n    prodDistinctFactors f n = ∏ p in n.factors.toFinset, f p := \r\n  if_neg hn\r\n\r\ntheorem prod_subset_factors_of_mult {R : Type _} [CommSemiring R] (f : Nat.ArithmeticFunction R) \r\n  (h_mult : Nat.ArithmeticFunction.IsMultiplicative f) (l : ℕ) \r\n  (t : Finset ℕ) (ht : t ⊆ l.factors.toFinset) :\r\n    ∏ a : ℕ in t, f a = f (∏ a in t, a) := by \r\n  apply (h_mult.map_prod ..).symm\r\n  exact fun x hx y hy hxy => (Nat.coprime_primes (Nat.prime_of_mem_factors (List.mem_toFinset.mp (ht hx))) \r\n    (Nat.prime_of_mem_factors (List.mem_toFinset.mp (ht hy)))).mpr hxy\r\n\r\ntheorem prod_add_mult' {R : Type _} [CommSemiring R] (f g : ArithmeticFunction R) (hf : IsMultiplicative f) (hg : IsMultiplicative g)\r\n  (n : ℕ) (hn : Squarefree n) :\r\n    prodDistinctFactors (f + g) n = (f * g) n := by\r\n  rw [prodDistinctFactors_apply_of_ne_zero hn.ne_zero]; simp_rw [add_apply (f:=f) (g:=g)]\r\n  rw [Finset.prod_add, mul_apply, Nat.sum_divisorsAntidiagonal (f:= λ x y => f x * g y),  \r\n    ←divisors_filter_squarefree_of_squarefree hn, Nat.sum_divisors_filter_squarefree hn.ne_zero, \r\n    Nat.factors_eq]\r\n  apply Finset.sum_congr rfl\r\n  intro t ht\r\n  erw [t.prod_val, ←prod_factors_sdiff_of_squarefree hn (Finset.mem_powerset.mp ht),\r\n    prod_subset_factors_of_mult _ hf n t (Finset.mem_powerset.mp ht),\r\n    ←prod_subset_factors_of_mult _ hg n (_ \\ t) (Finset.sdiff_subset _ t) ]\r\n  rfl\r\n```\r\n</details>",
                    "createdAt": "2023-08-10T09:52:35Z",
                    "author": {
                      "login": "FLDutchmann"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5NGFM_",
                    "body": "> difficult to avoid because `Nat.sum_divisors_filter_squarefree` only really makes sense for a sum over `divisors` instead of `divisorsAntidiagonal`.\r\n\r\nI think you can combine `image_fst_divisorsAntidiagonal` with `Nat.sum_divisors_filter_squarefree` to obtain a sum over `divisorsAntidiagonal` and apply Kevin's strategy from there.",
                    "createdAt": "2023-08-14T13:11:12Z",
                    "author": {
                      "login": "jcommelin"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5NGw77",
                    "body": "I'll have to consider that. I'm still a bit sceptical because I don't immediately see how your suggestion sidesteps `Nat` division.\r\n\r\nI think for now I'll remove the offending lemma and open a new PR with the code that I linked so we can discuss this a bit more clearly.",
                    "createdAt": "2023-08-14T15:20:30Z",
                    "author": {
                      "login": "FLDutchmann"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjg3NTk3NDU=",
              "login": "FLDutchmann"
            },
            {
              "id": "MDQ6VXNlcjQyNTI2MA==",
              "login": "eric-wieser"
            },
            {
              "id": "MDQ6VXNlcjU2MzY3MDU=",
              "login": "jcommelin"
            },
            {
              "id": "MDQ6VXNlcjMxODY3ODI3",
              "login": "kbuzzard"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": null,
        "title": "[Merged by Bors] - feat(Data/Nat/Squarefree): Add lemmas about the product of distinct factors of a squarefree `Nat`",
        "updatedAt": "2023-08-18T08:08:23Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/6344",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "a40b740dc7513a02899f3fd11ebd466f7af46284"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5tZCAFzwAAAAJUEc0v",
              "createdAt": "2023-08-03T15:23:52Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5tZCAFzwAAAAJUEc01",
              "createdAt": "2023-08-03T15:23:52Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJLNA",
                "name": "t-number-theory"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5dEVY1",
              "createdAt": "2023-08-03T15:59:23Z",
              "body": "",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "87281800e9d4f0e34035ab86a813aa16cb0e60b3"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "3306cc24a84584732a4d06dd67b68f2d6bbec21f"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5dn1y_",
              "createdAt": "2023-08-09T22:39:24Z",
              "body": "",
              "author": {
                "login": "kbuzzard"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "2b1c968ed3b930ccb1f5c74bf2e9afaba5fc4e42"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5kVtJ9",
              "createdAt": "2023-08-18T06:22:05Z",
              "body": "bors merge\r\n\r\nThanks!",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5tZCAFzwAAAAJblNP9",
              "createdAt": "2023-08-18T06:22:18Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
                "name": "ready-to-merge"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5tZCAFzwAAAAJblNQ3",
              "createdAt": "2023-08-18T06:22:19Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5kWKZF",
              "createdAt": "2023-08-18T08:08:14Z",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/5899967166/job/16003343998)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/5899967166/job/16003343731)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/5899967166/job/16003343881)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c5tZCAFzwAAAAJbobZU",
              "createdAt": "2023-08-18T08:08:17Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c5tZCAFzwAAAAJboboQ",
              "createdAt": "2023-08-18T08:08:23Z"
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5OBZsI",
              "createdAt": "2023-08-18T13:37:09Z",
              "source": {
                "id": "PR_kwDOFcwZ1c5YQCYw",
                "title": "[Merged by Bors] - feat: define `prodPrimeFactors` as an `ArithmeticFunction`",
                "url": "https://github.com/leanprover-community/mathlib4/pull/6662"
              }
            }
          ]
        }
      }
    }
  }
}
