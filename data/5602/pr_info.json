{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 360,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "j-loreaux"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "If `S` is non-unital subalgebra of a unital `R`-algebra `A`, there is a natural surjective map `Unitization R S ‚Üí‚Çê[R] Algebra.adjoin R (S : Set A)`. When `1 ‚àâ S` and `R` is a field, this becomes and `AlgEquiv`.\r\n\r\nWe specialize this to the `‚Ñï`-unitization of a non-unital subsemiring and its `Subsemiring.closure`, as well as the `‚Ñ§`-unitization of a non-unital subring and its `Subring.closure`. We also extend the above map to a `StarAlgHom` in the case of `NonUnitalStarSubalgebra`s.\r\n\r\nThis continues the non-unital-ization of mathlib.\r\n\r\n- [x] depends on: #5151\r\n- [x] depends on: #5512 \r\n- [x] depends on: #5537\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 6,
        "closed": true,
        "closedAt": "2023-08-04T10:00:11Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5h0SlR",
              "body": "This PR/issue depends on:\n* ~~leanprover-community/mathlib4#5151~~\n* ~~leanprover-community/mathlib4#5512~~\n* ~~leanprover-community/mathlib4#5537~~\nBy **[Dependent Issues](https://github.com/z0al/dependent-issues)** (ü§ñ). Happy coding!\n<!-- By Dependent Issues (Action) - DO NOT REMOVE -->",
              "createdAt": "2023-07-18T23:02:37Z",
              "author": {
                "login": "leanprover-community-mathlib4-bot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5jLC7m",
              "body": "I'm not a big fan of the filename `Algebra.Algebra.Unitize`, especially since we already have `Algebra.Algebra.Unitization`. What do you think of moving it to `Algebra.Algebra.Subalgebra.Unitization`?",
              "createdAt": "2023-08-03T11:48:55Z",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5jQdXV",
              "body": "Thanks!\r\n\r\nbors merge",
              "createdAt": "2023-08-04T08:47:43Z",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5jQ0V8",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/5760295202/job/15615970964)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/5760295202/job/15615971690)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/5760295202/job/15615971463)",
              "createdAt": "2023-08-04T10:00:10Z",
              "author": {
                "login": "bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "1c93e54cc650406f368021cde17dca0e2cc3ec71",
                "additions": 400,
                "deletions": 2,
                "committedDate": "2023-07-19T20:36:32Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "0a779dd4a2ba5bffe243e9999126c6c6353b70be",
                "additions": 1,
                "deletions": 0,
                "committedDate": "2023-07-19T20:38:35Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "f3f065ab009d09cfe6115444503d2c6d4c885712",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-07-19T20:39:24Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "eaccda2e0d6f40fd5a32a02aec348fae889552b6",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-07-19T22:29:10Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "8a257170fcb28880edb0e4674fd6e16dab5259bc",
                "additions": 8743,
                "deletions": 3640,
                "committedDate": "2023-07-28T16:27:57Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "ea99653c047046bae3a109ee980314eec0bb9e81",
                "additions": 27,
                "deletions": 26,
                "committedDate": "2023-07-28T19:18:14Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "44d4df41a83627eb6976ca68b8d33cd6990dfd71",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-08-02T20:19:31Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "35b87da1714f6db12e6cdca9d99df55b51a7f280",
                "additions": 41,
                "deletions": 56,
                "committedDate": "2023-08-02T22:43:55Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "b48bb03896c6f604bdd4e0b4aba93bcb2020749f",
                "additions": 14,
                "deletions": 36,
                "committedDate": "2023-08-03T17:58:59Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "d3112bf0891834a1b1919b5357a81922dc73f9c8",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-08-03T19:14:07Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "4c77b4b48a02ec4e4abf58850646af14fc506edf",
                "additions": 4,
                "deletions": 5,
                "committedDate": "2023-08-03T19:16:54Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            }
          ]
        },
        "createdAt": "2023-06-29T22:16:50Z",
        "deletions": 0,
        "files": {
          "nodes": [
            {
              "path": "Mathlib.lean",
              "additions": 1,
              "deletions": 0
            },
            {
              "path": "Mathlib/Algebra/Algebra/Subalgebra/Unitization.lean",
              "additions": 290,
              "deletions": 0
            },
            {
              "path": "Mathlib/GroupTheory/GroupAction/SubMulAction.lean",
              "additions": 18,
              "deletions": 0
            },
            {
              "path": "Mathlib/RingTheory/Adjoin/Basic.lean",
              "additions": 20,
              "deletions": 0
            },
            {
              "path": "Mathlib/RingTheory/Subring/Basic.lean",
              "additions": 16,
              "deletions": 0
            },
            {
              "path": "Mathlib/RingTheory/Subsemiring/Basic.lean",
              "additions": 15,
              "deletions": 0
            }
          ]
        },
        "headRefName": "j-loreaux/Unitize",
        "headRefOid": "4c77b4b48a02ec4e4abf58850646af14fc506edf",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5USDFF",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
              "color": "06e039",
              "name": "ready-to-merge"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJjTQ",
              "color": "33DBEC",
              "name": "t-algebra"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5dCd28",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ADedecker"
              },
              "submittedAt": "2023-08-03T11:53:06Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 5602,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5c748h",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ADedecker"
              },
              "submittedAt": "2023-08-02T15:22:25Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5c-Fip",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "j-loreaux"
              },
              "submittedAt": "2023-08-02T20:19:07Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5c-edE",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "j-loreaux"
              },
              "submittedAt": "2023-08-02T21:37:46Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5c-mjF",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "j-loreaux"
              },
              "submittedAt": "2023-08-02T22:14:07Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5c-m_B",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "j-loreaux"
              },
              "submittedAt": "2023-08-02T22:16:26Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5c-osU",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "j-loreaux"
              },
              "submittedAt": "2023-08-02T22:25:39Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5c-ppt",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "j-loreaux"
              },
              "submittedAt": "2023-08-02T22:30:46Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5c-ruN",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "j-loreaux"
              },
              "submittedAt": "2023-08-02T22:42:05Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5c-sg2",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "j-loreaux"
              },
              "submittedAt": "2023-08-02T22:46:39Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5c-siG",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "j-loreaux"
              },
              "submittedAt": "2023-08-02T22:46:47Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5dCN2r",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ADedecker"
              },
              "submittedAt": "2023-08-03T11:14:51Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5dCVzT",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ADedecker"
              },
              "submittedAt": "2023-08-03T11:47:48Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5dCd28",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ADedecker"
              },
              "submittedAt": "2023-08-03T11:53:06Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5MajJP",
                    "body": "```suggestion\r\n  homomorphism sending `(r, a)` to `r ‚Ä¢ 1 + a`. This is always surjective.\r\n```",
                    "createdAt": "2023-08-02T14:54:47Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Majhq",
                    "body": "I don't think this should be in this file. `s` is an arbitrary set here right?",
                    "createdAt": "2023-08-02T14:55:54Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5McSLh",
                    "body": "Moved to the end of `RingTheory.Adjoin.Basic`",
                    "createdAt": "2023-08-02T22:46:39Z",
                    "author": {
                      "login": "j-loreaux"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Majm9",
                    "body": "Ditto",
                    "createdAt": "2023-08-02T14:56:08Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5McSMT",
                    "body": "Moved to the end of `RingTheory.Adjoin.Basic`",
                    "createdAt": "2023-08-02T22:46:46Z",
                    "author": {
                      "login": "j-loreaux"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5MakVq",
                    "body": "Should we have `Semiring.Unitization` and `Ring.Unitization` (protected) for unitization of (semi)rings without algebra structure? Of course they would be defined as `Unitization ‚Ñï S` and `Unitization ‚Ñ§ S`",
                    "createdAt": "2023-08-02T14:58:18Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5McOeX",
                    "body": "Well, I don't need it at this point. If the algebraists want such a thing then they/we can add it, but in any case, it's for a different PR.",
                    "createdAt": "2023-08-02T22:16:26Z",
                    "author": {
                      "login": "j-loreaux"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Mak-5",
                    "body": "Can't you use [NonUnitalSubalgebra.inclusion](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Algebra/NonUnitalSubalgebra.html#NonUnitalSubalgebra.inclusion) here?",
                    "createdAt": "2023-08-02T15:00:17Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5McOMC",
                    "body": "I wish, but I don't think so. I assume you mean in conjunction with `Unitization.lift`? About all I could do was this:\r\n```lean\r\ndef foo :\r\n    s ‚Üí‚Çô‚Çê[R] (Algebra.adjoin R (s : Set A)).toNonUnitalSubalgebra := \r\n  NonUnitalAlgHom.codRestrict (NonUnitalSubalgebraClass.subtype s) _ fun x ‚Ü¶ Algebra.subset_adjoin x.property\r\n```\r\nBut the problem is you can't `Unitization.lift` this because we need this `Subalgebra.toNonUnitalSubalgebra` bit, and then we no longer know this thing is an `R`-algebra because we \"forgot\" about 1. So, it's kind of messy.",
                    "createdAt": "2023-08-02T22:14:07Z",
                    "author": {
                      "login": "j-loreaux"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5MeciE",
                    "body": "In theory we should be able to use subobject classes, but we lack infrastructure so let's keep it like that for now. I've opened #6335 and #6336 to track what would be needed for that",
                    "createdAt": "2023-08-03T11:14:50Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ManN7",
                    "body": "I see why it's not immediate (you'd have to get back to the full codomain), but is there really no good way of using [Algebra.adjoin_le](https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/Adjoin/Basic.html#Algebra.adjoin_le) here?",
                    "createdAt": "2023-08-02T15:07:20Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5McI11",
                    "body": "Good point, this works:\r\n```lean\r\n  have : Algebra.adjoin R s ‚â§ ((Algebra.adjoin R (s : Set A)).val.comp (unitization s)).range :=\r\n    Algebra.adjoin_le fun a ha ‚Ü¶ ‚ü®(‚ü®a, ha‚ü© : s), by simp‚ü©\r\n  fun x ‚Ü¶ match this x.property with | ‚ü®y, hy‚ü© => ‚ü®y, Subtype.ext hy‚ü©\r\n```",
                    "createdAt": "2023-08-02T21:37:45Z",
                    "author": {
                      "login": "j-loreaux"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Maovo",
                    "body": "```suggestion\r\n    Subsemiring.closure s ‚âÉ‚Çê[‚Ñï] Algebra.adjoin ‚Ñï s where\r\n```",
                    "createdAt": "2023-08-02T15:12:19Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Map9Q",
                    "body": "It should be enough to lower the requirements of [coe_int_mem](https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/Subring/Basic.html#coe_int_mem) right? If so, could you do the same for [coe_nat_mem](https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/Subsemiring/Basic.html#coe_nat_mem)?",
                    "createdAt": "2023-08-02T15:16:08Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5McRpD",
                    "body": "Aha, but we have [natCast_mem](https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/Subsemiring/Basic.html#natCast_mem), which is why I was confused. `coe_int_mem` works here, so I'll just use that for now. The generalization can go into another PR.",
                    "createdAt": "2023-08-02T22:42:05Z",
                    "author": {
                      "login": "j-loreaux"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5MaqRr",
                    "body": "Would it be worth adding `AlgEquiv` version of [LinearEquiv.ofEq](https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/Basic.html#LinearEquiv.ofEq)? It could already be used twice in this file.",
                    "createdAt": "2023-08-02T15:17:14Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5McPq-",
                    "body": "Aha, it already exists! But there's a name mismatch: [Subalgebra.equivOfEq](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Algebra/Subalgebra/Basic.html#Subalgebra.equivOfEq)",
                    "createdAt": "2023-08-02T22:25:39Z",
                    "author": {
                      "login": "j-loreaux"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5McQRL",
                    "body": "But we can't use it anyway because `Subsemiring.closure s : Subsemiring R`, it does not have type `Subalgebra ‚Ñï R`. We could write it so that it takes `SetLike` stuff, but even that wouldn't work because `SMulMemClass` has the scalars as an `outParam`. I experimented a bit ago with making that a `semiOutParam` instead, which would allow this kind of thing to work, and the breakage wasn't too severe. But I think in this case the extra `Subtype.ext` boilerplate is not too cumbersome.",
                    "createdAt": "2023-08-02T22:30:46Z",
                    "author": {
                      "login": "j-loreaux"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5MencE",
                    "body": "It turns out (see suggestions below) that it works perfectly fine using [subalgebraOfSubsemiring](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Algebra/Subalgebra/Basic.html#subalgebraOfSubsemiring) and [subalgebraOfSubring](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Algebra/Subalgebra/Basic.html#subalgebraOfSubring)",
                    "createdAt": "2023-08-03T11:53:06Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Mar8W",
                    "body": "I think it would be best to stay consistent with [Algebra.adjoin_induction'](https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/Adjoin/Basic.html#Algebra.adjoin_induction'), could you change one of them to match the other? Or is there a good reason for them to be different?",
                    "createdAt": "2023-08-02T15:22:22Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5Mb4tR",
                    "body": "@ADedecker `Algebra.adjoin_induction'` needs to be changed, see [this message](https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/removing.20unprimed.20closure.20induction.20principles/near/378952632) and the surrounding discussion. We can do it, but maybe let's not do it in this PR.",
                    "createdAt": "2023-08-02T20:19:07Z",
                    "author": {
                      "login": "j-loreaux"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Meh1U",
                    "body": "```suggestion\r\n    Subsemiring.closure s ‚âÉ‚Çê[‚Ñï] Algebra.adjoin ‚Ñï s :=\r\n  Subalgebra.equivOfEq (subalgebraOfSubsemiring <| Subsemiring.closure s) _ <|\r\n    le_antisymm (closure_le.mpr subset_adjoin) (adjoin_le subset_closure)\r\n```\r\nIt's even faster to compile!",
                    "createdAt": "2023-08-03T11:35:48Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Meh65",
                    "body": "```suggestion\r\n    Subring.closure s ‚âÉ‚Çê[‚Ñ§] Algebra.adjoin ‚Ñ§ s :=\r\n  Subalgebra.equivOfEq (subalgebraOfSubring <| Subring.closure s) _ <| by\r\n    refine le_antisymm ?_ (adjoin_le subset_closure)\r\n    -- Lean is lest smart here, probably because of the `with` definition of `subalgebraOfSubring`\r\n    change closure s ‚â§ (adjoin ‚Ñ§ s).toSubring\r\n    exact (closure_le.mpr subset_adjoin)\r\n```",
                    "createdAt": "2023-08-03T11:36:09Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5MektZ",
                    "body": "```suggestion\r\n    Function.Surjective S.unitization :=\r\n  have : StarSubalgebra.adjoin R S ‚â§ \r\n      ((StarSubalgebra.adjoin R (S : Set A)).subtype.comp S.unitization).range :=\r\n    StarSubalgebra.adjoin_le fun a ha ‚Ü¶ ‚ü®(‚ü®a, ha‚ü© : S), by simp‚ü©\r\n  fun x ‚Ü¶ match this x.property with | ‚ü®y, hy‚ü© => ‚ü®y, Subtype.ext hy‚ü©\r\n```",
                    "createdAt": "2023-08-03T11:47:45Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjg5MjA1OTg=",
              "login": "j-loreaux"
            },
            {
              "id": "U_kgDOB75MNQ",
              "login": "leanprover-community-mathlib4-bot"
            },
            {
              "id": "MDQ6VXNlcjQ4NjU2Nzkz",
              "login": "ADedecker"
            },
            {
              "id": "MDQ6VXNlcjQ3Nzk1Ng==",
              "login": "kim-em"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": null,
        "title": "[Merged by Bors] - feat: maps between the unitization of a non-unital subalgebra and its `Algebra.adjoin`",
        "updatedAt": "2023-08-04T10:00:15Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/5602",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5qMNAqzwAAAAJBGTet",
              "createdAt": "2023-06-29T22:16:50Z",
              "label": {
                "id": "MDU6TGFiZWwzMjg4OTQyMDg2",
                "name": "blocked-by-other-PR"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5qMNAqzwAAAAJBGTey",
              "createdAt": "2023-06-29T22:16:50Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5qMNAqzwAAAAJBGTe3",
              "createdAt": "2023-06-29T22:16:50Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABMJpquQ",
                "name": "after-port"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5qMNAqzwAAAAJBGTe8",
              "createdAt": "2023-06-29T22:16:50Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABMtntmA",
                "name": "new-feature"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5qMNAqzwAAAAJB-2Lm",
              "createdAt": "2023-07-01T16:40:36Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5qMNAqzwAAAAJLeI_5",
              "createdAt": "2023-07-18T23:02:36Z",
              "label": {
                "id": "MDU6TGFiZWwzMjg4OTQyMDg2",
                "name": "blocked-by-other-PR"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5h0SlR",
              "createdAt": "2023-07-18T23:02:37Z",
              "body": "This PR/issue depends on:\n* ~~leanprover-community/mathlib4#5151~~\n* ~~leanprover-community/mathlib4#5512~~\n* ~~leanprover-community/mathlib4#5537~~\nBy **[Dependent Issues](https://github.com/z0al/dependent-issues)** (ü§ñ). Happy coding!\n<!-- By Dependent Issues (Action) - DO NOT REMOVE -->",
              "author": {
                "login": "leanprover-community-mathlib4-bot"
              }
            },
            {
              "__typename": "CommentDeletedEvent"
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "1c93e54cc650406f368021cde17dca0e2cc3ec71"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "0a779dd4a2ba5bffe243e9999126c6c6353b70be"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "f3f065ab009d09cfe6115444503d2c6d4c885712"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c5qMNAqzwAAAAJMIR9W",
              "createdAt": "2023-07-19T20:40:45Z"
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5qMNAqzwAAAAJMIUmr",
              "createdAt": "2023-07-19T20:42:18Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5qMNAqzwAAAAJMIgYD",
              "createdAt": "2023-07-19T20:48:53Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABMJpquQ",
                "name": "after-port"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "eaccda2e0d6f40fd5a32a02aec348fae889552b6"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5qMNAqzwAAAAJN14yK",
              "createdAt": "2023-07-24T06:01:08Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJjTQ",
                "name": "t-algebra"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5qMNAqzwAAAAJQaWTY",
              "createdAt": "2023-07-27T17:56:59Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "8a257170fcb28880edb0e4674fd6e16dab5259bc"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "ea99653c047046bae3a109ee980314eec0bb9e81"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5qMNAqzwAAAAJRKB8W",
              "createdAt": "2023-07-28T19:27:48Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5c748h",
              "createdAt": "2023-08-02T14:54:47Z",
              "body": "",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5qMNAqzwAAAAJTa588",
              "createdAt": "2023-08-02T15:23:06Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABMtntmA",
                "name": "new-feature"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5qMNAqzwAAAAJTa6IM",
              "createdAt": "2023-08-02T15:23:10Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5qMNAqzwAAAAJTa6R9",
              "createdAt": "2023-08-02T15:23:13Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "44d4df41a83627eb6976ca68b8d33cd6990dfd71"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "35b87da1714f6db12e6cdca9d99df55b51a7f280"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5qMNAqzwAAAAJToLxl",
              "createdAt": "2023-08-02T22:52:53Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5qMNAqzwAAAAJToLxp",
              "createdAt": "2023-08-02T22:52:53Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5NzoZm",
              "createdAt": "2023-08-03T11:11:24Z",
              "source": {
                "id": "I_kwDOFcwZ1c5tXZJV",
                "title": "Generalize `Submodule.ofLe` and its friends to subobject classes",
                "url": "https://github.com/leanprover-community/mathlib4/issues/6335"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5dCVzT",
              "createdAt": "2023-08-03T11:35:48Z",
              "body": "",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5qMNAqzwAAAAJT7l8s",
              "createdAt": "2023-08-03T11:47:56Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5qMNAqzwAAAAJT7l80",
              "createdAt": "2023-08-03T11:47:56Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5jLC7m",
              "createdAt": "2023-08-03T11:48:55Z",
              "body": "I'm not a big fan of the filename `Algebra.Algebra.Unitize`, especially since we already have `Algebra.Algebra.Unitization`. What do you think of moving it to `Algebra.Algebra.Subalgebra.Unitization`?",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "b48bb03896c6f604bdd4e0b4aba93bcb2020749f"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "d3112bf0891834a1b1919b5357a81922dc73f9c8"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "4c77b4b48a02ec4e4abf58850646af14fc506edf"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5jQdXV",
              "createdAt": "2023-08-04T08:47:43Z",
              "body": "Thanks!\r\n\r\nbors merge",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5qMNAqzwAAAAJUds_C",
              "createdAt": "2023-08-04T08:47:58Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
                "name": "ready-to-merge"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5qMNAqzwAAAAJUdtBV",
              "createdAt": "2023-08-04T08:47:59Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5jQ0V8",
              "createdAt": "2023-08-04T10:00:10Z",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/5760295202/job/15615970964)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/5760295202/job/15615971690)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/5760295202/job/15615971463)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c5qMNAqzwAAAAJUgMh7",
              "createdAt": "2023-08-04T10:00:11Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c5qMNAqzwAAAAJUgMsL",
              "createdAt": "2023-08-04T10:00:15Z"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5ODytB",
              "createdAt": "2023-08-22T00:12:21Z",
              "source": {
                "id": "PR_kwDOFcwZ1c5XO10g",
                "title": "[Merged by Bors] - feat: maps from the unitization of non-unital subobjects of unital algebras",
                "url": "https://github.com/leanprover-community/mathlib4/pull/6372"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5OD4g-",
              "createdAt": "2023-08-22T02:48:00Z",
              "source": {
                "id": "PR_kwDOFcwZ1c5Ycc0x",
                "title": "[Merged by Bors] - revert: #5602",
                "url": "https://github.com/leanprover-community/mathlib4/pull/6717"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5OIJIf",
              "createdAt": "2023-08-25T14:32:50Z",
              "source": {
                "id": "PR_kwDOFcwZ1c5YdL8j",
                "title": "feat: Lindemann-Weierstrass Theorem",
                "url": "https://github.com/leanprover-community/mathlib4/pull/6718"
              }
            }
          ]
        }
      }
    }
  }
}
