{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 504,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "robin-carlier"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "- Define `WalkingReflexivePair`, the category indexing reflexive pair.\r\n- Show that the forgetful functor from this category to `WalkingParallelPair` is `Final`.\r\n- Show that coequalizers of reflexive pairs are equivalent to colimits of diagrams indexed by `WalkingReflexivePair`.\r\n- Show that having coequalizers of all reflexive pairs is equivalent to having all `WalkingReflexivePair`-shaped colimits.\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n- [x] depends on: #17723 \r\n\r\nThere are probably a few names that could be better, perhaps some statements would belong to a new `ReflexivePair` namespace?\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 1,
        "closed": true,
        "closedAt": "2024-10-15T07:53:07Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c6F0_tW",
              "body": "@robin-carlier This PR looks mostly fine, but there are still some places where it needs some work. I see that you have attempted to process some of the review comments. Are you planning to continue working on this PR? Would you like some help from others, or do you want to hand over completely?",
              "createdAt": "2024-07-23T13:30:10Z",
              "author": {
                "login": "jcommelin"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6F1hmK",
              "body": "> @robin-carlier This PR looks mostly fine, but there are still some places where it needs some work. I see that you have attempted to process some of the review comments. Are you planning to continue working on this PR? Would you like some help from others, or do you want to hand over completely?\r\n\r\nI am taking a break from math (and consequently lean)-related stuff for the time being, so I don’t plan to start working back on this in the near future and I’d gladly hand it over completely if someone wants to work on this or if this content is needed.",
              "createdAt": "2024-07-23T14:24:35Z",
              "author": {
                "login": "robin-carlier"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6OBLaa",
              "body": "### PR summary [705b81673b](https://github.com/leanprover-community/mathlib4/pull/8013/commits/705b81673b7748aadf74e12661d465a11d9c787f)\n\nImport changes exceeding 2%\n\n| %      | File |\n| -      | -    |\n| +2.00% | `Mathlib.CategoryTheory.Limits.Shapes.Reflexive` |\n\n<details><summary>\n\n#### Import changes for modified files\n\n</summary>\n\nDependency changes\n\n| File | Base Count | Head Count | Change |\n| --- | --- | --- | --- |\n| Mathlib.CategoryTheory.Limits.Shapes.Reflexive | 549 | 560 | +11 (+2.00%) |\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n| `Mathlib.CategoryTheory.Monad.Monadicity` `Mathlib.CategoryTheory.Monad.Comonadicity`|9|\n|<details><summary>5 files</summary> `Mathlib.CategoryTheory.Monad.Equalizer` `Mathlib.CategoryTheory.Limits.Shapes.Reflexive` `Mathlib.CategoryTheory.Adjunction.Lifting.Left` `Mathlib.CategoryTheory.Adjunction.Lifting.Right` `Mathlib.CategoryTheory.Monad.Coequalizer`</details>|11|\n\n</details>\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ Hom`\n`+ Hom.comp`\n`+ Hom.id_eq`\n`+ ReflexiveCofork`\n`+ ReflexiveCofork.isColimitEquiv`\n`+ WalkingReflexivePair`\n`+ app_one_eq_π`\n`+ category`\n`+ colimitOfIsReflexivePairIsoCoequalizer`\n`+ compRightIso`\n`+ condition`\n`+ diagramIsoReflexivePair`\n`+ hasReflexiveCoequalizer_iff_hasCoequalizer`\n`+ hasReflexiveCoequalizers_iff`\n`+ inclusionWalkingReflexivePair`\n`+ inclusionWalkingReflexivePairOfIsReflexivePairIso`\n`+ inclusionWalkingReflexivePair_final`\n`+ leftCompReflexion_eq`\n`+ map_reflexion_comp_map_left`\n`+ map_reflexion_comp_map_right`\n`+ mk`\n`+ mkNatIso`\n`+ mkNatTrans`\n`+ mkNatTrans_app_one`\n`+ mkNatTrans_app_zero`\n`+ mk_π`\n`+ ofIsReflexivePair`\n`+ ofIsReflexivePair_hasColimit_of_hasCoequalizer`\n`+ ofIsReflexivePair_map_left`\n`+ ofIsReflexivePair_map_right`\n`+ reflexion_comp_left`\n`+ reflexion_comp_right`\n`+ reflexiveCoequalizerIsoCoequalizer`\n`+ reflexiveCoforkEquivCofork`\n`+ reflexiveCoforkEquivCoforkObjIso`\n`+ reflexiveCoforkEquivCofork_functor_obj_π`\n`+ reflexiveCoforkEquivCofork_inverse_obj_π`\n`+ reflexivePair`\n`+ reflexivePair_hasColimit_of_hasCoequalizer`\n`+ reflexivePair_map_left`\n`+ reflexivePair_map_reflexion`\n`+ reflexivePair_map_right`\n`+ reflexivePair_obj_one`\n`+ reflexivePair_obj_zero`\n`+ rightCompReflexion_eq`\n`+ toCofork`\n`+ to_isReflexivePair`\n`+ whiskerRightMkNatTrans`\n`+ ι_colimitOfIsReflexivePairIsoCoequalizer_hom`\n`+ ι_reflexiveCoequalizerIsoCoequalizer_hom`\n`+ π`\n`+ π_colimitOfIsReflexivePairIsoCoequalizer_inv`\n`+ π_reflexiveCoequalizerIsoCoequalizer_inv`\n`++ instance (X : WalkingReflexivePair) :`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n</details>",
              "createdAt": "2024-09-30T10:01:03Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6OBS4A",
              "body": "I ended up changing the name of `forgetReflexion` to `inclusionWalkingReflexivePair` in the `WalkingParallelPair` namespace. It leads to rather long names but I’m out of ideas of a better name.",
              "createdAt": "2024-09-30T10:14:32Z",
              "author": {
                "login": "robin-carlier"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6OO6i8",
              "body": "This PR needs some modifications so as to fit more into the mathlib conventions, but the results look very nice to me. ",
              "createdAt": "2024-10-01T15:10:05Z",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6OYH46",
              "body": "Thank you for the extensive review and the numerous tricks I did not know about!\r\nI have implemented your suggestions, and added a few new constructors to bundles functors from or towards a term of the form `reflexivePair …`.\r\nTo avoid cluttering things too much, I decided not to put a constructor for natural transforms between two `reflexivePair`, because it can already be constructed with `mkNatTrans` and `mkNatTrans'` if needed.",
              "createdAt": "2024-10-02T13:46:39Z",
              "author": {
                "login": "robin-carlier"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6Pgpdr",
              "body": "I renamed `inclusionWalkingReflexivePairEquivCocone` to `reflexiveCoforkEquivCofork`, and `ofIsReflexivePairColimitEquiv` to `reflexiveCoequalizerIsoCoequalizer`. Since we’are adding simps lemmas, I took the liberty to also add `ofIsReflexivePair_map_left`, `ofIsReflexivePair_map_right`, `reflexiveCoforkEquivCofork_functor_obj_π` and `reflexiveCoforkEquivCofork_inverse_obj_π` for completeness. I couldn’t golf more the proof of the latter unfortunately.",
              "createdAt": "2024-10-11T15:56:59Z",
              "author": {
                "login": "robin-carlier"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6PssG3",
              "body": "This has been rebased onto https://github.com/leanprover-community/mathlib4/pull/17723, on which it now depends on.",
              "createdAt": "2024-10-14T10:55:23Z",
              "author": {
                "login": "robin-carlier"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6PvtMw",
              "body": "This PR/issue depends on:\n* ~~leanprover-community/mathlib4#17723~~\nBy **[Dependent Issues](https://github.com/z0al/dependent-issues)** (🤖). Happy coding!\n<!-- By Dependent Issues (Action) - DO NOT REMOVE -->",
              "createdAt": "2024-10-14T15:49:23Z",
              "author": {
                "login": "mathlib4-dependent-issues-bot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6Pv2sq",
              "body": "I added a space just before merging #17723, so that you need to `git merge origin` and keep the incoming version.",
              "createdAt": "2024-10-14T16:08:07Z",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6P1VUp",
              "body": "Thanks!\r\n\r\nbors merge\r\n",
              "createdAt": "2024-10-15T07:38:39Z",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6P1cPE",
              "body": "Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/11341532320/job/31539991898)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/11341532320/job/31539992679)",
              "createdAt": "2024-10-15T07:53:06Z",
              "author": {
                "login": "mathlib-bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "e524c93f11feb274e29c3c89831377118585b987",
                "additions": 22,
                "deletions": 0,
                "committedDate": "2024-10-14T10:30:01Z",
                "author": {
                  "name": "Robin Carlier",
                  "email": "57142648+robin-carlier@users.noreply.github.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVX4e3A",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11327627652/job/31499099868"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVX4exw",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11327627642/job/31499099847"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVX4glw",
                        "name": "Fix style issues from lint",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11327627644/job/31499100311"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVSeTzw",
                        "name": "Add topic label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11325795952/job/31493428175"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVSeTWw",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11325795950/job/31493428059"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVSeUFg",
                        "name": "build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11325795957/job/31493428246"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVSQ_uw",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11325724791/job/31493210043"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVSRBDw",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11325724804/job/31493210383"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVSeTpQ",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11325795954/job/31493428133"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVX4hxw",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11327627652/job/31499100615"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVSRCDQ",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11325724791/job/31493210637"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVSQ_-A",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11325724804/job/31493210104"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVSeVLg",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11325795954/job/31493428526"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVSRA4Q",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11325724791/job/31493210337"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVSRCCw",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11325724804/job/31493210635"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVSREug",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11325724791/job/31493211322"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVS9beQ",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11325724804/job/31493938041"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVSexFg",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/31493435670"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVSf4kg",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=17723&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "9371aa19d8477ac1a5b15a7ae348814ff42a4484",
                "additions": 125,
                "deletions": 84,
                "committedDate": "2024-10-14T10:52:34Z",
                "author": {
                  "name": "Violeta Hernández",
                  "email": "vi.hdz.p@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "58900c3521c2b919e249a24d547f84057e37afbf",
                "additions": 378,
                "deletions": 4,
                "committedDate": "2024-10-14T10:52:34Z",
                "author": {
                  "name": "Robin Carlier",
                  "email": "57142648+robin-carlier@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "abb32c2d7188d93648a701801e1561fbd057bbb5",
                "additions": 19,
                "deletions": 19,
                "committedDate": "2024-10-14T10:52:34Z",
                "author": {
                  "name": "Robin Carlier",
                  "email": "57142648+robin-carlier@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "033ac8f64bdec06eeb4060c314d85214e805d442",
                "additions": 9,
                "deletions": 5,
                "committedDate": "2024-10-14T10:52:34Z",
                "author": {
                  "name": "Robin Carlier",
                  "email": "57142648+robin-carlier@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "851cc8e540500c63f1706feb3680848066212074",
                "additions": 2,
                "deletions": 0,
                "committedDate": "2024-10-14T10:52:34Z",
                "author": {
                  "name": "Robin Carlier",
                  "email": "57142648+robin-carlier@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "63f2f3bfb7fa881b1e4cb1372abcc015e27b4e02",
                "additions": 93,
                "deletions": 87,
                "committedDate": "2024-10-14T10:52:34Z",
                "author": {
                  "name": "Robin Carlier",
                  "email": "robin.carlier@ens-lyon.fr"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "59b3b653ef5dd895bf6d55f2eb1f3a5001c9294c",
                "additions": 39,
                "deletions": 37,
                "committedDate": "2024-10-14T10:52:34Z",
                "author": {
                  "name": "Robin Carlier",
                  "email": "robin.carlier@ens-lyon.fr"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "a03bf969dbd646b167e2599ce648d755da8d0f80",
                "additions": 3,
                "deletions": 2,
                "committedDate": "2024-10-14T10:52:34Z",
                "author": {
                  "name": "Robin Carlier",
                  "email": "robin.carlier@ens-lyon.fr"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "b60dc7260c381923ee9c055c4d5a45bbbb75e30a",
                "additions": 124,
                "deletions": 149,
                "committedDate": "2024-10-14T10:52:34Z",
                "author": {
                  "name": "Robin Carlier",
                  "email": "robin.carlier@ens-lyon.fr"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "74653ab02ded0043a126635956e7e58e5880303c",
                "additions": 182,
                "deletions": 28,
                "committedDate": "2024-10-14T10:52:34Z",
                "author": {
                  "name": "Robin Carlier",
                  "email": "robin.carlier@ens-lyon.fr"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "295c2ff5a428546c4c7c3446394f5364cb16fadc",
                "additions": 20,
                "deletions": 29,
                "committedDate": "2024-10-14T10:52:34Z",
                "author": {
                  "name": "Robin Carlier",
                  "email": "robin.carlier@ens-lyon.fr"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "16c8f2ac4d12fa456f71a46a687064626ca32d6c",
                "additions": 7,
                "deletions": 7,
                "committedDate": "2024-10-14T10:52:34Z",
                "author": {
                  "name": "Robin Carlier",
                  "email": "robin.carlier@ens-lyon.fr"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "3969e910dfd21127ca2e267f162883f2452839f4",
                "additions": 1,
                "deletions": 3,
                "committedDate": "2024-10-14T10:52:34Z",
                "author": {
                  "name": "Robin Carlier",
                  "email": "57142648+robin-carlier@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "8577e695a9fcdcac1f412a3478a290c587f27fa3",
                "additions": 1,
                "deletions": 0,
                "committedDate": "2024-10-14T10:52:34Z",
                "author": {
                  "name": "Robin Carlier",
                  "email": "57142648+robin-carlier@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "f02fd038c630f61c47a2ea7551019fee8be9de2b",
                "additions": 28,
                "deletions": 49,
                "committedDate": "2024-10-14T10:52:34Z",
                "author": {
                  "name": "Robin Carlier",
                  "email": "57142648+robin-carlier@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "e78c7756e76e55f7d49f85b83c293f5f6e16e181",
                "additions": 78,
                "deletions": 108,
                "committedDate": "2024-10-14T10:52:34Z",
                "author": {
                  "name": "Robin Carlier",
                  "email": "robin.carlier@ens-lyon.fr"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "4f3172ff6c908a93860aa4f763aa617f2f21c495",
                "additions": 4,
                "deletions": 4,
                "committedDate": "2024-10-14T10:52:34Z",
                "author": {
                  "name": "Robin Carlier",
                  "email": "robin.carlier@ens-lyon.fr"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "28350c3adc4512fc9c1adc018ec2bbcf1492e364",
                "additions": 40,
                "deletions": 43,
                "committedDate": "2024-10-14T10:52:34Z",
                "author": {
                  "name": "Robin Carlier",
                  "email": "robin.carlier@ens-lyon.fr"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "593f8d07b0f3202d4a759c697b8992d29367da41",
                "additions": 1,
                "deletions": 0,
                "committedDate": "2024-10-14T10:52:34Z",
                "author": {
                  "name": "Robin Carlier",
                  "email": "robin.carlier@ens-lyon.fr"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "0a8cbb7a8b00e1b747d5ce0e4dac49ca9d5fa861",
                "additions": 2,
                "deletions": 2,
                "committedDate": "2024-10-14T10:52:34Z",
                "author": {
                  "name": "Robin Carlier",
                  "email": "robin.carlier@ens-lyon.fr"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "27fcc3db6283c93f964b579726dd841d258d35ed",
                "additions": 8,
                "deletions": 8,
                "committedDate": "2024-10-14T10:52:34Z",
                "author": {
                  "name": "Robin Carlier",
                  "email": "57142648+robin-carlier@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "fd648070cbd04b4ca2f84052d221041c2334c8fe",
                "additions": 10,
                "deletions": 10,
                "committedDate": "2024-10-14T10:52:34Z",
                "author": {
                  "name": "Robin Carlier",
                  "email": "robin.carlier@ens-lyon.fr"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "ed06ccc070e66186a06ba728cbf3e13f8b5e54f4",
                "additions": 17,
                "deletions": 20,
                "committedDate": "2024-10-14T10:52:34Z",
                "author": {
                  "name": "Robin Carlier",
                  "email": "robin.carlier@ens-lyon.fr"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "3eae82918709485d602cabcd79bf6f8c5e36547c",
                "additions": 37,
                "deletions": 41,
                "committedDate": "2024-10-14T10:52:34Z",
                "author": {
                  "name": "Robin Carlier",
                  "email": "robin.carlier@ens-lyon.fr"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "617187a83803a5c8afb861bbbfc61e092538c2aa",
                "additions": 82,
                "deletions": 26,
                "committedDate": "2024-10-14T10:52:34Z",
                "author": {
                  "name": "Robin Carlier",
                  "email": "57142648+robin-carlier@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "5bcc26a121839473a1fd9df8966b7bf0fba62eb4",
                "additions": 2,
                "deletions": 2,
                "committedDate": "2024-10-14T10:52:34Z",
                "author": {
                  "name": "Robin Carlier",
                  "email": "57142648+robin-carlier@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "07e8930d2b00620cd2957e5d24f44c2db962ebbd",
                "additions": 14,
                "deletions": 15,
                "committedDate": "2024-10-14T10:52:34Z",
                "author": {
                  "name": "Robin Carlier",
                  "email": "57142648+robin-carlier@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "a95207a32f4acd4325b66a23b83aa0926318589b",
                "additions": 9,
                "deletions": 9,
                "committedDate": "2024-10-14T10:52:34Z",
                "author": {
                  "name": "Robin Carlier",
                  "email": "57142648+robin-carlier@users.noreply.github.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVTPLwQ",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11326062381/job/31494228929"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVTPMGA",
                        "name": "build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11326062377/job/31494229016"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVTPHXQ",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11326062077/job/31494227805"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVTPIeg",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11326062071/job/31494228090"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVTPMng",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11326062380/job/31494229150"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVTPJqA",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11326062077/job/31494228392"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVTPHVA",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11326062071/job/31494227796"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVTPLvg",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11326062380/job/31494228926"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVTPJwA",
                        "name": "Build",
                        "conclusion": "CANCELLED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11326062071/job/31494228416"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVTPIiQ",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11326062077/job/31494228105"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVTUpIA",
                        "name": "Post-CI job",
                        "conclusion": "CANCELLED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11326062071/job/31494318368"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVTPKuQ",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11326062077/job/31494228665"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVTPggQ",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/31494234241"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVTPSPA",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=8013&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "b554381f88610e2526853dc072ebf5994b7edbf9",
                "additions": 5,
                "deletions": 10,
                "committedDate": "2024-10-14T10:54:20Z",
                "author": {
                  "name": "Robin Carlier",
                  "email": "57142648+robin-carlier@users.noreply.github.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVTUH9g",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11326089438/job/31494309878"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVTUIRQ",
                        "name": "build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11326089444/job/31494309957"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVTT9TA",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11326088365/job/31494307148"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVTT_VA",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11326088388/job/31494307668"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVTUICA",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11326089433/job/31494309896"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVTT-5Q",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11326088365/job/31494307557"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVTUAhw",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11326088388/job/31494307975"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVTUJlg",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11326089433/job/31494310294"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVTUAKw",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11326088365/job/31494307883"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVTT92w",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11326088388/job/31494307291"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVTUBVQ",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11326088365/job/31494308181"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVT7Vpw",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11326088388/job/31494952359"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVTUdKQ",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/31494315305"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVTWnkg",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=8013&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "31d57e6136fd0a939eb97f9a2082c8e0cc5bd281",
                "additions": 4490,
                "deletions": 3365,
                "committedDate": "2024-10-14T20:02:35Z",
                "author": {
                  "name": "Robin Carlier",
                  "email": "57142648+robin-carlier@users.noreply.github.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHV9-p2g",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341207897/job/31539046874"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHV9_L7Q",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341210845/job/31539055597"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHV9-q3w",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341207894/job/31539047135"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHV9_K5Q",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341210848/job/31539055333"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHV9-poA",
                        "name": "Fix style issues from lint",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341207898/job/31539046816"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHV9_LAQ",
                        "name": "Fix style issues from lint",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341210850/job/31539055361"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVrzH9w",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11334227246/job/31519983607"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVrzIEw",
                        "name": "build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11334227252/job/31519983635"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVrzBag",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11334226754/job/31519981930"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVrzBaw",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11334226768/job/31519981931"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVrzI2w",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11334227244/job/31519983835"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHV9-sWQ",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341207897/job/31539047513"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHV9_LAg",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341210845/job/31539055362"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVrzDXQ",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11334226754/job/31519982429"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVrzDUw",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11334226768/job/31519982419"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVrzH2Q",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11334227244/job/31519983577"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVrzCYw",
                        "name": "Build",
                        "conclusion": "FAILURE",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11334226768/job/31519982179"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVrzCZQ",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11334226754/job/31519982181"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVrzEZw",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11334226754/job/31519982695"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVr5yxA",
                        "name": "Post-CI job",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11334226768/job/31520092868"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVrzZOQ",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/31519988025"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHVr0m0Q",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=8013&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "aa42caeb6f8a4fae369170e747e6ea39646dc050",
                "additions": 0,
                "deletions": 3,
                "committedDate": "2024-10-15T07:22:29Z",
                "author": {
                  "name": "Joël Riou",
                  "email": "37772949+joelriou@users.noreply.github.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHV9_uhQ",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341213382/job/31539064453"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHV9_uuQ",
                        "name": "build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341213380/job/31539064505"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHV9_rsQ",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341213163/job/31539063729"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHV9_sxA",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341213162/job/31539064004"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHV9_wdw",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341213386/job/31539064951"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHV9_uWQ",
                        "name": "Lint style",
                        "conclusion": "CANCELLED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341213162/job/31539064409"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHV9_uGA",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341213163/job/31539064344"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHV9_viQ",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341213386/job/31539064713"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHV9_rkw",
                        "name": "Build",
                        "conclusion": "CANCELLED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341213162/job/31539063699"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHV9_sww",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341213163/job/31539064003"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHV-BV0g",
                        "name": "Post-CI job",
                        "conclusion": "CANCELLED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341213162/job/31539090898"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHV9_v3A",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341213163/job/31539064796"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHV-AkfA",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/31539078268"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHV9_7eA",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=8013&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "705b81673b7748aadf74e12661d465a11d9c787f",
                "additions": 0,
                "deletions": 3,
                "committedDate": "2024-10-15T07:22:40Z",
                "author": {
                  "name": "Joël Riou",
                  "email": "37772949+joelriou@users.noreply.github.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHV-APQw",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341216515/job/31539072835"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHV-APUA",
                        "name": "build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341216519/job/31539072848"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHV-AM1A",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341216161/job/31539072212"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHV-APKA",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341216159/job/31539072808"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHV-AQKA",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341216529/job/31539073064"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHV-AN-A",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341216161/job/31539072504"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHV-AN7A",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341216159/job/31539072492"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHV-ARTg",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341216529/job/31539073358"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHV-AP-A",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341216161/job/31539073016"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHV-AMtw",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341216159/job/31539072183"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHV-ARJw",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341216161/job/31539073319"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHV-SS6A",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341216159/job/31539368680"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHV-BFuQ",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/31539086777"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHV-B23Q",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=8013&login=leanprover-community&repository=mathlib4"
                      },
                      {
                        "__typename": "StatusContext",
                        "id": "SC_kwDOFcwZ1c8AAAAHcZUupw",
                        "context": "bors",
                        "state": "SUCCESS",
                        "targetUrl": "https://mathlib-bors-ca18eefec4cb.herokuapp.com/batches/6420",
                        "description": "Build succeeded"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "createdAt": "2023-10-29T12:52:34Z",
        "deletions": 6,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/CategoryTheory/Limits/Shapes/Reflexive.lean",
              "additions": 504,
              "deletions": 6
            }
          ]
        },
        "headRefName": "RC_WalkingReflexivePair",
        "headRefOid": "705b81673b7748aadf74e12661d465a11d9c787f",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5eDB-h",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
              "color": "06e039",
              "name": "ready-to-merge"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJTYQ",
              "color": "33dbec",
              "name": "t-category-theory"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABb5aSCQ",
              "color": "8BBA68",
              "name": "new-contributor"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABwbfWPw",
              "color": "B60205",
              "name": "large-import"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5lgQuQ",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "github-actions"
              },
              "submittedAt": "2023-10-29T12:53:05Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6NKsWF",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-15T07:22:18Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mJxY1",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kmill"
              },
              "submittedAt": "2023-11-04T18:53:31Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 8013,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": "CHANGES_REQUESTED",
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5lgQuQ",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "github-actions"
              },
              "submittedAt": "2023-10-29T12:53:05Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5l4lII",
              "body": "As this is available in mathlib, I would advocate for a definition of the category `WalkingReflexivePair` by using generators and relations as follows:\r\n\r\n```lean\r\nimport Mathlib.CategoryTheory.PathCategory\r\n\r\nnamespace CategoryTheory.Limits\r\n\r\ninductive WalkingReflexivePairQuiver : Type where\r\n  | zero\r\n  | one\r\n\r\nnamespace WalkingReflexivePairQuiver\r\n\r\ninductive Hom : WalkingReflexivePairQuiver → WalkingReflexivePairQuiver → Type\r\n  | left : Hom zero one\r\n  | right : Hom zero one\r\n  | section_ : Hom one zero\r\n\r\ninstance : Quiver WalkingReflexivePairQuiver where\r\n  Hom := Hom\r\n\r\nabbrev left : zero ⟶ one := Hom.left\r\nabbrev right : zero ⟶ one := Hom.right\r\nabbrev section_ : one ⟶ zero := Hom.section_\r\n\r\ninductive homRel : HomRel (Paths WalkingReflexivePairQuiver)\r\n  | section_left : homRel (section_.toPath ≫ left.toPath) (𝟙 _)\r\n  | section_right : homRel (section_.toPath ≫ right.toPath) (𝟙 _)\r\n\r\nend WalkingReflexivePairQuiver\r\n\r\ndef WalkingReflexivePair := Quotient WalkingReflexivePairQuiver.homRel\r\n  deriving Category\r\n\r\nend CategoryTheory.Limits\r\n```\r\n\r\nIt should make a few constructions slightly easier (removing case by case studies). Only the proof that the inclusion from `WalkingParallelPair` is final would need some changes.\r\n\r\n(If it is too complicated to get the cofinality property, you may keep the more explicit approach.)",
              "state": "CHANGES_REQUESTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2023-11-02T02:49:41Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mJxYa",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kmill"
              },
              "submittedAt": "2023-11-04T18:53:16Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mJxY1",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kmill"
              },
              "submittedAt": "2023-11-04T18:53:31Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6LgPDK",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-01T14:06:56Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6LgVtd",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-01T14:16:55Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6LgWWJ",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-01T14:17:52Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6LgYwU",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-01T14:21:21Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6LgaMt",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-01T14:23:28Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6LgbYP",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-01T14:25:12Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6Lgb4V",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-01T14:25:58Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6LgcQ-",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-01T14:26:31Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6Lgf0f",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-01T14:31:37Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6LgmpB",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-01T14:41:46Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6LgnhL",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-01T14:43:04Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6LgqDo",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-01T14:46:52Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6LgqxG",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-01T14:47:55Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6Lg0Ol",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-01T15:01:22Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6Lg3cV",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-01T15:05:37Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6Lg40c",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-01T15:07:31Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MMGC5",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-07T13:37:21Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MMGOP",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-07T13:37:35Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MMGrc",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-07T13:38:17Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MMGwy",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-07T13:38:24Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MMhYe",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-07T14:17:33Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MMioI",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-07T14:18:53Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MMp4T",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-07T14:28:20Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MMrxR",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-07T14:31:09Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MMshQ",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-07T14:32:16Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MMu2I",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-07T14:35:39Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MMymk",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-07T14:40:49Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MM2r3",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-07T14:47:00Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MTETl",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-08T08:38:27Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MTFbm",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-08T08:39:59Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MTGZS",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-08T08:41:13Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MTJhG",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-08T08:45:32Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MTMmw",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-08T08:49:56Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MTPbs",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-08T08:53:39Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MYdmH",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-08T18:22:54Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MgoaR",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-09T14:37:59Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6Mgo85",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-09T14:38:48Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MgpgD",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-09T14:39:38Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MoTKJ",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "robin-carlier"
              },
              "submittedAt": "2024-10-10T07:46:38Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6Mtc2j",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-10T15:24:22Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MteBV",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-10T15:26:10Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MteNS",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-10T15:26:27Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MteUW",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-10T15:26:38Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MtmWe",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "robin-carlier"
              },
              "submittedAt": "2024-10-10T15:39:57Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MtqT2",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-10T15:45:44Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6Mtr-q",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-10T15:48:43Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MtvWI",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-10T15:54:53Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MtxEW",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-10T15:58:03Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6Mt0Op",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-10T16:03:55Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6Mt00O",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-10T16:04:48Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6Mt4fZ",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-10T16:11:53Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6Mt9WH",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-10T16:20:33Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6My7yZ",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-11T07:43:49Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6My9pC",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-11T07:46:05Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6My-Tz",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-11T07:47:21Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6My-cw",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-11T07:47:39Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6My_L3",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-11T07:49:15Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6My_qu",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-11T07:50:20Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6My_-i",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-11T07:51:01Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MzAl-",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-11T07:52:26Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MzCEn",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-11T07:55:19Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MzEOi",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-11T08:00:03Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6NBAWM",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-14T09:00:23Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6NBBDg",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-14T09:01:34Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6NBBRR",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-14T09:01:52Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6NBB0d",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-14T09:02:47Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6NBB7Y",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-14T09:02:59Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6NBHVF",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-14T09:12:36Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6NBcCr",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-14T09:40:31Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6NBlb1",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "robin-carlier"
              },
              "submittedAt": "2024-10-14T09:55:42Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6NKsP9",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-15T07:22:07Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6NKsWF",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "joelriou"
              },
              "submittedAt": "2024-10-15T07:22:18Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5R-20x",
                    "body": "**[lint-style]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\n  · constructor\n```\n",
                    "createdAt": "2023-10-29T12:53:03Z",
                    "author": {
                      "login": "github-actions"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5R-20y",
                    "body": "**[lint-style]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\n              · set r : StructuredArrow zero forgetReflexion :=\n```\n",
                    "createdAt": "2023-10-29T12:53:03Z",
                    "author": {
                      "login": "github-actions"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5R-20z",
                    "body": "**[lint-style]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\n              · exact h₁\n```\n",
                    "createdAt": "2023-10-29T12:53:03Z",
                    "author": {
                      "login": "github-actions"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5R-200",
                    "body": "**[lint-style]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\n             · suffices f : e₀ ⟶  rₗ by exact (h₂ f).mp h₁\n```\n",
                    "createdAt": "2023-10-29T12:53:03Z",
                    "author": {
                      "login": "github-actions"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5R-201",
                    "body": "**[lint-style]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\n             · suffices f : e₀ ⟶  rᵣ by exact (h₂ f).mp h₁\n```\n",
                    "createdAt": "2023-10-29T12:53:03Z",
                    "author": {
                      "login": "github-actions"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5R-202",
                    "body": "**[lint-style]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\n             · exact h₁\n             · exact hrₗ\n             · exact hrᵣ\n             · set v : StructuredArrow one forgetReflexion :=\n```\n",
                    "createdAt": "2023-10-29T12:53:03Z",
                    "author": {
                      "login": "github-actions"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5R-203",
                    "body": "**[lint-style]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\n             · set v : StructuredArrow one forgetReflexion :=\n```\n",
                    "createdAt": "2023-10-29T12:53:04Z",
                    "author": {
                      "login": "github-actions"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5R-204",
                    "body": "**[lint-style]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\n    (WalkingReflexivePair ⥤ C) where\n```\n",
                    "createdAt": "2023-10-29T12:53:04Z",
                    "author": {
                      "login": "github-actions"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5R-205",
                    "body": "**[lint-style]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\n    F.map left_reflexion = F.map left ≫ F.map reflexion := F.map_comp left reflexion\n```\n",
                    "createdAt": "2023-10-29T12:53:04Z",
                    "author": {
                      "login": "github-actions"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5R-206",
                    "body": "**[lint-style]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\n    F.map right_reflexion = F.map right ≫ F.map reflexion := F.map_comp right reflexion\n```\n",
                    "createdAt": "2023-10-29T12:53:04Z",
                    "author": {
                      "login": "github-actions"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5R-207",
                    "body": "**[lint-style]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\n  · apply Functor.Final.hasColimit_of_comp forgetReflexion\n```\n",
                    "createdAt": "2023-10-29T12:53:04Z",
                    "author": {
                      "login": "github-actions"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5R-208",
                    "body": "**[lint-style]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\n  · apply Functor.Final.hasColimit_of_comp forgetReflexion\n```\n",
                    "createdAt": "2023-10-29T12:53:04Z",
                    "author": {
                      "login": "github-actions"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5R-209",
                    "body": "**[lint-style]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\n  · intro h\n```\n",
                    "createdAt": "2023-10-29T12:53:04Z",
                    "author": {
                      "login": "github-actions"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5R-20-",
                    "body": "**[lint-style]** <sub>reported by [reviewdog](https://github.com/reviewdog/reviewdog) :dog:</sub><br>\n```suggestion\n  · intro h\n```\n",
                    "createdAt": "2023-10-29T12:53:04Z",
                    "author": {
                      "login": "github-actions"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SOZQn",
                    "body": "A better name should be found because this is not a forgetful functor. Depending on the chosen name, this may have to be put in the `WalkingReflexivePair` or `WalkingParallelPair` namespace.",
                    "createdAt": "2023-11-02T02:09:14Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SOZq9",
                    "body": "```suggestion\r\n    F.map reflexion ≫ F.map left = 𝟙 F.obj zero :=\r\n```\r\nThere are many other similar spacing issues.",
                    "createdAt": "2023-11-02T02:12:22Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SOZyf",
                    "body": "```suggestion\r\n    rintro _ _ _ ⟨⟩ g <;> cases g <;> aesop_cat\r\n```\r\nI do not know what is purpose of these ` ↑`?",
                    "createdAt": "2023-11-02T02:13:30Z",
                    "author": {
                      "login": "joelriou"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SZmpm",
                    "body": "`↑` causes `simp` to apply the lemma after simplifying a subterm (I believe this is the default, so it shouldn't be necessary). You can also use `↓` to cause `simp` to apply lemmas before simplifying a subterm.",
                    "createdAt": "2023-11-04T18:53:16Z",
                    "author": {
                      "login": "kmill"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SOfNa",
                    "body": "It seems this is a particular case of `reflexivePair`, so that it is not necessary to reproduce the construction. You may apply `reflexivePair` to `f`, `g` and `commonSection f g`.",
                    "createdAt": "2023-11-02T02:44:23Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SZmp9",
                    "body": "```suggestion\r\n    | right_reflexion => g ≫ commonSection f g\r\n    | left_reflexion => f ≫ commonSection f g\r\n```",
                    "createdAt": "2023-11-04T18:53:30Z",
                    "author": {
                      "login": "kmill"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qRW-r",
                    "body": "```suggestion\r\nAuthors: Bhavik Mehta, Robin Carlier\r\n```",
                    "createdAt": "2024-10-01T14:06:56Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qRa-c",
                    "body": "As these lemmas should not be needed outside of the definition of the category structure, I would suggest doing this:\r\n```suggestion\r\ninstance walkingReflexivePairCategory : SmallCategory WalkingReflexivePair where\r\n  Hom := WalkingReflexivePairHom\r\n  id := id\r\n  comp := comp\r\n  comp_id f := by cases f <;> rfl\r\n  id_comp f := by cases f <;> rfl\r\n  assoc f g h := by cases f <;> cases g <;> cases h <;> rfl\r\n```",
                    "createdAt": "2024-10-01T14:16:55Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qRbXX",
                    "body": "All the definition related to the category `WalkingReflexivePair` should be in the same namespace, like `WalkingReflexivePair.Hom`, etc.",
                    "createdAt": "2024-10-01T14:17:52Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qRc3y",
                    "body": "In Lean 4, the preferred syntax is:\r\n```suggestion\r\ndef inclusionWalkingReflexivePair : WalkingParallelPair ⥤ WalkingReflexivePair where\r\n  obj := fun x => match x with\r\n```",
                    "createdAt": "2024-10-01T14:21:21Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qRdyG",
                    "body": "With the following attribute, the next few lemmas shall become unnecessary:\r\n```suggestion\r\n@[simps!]\r\ndef inclusionWalkingReflexivePair : WalkingParallelPair ⥤ WalkingReflexivePair :=\r\n```",
                    "createdAt": "2024-10-01T14:23:28Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qRehj",
                    "body": "`intro/rcases` can be combined as:\r\n```suggestion\r\n              rintro p h₁ h₂ ⟨l, y, f⟩\r\n```\r\n(There is another similar situation below.)",
                    "createdAt": "2024-10-01T14:25:12Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qRe1v",
                    "body": "```suggestion\r\n    StructuredArrow.mk (Y := WalkingParallelPair.zero) (𝟙 _)\r\n```",
                    "createdAt": "2024-10-01T14:25:58Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qRfEZ",
                    "body": "```suggestion\r\n    WalkingReflexivePair ⥤ C where\r\n```",
                    "createdAt": "2024-10-01T14:26:31Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qRhO6",
                    "body": "When doing computation in category theory, it is advisable to do always rewrite `assoc` in the forward direction, and use `_assoc` versions of lemmas (created by the `reassoc` attribute) as well as `reassoc_of% ...` in the case of specific equalities:\r\n```suggestion\r\n  map_comp := by\r\n    rintro _ _ _ ⟨⟩ g <;> cases g <;>\r\n      simp only [Category.id_comp, Category.comp_id, Category.assoc, sl, sr,\r\n        reassoc_of% sl, reassoc_of% sr] <;> rfl\r\n```",
                    "createdAt": "2024-10-01T14:31:36Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qRlUb",
                    "body": "As much as possible, one the `Category` instance has been defined, we should use `≫` (`CategoryStruct.comp`) instead of the `comp` defined above. It would take the following form:\r\n```lean\r\ntheorem walkingReflexivePairHom_left_comp_reflexion :\r\n  (left ≫ reflexion : one ⟶ one) = left_reflexion := rfl```\r\n```\r\n(The annoying thing is that Lean cannot guess that `left` and `reflexion` are morphisms in a category, so that we need to help them a little bit.)\r\nActually, I am not convinced that this would be the best normal form, I would rather suggest keeping `left ≫ reflexion` as the normal form (and then `left_reflexion` is part of the internals of the implementation; by the way, `leftCompReflexion` may be a name that fits better our naming conventions!?)",
                    "createdAt": "2024-10-01T14:41:45Z",
                    "author": {
                      "login": "joelriou"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5qRl21",
                    "body": "However, the following lemmas would be useful:\r\n```lean\r\n@[reassoc (attr := simp)]\r\ntheorem reflexion_comp_left : reflexion ≫ left = 𝟙 zero := rfl\r\n\r\n@[reassoc (attr := simp)]\r\ntheorem reflexion_comp_right : reflexion ≫ right = 𝟙 zero := rfl\r\n```\r\n(With this combination of `reassoc` of `simp`, we should get reasonable normal forms for morphisms in that category.)",
                    "createdAt": "2024-10-01T14:43:03Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qRnZg",
                    "body": "Using the `reflexion_comp_left` lemma suggested above: \r\n```suggestion\r\n        F.map reflexion ≫ F.map left = 𝟙 (F.obj zero) := by\r\n  rw [← F.map_comp, reflexion_comp_left, F.map_id]\r\n```\r\n(Note also the parentheses change.)",
                    "createdAt": "2024-10-01T14:46:52Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qRn1v",
                    "body": "Doing the following, `F.map reflexion ≫ F.map left ≫f` will simplify into `f`: \r\n```suggestion\r\n@[reassoc (attr:= simp)]\r\n```",
                    "createdAt": "2024-10-01T14:47:55Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qRtdd",
                    "body": "With this, Lean will try to fill in the proofs automatically: \r\n```suggestion\r\ndef reflexivePair (f g : A ⟶ B) (s : B ⟶ A) (sl : s ≫ f = 𝟙 B := by aesop_cat) (sr : s ≫ g = 𝟙 B := by aesop_cat) :\r\n```\r\nThen, you should also add lemmas like\r\n```lean\r\n@[simp] lemma reflexivePair_obj_zero : (reflexivePair f g s sl sr).obj zero = B := rfl\r\n```\r\nand similarly `obj_one`, `map_left`, `map_right` and `map_reflexion`.",
                    "createdAt": "2024-10-01T15:01:22Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qRvXi",
                    "body": "Taking into account suggestions above, I would proceed like this:\r\n```lean\r\ndef diagramIsoReflexivePair (F : WalkingReflexivePair ⥤ C) :\r\n    F ≅ reflexivePair (F.map left) (F.map right) (F.map reflexion) :=\r\n  NatIso.ofComponents (fun x ↦ match x with\r\n    | zero => Iso.refl _\r\n    | one => Iso.refl _)\r\n  (fun f ↦ by cases f <;> simp)\r\n```\r\n(As much as possible, I feel it is slightly better not to use `eqToIso`.)\r\nMore generally, as you have defined a constructor for functors from the category `WalkingReflexivePair`, it would be nice to introduce also a constructor for natural transformations (and then natural isomorphisms) between objets in `WalkingReflexivePair ⥤ C`. Then, `diagramIsoReflexivePair` would appear as a special case of this.",
                    "createdAt": "2024-10-01T15:05:37Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qRwGn",
                    "body": "I would use `abbrev` instead of `def` here.",
                    "createdAt": "2024-10-01T15:07:30Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qtPf9",
                    "body": "```suggestion\r\n\r\n/-- The type of morphisms for the diagram indexing reflexive (co)equalizers -/\r\n```",
                    "createdAt": "2024-10-07T13:37:21Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qtPmp",
                    "body": "```suggestion\r\n```",
                    "createdAt": "2024-10-07T13:37:35Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qtP4u",
                    "body": "```suggestion\r\nlemma Hom.id_eq (X : WalkingReflexivePair) :\r\n```",
                    "createdAt": "2024-10-07T13:38:17Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qtP7r",
                    "body": "```suggestion\r\n\r\n```",
                    "createdAt": "2024-10-07T13:38:24Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qtg4W",
                    "body": "The syntax can be improved:\r\n```suggestion\r\ninstance (X : WalkingReflexivePair) :\r\n    Nonempty (StructuredArrow X inclusionWalkingReflexivePair) := by\r\n  cases X with\r\n  | zero => exact ⟨StructuredArrow.mk (Y := one) (𝟙 _)⟩\r\n  | one => exact ⟨StructuredArrow.mk (Y := zero) (𝟙 _)⟩\r\n\r\nopen WalkingReflexivePair.Hom in\r\ninstance (X : WalkingReflexivePair) :\r\n    IsConnected (StructuredArrow X inclusionWalkingReflexivePair) := by\r\n  cases X with\r\n  | zero =>\r\n      refine IsConnected.of_induct  (j₀ := StructuredArrow.mk (Y := one) (𝟙 _)) ?_\r\n      rintro p h₁ h₂ ⟨⟨⟨⟩⟩, (_ | _), ⟨_⟩⟩\r\n      · exact (h₂ (StructuredArrow.homMk .left)).2 h₁\r\n      · exact h₁\r\n  | one =>\r\n      refine IsConnected.of_induct  (j₀ := StructuredArrow.mk (Y := zero) (𝟙 _))\r\n        (fun p h₁ h₂ ↦ ?_)\r\n      have hₗ : StructuredArrow.mk left ∈ p := (h₂ (StructuredArrow.homMk .left)).1 h₁\r\n      have hᵣ : StructuredArrow.mk right ∈ p := (h₂ (StructuredArrow.homMk .right)).1 h₁\r\n      rintro ⟨⟨⟨⟩⟩, (_ | _), ⟨_⟩⟩\r\n      · exact (h₂ (StructuredArrow.homMk .left)).2 hₗ\r\n      · exact (h₂ (StructuredArrow.homMk .right)).2 hᵣ\r\n      all_goals assumption\r\n\r\n/-- The inclusion functor is a final functor -/\r\ninstance inclusionWalkingReflexivePair_final : Functor.Final inclusionWalkingReflexivePair where\r\n  out := inferInstance\r\n```",
                    "createdAt": "2024-10-07T14:17:33Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qthmk",
                    "body": "These lemmas should preferably be stated just after the definition of `reflexivePair`. The standard names should be `reflexivePair_obj_zero`, etc.",
                    "createdAt": "2024-10-07T14:18:53Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qtmTf",
                    "body": "The following is slightly shorter:\r\n```suggestion\r\n  naturality _ _ f := by\r\n    cases f\r\n    all_goals\r\n      dsimp\r\n      simp only [Functor.map_id, Category.id_comp, Category.comp_id,\r\n        Functor.map_comp, h₁, h₂, h₃, reassoc_of% h₁, reassoc_of% h₂,\r\n        map_reflexion, map_left, map_right, Category.assoc]\r\n```\r\nNote that after `by`, it is usually recommended to do a line break with little indentation when the proof is not a one-liner.",
                    "createdAt": "2024-10-07T14:28:20Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qtngs",
                    "body": "```suggestion\r\n    F ⟶ reflexivePair f g s sl sr where\r\n```",
                    "createdAt": "2024-10-07T14:31:09Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qtoBC",
                    "body": "```suggestion\r\nvariable {F : WalkingReflexivePair ⥤ C}\r\n```\r\nThis seems better to me for the next three definition. `varaiable (F)` should then be added after `mkNatIso`.",
                    "createdAt": "2024-10-07T14:32:16Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qtphR",
                    "body": "There are unnecessary parentheses.\r\n(Also, I would make `f`, `g`, `s`, `sl`, `sr` implicit parameters here.)",
                    "createdAt": "2024-10-07T14:35:39Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qtr4H",
                    "body": "Arguably, this would be slightly better:\r\n```suggestion\r\n@[simps!]\r\n/-- Constructor for natural isomorphisms with a `reflexivePair`. -/\r\n@[simps]\r\ndef mkNatIso (u : F.obj one ≅ A) (v : F.obj zero ≅ B)\r\n    (h₁ : (F.map left) ≫ v.hom = u.hom ≫ f := by aesop_cat)\r\n    (h₂ : (F.map right) ≫ v.hom = u.hom ≫ g := by aesop_cat)\r\n    (h₃ : (F.map reflexion) ≫ u.hom = v.hom ≫ s := by aesop_cat) :\r\n    F ≅ reflexivePair f g s sl sr where\r\n  hom := mkNatTrans u.hom v.hom \r\n  inv := mkNatTrans' u.inv v.inv\r\n    (by rw [← cancel_epi u.hom, u.hom_inv_id_assoc, ← reassoc_of% h₁, v.hom_inv_id,\r\n            Category.comp_id])\r\n    (by rw [← cancel_epi u.hom, u.hom_inv_id_assoc, ← reassoc_of% h₂, v.hom_inv_id,\r\n            Category.comp_id])\r\n    (by rw [← cancel_epi v.hom, v.hom_inv_id_assoc, ← reassoc_of% h₃, u.hom_inv_id,\r\n            Category.comp_id])\r\n```",
                    "createdAt": "2024-10-07T14:40:49Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qtuiH",
                    "body": "Actually, both `mkNatTrans` and `mkNatTrans'` are a special case of:\r\n```lean\r\ndef mkNatTrans {F G : WalkingReflexivePair ⥤ C}\r\n    (e₀ : F.obj zero ⟶ G.obj zero) (e₁ : F.obj one ⟶ G.obj one)\r\n    (h₁ : F.map left ≫ e₀ = e₁ ≫ G.map left := by aesop_cat)\r\n    (h₂ : F.map right ≫ e₀ = e₁ ≫ G.map right := by aesop_cat)\r\n    (h₃ : F.map reflexion ≫ e₁ = e₀ ≫ G.map reflexion := by aesop_cat) :\r\n    F ⟶ G where\r\n  app := fun x ↦ match x with\r\n    | zero => e₀\r\n    | one => e₁\r\n  naturality _ _ f := by\r\n    cases f\r\n    all_goals\r\n      dsimp\r\n      simp only [Functor.map_id, Category.id_comp, Category.comp_id,\r\n        Functor.map_comp, h₁, h₂, h₃, reassoc_of% h₁, reassoc_of% h₂,\r\n        map_reflexion, map_left, map_right, Category.assoc]\r\n```\r\n(It may be nice to produce (d)simp lemmas `mkNatTrans_app_zero` and `mkNatTrans_app_one`.)\r\nThen, `mkNatIso` can be modified accordingly.",
                    "createdAt": "2024-10-07T14:47:00Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qx2RQ",
                    "body": "`variable {F G : WalkingReflexivePair ⥤ C}` should be inserted before these declarations.",
                    "createdAt": "2024-10-08T08:38:26Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qx2-E",
                    "body": "It would be better to use the same order of parameters as for `mkNatTrans`. (The proof could be exactly the same, or by constructing `hom`, and `inv` using `mkNatTrans` as I suggested.)\r\n```suggestion\r\ndef mkNatIso (e₀ : F.obj zero ≅ G.obj zero) (e₁ : F.obj one ≅ G.obj one)\r\n```",
                    "createdAt": "2024-10-08T08:39:59Z",
                    "author": {
                      "login": "joelriou"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5qx3ll",
                    "body": "(Same for `whiskerRightMkNatTrans`.)",
                    "createdAt": "2024-10-08T08:41:13Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qx5gG",
                    "body": "```suggestion\r\n    {h₃ : F.map reflexion ≫ v = u ≫ G.map reflexion} (H : C ⥤ D) :\r\n    (whiskerRight (mkNatTrans u v : F ⟶ G) H) =\r\n      mkNatTrans (H.map u) (H.map v)\r\n          (by simp only [Functor.comp_obj, Functor.comp_map, ← Functor.map_comp, h₁])\r\n          (by simp only [Functor.comp_obj, Functor.comp_map, ← Functor.map_comp, h₂])\r\n          (by simp only [Functor.comp_obj, Functor.comp_map, ← Functor.map_comp, h₃]) := by\r\n```",
                    "createdAt": "2024-10-08T08:45:32Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qx7cw",
                    "body": "For readibility, it is advisable to announce the type of defs/abbrevs:\r\n```suggestion\r\nabbrev π (G : ReflexiveCofork F) : F.obj zero ⟶ G.pt := G.ι.app zero\r\n```",
                    "createdAt": "2024-10-08T08:49:56Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5qx9K9",
                    "body": "It would be nice to add a constructor for `ReflexiveCofork`:\r\n```lean\r\n@[simps pt]\r\ndef mk {X : C} (π : F.obj zero ⟶ X) (h : F.map left ≫ π = F.map right ≫ π) :\r\n    ReflexiveCofork F where\r\n  pt := X\r\n  ι := reflexivePair.mkNatTrans π (F.map left ≫ π)\r\n\r\n@[simp]\r\nlemma mk_π {X : C} (π : F.obj zero ⟶ X) (h : F.map left ≫ π = F.map right ≫ π) :\r\n    (mk π h).π = π := rfl\r\n```",
                    "createdAt": "2024-10-08T08:53:39Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5q1Kfb",
                    "body": "`reassoc` is relevant only when the LHS (or the RHS) is a composition of morphisms. Same below.\r\n```suggestion\r\n@[simp]\r\n```",
                    "createdAt": "2024-10-08T18:22:53Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5q6POP",
                    "body": "```suggestion\r\n    whiskerRight (mkNatTrans e₀ e₁ : F ⟶ G) H =\r\n      mkNatTrans (H.map e₀) (H.map e₁)\r\n          (by simp only [Functor.comp_obj, Functor.comp_map, ← Functor.map_comp, h₁])\r\n          (by simp only [Functor.comp_obj, Functor.comp_map, ← Functor.map_comp, h₂])\r\n          (by simp only [Functor.comp_obj, Functor.comp_map, ← Functor.map_comp, h₃]) := by\r\n```",
                    "createdAt": "2024-10-09T14:37:59Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5q6Pio",
                    "body": "```suggestion\r\ndef toCofork (G : ReflexiveCofork F) : Cofork (F.map left) (F.map right) :=\r\n```",
                    "createdAt": "2024-10-09T14:38:48Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5q6P38",
                    "body": "Linebreaks should be after infix operators:\r\n```suggestion\r\n  Cocones.precompose (diagramIsoParallelPair (_ ⋙ F)).symm.hom |>.obj <|\r\n    G.whisker WalkingParallelPair.inclusionWalkingReflexivePair\r\n```\r\n(Same below.)",
                    "createdAt": "2024-10-09T14:39:38Z",
                    "author": {
                      "login": "joelriou"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5q--zj",
                    "body": "Got it, I thought the `<|` and `|>` were following the rules for parentheses rather than operators. I’ll try to be careful next time.",
                    "createdAt": "2024-10-10T07:46:38Z",
                    "author": {
                      "login": "robin-carlier"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rB8gC",
                    "body": "```suggestion\r\n/-- A constructor for natural transformations between functors from `WalkingReflexivePair`. -/\r\n```",
                    "createdAt": "2024-10-10T15:24:22Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rB9O0",
                    "body": "The variables for this lemma and the next are the same as above, so that you should put these three definitions/lemmas in a `section` and use `variable ...`.",
                    "createdAt": "2024-10-10T15:26:10Z",
                    "author": {
                      "login": "joelriou"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5rCCQC",
                    "body": "Is there a syntax to make the autoparam `:= by aesop_cat` apply to only the definition `mkNatTrans` while putting these variables in a `variable ...`? Or should I just leave the autoparam even for the lemmas?",
                    "createdAt": "2024-10-10T15:39:57Z",
                    "author": {
                      "login": "robin-carlier"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rB9Vo",
                    "body": "```suggestion\r\nlemma whiskerRightMkNatTrans {F G : WalkingReflexivePair ⥤ C}\r\n```",
                    "createdAt": "2024-10-10T15:26:27Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rB9aA",
                    "body": "```suggestion\r\nvariable {F G : WalkingReflexivePair ⥤ C}\r\n```",
                    "createdAt": "2024-10-10T15:26:38Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rCEwO",
                    "body": "I would favour a more down to earth definition here:\r\n```suggestion\r\nabbrev toCofork (G : ReflexiveCofork F) : Cofork (F.map left) (F.map right) :=\r\n  Cofork.ofπ G.π (by simp)\r\n```\r\n\r\nThen, `inclusionWalkingReflexivePairEquiv_obj` below would become an iso (use `Cofork.ext`) instead of an equality, and the definition of `ReflectiveCofork.isColimitEquiv` would have to be changed, using the composition with `IsColimit.equivIsoColimit (inclusionWalkingReflexivePairEquivObjIso G).symm)`.\r\n",
                    "createdAt": "2024-10-10T15:45:44Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rCFyT",
                    "body": "```suggestion\r\n  have := Limits.hasColimitOfIso <| inclusionWalkingReflexivePairOfIsReflexivePairIso f g\r\n  apply Functor.Final.hasColimit_of_comp WalkingParallelPair.inclusionWalkingReflexivePair\r\n```",
                    "createdAt": "2024-10-10T15:48:43Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rCH0P",
                    "body": "A slightly better syntax (so that to avoid `@`, and arguably `have` is better than `suffices`):\r\n```suggestion\r\n  have := Limits.hasColimitOfIso (show _ ≅ parallelPair (F.map left) (F.map right) from\r\n    diagramIsoParallelPair (WalkingParallelPair.inclusionWalkingReflexivePair ⋙ F))\r\n  apply Functor.Final.hasColimit_of_comp WalkingParallelPair.inclusionWalkingReflexivePair\r\n```",
                    "createdAt": "2024-10-10T15:54:53Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rCI2a",
                    "body": "```suggestion\r\n    [HasCoequalizer (F.map left) (F.map right)] : HasColimit F := by\r\n```",
                    "createdAt": "2024-10-10T15:58:03Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rCKz0",
                    "body": "I would declare `F` as an explicit variable here:\r\n```suggestion\r\nvariable (F : WalkingReflexivePair ⥤ C)\r\n```",
                    "createdAt": "2024-10-10T16:03:55Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rCLIQ",
                    "body": "The following lemma could be useful:\r\n```\r\nlemma hasReflexiveCoequalizer_iff_hasCoequalizer :\r\n    HasColimit F ↔ HasCoequalizer (F.map left) (F.map right) := by\r\n  simpa only [hasColimit_iff_hasInitial_cocone]\r\n    using Equivalence.hasInitial_iff (inclusionWalkingReflexivePairEquivCocone F)\r\n```",
                    "createdAt": "2024-10-10T16:04:48Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rCNXg",
                    "body": "It is probably better to rely on the `ReflexiveCofork.isColimitEquiv` (which should be moved upwards):\r\n```suggestion\r\nnoncomputable def reflexiveCoequalizerIsoCoequalizer\r\n    [HasCoequalizer (F.map left) (F.map right)] :\r\n    colimit F ≅ coequalizer (F.map left) (F.map right) :=\r\n  ((ReflexiveCofork.isColimitEquiv _).symm (colimit.isColimit F)).coconePointUniqueUpToIso\r\n    (colimit.isColimit _)\r\n```",
                    "createdAt": "2024-10-10T16:11:53Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rCQeD",
                    "body": "```suggestion\r\n  ⟨fun _ ↦ ⟨fun _ _ f g _ ↦ (hasReflexiveCoequalizer_iff_hasCoequalizer\r\n      (reflexivePair f g (commonSection f g))).1 inferInstance⟩,\r\n    fun _ ↦ ⟨inferInstance⟩⟩\r\n```",
                    "createdAt": "2024-10-10T16:20:33Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rFUtD",
                    "body": "```suggestion\r\n/-- A constructor for natural transformations between functors from `WalkingReflexivePair`. -/\r\n```",
                    "createdAt": "2024-10-11T07:43:49Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rFVmt",
                    "body": "The name should have been `toCofork_π`, but `Cofork.ofπ` behaves better as an abbrev, which makes the lemma unnecessary:\r\n```suggestion\r\n```",
                    "createdAt": "2024-10-11T07:46:05Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rFWCd",
                    "body": "```suggestion\r\ndef inclusionWalkingReflexivePairEquivObjIso (G : ReflexiveCofork F) :\r\n```",
                    "createdAt": "2024-10-11T07:47:21Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rFWJG",
                    "body": "Here, we need a specific docstring saying this is an isomorphism.",
                    "createdAt": "2024-10-11T07:47:39Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rFWno",
                    "body": "The point of my suggested lemma `hasReflexiveCoequalizer_iff_hasCoequalizer` was to facilitate the proofs of `reflexivePair_hasColimit_of_hasCoequalizer` and `ofIsReflexivePairHasColimit_of_hasCoequalizer`.",
                    "createdAt": "2024-10-11T07:49:15Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rFW7g",
                    "body": "```suggestion\r\n    (colimit.isColimit _)\r\n    \r\nvariable {A B : C} {f g : A ⟶ B} [IsReflexivePair f g]\r\n```",
                    "createdAt": "2024-10-11T07:50:20Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rFXHh",
                    "body": "The name should contain `Iso`:\r\n```suggestion\r\ndef reflexiveCoequalizerIsoCoequalizer\r\n```",
                    "createdAt": "2024-10-11T07:51:01Z",
                    "author": {
                      "login": "joelriou"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5rFZyX",
                    "body": "You should also add two simp lemmas expressing compatibilities of this isomorphism with the canonical maps to the colimit and to the coequalizer. Names would be `ι_reflexiveCoequalizerIsoCoequalizer_hom` and `π_reflexiveCoequalizerIsoCoequalizer_inv`. (Same remarls for `ofIsReflexivePairColimitEquiv` below.)",
                    "createdAt": "2024-10-11T08:00:02Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rFXgP",
                    "body": "`HasColimit` is a `Prop`, then this instance is a \"lemma\" (not a \"def\"), so that according to our naming conventions we should use `_` to connect the different elements in the name:\r\n```suggestion\r\ninstance ofIsReflexivePair_hasColimit_of_hasCoequalizer [HasCoequalizer f g] :\r\n```",
                    "createdAt": "2024-10-11T07:52:26Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rFYaN",
                    "body": "The name should be changed. For the \"proof\", it would be better to apply `reflexiveCoequalizerIsoCoequalizer` to `ofIsReflexivePair f g` instead of proving it again.",
                    "createdAt": "2024-10-11T07:55:19Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rOv9d",
                    "body": "```suggestion\r\n  hom := mkNatTrans e₀.hom e₁.hom\r\n  inv := mkNatTrans e₀.inv e₁.inv\r\n        (by rw [← cancel_epi e₁.hom, e₁.hom_inv_id_assoc, ← reassoc_of% h₁, e₀.hom_inv_id,\r\n            Category.comp_id])\r\n        (by rw [← cancel_epi e₁.hom, e₁.hom_inv_id_assoc, ← reassoc_of% h₂, e₀.hom_inv_id,\r\n            Category.comp_id])\r\n        (by rw [← cancel_epi e₀.hom, e₀.hom_inv_id_assoc, ← reassoc_of% h₃, e₁.hom_inv_id,\r\n            Category.comp_id])\r\n  hom_inv_id := by ext x; cases x <;> simp\r\n  inv_hom_id := by ext x; cases x <;> simp\r\n```",
                    "createdAt": "2024-10-14T09:00:23Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rOwX3",
                    "body": "```suggestion\r\n@[reassoc (attr := simp)]\r\n```",
                    "createdAt": "2024-10-14T09:01:34Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rOwfM",
                    "body": "```suggestion\r\n@[reassoc (attr := simp)]\r\n```",
                    "createdAt": "2024-10-14T09:01:52Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rOw1T",
                    "body": "```suggestion\r\n@[reassoc (attr := simp)]\r\n```",
                    "createdAt": "2024-10-14T09:02:47Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rOw6M",
                    "body": "```suggestion\r\n@[reassoc (attr := simp)]\r\n```",
                    "createdAt": "2024-10-14T09:02:58Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rO0HZ",
                    "body": "```suggestion\r\nlemma reflexiveCoforkEquivCofork_inverse_obj_π\r\n```\r\nI will try to see if there is a better proof...",
                    "createdAt": "2024-10-14T09:12:36Z",
                    "author": {
                      "login": "joelriou"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5rO-5-",
                    "body": "Could you add the following lemma in `Functor.Final`:\r\n```lean\r\n/-- Alternative equational lemma for `(extendCocone c).ι.app` in case a lift of the object\r\nis given explicitly. -/\r\nlemma extendCocone_obj_ι_app' (c : Cocone (F ⋙ G)) {X : D} {Y : C} (f : X ⟶ F.obj Y) :\r\n    (extendCocone.obj c).ι.app X = G.map f ≫ c.ι.app Y := by\r\n  sorry\r\n```\r\nand then the proof here can be:\r\n```lean\r\n@[simp]\r\nlemma reflexiveCoforkEquivCofork_inverse_obj_π\r\n    (G : Cofork (F.map left) (F.map right)) :\r\n    ((reflexiveCoforkEquivCofork F).inverse.obj G).π = G.π := by\r\n  dsimp only [reflexiveCoforkEquivCofork, Equivalence.symm, Equivalence.trans,\r\n    ReflexiveCofork.π, Cocones.precomposeEquivalence, Cocones.precompose,\r\n    Functor.comp, Functor.Final.coconesEquiv]\r\n  rw [Functor.Final.extendCocone_obj_ι_app' (Y := .one) (f := 𝟙 zero)]\r\n  simp\r\n```",
                    "createdAt": "2024-10-14T09:40:31Z",
                    "author": {
                      "login": "joelriou"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5rPEXr",
                    "body": "Thanks! I will add this lemma in a separate PR to avoid changing too much things in this one, and will apply this once this is merged.",
                    "createdAt": "2024-10-14T09:55:42Z",
                    "author": {
                      "login": "robin-carlier"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rUug9",
                    "body": "```suggestion\r\n```",
                    "createdAt": "2024-10-15T07:22:07Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rUukg",
                    "body": "```suggestion\r\n```",
                    "createdAt": "2024-10-15T07:22:18Z",
                    "author": {
                      "login": "joelriou"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjU3MTQyNjQ4",
              "login": "robin-carlier"
            },
            {
              "id": "MDQ6VXNlcjU2MzY3MDU=",
              "login": "jcommelin"
            },
            {
              "id": "MDQ6VXNlcjM3NzcyOTQ5",
              "login": "joelriou"
            },
            {
              "id": "U_kgDOCsITAQ",
              "login": "mathlib4-dependent-issues-bot"
            },
            {
              "id": "MDQ6VXNlcjIzNTMwNw==",
              "login": "kmill"
            },
            {
              "id": "MDQ6VXNlcjEwMTA1MDE2",
              "login": "grunweg"
            },
            {
              "id": "U_kgDOBcsTTQ",
              "login": "leanprover-community-bot-assistant"
            },
            {
              "id": "MDQ6VXNlcjY1NDY1Njcw",
              "login": "vihdzp"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHV-APQw",
                "name": "label-and-report-new-contributor",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341216515/job/31539072835"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHV-APUA",
                "name": "build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341216519/job/31539072848"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHV-AM1A",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341216161/job/31539072212"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHV-APKA",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341216159/job/31539072808"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHV-AQKA",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341216529/job/31539073064"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHV-AN-A",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341216161/job/31539072504"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHV-AN7A",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341216159/job/31539072492"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHV-ARTg",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341216529/job/31539073358"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHV-AP-A",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341216161/job/31539073016"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHV-AMtw",
                "name": "Build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341216159/job/31539072183"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHV-ARJw",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341216161/job/31539073319"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHV-SS6A",
                "name": "Post-CI job",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11341216159/job/31539368680"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHV-BFuQ",
                "name": "New Contributor Check",
                "conclusion": "NEUTRAL",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/31539086777"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHV-B23Q",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=8013&login=leanprover-community&repository=mathlib4"
              },
              {
                "__typename": "StatusContext",
                "id": "SC_kwDOFcwZ1c8AAAAHcZUupw",
                "context": "bors",
                "state": "SUCCESS",
                "targetUrl": "https://mathlib-bors-ca18eefec4cb.herokuapp.com/batches/6420",
                "description": "Build succeeded"
              }
            ]
          }
        },
        "title": "[Merged by Bors] - feat(CategoryTheory/Limits/Shapes/Reflexive): the walking reflexive pair",
        "updatedAt": "2024-10-15T07:53:09Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/8013",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5lgQuQ",
              "createdAt": "2023-10-29T12:53:03Z",
              "body": "",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c51PbbtzwAAAAKDt8l2",
              "createdAt": "2023-10-29T13:01:07Z",
              "label": {
                "id": "MDU6TGFiZWwzMjcxMjQ0NzU5",
                "name": "WIP"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c51PbbtzwAAAAKDt8l3",
              "createdAt": "2023-10-29T13:01:07Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c51PbbtzwAAAAKDt8l5",
              "createdAt": "2023-10-29T13:01:07Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJTYQ",
                "name": "t-category-theory"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c51PbbtzwAAAAKDt89-",
              "createdAt": "2023-10-29T13:02:06Z",
              "label": {
                "id": "MDU6TGFiZWwzMjcxMjQ0NzU5",
                "name": "WIP"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c51PbbtzwAAAAKDuGjq",
              "createdAt": "2023-10-29T13:24:43Z",
              "label": {
                "id": "MDU6TGFiZWwzMjcxMjQ0NzU5",
                "name": "WIP"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c51PbbtzwAAAAKDudBT",
              "createdAt": "2023-10-29T14:18:33Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c51PbbtzwAAAAKDudOT",
              "createdAt": "2023-10-29T14:18:57Z",
              "label": {
                "id": "MDU6TGFiZWwzMjcxMjQ0NzU5",
                "name": "WIP"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c51PbbtzwAAAAKDudOW",
              "createdAt": "2023-10-29T14:18:57Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5l4lII",
              "createdAt": "2023-11-02T02:09:14Z",
              "body": "As this is available in mathlib, I would advocate for a definition of the category `WalkingReflexivePair` by using generators and relations as follows:\r\n\r\n```lean\r\nimport Mathlib.CategoryTheory.PathCategory\r\n\r\nnamespace CategoryTheory.Limits\r\n\r\ninductive WalkingReflexivePairQuiver : Type where\r\n  | zero\r\n  | one\r\n\r\nnamespace WalkingReflexivePairQuiver\r\n\r\ninductive Hom : WalkingReflexivePairQuiver → WalkingReflexivePairQuiver → Type\r\n  | left : Hom zero one\r\n  | right : Hom zero one\r\n  | section_ : Hom one zero\r\n\r\ninstance : Quiver WalkingReflexivePairQuiver where\r\n  Hom := Hom\r\n\r\nabbrev left : zero ⟶ one := Hom.left\r\nabbrev right : zero ⟶ one := Hom.right\r\nabbrev section_ : one ⟶ zero := Hom.section_\r\n\r\ninductive homRel : HomRel (Paths WalkingReflexivePairQuiver)\r\n  | section_left : homRel (section_.toPath ≫ left.toPath) (𝟙 _)\r\n  | section_right : homRel (section_.toPath ≫ right.toPath) (𝟙 _)\r\n\r\nend WalkingReflexivePairQuiver\r\n\r\ndef WalkingReflexivePair := Quotient WalkingReflexivePairQuiver.homRel\r\n  deriving Category\r\n\r\nend CategoryTheory.Limits\r\n```\r\n\r\nIt should make a few constructions slightly easier (removing case by case studies). Only the proof that the inclusion from `WalkingParallelPair` is final would need some changes.\r\n\r\n(If it is too complicated to get the cofinality property, you may keep the more explicit approach.)",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c51PbbtzwAAAAKGCtE0",
              "createdAt": "2023-11-02T02:51:26Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c51PbbtzwAAAAKGCtE5",
              "createdAt": "2023-11-02T02:51:26Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5mJxY1",
              "createdAt": "2023-11-04T18:53:30Z",
              "body": "",
              "author": {
                "login": "kmill"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c51PbbtzwAAAALZjgW0",
              "createdAt": "2024-03-25T19:46:27Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABb5aSCQ",
                "name": "new-contributor"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6F0_tW",
              "createdAt": "2024-07-23T13:30:10Z",
              "body": "@robin-carlier This PR looks mostly fine, but there are still some places where it needs some work. I see that you have attempted to process some of the review comments. Are you planning to continue working on this PR? Would you like some help from others, or do you want to hand over completely?",
              "author": {
                "login": "jcommelin"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6F1hmK",
              "createdAt": "2024-07-23T14:24:35Z",
              "body": "> @robin-carlier This PR looks mostly fine, but there are still some places where it needs some work. I see that you have attempted to process some of the review comments. Are you planning to continue working on this PR? Would you like some help from others, or do you want to hand over completely?\r\n\r\nI am taking a break from math (and consequently lean)-related stuff for the time being, so I don’t plan to start working back on this in the near future and I’d gladly hand it over completely if someone wants to work on this or if this content is needed.",
              "author": {
                "login": "robin-carlier"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c51PbbtzwAAAAMrovk1",
              "createdAt": "2024-07-23T14:40:08Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABFGXRbg",
                "name": "please-adopt"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6OBLaa",
              "createdAt": "2024-09-30T10:01:03Z",
              "body": "### PR summary [705b81673b](https://github.com/leanprover-community/mathlib4/pull/8013/commits/705b81673b7748aadf74e12661d465a11d9c787f)\n\nImport changes exceeding 2%\n\n| %      | File |\n| -      | -    |\n| +2.00% | `Mathlib.CategoryTheory.Limits.Shapes.Reflexive` |\n\n<details><summary>\n\n#### Import changes for modified files\n\n</summary>\n\nDependency changes\n\n| File | Base Count | Head Count | Change |\n| --- | --- | --- | --- |\n| Mathlib.CategoryTheory.Limits.Shapes.Reflexive | 549 | 560 | +11 (+2.00%) |\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n| `Mathlib.CategoryTheory.Monad.Monadicity` `Mathlib.CategoryTheory.Monad.Comonadicity`|9|\n|<details><summary>5 files</summary> `Mathlib.CategoryTheory.Monad.Equalizer` `Mathlib.CategoryTheory.Limits.Shapes.Reflexive` `Mathlib.CategoryTheory.Adjunction.Lifting.Left` `Mathlib.CategoryTheory.Adjunction.Lifting.Right` `Mathlib.CategoryTheory.Monad.Coequalizer`</details>|11|\n\n</details>\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ Hom`\n`+ Hom.comp`\n`+ Hom.id_eq`\n`+ ReflexiveCofork`\n`+ ReflexiveCofork.isColimitEquiv`\n`+ WalkingReflexivePair`\n`+ app_one_eq_π`\n`+ category`\n`+ colimitOfIsReflexivePairIsoCoequalizer`\n`+ compRightIso`\n`+ condition`\n`+ diagramIsoReflexivePair`\n`+ hasReflexiveCoequalizer_iff_hasCoequalizer`\n`+ hasReflexiveCoequalizers_iff`\n`+ inclusionWalkingReflexivePair`\n`+ inclusionWalkingReflexivePairOfIsReflexivePairIso`\n`+ inclusionWalkingReflexivePair_final`\n`+ leftCompReflexion_eq`\n`+ map_reflexion_comp_map_left`\n`+ map_reflexion_comp_map_right`\n`+ mk`\n`+ mkNatIso`\n`+ mkNatTrans`\n`+ mkNatTrans_app_one`\n`+ mkNatTrans_app_zero`\n`+ mk_π`\n`+ ofIsReflexivePair`\n`+ ofIsReflexivePair_hasColimit_of_hasCoequalizer`\n`+ ofIsReflexivePair_map_left`\n`+ ofIsReflexivePair_map_right`\n`+ reflexion_comp_left`\n`+ reflexion_comp_right`\n`+ reflexiveCoequalizerIsoCoequalizer`\n`+ reflexiveCoforkEquivCofork`\n`+ reflexiveCoforkEquivCoforkObjIso`\n`+ reflexiveCoforkEquivCofork_functor_obj_π`\n`+ reflexiveCoforkEquivCofork_inverse_obj_π`\n`+ reflexivePair`\n`+ reflexivePair_hasColimit_of_hasCoequalizer`\n`+ reflexivePair_map_left`\n`+ reflexivePair_map_reflexion`\n`+ reflexivePair_map_right`\n`+ reflexivePair_obj_one`\n`+ reflexivePair_obj_zero`\n`+ rightCompReflexion_eq`\n`+ toCofork`\n`+ to_isReflexivePair`\n`+ whiskerRightMkNatTrans`\n`+ ι_colimitOfIsReflexivePairIsoCoequalizer_hom`\n`+ ι_reflexiveCoequalizerIsoCoequalizer_hom`\n`+ π`\n`+ π_colimitOfIsReflexivePairIsoCoequalizer_inv`\n`+ π_reflexiveCoequalizerIsoCoequalizer_inv`\n`++ instance (X : WalkingReflexivePair) :`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n</details>",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c51PbbtzwAAAANdeZlI",
              "createdAt": "2024-09-30T10:01:13Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c51PbbtzwAAAANdeZlP",
              "createdAt": "2024-09-30T10:01:13Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABFGXRbg",
                "name": "please-adopt"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6OBS4A",
              "createdAt": "2024-09-30T10:14:32Z",
              "body": "I ended up changing the name of `forgetReflexion` to `inclusionWalkingReflexivePair` in the `WalkingParallelPair` namespace. It leads to rather long names but I’m out of ideas of a better name.",
              "author": {
                "login": "robin-carlier"
              }
            },
            {
              "__typename": "ReviewRequestedEvent",
              "id": "RRE_lADOFcwZ1c51PbbtzwAAAANdfIkQ",
              "createdAt": "2024-09-30T10:14:37Z",
              "requestedReviewer": {
                "id": "MDQ6VXNlcjM3NzcyOTQ5",
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6LgPDK",
              "createdAt": "2024-10-01T14:06:56Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6LgVtd",
              "createdAt": "2024-10-01T14:16:55Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6LgWWJ",
              "createdAt": "2024-10-01T14:17:51Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6LgYwU",
              "createdAt": "2024-10-01T14:21:21Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6LgaMt",
              "createdAt": "2024-10-01T14:23:28Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6LgbYP",
              "createdAt": "2024-10-01T14:25:12Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6Lgb4V",
              "createdAt": "2024-10-01T14:25:58Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6LgcQ-",
              "createdAt": "2024-10-01T14:26:31Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6Lgf0f",
              "createdAt": "2024-10-01T14:31:36Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6LgmpB",
              "createdAt": "2024-10-01T14:41:45Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6LgqDo",
              "createdAt": "2024-10-01T14:46:52Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6LgqxG",
              "createdAt": "2024-10-01T14:47:55Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6Lg0Ol",
              "createdAt": "2024-10-01T15:01:22Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6Lg3cV",
              "createdAt": "2024-10-01T15:05:37Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6Lg40c",
              "createdAt": "2024-10-01T15:07:30Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c51PbbtzwAAAANexIFC",
              "createdAt": "2024-10-01T15:08:43Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6OO6i8",
              "createdAt": "2024-10-01T15:10:05Z",
              "body": "This PR needs some modifications so as to fit more into the mathlib conventions, but the results look very nice to me. ",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c51PbbtzwAAAANfl1lG",
              "createdAt": "2024-10-02T13:19:35Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABwbfWPw",
                "name": "large-import"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6OYH46",
              "createdAt": "2024-10-02T13:46:39Z",
              "body": "Thank you for the extensive review and the numerous tricks I did not know about!\r\nI have implemented your suggestions, and added a few new constructors to bundles functors from or towards a term of the form `reflexivePair …`.\r\nTo avoid cluttering things too much, I decided not to put a constructor for natural transforms between two `reflexivePair`, because it can already be constructed with `mkNatTrans` and `mkNatTrans'` if needed.",
              "author": {
                "login": "robin-carlier"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c51PbbtzwAAAANfnXP_",
              "createdAt": "2024-10-02T13:47:06Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "ReviewRequestedEvent",
              "id": "RRE_lADOFcwZ1c51PbbtzwAAAANfnd5i",
              "createdAt": "2024-10-02T13:48:58Z",
              "requestedReviewer": {
                "id": "MDQ6VXNlcjM3NzcyOTQ5",
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6MMGC5",
              "createdAt": "2024-10-07T13:37:21Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6MMGOP",
              "createdAt": "2024-10-07T13:37:35Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6MMGrc",
              "createdAt": "2024-10-07T13:38:17Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6MMGwy",
              "createdAt": "2024-10-07T13:38:24Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6MMhYe",
              "createdAt": "2024-10-07T14:17:32Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6MMioI",
              "createdAt": "2024-10-07T14:18:52Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6MMp4T",
              "createdAt": "2024-10-07T14:28:20Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6MMrxR",
              "createdAt": "2024-10-07T14:31:09Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6MMshQ",
              "createdAt": "2024-10-07T14:32:16Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6MMu2I",
              "createdAt": "2024-10-07T14:35:39Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6MMymk",
              "createdAt": "2024-10-07T14:40:49Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6MM2r3",
              "createdAt": "2024-10-07T14:47:00Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6MTETl",
              "createdAt": "2024-10-08T08:38:26Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6MTFbm",
              "createdAt": "2024-10-08T08:39:59Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6MTJhG",
              "createdAt": "2024-10-08T08:45:32Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6MTMmw",
              "createdAt": "2024-10-08T08:49:55Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6MTPbs",
              "createdAt": "2024-10-08T08:53:38Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6MYdmH",
              "createdAt": "2024-10-08T18:22:53Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6MgoaR",
              "createdAt": "2024-10-09T14:37:59Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6Mgo85",
              "createdAt": "2024-10-09T14:38:48Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6MgpgD",
              "createdAt": "2024-10-09T14:39:38Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c51PbbtzwAAAANksfel",
              "createdAt": "2024-10-09T14:39:46Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c51PbbtzwAAAANlZNMF",
              "createdAt": "2024-10-10T07:47:09Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6Mtc2j",
              "createdAt": "2024-10-10T15:24:22Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6MteBV",
              "createdAt": "2024-10-10T15:26:10Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6MteNS",
              "createdAt": "2024-10-10T15:26:27Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6MteUW",
              "createdAt": "2024-10-10T15:26:37Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6MtqT2",
              "createdAt": "2024-10-10T15:45:44Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6Mtr-q",
              "createdAt": "2024-10-10T15:48:43Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6MtvWI",
              "createdAt": "2024-10-10T15:54:53Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6MtxEW",
              "createdAt": "2024-10-10T15:58:03Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6Mt0Op",
              "createdAt": "2024-10-10T16:03:55Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6Mt00O",
              "createdAt": "2024-10-10T16:04:48Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6Mt4fZ",
              "createdAt": "2024-10-10T16:11:53Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6Mt9WH",
              "createdAt": "2024-10-10T16:20:33Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c51PbbtzwAAAANl4i1c",
              "createdAt": "2024-10-10T16:20:54Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c51PbbtzwAAAANl5QEZ",
              "createdAt": "2024-10-10T16:36:06Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6My7yZ",
              "createdAt": "2024-10-11T07:43:49Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6My9pC",
              "createdAt": "2024-10-11T07:46:05Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6My-Tz",
              "createdAt": "2024-10-11T07:47:21Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6My-cw",
              "createdAt": "2024-10-11T07:47:39Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6My_L3",
              "createdAt": "2024-10-11T07:49:15Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6My_qu",
              "createdAt": "2024-10-11T07:50:20Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6My_-i",
              "createdAt": "2024-10-11T07:51:01Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6MzAl-",
              "createdAt": "2024-10-11T07:52:26Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6MzCEn",
              "createdAt": "2024-10-11T07:55:18Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c51PbbtzwAAAANmgvS0",
              "createdAt": "2024-10-11T08:00:18Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6Pgpdr",
              "createdAt": "2024-10-11T15:56:59Z",
              "body": "I renamed `inclusionWalkingReflexivePairEquivCocone` to `reflexiveCoforkEquivCofork`, and `ofIsReflexivePairColimitEquiv` to `reflexiveCoequalizerIsoCoequalizer`. Since we’are adding simps lemmas, I took the liberty to also add `ofIsReflexivePair_map_left`, `ofIsReflexivePair_map_right`, `reflexiveCoforkEquivCofork_functor_obj_π` and `reflexiveCoforkEquivCofork_inverse_obj_π` for completeness. I couldn’t golf more the proof of the latter unfortunately.",
              "author": {
                "login": "robin-carlier"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c51PbbtzwAAAANnOJR3",
              "createdAt": "2024-10-12T10:50:26Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6NBAWM",
              "createdAt": "2024-10-14T09:00:23Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6NBBDg",
              "createdAt": "2024-10-14T09:01:33Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6NBBRR",
              "createdAt": "2024-10-14T09:01:52Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6NBB0d",
              "createdAt": "2024-10-14T09:02:47Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6NBB7Y",
              "createdAt": "2024-10-14T09:02:58Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6NBHVF",
              "createdAt": "2024-10-14T09:12:36Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5c95tm",
              "createdAt": "2024-10-14T10:35:08Z",
              "source": {
                "id": "PR_kwDOFcwZ1c5-hZSF",
                "title": "[Merged by Bors] - feat(CategoryTheory/Limits/Final): Additional equational lemmas for cones extended along final functors",
                "url": "https://github.com/leanprover-community/mathlib4/pull/17723"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c51PbbtzwAAAANoJ5cG",
              "createdAt": "2024-10-14T10:51:16Z"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c51PbbtzwAAAANoJ97h",
              "createdAt": "2024-10-14T10:52:41Z"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6PssG3",
              "createdAt": "2024-10-14T10:55:23Z",
              "body": "This has been rebased onto https://github.com/leanprover-community/mathlib4/pull/17723, on which it now depends on.",
              "author": {
                "login": "robin-carlier"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c51PbbtzwAAAANoO28_",
              "createdAt": "2024-10-14T11:23:01Z",
              "label": {
                "id": "MDU6TGFiZWwzMjg4OTQyMDg2",
                "name": "blocked-by-other-PR"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c51PbbtzwAAAANok69_",
              "createdAt": "2024-10-14T15:39:27Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c51PbbtzwAAAANold0T",
              "createdAt": "2024-10-14T15:49:21Z",
              "label": {
                "id": "MDU6TGFiZWwzMjg4OTQyMDg2",
                "name": "blocked-by-other-PR"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6PvtMw",
              "createdAt": "2024-10-14T15:49:23Z",
              "body": "This PR/issue depends on:\n* ~~leanprover-community/mathlib4#17723~~\nBy **[Dependent Issues](https://github.com/z0al/dependent-issues)** (🤖). Happy coding!\n<!-- By Dependent Issues (Action) - DO NOT REMOVE -->",
              "author": {
                "login": "mathlib4-dependent-issues-bot"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6Pv2sq",
              "createdAt": "2024-10-14T16:08:07Z",
              "body": "I added a space just before merging #17723, so that you need to `git merge origin` and keep the incoming version.",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c51PbbtzwAAAANo7zHJ",
              "createdAt": "2024-10-14T20:07:44Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6NKsP9",
              "createdAt": "2024-10-15T07:22:07Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6NKsWF",
              "createdAt": "2024-10-15T07:22:18Z",
              "body": "",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6P1VUp",
              "createdAt": "2024-10-15T07:38:39Z",
              "body": "Thanks!\r\n\r\nbors merge\r\n",
              "author": {
                "login": "joelriou"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c51PbbtzwAAAANpWilm",
              "createdAt": "2024-10-15T07:38:51Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
                "name": "ready-to-merge"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6P1cPE",
              "createdAt": "2024-10-15T07:53:06Z",
              "body": "Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/11341532320/job/31539991898)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/11341532320/job/31539992679)",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c51PbbtzwAAAANpXS90",
              "createdAt": "2024-10-15T07:53:07Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c51PbbtzwAAAANpXTHi",
              "createdAt": "2024-10-15T07:53:09Z"
            }
          ]
        }
      }
    }
  }
}
