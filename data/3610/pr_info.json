{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 517,
        "assignees": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjIzNTMwNw==",
              "login": "kmill"
            }
          ]
        },
        "author": {
          "login": "TimothyGu"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "Deals with recursive types, but not mutually recursive types or types with indices right now. See docstring for details.\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 3,
        "closed": false,
        "closedAt": null,
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5ajW2I",
              "body": "I don't think we have CI set up to work from forks right now...",
              "createdAt": "2023-04-24T00:38:58Z",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5akelu",
              "body": "Hrm ok. Is there a process for getting push access to the main repo?\r\n\r\nEdit: requested access on Zulip",
              "createdAt": "2023-04-24T07:13:32Z",
              "author": {
                "login": "TimothyGu"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5apmnr",
              "body": "Fixed lint and also fixed the case when a constructor field is a `Prop`. PTAL.",
              "createdAt": "2023-04-24T21:32:54Z",
              "author": {
                "login": "TimothyGu"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6VOopM",
              "body": "Coming here from issue triage: thanks for your PR. You opened this from a fork, as is customary on github --- however, mathlib uses a more bespoke workflow (which is required to cache results from the CI runs better). Can you request write permission for non-master branches of mathlib as re-create a PR from a branch of mathlib? See [here](https://leanprover-community.github.io/contribute/index.html#working-on-mathlib) for details. Don't hesitate to ask if you get stuck!",
              "createdAt": "2024-11-27T11:33:30Z",
              "author": {
                "login": "grunweg"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "f86d6b5d9c6b9d20e4194bedac9a9f62dce97c18",
                "additions": 489,
                "deletions": 0,
                "committedDate": "2023-04-23T23:44:51Z",
                "author": {
                  "name": "Timothy Gu",
                  "email": "timothygu99@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "5c36942b99ab3d3c37074f72c84b2cf857abc7d4",
                "additions": 72,
                "deletions": 44,
                "committedDate": "2023-04-24T21:19:00Z",
                "author": {
                  "name": "Timothy Gu",
                  "email": "timothygu99@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAErF7Hbg",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/github/leanprover-community/repo/mathlib4/event-logs?pullRequestNumber=3610"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "createdAt": "2023-04-23T23:45:38Z",
        "deletions": 0,
        "files": {
          "nodes": [
            {
              "path": "Mathlib.lean",
              "additions": 1,
              "deletions": 0
            },
            {
              "path": "Mathlib/Tactic/DeriveInfinite.lean",
              "additions": 350,
              "deletions": 0
            },
            {
              "path": "test/DeriveInfinite.lean",
              "additions": 166,
              "deletions": 0
            }
          ]
        },
        "headRefName": "derive-infinite",
        "headRefOid": "5c36942b99ab3d3c37074f72c84b2cf857abc7d4",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "TimothyGu"
          }
        },
        "headRepositoryOwner": {
          "login": "TimothyGu"
        },
        "id": "PR_kwDOFcwZ1c5O8rqG",
        "isCrossRepository": true,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c7P265b",
              "color": "f9d0c4",
              "name": "awaiting-author"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABKAKYew",
              "color": "33DBEC",
              "name": "t-meta"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5TTgG1",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "digama0"
              },
              "submittedAt": "2023-04-24T10:05:05Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5Tjqo5",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kim-em"
              },
              "submittedAt": "2023-04-26T12:19:06Z"
            }
          ]
        },
        "maintainerCanModify": true,
        "mergeCommit": null,
        "mergeStateStatus": "BLOCKED",
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 3610,
        "potentialMergeCommit": {
          "oid": "c092c6b455347c65bcae54957df3b326cbc1275b"
        },
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": [
            {
              "requestedReviewer": {
                "id": "MDQ6VXNlcjIzNTMwNw==",
                "login": "kmill"
              }
            }
          ]
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5TS78a",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kmill"
              },
              "submittedAt": "2023-04-24T08:45:19Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5TTd9f",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "digama0"
              },
              "submittedAt": "2023-04-24T09:59:43Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5TTgG1",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "digama0"
              },
              "submittedAt": "2023-04-24T10:05:05Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5TUIA2",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kmill"
              },
              "submittedAt": "2023-04-24T11:40:40Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5TYHX0",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "TimothyGu"
              },
              "submittedAt": "2023-04-24T21:26:17Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5Tg3D_",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kim-em"
              },
              "submittedAt": "2023-04-26T04:13:35Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5Tjqo5",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kim-em"
              },
              "submittedAt": "2023-04-26T12:19:06Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5GCKF0",
                    "body": "(*Edit:* what follows about `mkAppM` is incorrect, as Mario points out.) In elaborator code, you want to avoid `mkAppM` because it has a check that there are no metavariables in the result (and you're wanting this code to be able to solve for some in the `isDefEq` below). This is why [this line](https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/ProxyType.lean#L239) uses `Term.elabType`.\r\n\r\nYou can use ``Term.elabType (← `(Infinite $(← Term.exprToSyntax type)))``.\r\n\r\nOf course, `mkAppM` is fine once you get to the point that you have fully elaborated expressions.",
                    "createdAt": "2023-04-24T08:45:19Z",
                    "author": {
                      "login": "kmill"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5GCgE8",
                    "body": "This is news to  me, I think there will be plenty of violators because it is almost never the case that elaborated exprs are metavar-free under normal elaboration conditions, even in the best case, unless the tactic has control over the whole expression generation process (as in a derive handler).",
                    "createdAt": "2023-04-24T09:59:43Z",
                    "author": {
                      "login": "digama0"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5GChe4",
                    "body": "I took a look at the code and I don't think this assertion is true @kmill . It has a check for no *assignable* mvars, but it is within a `withNewMCtxDepth` wrapper which means that most mvars will not be assignable, except for those created during the instantiation of the constant itself. That is to say, using it to construct an `Infinite A` should be fine, and if `Infinite` had e.g. a typeclass argument then that typeclass argument would need to be solved on the spot but any mvars inside `A` would not be.",
                    "createdAt": "2023-04-24T10:05:05Z",
                    "author": {
                      "login": "digama0"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5GC5Im",
                    "body": "@digama0 Huh, I could have sworn that I ran into the error, but I seem to be mistaken. Thanks for the correction.\r\n\r\nI think I confused this with a separate issue, which is that the presence of `withNewMCtxDepth` means that you can't use `mkAppM` to unify metavariables. That does not matter here.",
                    "createdAt": "2023-04-24T11:40:39Z",
                    "author": {
                      "login": "kmill"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5GFT1q",
                    "body": "Thanks for the discussion here. I checked over the existing usages of `mkAppM` and everything looked fine (i.e., doesn't introduce additional metavariables).",
                    "createdAt": "2023-04-24T21:26:17Z",
                    "author": {
                      "login": "TimothyGu"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5GLGdE",
                    "body": "```suggestion\r\nGiven a constructor `ctor` with `m` inductive parameters, `n` fields, and `fieldIdx = i`, returns\r\n```\r\nI think we usually say `argument` rather than `field`. (The phrase below \"infinite field\" is particularly confusing to a mathematician's ears :-)",
                    "createdAt": "2023-04-26T04:13:34Z",
                    "author": {
                      "login": "kim-em"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5GM6ot",
                    "body": "Would you mind adjusting this so that your name appears the same way in both locations? Any format is fine.",
                    "createdAt": "2023-04-26T12:19:06Z",
                    "author": {
                      "login": "kim-em"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjE1Mzg2MjQ=",
              "login": "TimothyGu"
            },
            {
              "id": "MDQ6VXNlcjQyNTI2MA==",
              "login": "eric-wieser"
            },
            {
              "id": "MDQ6VXNlcjEwMTA1MDE2",
              "login": "grunweg"
            },
            {
              "id": "MDQ6VXNlcjIzNTMwNw==",
              "login": "kmill"
            },
            {
              "id": "MDQ6VXNlcjQ3Nzk1Ng==",
              "login": "kim-em"
            },
            {
              "id": "MDQ6VXNlcjg2ODU4OA==",
              "login": "digama0"
            },
            {
              "id": "MDQ6VXNlcjU2MzY3MDU=",
              "login": "jcommelin"
            }
          ]
        },
        "state": "OPEN",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAErF7Hbg",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/github/leanprover-community/repo/mathlib4/event-logs?pullRequestNumber=3610"
              }
            ]
          }
        },
        "title": "feat: derive Infinite automatically for inductive types",
        "updatedAt": "2024-11-27T11:33:32Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/3610",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5ajW2I",
              "createdAt": "2023-04-24T00:38:58Z",
              "body": "I don't think we have CI set up to work from forks right now...",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5akelu",
              "createdAt": "2023-04-24T07:13:32Z",
              "body": "Hrm ok. Is there a process for getting push access to the main repo?\r\n\r\nEdit: requested access on Zulip",
              "author": {
                "login": "TimothyGu"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5TS78a",
              "createdAt": "2023-04-24T08:45:19Z",
              "body": "",
              "author": {
                "login": "kmill"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5kJi1NzwAAAAIdiPiV",
              "createdAt": "2023-04-24T20:16:35Z",
              "label": {
                "id": "MDU6TGFiZWwzMjcxMjQ0NzU5",
                "name": "WIP"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5kJi1NzwAAAAIdiPif",
              "createdAt": "2023-04-24T20:16:36Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "ReviewRequestedEvent",
              "id": "RRE_lADOFcwZ1c5kJi1NzwAAAAIdkKyV",
              "createdAt": "2023-04-24T21:27:26Z",
              "requestedReviewer": {
                "id": "MDQ6VXNlcjIzNTMwNw==",
                "login": "kmill"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5kJi1NzwAAAAIdkSkv",
              "createdAt": "2023-04-24T21:31:53Z",
              "label": {
                "id": "MDU6TGFiZWwzMjcxMjQ0NzU5",
                "name": "WIP"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5kJi1NzwAAAAIdkSk7",
              "createdAt": "2023-04-24T21:31:53Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5apmnr",
              "createdAt": "2023-04-24T21:32:54Z",
              "body": "Fixed lint and also fixed the case when a constructor field is a `Prop`. PTAL.",
              "author": {
                "login": "TimothyGu"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5kJi1NzwAAAAIeKNv7",
              "createdAt": "2023-04-25T19:38:58Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5Tg3D_",
              "createdAt": "2023-04-26T04:13:34Z",
              "body": "",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5Tjqo5",
              "createdAt": "2023-04-26T12:19:06Z",
              "body": "",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5Mcf--",
              "createdAt": "2023-04-28T16:13:58Z",
              "source": {
                "id": "PR_kwDOFcwZ1c5PDFOG",
                "title": "feat: Add IsEmpty deriving handler",
                "url": "https://github.com/leanprover-community/mathlib4/pull/3635"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5kJi1NzwAAAAIgHGrY",
              "createdAt": "2023-04-28T22:00:35Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKAKYew",
                "name": "t-meta"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5kJi1NzwAAAAIiKMBW",
              "createdAt": "2023-05-04T05:49:20Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5kJi1NzwAAAAIiKMBa",
              "createdAt": "2023-05-04T05:49:20Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "BaseRefChangedEvent"
            },
            {
              "__typename": "BaseRefChangedEvent"
            },
            {
              "__typename": "AssignedEvent",
              "id": "AE_lADOFcwZ1c5kJi1NzwAAAAOHwX7g",
              "createdAt": "2024-11-06T23:43:34Z",
              "assignee": {
                "id": "MDQ6VXNlcjIzNTMwNw==",
                "login": "kmill"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6VOopM",
              "createdAt": "2024-11-27T11:33:30Z",
              "body": "Coming here from issue triage: thanks for your PR. You opened this from a fork, as is customary on github --- however, mathlib uses a more bespoke workflow (which is required to cache results from the CI runs better). Can you request write permission for non-master branches of mathlib as re-create a PR from a branch of mathlib? See [here](https://leanprover-community.github.io/contribute/index.html#working-on-mathlib) for details. Don't hesitate to ask if you get stuck!",
              "author": {
                "login": "grunweg"
              }
            }
          ]
        }
      }
    }
  }
}
