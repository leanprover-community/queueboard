{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 155,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "urkud"
        },
        "baseRefName": "master",
        "body": "This PR ports the `decidableClassical`, `fintypeFinite` and `encodableCountable` linters from mathlib3: all three are environment linters which flag declarations that have a hypothesis `[Decidable p]` etc., but do not use the underlying assumption in this type. Restructuring the code can make the statement more general.\r\nThe implementation is in fact quite general, and can easily adapt to include further types. PRs #17518 and #17519 are two examples of further such linters.\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)",
        "changedFiles": 19,
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c6BSVYB",
              "body": "### PR summary [92af36f8d9](https://github.com/leanprover-community/mathlib4/pull/10235/commits/92af36f8d9ab55910126665b40a26803a7dd0e16)\n\nImport changes exceeding 2%\n\n| %      | File |\n| -      | -    |\n| +12.82% | `Mathlib.Logic.Basic` |\n\n<details><summary>\n\n#### Import changes for modified files\n\n</summary>\n\nDependency changes\n\n| File | Base Count | Head Count | Change |\n| --- | --- | --- | --- |\n| Mathlib.Logic.Basic | 39 | 44 | +5 (+12.82%) |\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\nThere are 5528 files with changed transitive imports taking up over 232906 characters: this is too many to display!\nYou can run `scripts/import_trans_difference.sh all` locally to see the whole output.\n\n</details>\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ checkUnusedAssumptionInType`\n`+ decidableClassical`\n`+ encodableCountable`\n`+ finiteFintype`\n`+ inhabitedNonempty`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n</details>\n\n---\n\n<details><summary>Decrease in tech debt: (relative, absolute) = (4.00, 0.00)</summary>\n\n|Current number|Change|Type|\n|-:|:-:|:-|\n|3463|-4|porting notes|\n\nCurrent commit [92af36f8d9](https://github.com/leanprover-community/mathlib4/commit/92af36f8d9ab55910126665b40a26803a7dd0e16)\nReference commit [0e2ee7f1d8](https://github.com/leanprover-community/mathlib4/commit/0e2ee7f1d8259a7d551213325a07196d54583b6c)\n\nYou can run this locally as\n```\n./scripts/technical-debt-metrics.sh pr_summary\n```\n* The `relative` value is the weighted *sum* of the differences with weight given by the *inverse* of the current value of the statistic.\n* The `absolute` value is the `relative` value divided by the total sum of the inverses of the current values (i.e. the weighted *average* of the differences).\n</details>\n",
              "createdAt": "2024-06-15T02:46:12Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6GiWDk",
              "body": "FYI: #15278, #15279, #15280 (edit: and #15283) fix some easy linter errors; I don't have further fixes in the pipeline",
              "createdAt": "2024-07-29T22:58:43Z",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6NYOIF",
              "body": "We should skip constructors of inductive types as well (at least, for now).",
              "createdAt": "2024-09-24T17:51:11Z",
              "author": {
                "login": "urkud"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6NZotk",
              "body": "Do you know how to do this? (You can also leave a pointer here and I'll try to add this to the linter, when I find time. This week, and probably the next, I'm also rather busy with moving places, so cannot make promises about my available Lean time.)",
              "createdAt": "2024-09-24T20:25:36Z",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6O7MJ_",
              "body": "!bench",
              "createdAt": "2024-10-07T20:57:23Z",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6O7MUB",
              "body": "(I worry if the linter implementation is too slow right now, and the linters should rather be merged... let's benchmark to find out!)",
              "createdAt": "2024-10-07T20:57:47Z",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6O7Y9J",
              "body": "Here are the [benchmark results](http://speed.lean-fro.org/mathlib4/run-detail/003ce9ab-5ba3-4e21-a566-11a9e88bcbee) for commit fea856fdba2eaa624916afa8611ee0493e694001.\nThe entire run failed.\nFound no significant differences.",
              "createdAt": "2024-10-07T21:28:59Z",
              "author": {
                "login": "leanprover-bot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6PVJxc",
              "body": "!bench",
              "createdAt": "2024-10-10T10:17:29Z",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6PVdZv",
              "body": "Here are the [benchmark results](http://speed.lean-fro.org/mathlib4/run-detail/cc2ee139-7c65-49df-9766-cea818b26c34) for commit 83c41915e1d0bd5603f23bdd11c268338e2b7a22.\nThe entire run failed.\nFound no significant differences.",
              "createdAt": "2024-10-10T10:54:55Z",
              "author": {
                "login": "leanprover-bot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6PjanV",
              "body": "!bench",
              "createdAt": "2024-10-12T06:54:53Z",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6Pjbew",
              "body": "@kmill Thanks for commenting about the `GeneralizeProofs` change; I'm learning something new every day!\r\nThe linter ignores `partial` declarations now; I just verified that the change *could* be reverted. Would you prefer that change?",
              "createdAt": "2024-10-12T07:07:47Z",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6PjfOk",
              "body": "Here are the [benchmark results](http://speed.lean-fro.org/mathlib4/run-detail/fdc532e8-af5e-4389-a9d9-55ae338484e4) for commit 678b68b12f96cc94afb870c499f26e99ec2e091f.\nThe entire run failed.\nFound no significant differences.",
              "createdAt": "2024-10-12T07:47:41Z",
              "author": {
                "login": "leanprover-bot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6Pj7vM",
              "body": "@grunweg Linter flags `GeneralizeProofs` now. I can't find the relevant @kmill's comment. Was it here or on Zulip?",
              "createdAt": "2024-10-12T13:14:41Z",
              "author": {
                "login": "urkud"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6Pj_ID",
              "body": "It was [on a dependent PR](https://github.com/leanprover-community/mathlib4/pull/17125#issuecomment-2405497324).",
              "createdAt": "2024-10-12T14:01:51Z",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6Pj_LH",
              "body": "I'm also open to reverting [this commit](https://github.com/leanprover-community/mathlib4/pull/10235/commits/4b1e329abaf49f0fcf8aa6fab48096effdaf9034), or rather, just the second half. (The first half is fine now.)",
              "createdAt": "2024-10-12T14:02:28Z",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6QFLRB",
              "body": "Is there a way to test for a function being partial? If yes, then we should do it.",
              "createdAt": "2024-10-16T16:05:35Z",
              "author": {
                "login": "urkud"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6QFhxB",
              "body": "`partial` definitions create `opaque` definitions, so it could check for that (though theoretically there could be intentional `opaque` definitions in the library, but this has not been observed yet).\r\n\r\nHere are some checks I found:\r\n\r\n```lean\r\npartial def foo (n : Nat) : Nat := foo n\r\n\r\nopen Lean\r\n\r\ndef isOpaque (n : Name) : MetaM Bool := do\r\n  let ci ‚Üê getConstInfo n\r\n  return ci matches .opaqueInfo ..\r\n\r\ndef isUnsafe (n : Name) : MetaM Bool := do\r\n  let ci ‚Üê getConstInfo n\r\n  return ci.isUnsafe\r\n\r\ndef isPartial (n : Name) : MetaM Bool := do\r\n  let ci ‚Üê getConstInfo n\r\n  return ci.isPartial\r\n```\r\nWith these:\r\n* ``isOpaque `foo`` is true\r\n* ``isUnsafe `foo`` is false (though this becomes true with the `unsafe` modifier, which also makes isOpaque become false)\r\n* ``isPartial `foo`` is false (I think these are only used internally and no user definitions are this kind of partial)",
              "createdAt": "2024-10-16T16:40:46Z",
              "author": {
                "login": "kmill"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6QF2Ip",
              "body": "@kmill Thanks for the explanations. I had tried `isPartial`, but that did not do what I wanted (or did not go far enough?).\r\nI've tried to check for `opaqueInfo` now; let's see if that works.",
              "createdAt": "2024-10-16T17:20:14Z",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6QF4Oc",
              "body": "(My cursory understanding of isPartial is that it's for \"pre definitions\" for (mutually) recursive functions, letting them be added to the environment for future processing. As far as I know, this option is irrelevant to us ‚Äî it has no relation to `partial` ‚Äî and we'd never see it unless we're really digging around into internal details.)",
              "createdAt": "2024-10-16T17:24:46Z",
              "author": {
                "login": "kmill"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6QF5OE",
              "body": ":bulb: That is helpful. Would you like to file PR adding this docstring? Or should I create one, so you can get help fixing it more easily :-)?",
              "createdAt": "2024-10-16T17:26:37Z",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6QF64D",
              "body": "Feel free to create a pr and ping me and/or Joachim. He's more familiar with this part of Lean.",
              "createdAt": "2024-10-16T17:29:56Z",
              "author": {
                "login": "kmill"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6QLW74",
              "body": "!bench",
              "createdAt": "2024-10-17T08:28:15Z",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6QL11w",
              "body": "Here are the [benchmark results](http://speed.lean-fro.org/mathlib4/run-detail/3a9fba82-ca84-4c68-99c1-1f9af7355bed) for commit 5e620ae419bc239d2bb10b17f87fe918c918487e.Found no runs to compare against.",
              "createdAt": "2024-10-17T09:26:28Z",
              "author": {
                "login": "leanprover-bot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6QaDBY",
              "body": "!bench",
              "createdAt": "2024-10-18T15:36:09Z",
              "author": {
                "login": "urkud"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6QaDFR",
              "body": "Should we merge it now?",
              "createdAt": "2024-10-18T15:36:17Z",
              "author": {
                "login": "urkud"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6QaUfT",
              "body": "Here are the [benchmark results](http://speed.lean-fro.org/mathlib4/run-detail/eee7c42d-8e28-45e9-bfa1-01bcec1c203a) for commit 8b01daa371e7baa30a69c3cfeae0d1fa619bfffb.\nThe entire run failed.\nFound no runs to compare against.",
              "createdAt": "2024-10-18T16:15:59Z",
              "author": {
                "login": "leanprover-bot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6QaVOd",
              "body": "I'm happy with merging it, and looking at post-merge benchmarking output.",
              "createdAt": "2024-10-18T16:17:47Z",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6QaVck",
              "body": "I am not confident there will be no regression in linting times - but as there are further such linters in the pipeline, I am not worried about that item dropping of everybody's radar.",
              "createdAt": "2024-10-18T16:18:21Z",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6QdyjT",
              "body": "Thanks for the fixes; they look good to me.",
              "createdAt": "2024-10-19T09:48:28Z",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6Qe6pH",
              "body": "!bench",
              "createdAt": "2024-10-19T16:05:34Z",
              "author": {
                "login": "urkud"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6QfE1L",
              "body": "Here are the [benchmark results](http://speed.lean-fro.org/mathlib4/run-detail/9dd22870-26c3-48fd-a6df-53f898b8cfd2) for commit 1e7915da9e9f5d20fa16fed3b48791709c7d0cd7.\nThere were [significant changes](http://speed.lean-fro.org/mathlib4/compare/29678737-f417-40ee-bae5-eb2ec422f0a5/to/9dd22870-26c3-48fd-a6df-53f898b8cfd2) against commit 66fe0b7279d0edf044d905b5a4068aa929b78e7b:\n```diff\n  Benchmark   Metric         Change\n  =================================\n- lint        instructions    39.7%\n- lint        wall-clock      14.5%\n```",
              "createdAt": "2024-10-19T16:45:41Z",
              "author": {
                "login": "leanprover-bot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6QfFAG",
              "body": "Why is it so slow?",
              "createdAt": "2024-10-19T16:47:37Z",
              "author": {
                "login": "urkud"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6QfVtJ",
              "body": "Let me test one hypothesis: does merging all linters into one help? I just pushed a commit doing so. I benchmarking is better, I would start a discussion on zulip on how to make this linter fast(er) while preserving nice error messages.\r\n\r\nI may not be at a computer in ~40 minutes (when CI will have finished); feel free to re-bench then.",
              "createdAt": "2024-10-19T18:40:34Z",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6QfkFp",
              "body": "!bench",
              "createdAt": "2024-10-19T20:19:58Z",
              "author": {
                "login": "urkud"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6QfovS",
              "body": "Here are the [benchmark results](http://speed.lean-fro.org/mathlib4/run-detail/ea0e91d8-f641-406e-96eb-fa978a072335) for commit b3868def4f9ff863b5986e36264e9fad5701fdb9.\nThere were [significant changes](http://speed.lean-fro.org/mathlib4/compare/29678737-f417-40ee-bae5-eb2ec422f0a5/to/ea0e91d8-f641-406e-96eb-fa978a072335) against commit 66fe0b7279d0edf044d905b5a4068aa929b78e7b:\n```diff\n  Benchmark   Metric         Change\n  =================================\n- lint        instructions    11.5%\n```",
              "createdAt": "2024-10-19T21:10:32Z",
              "author": {
                "login": "leanprover-bot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6QfqLO",
              "body": "So it seems my theory was right: having four separate linters takes four times as long... but even the current implementation is too inefficient. Next step, try Kyle's suggestion. (I have to go bed now, but next time I work on this - or if anybody beats me to it.)",
              "createdAt": "2024-10-19T21:26:13Z",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6Qo0gt",
              "body": "@kmill This build failed in the linting step with error `PANIC at Lean.Expr.fvarId! Lean.Expr:963:14: fvar expected` [see the log](https://github.com/leanprover-community/mathlib4/actions/runs/11439969026/job/31824795101). Do you have an idea what's going wrong?",
              "createdAt": "2024-10-21T13:03:34Z",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6QrqOg",
              "body": "@kmill Can you make heads or tails out of [this output](https://github.com/leanprover-community/mathlib4/actions/runs/11444480102/job/31839449455)? For comparison, I'll revert one commit, to check if there are new legitimate linter errors on master. Update: without the commit reverted, everything lints - i.e., this is a true regression.",
              "createdAt": "2024-10-21T17:53:58Z",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6QswLn",
              "body": "!bench",
              "createdAt": "2024-10-21T20:26:00Z",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6Qswj6",
              "body": "To clarify: this benchmarking run tests the cumulative effects of\r\n- merging all the linters into one (which I would really prefer not to do, for sake of user-friendliness)\r\n- adding a first early return\r\nI expect this to still be too slow, but let's see how much :-)",
              "createdAt": "2024-10-21T20:26:53Z",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6Qs9nL",
              "body": "Here are the [benchmark results](http://speed.lean-fro.org/mathlib4/run-detail/64a43f37-fbb9-46c1-a391-0ede794462d3) for commit ba0830a2c26e2fbff1dd51fdd0277bde7febd4ac.\nThere were [no significant changes](http://speed.lean-fro.org/mathlib4/compare/4cf8ccc1-6c8f-4a8d-998a-8d741ceef6b0/to/64a43f37-fbb9-46c1-a391-0ede794462d3) against commit d43bc00b660d5456721455c8f4e4d1d2244f555b.",
              "createdAt": "2024-10-21T20:58:41Z",
              "author": {
                "login": "leanprover-bot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6Qs_89",
              "body": "Let me summarise the benchmarking results so far:\r\n- [initial run](http://speed.lean-fro.org/mathlib4/compare/29678737-f417-40ee-bae5-eb2ec422f0a5/to/9dd22870-26c3-48fd-a6df-53f898b8cfd2), no optimisations at all: adding 2500*10‚Åπ instructions; 48s wall-time (+40% instructions, +15% in wall-time)\r\n- [second run](http://speed.lean-fro.org/mathlib4/compare/29678737-f417-40ee-bae5-eb2ec422f0a5/to/ea0e91d8-f641-406e-96eb-fa978a072335): merging all linters into one, no optimisations: linting increased by +740*10‚Åπ instructions, wall-time by 15 seconds (in CI)\r\n- [third run](http://speed.lean-fro.org/mathlib4/compare/4cf8ccc1-6c8f-4a8d-998a-8d741ceef6b0/to/64a43f37-fbb9-46c1-a391-0ede794462d3): merging all linters into one, with an early return added (some optimisations): linting increased by +150*10‚Åπ instructions, wall-time by ~7 seconds (in CI)\r\n- [fourth run](http://speed.lean-fro.org/mathlib4/compare/4cf8ccc1-6c8f-4a8d-998a-8d741ceef6b0/to/bc90707a-f670-42fc-8b58-fffd6bc2be3e): with early return, not merged linters: added 480*10‚Åπ instructions, wall time increased by 18s.\r\n\r\nFor comparison, currently, the linting step (in CI) takes 6450*10‚Åπ instructions or 333 seconds.\r\n\r\nTo summarise: the early return helps, but is clearly not enough yet. Merging the linters (and tweaking the resulting messages) is a short-term option; the other optimisations would be good to have.",
              "createdAt": "2024-10-21T21:04:13Z",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6QtCcm",
              "body": "For further benchmarking fun, let me un-merge the linters and see how it fares now. (My guess: still too slow...)",
              "createdAt": "2024-10-21T21:10:30Z",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6Qtc0c",
              "body": "!bench",
              "createdAt": "2024-10-21T22:10:33Z",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6QtmEg",
              "body": "Here are the [benchmark results](http://speed.lean-fro.org/mathlib4/run-detail/bc90707a-f670-42fc-8b58-fffd6bc2be3e) for commit 8f720a769ddee9665682a35534ba65f01e394947.\nThere were [significant changes](http://speed.lean-fro.org/mathlib4/compare/4cf8ccc1-6c8f-4a8d-998a-8d741ceef6b0/to/bc90707a-f670-42fc-8b58-fffd6bc2be3e) against commit d43bc00b660d5456721455c8f4e4d1d2244f555b:\n```diff\n  Benchmark   Metric         Change\n  =================================\n- lint        instructions     7.4%\n- lint        wall-clock       5.5%\n```",
              "createdAt": "2024-10-21T22:43:49Z",
              "author": {
                "login": "leanprover-bot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6QxUvq",
              "body": "TL;DR @kmill Your help fixing the optimisation you proposed is welcome. I don't understand the code yet (and don't have much time this week to try to change that).",
              "createdAt": "2024-10-22T10:03:39Z",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6enqSS",
              "body": "Note: I'm working on `HasFDerivAt.pi` etc. I want to do it the right way (drop the `Normed*` assumptions at the same time), should be ready for review soon.",
              "createdAt": "2025-02-16T02:25:44Z",
              "author": {
                "login": "urkud"
              }
            }
          ]
        },
        "closed": false,
        "closedAt": null,
        "createdAt": "2024-02-04T06:11:42Z",
        "deletions": 25,
        "files": {
          "nodes": [
            {
              "path": "Mathlib.lean",
              "additions": 1,
              "deletions": 0
            },
            {
              "path": "Mathlib/Algebra/Module/ZLattice/Covolume.lean",
              "additions": 3,
              "deletions": 2
            },
            {
              "path": "Mathlib/Analysis/Calculus/FDeriv/Mul.lean",
              "additions": 3,
              "deletions": 3
            },
            {
              "path": "Mathlib/Combinatorics/SimpleGraph/Clique.lean",
              "additions": 12,
              "deletions": 8
            },
            {
              "path": "Mathlib/Computability/Halting.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Computability/TuringMachine.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Data/DFinsupp/Defs.lean",
              "additions": 3,
              "deletions": 2
            },
            {
              "path": "Mathlib/Data/Fintype/Card.lean",
              "additions": 4,
              "deletions": 3
            },
            {
              "path": "Mathlib/Data/Fintype/Quotient.lean",
              "additions": 2,
              "deletions": 0
            },
            {
              "path": "Mathlib/Data/MLList/Split.lean",
              "additions": 2,
              "deletions": 1
            },
            {
              "path": "Mathlib/Data/Matrix/Bilinear.lean",
              "additions": 2,
              "deletions": 0
            },
            {
              "path": "Mathlib/Logic/Basic.lean",
              "additions": 4,
              "deletions": 0
            },
            {
              "path": "Mathlib/Logic/Encodable/Basic.lean",
              "additions": 3,
              "deletions": 0
            },
            {
              "path": "Mathlib/NumberTheory/JacobiSum/Basic.lean",
              "additions": 1,
              "deletions": 0
            },
            {
              "path": "Mathlib/Order/Heyting/Regular.lean",
              "additions": 2,
              "deletions": 1
            },
            {
              "path": "Mathlib/Tactic.lean",
              "additions": 1,
              "deletions": 0
            },
            {
              "path": "Mathlib/Tactic/GeneralizeProofs.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/Tactic/Linter/UnusedAssumptionInType.lean",
              "additions": 105,
              "deletions": 0
            },
            {
              "path": "scripts/noshake.json",
              "additions": 3,
              "deletions": 1
            }
          ]
        },
        "headRefName": "YK-dec-lint",
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5l7-Nz",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c7P265b",
              "color": "f9d0c4",
              "name": "awaiting-author"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
              "color": "f99094",
              "name": "merge-conflict"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABKAKYew",
              "color": "33DBEC",
              "name": "t-meta"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABk2TD1g",
              "color": "33DBEC",
              "name": "t-linter"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABwbfWPw",
              "color": "B60205",
              "name": "large-import"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABw0w9Mg",
              "color": "193a9a",
              "name": "awaiting-bench"
            }
          ]
        },
        "number": 10235,
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c6MRZrH",
              "state": "APPROVED",
              "author": {
                "login": "kmill"
              },
              "submittedAt": "2024-10-08T04:48:18Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MSgMt",
              "state": "COMMENTED",
              "author": {
                "login": "kmill"
              },
              "submittedAt": "2024-10-08T07:42:13Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MSr5k",
              "state": "COMMENTED",
              "author": {
                "login": "grunweg"
              },
              "submittedAt": "2024-10-08T08:02:54Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6Ma2Kl",
              "state": "COMMENTED",
              "author": {
                "login": "urkud"
              },
              "submittedAt": "2024-10-09T02:50:24Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6Ma2zW",
              "state": "COMMENTED",
              "author": {
                "login": "urkud"
              },
              "submittedAt": "2024-10-09T02:54:09Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6Ma29Z",
              "state": "COMMENTED",
              "author": {
                "login": "urkud"
              },
              "submittedAt": "2024-10-09T02:54:56Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6Moj7q",
              "state": "COMMENTED",
              "author": {
                "login": "grunweg"
              },
              "submittedAt": "2024-10-10T08:12:23Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MokuN",
              "state": "COMMENTED",
              "author": {
                "login": "grunweg"
              },
              "submittedAt": "2024-10-10T08:13:13Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6M4xD9",
              "state": "COMMENTED",
              "author": {
                "login": "urkud"
              },
              "submittedAt": "2024-10-12T00:33:28Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6M5OOE",
              "state": "COMMENTED",
              "author": {
                "login": "grunweg"
              },
              "submittedAt": "2024-10-12T06:54:42Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6NcpxP",
              "state": "COMMENTED",
              "author": {
                "login": "kmill"
              },
              "submittedAt": "2024-10-16T16:43:32Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6N1v0g",
              "state": "COMMENTED",
              "author": {
                "login": "kmill"
              },
              "submittedAt": "2024-10-19T18:58:59Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6N1wBW",
              "state": "COMMENTED",
              "author": {
                "login": "kmill"
              },
              "submittedAt": "2024-10-19T19:00:35Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6N1wcq",
              "state": "COMMENTED",
              "author": {
                "login": "grunweg"
              },
              "submittedAt": "2024-10-19T19:02:29Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6N1wfk",
              "state": "COMMENTED",
              "author": {
                "login": "kmill"
              },
              "submittedAt": "2024-10-19T19:02:36Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6N1xFT",
              "state": "COMMENTED",
              "author": {
                "login": "urkud"
              },
              "submittedAt": "2024-10-19T19:14:34Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6N-MpD",
              "state": "COMMENTED",
              "author": {
                "login": "grunweg"
              },
              "submittedAt": "2024-10-21T12:21:47Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6OA98L",
              "state": "COMMENTED",
              "author": {
                "login": "kmill"
              },
              "submittedAt": "2024-10-21T16:23:25Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6OA_Sb",
              "state": "COMMENTED",
              "author": {
                "login": "grunweg"
              },
              "submittedAt": "2024-10-21T16:26:08Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6Pwb2N",
              "state": "COMMENTED",
              "author": {
                "login": "Command-Master"
              },
              "submittedAt": "2024-11-03T12:04:35Z"
            }
          ]
        },
        "state": "OPEN",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIrfPrVw",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13346776168/job/37278182231"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIrfPsFQ",
                "name": "label-and-report-new-contributor",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13346776282/job/37278182421"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIrfPsEg",
                "name": "post-or-update-summary-comment",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13346776287/job/37278182418"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIrfPrWw",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13346776170/job/37278182235"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIrfPsSw",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13346776288/job/37278182475"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIrfPrHw",
                "name": "Build",
                "conclusion": "FAILURE",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13346776170/job/37278182175"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIrfPrHg",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13346776168/job/37278182174"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIrfPsGw",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13346776288/job/37278182427"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIrfPrjw",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13346776168/job/37278182287"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIrf7quw",
                "name": "Post-CI job",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13346776170/job/37278902971"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIrfP8sw",
                "name": "New Contributor Check",
                "conclusion": "NEUTRAL",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/37278186675"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIrfQGDQ",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=10235&login=leanprover-community&repository=mathlib4"
              }
            ]
          }
        },
        "title": "feat: add `Decidable`, `Fintype`, `Encodable` linters",
        "updatedAt": "2025-02-20T10:10:50Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/10235"
      }
    }
  }
}
