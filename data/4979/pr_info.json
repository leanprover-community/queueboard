{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 202,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "mhk119"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "Initial commit of Bitblast.lean where we prove equivalence of bitblast unsigned less than and bitblast addition.\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 3,
        "closed": false,
        "closedAt": null,
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5ekrTx",
              "body": "There's a definition `Bitvec` (see e.g. Data/Bitvec/Defs) for reasoning of `Nat` as \"unsigned int\" bitvectors, and `Int` as singed int using two's complement. These definitions and theorems probably would go better in that namespace than in `Nat` or `Bool`, wouldn't they? (and somewhere under Data/Bitvec).",
              "createdAt": "2023-06-12T06:31:58Z",
              "author": {
                "login": "goens"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5eyZMZ",
              "body": "I don't really like the naming for this file. \"Bitblasting\" is a name for a specific technique in which theorems about fixed width integers are proved by rewriting them as theorems about 32 or 64 bool variables and then using a SAT solver, and nothing like that is being done in this file. Rather, there are some *bitwise* operations on Nats, and some discussion about *bit vectors* which don't seem to correspond to anything currently in the file. Bit-*blasting* is not covered at all, and if it was I would expect it to be in the `Tactic` folder and to be a tactic that will do bitblasting.\r\n\r\nEven setting this aside, I'm not sure there is much use for bitblasting in mathlib, because a proof method that requires handling all 64 bools separately won't really scale to N bits, which is the immediate next question. The preferred methodology here would be to prove the theorem in general and then just set N = 64 to obtain whatever result as a corollary. A tool that performs bit blasting might be useful to have in mathlib for use in external projects (e.g. crypto) but I don't see much internal use for it.",
              "createdAt": "2023-06-14T00:59:16Z",
              "author": {
                "login": "digama0"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5e-4ae",
              "body": "I apologize for the confusion caused by this PR. It may seem unrelated to the current Mathlib version of bitvectors, but it is actually part of a larger project to develop a tactic that can translate a Lean goal into an SMT query, invoke an SMT solver, and use the solver's proof to discharge the goal. The project's source code is at: https://github.com/ufmg-smite/lean-smt.\r\n\r\nThe bitvector operations and theorems in this PR are based on a new definition of [`BitVec`](https://github.com/ufmg-smite/lean-smt/blob/main/Smt/Data/BitVec.lean) as `Fin (2 ^ w)`, which is different from the one in Mathlib. This definition was chosen by Wojciech Nawrocki and Joe Hendrix, the authors of the Mathlib version, because it is more efficient and easier to work with (thanks to the existing `Nat` theorems). We plan to replace the Mathlib version with this one once the porting is done.\r\n\r\nThe PR's content is similar to `Data.Nat.Bitwise`, which I used extensively. I think it would be useful to have these bitvector operations and theorems in Mathlib as well. I brought up the idea of adding them to Mathlib in the [Lean Zulip chat](https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/bitblasting.20of.20bitvectors), and Scott Morrison suggested that I open a PR. I apologize for not being clear about this in the PR description.\r\n",
              "createdAt": "2023-06-15T18:29:10Z",
              "author": {
                "login": "mhk119"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5e_-QX",
              "body": "I'm onboard with the general plan you lay out, my comment is only that this file is not about bitblasting and not about bitvectors, it's about bitwise functions on Nat and it should be named accordingly. As for `Fin (2 ^ n)`, I think it would make sense to call that type something like `UIntN` for consistency with `UInt8`, `UInt16` etc types which have the same definition. (I realize you could either use this as a sequence of bits or as an integral value, or as a signed integer, but given that the underlying representation is as an integer and not a list of bools I think the naming and operations like `+` should reflect that. You can put another newtype on top if you want to emphasize more bitvector-like behavior, although in that case I'm not sure you want to keep the `n` as a parameter.)",
              "createdAt": "2023-06-15T23:06:04Z",
              "author": {
                "login": "digama0"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5fIaW6",
              "body": "I see. I suppose I should merge our work into `Data.Nat.Bitwise`? I've pushed a commit doing that but the github-actions bot keeps removing the awaiting-CI label ðŸ¤”.",
              "createdAt": "2023-06-18T08:55:24Z",
              "author": {
                "login": "mhk119"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6QWhcl",
              "body": "Coming here randomly for issue triage: is this PR still relevant, or can it be closed? As I understand it, bitblasting functionality is being added to Lean core these days - so this material is useful, but need not be in mathlib :-)",
              "createdAt": "2024-10-18T08:29:45Z",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6gebiz",
              "body": "@kim-em can we close this?",
              "createdAt": "2025-03-01T17:33:54Z",
              "author": {
                "login": "j-loreaux"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "1ccf17fb4b3ba3c3ad400d8186cb97949bf0802b",
                "additions": 209,
                "deletions": 0,
                "committedDate": "2023-06-12T03:23:02Z",
                "author": {
                  "name": "Harun Khan",
                  "email": "harun19@stanford.edu"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "4ed06e54f15425dc37f48d248ff4d17049dc059d",
                "additions": 25,
                "deletions": 11,
                "committedDate": "2023-06-12T03:56:28Z",
                "author": {
                  "name": "Harun Khan",
                  "email": "harun19@stanford.edu"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "055749d26ba1208531c2673bee6bd4025bf5fc4b",
                "additions": 1,
                "deletions": 3,
                "committedDate": "2023-06-12T04:37:42Z",
                "author": {
                  "name": "Harun Khan",
                  "email": "harun19@stanford.edu"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "4868ef58a9437aece147f3ac66acc6902ade8d7c",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-06-12T04:39:40Z",
                "author": {
                  "name": "mhk119",
                  "email": "58151072+mhk119@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "869e882c34daef2d9fab78a95566964574c015a9",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-06-12T04:39:54Z",
                "author": {
                  "name": "mhk119",
                  "email": "58151072+mhk119@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "bcaea2d6ee8dd9b9da837eb83a39ef607b794f71",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-06-12T04:40:02Z",
                "author": {
                  "name": "mhk119",
                  "email": "58151072+mhk119@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "1d8a3bec185667ebe9c2f36369ca9bdef9c06319",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-06-12T04:40:47Z",
                "author": {
                  "name": "mhk119",
                  "email": "58151072+mhk119@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "fbdc3a22bbc8a47356d9e994e746d237a8ee3c16",
                "additions": 11,
                "deletions": 10,
                "committedDate": "2023-06-13T23:19:56Z",
                "author": {
                  "name": "Harun Khan",
                  "email": "harun19@stanford.edu"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "c140963463db5c34e6db3c8816ad07bcbf9192b5",
                "additions": 60,
                "deletions": 55,
                "committedDate": "2023-06-13T23:49:04Z",
                "author": {
                  "name": "Harun Khan",
                  "email": "harun19@stanford.edu"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "a7515c9af85a5c262f2e6b519567216dde6f2e69",
                "additions": 0,
                "deletions": 227,
                "committedDate": "2023-06-18T07:47:19Z",
                "author": {
                  "name": "Harun Khan",
                  "email": "harun19@stanford.edu"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "b211ed21dd53e8932bcfbcb8d1aedcdad59c7b7d",
                "additions": 204,
                "deletions": 5,
                "committedDate": "2023-06-18T08:18:59Z",
                "author": {
                  "name": "Harun Khan",
                  "email": "harun19@stanford.edu"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "068e96b65aa067676649ba6fe6d446acc75a4dcc",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-07-03T04:43:16Z",
                "author": {
                  "name": "mhk119",
                  "email": "58151072+mhk119@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "d3b5b04a6e5b8ab08959487adc889cf0cb46626e",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-07-03T04:43:40Z",
                "author": {
                  "name": "mhk119",
                  "email": "58151072+mhk119@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "4a506c5a101ba0c0c9d83e9099a2623fa3313072",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-07-03T04:44:32Z",
                "author": {
                  "name": "mhk119",
                  "email": "58151072+mhk119@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "e9cf5639852384574d906b1a6da3022b32bd033f",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-07-03T04:45:07Z",
                "author": {
                  "name": "mhk119",
                  "email": "58151072+mhk119@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "7f859343d092b1757d54afb960a4f19e1ed609f1",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-07-03T04:45:25Z",
                "author": {
                  "name": "mhk119",
                  "email": "58151072+mhk119@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "cb5a2522f27c826c5aa7ce42294790a384b3ccbc",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-07-03T04:45:52Z",
                "author": {
                  "name": "mhk119",
                  "email": "58151072+mhk119@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "fd82137e5a8b9757df50b9a0cfee77215d18006d",
                "additions": 2,
                "deletions": 2,
                "committedDate": "2023-07-03T04:46:02Z",
                "author": {
                  "name": "mhk119",
                  "email": "58151072+mhk119@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "3fb9204d1ea769452ff97bbfa63a514cab977958",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-07-03T04:46:44Z",
                "author": {
                  "name": "mhk119",
                  "email": "58151072+mhk119@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "0b2d9e8d35194e9cd0d8598f5a3282d802e87350",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-07-03T04:47:06Z",
                "author": {
                  "name": "mhk119",
                  "email": "58151072+mhk119@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "78ca18b17e0bd4e67d91d718497b7dac09b9ec56",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-07-03T04:47:28Z",
                "author": {
                  "name": "mhk119",
                  "email": "58151072+mhk119@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "eaf1d2862f53bb2644496f6237b75cb27d846da0",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-07-03T04:48:35Z",
                "author": {
                  "name": "mhk119",
                  "email": "58151072+mhk119@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "ec57592110b55f6e9449bfc2b168f31d83a0818d",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-07-03T04:48:56Z",
                "author": {
                  "name": "mhk119",
                  "email": "58151072+mhk119@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "2c2d8ecf40ec173f769d2035a09bcd3357bcb429",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-07-03T04:49:30Z",
                "author": {
                  "name": "mhk119",
                  "email": "58151072+mhk119@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "4508848776c5d33f202b524cf3c02e2bdc0de1a0",
                "additions": 42,
                "deletions": 43,
                "committedDate": "2023-07-03T07:47:27Z",
                "author": {
                  "name": "Harun Khan",
                  "email": "mhk119@ic.ac.uk"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "835e7aaeb5a5a0724ce77ceaa341bc7462656900",
                "additions": 17,
                "deletions": 19,
                "committedDate": "2023-07-03T15:37:29Z",
                "author": {
                  "name": "Harun Khan",
                  "email": "mhk119@ic.ac.uk"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "74b3eb1d6f59c645ca2dcdf4e8c8df2deb6fb54f",
                "additions": 2,
                "deletions": 0,
                "committedDate": "2023-07-03T19:31:39Z",
                "author": {
                  "name": "Harun Khan",
                  "email": "mhk119@ic.ac.uk"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "251660010ee0dd9f6d37fa1d9e2a8c2387f89f1a",
                "additions": 522835,
                "deletions": 36509,
                "committedDate": "2023-07-08T21:08:11Z",
                "author": {
                  "name": "mhk119",
                  "email": "58151072+mhk119@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "ef71db15932f51580418a9ad3565a41e2d45cb1a",
                "additions": 22,
                "deletions": 24,
                "committedDate": "2023-07-08T21:09:47Z",
                "author": {
                  "name": "Harun Khan",
                  "email": "mhk119@ic.ac.uk"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "1dfd73f5cc69add92687add4e57eb70fd8197c4e",
                "additions": 522835,
                "deletions": 36509,
                "committedDate": "2023-07-08T21:09:57Z",
                "author": {
                  "name": "Harun Khan",
                  "email": "mhk119@ic.ac.uk"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "eb61c47b82950ab50bcb6e49b36415212bc105f5",
                "additions": 43,
                "deletions": 42,
                "committedDate": "2023-07-08T22:07:50Z",
                "author": {
                  "name": "Harun Khan",
                  "email": "mhk119@ic.ac.uk"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "3010c55c5bc83073028bcfeab3259863a8f4717d",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-07-10T18:37:27Z",
                "author": {
                  "name": "Harun Khan",
                  "email": "mhk119@ic.ac.uk"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAErF7jqQ",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=4979&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "createdAt": "2023-06-12T03:34:03Z",
        "deletions": 4,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/Data/Bool/Basic.lean",
              "additions": 10,
              "deletions": 1
            },
            {
              "path": "Mathlib/Data/Nat/Bitwise.lean",
              "additions": 188,
              "deletions": 3
            },
            {
              "path": "Mathlib/Data/Nat/Pow.lean",
              "additions": 4,
              "deletions": 0
            }
          ]
        },
        "headRefName": "bitvectors",
        "headRefOid": "3010c55c5bc83073028bcfeab3259863a8f4717d",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5SuT_v",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
              "color": "f99094",
              "name": "merge-conflict"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5X28d6",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kim-em"
              },
              "submittedAt": "2023-06-12T04:40:20Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5ZuzKS",
              "body": "On the whole this looks really good, and the main comments are about the naming convention and small changes to statements.",
              "state": "COMMENTED",
              "author": {
                "login": "ChrisHughes24"
              },
              "submittedAt": "2023-06-29T15:54:52Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 4979,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5X27tF",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kim-em"
              },
              "submittedAt": "2023-06-12T04:35:05Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5X28Fj",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kim-em"
              },
              "submittedAt": "2023-06-12T04:37:18Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5X28Mj",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kim-em"
              },
              "submittedAt": "2023-06-12T04:38:12Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5X28Sf",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kim-em"
              },
              "submittedAt": "2023-06-12T04:38:57Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5X28TW",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kim-em"
              },
              "submittedAt": "2023-06-12T04:39:04Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5X28Ut",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kim-em"
              },
              "submittedAt": "2023-06-12T04:39:15Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5X28Xc",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kim-em"
              },
              "submittedAt": "2023-06-12T04:39:33Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5X28aM",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kim-em"
              },
              "submittedAt": "2023-06-12T04:39:52Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5X28ce",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kim-em"
              },
              "submittedAt": "2023-06-12T04:40:08Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5X28d6",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kim-em"
              },
              "submittedAt": "2023-06-12T04:40:20Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5ZuzKS",
              "body": "On the whole this looks really good, and the main comments are about the naming convention and small changes to statements.",
              "state": "COMMENTED",
              "author": {
                "login": "ChrisHughes24"
              },
              "submittedAt": "2023-06-29T15:54:52Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5aFSrd",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mhk119"
              },
              "submittedAt": "2023-07-03T14:44:45Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5aFUBV",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mhk119"
              },
              "submittedAt": "2023-07-03T14:48:04Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5aFU9H",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mhk119"
              },
              "submittedAt": "2023-07-03T14:49:50Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5aFZqT",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mhk119"
              },
              "submittedAt": "2023-07-03T15:00:21Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5apW3U",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mhk119"
              },
              "submittedAt": "2023-07-08T21:01:26Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5JFGFT",
                    "body": "Please adjust to match other mathlib files.\r\n",
                    "createdAt": "2023-06-12T04:35:04Z",
                    "author": {
                      "login": "kim-em"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5JFGUg",
                    "body": "Doc-string must explain the semantics of all the arguments.",
                    "createdAt": "2023-06-12T04:37:18Z",
                    "author": {
                      "login": "kim-em"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5JFGeF",
                    "body": "(Similarly below.)",
                    "createdAt": "2023-06-12T04:38:57Z",
                    "author": {
                      "login": "kim-em"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5JFGZN",
                    "body": "Please add a reference in `references.bib`, and provide some explanation here of what `bitblast` means. Most readers will not know what this refers to.",
                    "createdAt": "2023-06-12T04:38:11Z",
                    "author": {
                      "login": "kim-em"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5JFGeu",
                    "body": "```suggestion\r\nlemma bit_lt (h: bit b n < bit b' m) : n < m âˆ¨ (n = m âˆ§ b = false âˆ§ b' = true) := by \r\n```",
                    "createdAt": "2023-06-12T04:39:04Z",
                    "author": {
                      "login": "kim-em"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5JFGgB",
                    "body": "```suggestion\r\nlemma div_add_mod_two_pow (m n : Nat) : n = 2^m * Nat.shiftr n m + n % (2^m) := by \r\n```",
                    "createdAt": "2023-06-12T04:39:15Z",
                    "author": {
                      "login": "kim-em"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5JFGhi",
                    "body": "```suggestion\r\n@[simp] lemma cond_eq_toNat : cond b 1 0 = b.toNat := by simp [cond, Bool.toNat]\r\n```",
                    "createdAt": "2023-06-12T04:39:33Z",
                    "author": {
                      "login": "kim-em"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5JFGjo",
                    "body": "```suggestion\r\nlemma lt_succ_two_pow (h : b â‰¤ 1) (hm : m < 2^i) : 2^i * b + m < 2^(i + 1) := by \r\n```\r\nand below.",
                    "createdAt": "2023-06-12T04:39:51Z",
                    "author": {
                      "login": "kim-em"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5JFGlW",
                    "body": "This should be in the `Bool` namespace, I think.",
                    "createdAt": "2023-06-12T04:40:08Z",
                    "author": {
                      "login": "kim-em"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5JFGmn",
                    "body": "This should not be in the `Nat` namespace.",
                    "createdAt": "2023-06-12T04:40:20Z",
                    "author": {
                      "login": "kim-em"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5KT1HK",
                    "body": "```suggestion\r\n  `x.testBit i = false` and `y.testBit i = true`.\r\n```",
                    "createdAt": "2023-06-29T14:35:43Z",
                    "author": {
                      "login": "ChrisHughes24"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5KT1Jf",
                    "body": "```suggestion\r\n  xor of the `testBit` of the two bitvectors and the `testBit` of their carry.\r\n```",
                    "createdAt": "2023-06-29T14:35:51Z",
                    "author": {
                      "login": "ChrisHughes24"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5KT3ur",
                    "body": "These lemmas should probably be in `Data.Bool.Basic` near the definition of `toNat`.",
                    "createdAt": "2023-06-29T14:43:50Z",
                    "author": {
                      "login": "ChrisHughes24"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5KT4I1",
                    "body": "This should be in `Data.Bool.Basic` and probably you should prove the `false` version.",
                    "createdAt": "2023-06-29T14:45:00Z",
                    "author": {
                      "login": "ChrisHughes24"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5KkNHh",
                    "body": "Even `testBit_bool`? Because `testBit` is in the `Nat` namespace.",
                    "createdAt": "2023-07-03T15:00:21Z",
                    "author": {
                      "login": "mhk119"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5KT4tj",
                    "body": "These should probably be in `Data.Nat` somewhere.",
                    "createdAt": "2023-06-29T14:46:44Z",
                    "author": {
                      "login": "ChrisHughes24"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5KT5V8",
                    "body": "I'm not convinced this is even worth having as a lemma because it's too specialized. If it's used a lot then fair enough, but it seems to be only used once.",
                    "createdAt": "2023-06-29T14:48:36Z",
                    "author": {
                      "login": "ChrisHughes24"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5KkIUi",
                    "body": "I agree more with this wrt to `lt_succ_two_pow` and hence removed it. For `two_pow_succ`, it is used a lot more (8 in total) in the rest of the [file](https://github.com/mhk119/lean-smt/blob/bitvec/Smt/Data/Bitwise.lean). ",
                    "createdAt": "2023-07-03T14:44:45Z",
                    "author": {
                      "login": "mhk119"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5KT5nN",
                    "body": "```suggestion\r\nlemma shiftr_mod_two_eq_testBit : Nat.shiftr n i % 2 = (n.testBit i).toNat := by \r\n```",
                    "createdAt": "2023-06-29T14:49:25Z",
                    "author": {
                      "login": "ChrisHughes24"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5KT7TU",
                    "body": "Is this an if and only if? Also maybe rename it `bit_lt_bit_iff`",
                    "createdAt": "2023-06-29T14:54:40Z",
                    "author": {
                      "login": "ChrisHughes24"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5KT7tk",
                    "body": "```suggestion\r\ntheorem bodd_eq_bodd_iff : bodd n = bodd m â†” n % 2 = m % 2 := by\r\n```",
                    "createdAt": "2023-06-29T14:55:55Z",
                    "author": {
                      "login": "ChrisHughes24"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5KT73B",
                    "body": "```suggestion\r\n    Nat.testBit m i = true âˆ§ âˆ€ j, i < j â†’ Nat.testBit m j = Nat.testBit n j := by\r\n```",
                    "createdAt": "2023-06-29T14:56:20Z",
                    "author": {
                      "login": "ChrisHughes24"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5KT8Z2",
                    "body": "I think a longer more descriptive name might be useful here.",
                    "createdAt": "2023-06-29T14:57:51Z",
                    "author": {
                      "login": "ChrisHughes24"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5KT9FZ",
                    "body": "```suggestion\r\ntheorem testBit_eq_false_of_lt (h: n < 2^i) : n.testBit i = false := by \r\n```\r\nI think this version of the statement is probably better.",
                    "createdAt": "2023-06-29T14:59:25Z",
                    "author": {
                      "login": "ChrisHughes24"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5KUC-8",
                    "body": "```suggestion\r\ntheorem lt_of_testBit_eq_true (h: n.testBit i = true) (hn : n < 2^w) : i < w := by\r\n```",
                    "createdAt": "2023-06-29T15:18:45Z",
                    "author": {
                      "login": "ChrisHughes24"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5KUD8T",
                    "body": "```suggestion\r\ntheorem testBit_two_pow_mul_add (h: i < w) : Nat.testBit (2^w * b + n) i = Nat.testBit n i := by\r\n```",
                    "createdAt": "2023-06-29T15:20:04Z",
                    "author": {
                      "login": "ChrisHughes24"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5KUFNA",
                    "body": "```suggestion\r\ntheorem testBit_two_pow_mul_toNat_add (h: n < 2^w) : Nat.testBit (2^w * b.toNat + n) w = b:= by\r\n```",
                    "createdAt": "2023-06-29T15:21:16Z",
                    "author": {
                      "login": "ChrisHughes24"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5KUFk1",
                    "body": "```suggestion\r\ntheorem testBit_two_pow_add (h : i < w) : \r\n```",
                    "createdAt": "2023-06-29T15:21:39Z",
                    "author": {
                      "login": "ChrisHughes24"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5KUFyf",
                    "body": "```suggestion\r\ntheorem testBit_two_pow_add' (h : n < 2^w) : Nat.testBit (2^w + n) w = true :=\r\n```",
                    "createdAt": "2023-06-29T15:21:59Z",
                    "author": {
                      "login": "ChrisHughes24"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5KUHSU",
                    "body": "The full name of this is `Nat.toNat` I think. It should be called something more descriptive like `Nat.ofBits`, or maybe `ofBits` should be for the version where `z = 0`. I also don't understand the semantics of the function from the docstring, is `z` effectively added to the result?",
                    "createdAt": "2023-06-29T15:24:58Z",
                    "author": {
                      "login": "ChrisHughes24"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5KUMtg",
                    "body": "There is no mention of `Nat.succ` on the LHS, so I don't think this is the right name. It might be better with a name like `toNat_eq_pow_mul_add`. Also, this equality could be added to the docstring for `toNat`, because it helps understand the semantics.",
                    "createdAt": "2023-06-29T15:35:05Z",
                    "author": {
                      "login": "ChrisHughes24"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5KUNM2",
                    "body": "```suggestion\r\n  | 0 => 0\r\n  | i + 1 => toNat f (z.bit (f i)) i\r\n```\r\nWhat do you think of this definition? It might get rid of some `i + 1`s in the other theorem statements.",
                    "createdAt": "2023-06-29T15:36:50Z",
                    "author": {
                      "login": "ChrisHughes24"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5K8bpX",
                    "body": "Instead of 0, I put z. Then this works really nicely.",
                    "createdAt": "2023-07-08T21:01:26Z",
                    "author": {
                      "login": "mhk119"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5KUNqn",
                    "body": "```suggestion\r\ntheorem testBit_toNat (h1: i â‰¤ j): (toNat f 0 j).testBit i = f i := by\r\n```",
                    "createdAt": "2023-06-29T15:38:28Z",
                    "author": {
                      "login": "ChrisHughes24"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5KUO2H",
                    "body": "Is it necessary to have this definition on `Nat` itself? Or could we just use `n.toBitvec < m.toBitvec`.",
                    "createdAt": "2023-06-29T15:42:37Z",
                    "author": {
                      "login": "ChrisHughes24"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5KUPHh",
                    "body": "Are you going to need things like `subCarry` later and `negCarry`. Maybe this should have `add` in the name somewhere.",
                    "createdAt": "2023-06-29T15:43:32Z",
                    "author": {
                      "login": "ChrisHughes24"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5KUPW1",
                    "body": "I don't know the semantics of this. Is it just `(n + m) % 2^i`? ",
                    "createdAt": "2023-06-29T15:44:23Z",
                    "author": {
                      "login": "ChrisHughes24"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5KkJNC",
                    "body": "It's equal to that, yes. However, `bitadd` is the bitwise version so it implements this:\r\n![image](https://github.com/leanprover-community/mathlib4/assets/58151072/c8907a30-4285-40f4-ac74-8da1afca5d40)\r\n\r\nThe equivalence is proved in `bitadd_eq_add`.\r\n",
                    "createdAt": "2023-07-03T14:48:04Z",
                    "author": {
                      "login": "mhk119"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5KUPoH",
                    "body": "We usually use `carry_def` for theorems like this.",
                    "createdAt": "2023-06-29T15:45:09Z",
                    "author": {
                      "login": "ChrisHughes24"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5KkJ5V",
                    "body": "Thanks. How common are lemmas like this? Should I have one for every definition? Then I can do `rw [x_def]` instead of `simp only [x]`.",
                    "createdAt": "2023-07-03T14:49:50Z",
                    "author": {
                      "login": "mhk119"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5KUPrz",
                    "body": "```suggestion\r\n    ((Nat.testBit n i && Nat.testBit m i) || \r\n    ((Nat.testBit n i ^^ Nat.testBit m i) && bitcarry n m i)).toNat := by \r\n```",
                    "createdAt": "2023-06-29T15:45:17Z",
                    "author": {
                      "login": "ChrisHughes24"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5KUQbn",
                    "body": "This should have a better name. `bitadd` is not on the LHS of the Type so it shouldn't be on the LHS in the name. Something like maybe switching the LHS and RHS in the statement and calling it `bitadd_add_two_pow_mul_bitcarry`",
                    "createdAt": "2023-06-29T15:47:27Z",
                    "author": {
                      "login": "ChrisHughes24"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjU4MTUxMDcy",
              "login": "mhk119"
            },
            {
              "id": "MDQ6VXNlcjE2NDUxNDg=",
              "login": "goens"
            },
            {
              "id": "MDQ6VXNlcjg2ODU4OA==",
              "login": "digama0"
            },
            {
              "id": "MDQ6VXNlcjEwMTA1MDE2",
              "login": "grunweg"
            },
            {
              "id": "MDQ6VXNlcjg5MjA1OTg=",
              "login": "j-loreaux"
            },
            {
              "id": "MDQ6VXNlcjQ3Nzk1Ng==",
              "login": "kim-em"
            },
            {
              "id": "MDQ6VXNlcjMzODQ3Njg2",
              "login": "ChrisHughes24"
            },
            {
              "id": "U_kgDOB75MNQ",
              "login": "leanprover-community-mathlib4-bot"
            }
          ]
        },
        "state": "OPEN",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAErF7jqQ",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=4979&login=leanprover-community&repository=mathlib4"
              }
            ]
          }
        },
        "title": "doc(Data/Nat/Bitblast): initial commit",
        "updatedAt": "2025-03-01T17:33:55Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/4979",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "1ccf17fb4b3ba3c3ad400d8186cb97949bf0802b"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5oarcLzwAAAAI2EZas",
              "createdAt": "2023-06-12T03:34:03Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5oarcLzwAAAAI2EZav",
              "createdAt": "2023-06-12T03:34:03Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "4ed06e54f15425dc37f48d248ff4d17049dc059d"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5X27tF",
              "createdAt": "2023-06-12T04:35:04Z",
              "body": "",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5X28Fj",
              "createdAt": "2023-06-12T04:37:18Z",
              "body": "",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "055749d26ba1208531c2673bee6bd4025bf5fc4b"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5X28Mj",
              "createdAt": "2023-06-12T04:38:11Z",
              "body": "",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5X28TW",
              "createdAt": "2023-06-12T04:39:04Z",
              "body": "",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5X28Ut",
              "createdAt": "2023-06-12T04:39:14Z",
              "body": "",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5X28Xc",
              "createdAt": "2023-06-12T04:39:33Z",
              "body": "",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "4868ef58a9437aece147f3ac66acc6902ade8d7c"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5X28aM",
              "createdAt": "2023-06-12T04:39:51Z",
              "body": "",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "869e882c34daef2d9fab78a95566964574c015a9"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "bcaea2d6ee8dd9b9da837eb83a39ef607b794f71"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5X28ce",
              "createdAt": "2023-06-12T04:40:07Z",
              "body": "",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5X28d6",
              "createdAt": "2023-06-12T04:40:20Z",
              "body": "",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "1d8a3bec185667ebe9c2f36369ca9bdef9c06319"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5ekrTx",
              "createdAt": "2023-06-12T06:31:58Z",
              "body": "There's a definition `Bitvec` (see e.g. Data/Bitvec/Defs) for reasoning of `Nat` as \"unsigned int\" bitvectors, and `Int` as singed int using two's complement. These definitions and theorems probably would go better in that namespace than in `Nat` or `Bool`, wouldn't they? (and somewhere under Data/Bitvec).",
              "author": {
                "login": "goens"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5oarcLzwAAAAI22d7m",
              "createdAt": "2023-06-13T02:20:04Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5oarcLzwAAAAI22d7q",
              "createdAt": "2023-06-13T02:20:04Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "fbdc3a22bbc8a47356d9e994e746d237a8ee3c16"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "c140963463db5c34e6db3c8816ad07bcbf9192b5"
              }
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c5oarcLzwAAAAI3jb9U",
              "createdAt": "2023-06-13T23:56:57Z"
            },
            {
              "__typename": "ReopenedEvent",
              "id": "REE_lADOFcwZ1c5oarcLzwAAAAI3jcHa",
              "createdAt": "2023-06-13T23:57:07Z"
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5oarcLzwAAAAI3j9Po",
              "createdAt": "2023-06-14T00:24:36Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5oarcLzwAAAAI3j9Pt",
              "createdAt": "2023-06-14T00:24:36Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5oarcLzwAAAAI3kQ0W",
              "createdAt": "2023-06-14T00:41:43Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5oarcLzwAAAAI3kQ0b",
              "createdAt": "2023-06-14T00:41:43Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5eyZMZ",
              "createdAt": "2023-06-14T00:59:16Z",
              "body": "I don't really like the naming for this file. \"Bitblasting\" is a name for a specific technique in which theorems about fixed width integers are proved by rewriting them as theorems about 32 or 64 bool variables and then using a SAT solver, and nothing like that is being done in this file. Rather, there are some *bitwise* operations on Nats, and some discussion about *bit vectors* which don't seem to correspond to anything currently in the file. Bit-*blasting* is not covered at all, and if it was I would expect it to be in the `Tactic` folder and to be a tactic that will do bitblasting.\r\n\r\nEven setting this aside, I'm not sure there is much use for bitblasting in mathlib, because a proof method that requires handling all 64 bools separately won't really scale to N bits, which is the immediate next question. The preferred methodology here would be to prove the theorem in general and then just set N = 64 to obtain whatever result as a corollary. A tool that performs bit blasting might be useful to have in mathlib for use in external projects (e.g. crypto) but I don't see much internal use for it.",
              "author": {
                "login": "digama0"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5e-4ae",
              "createdAt": "2023-06-15T18:29:10Z",
              "body": "I apologize for the confusion caused by this PR. It may seem unrelated to the current Mathlib version of bitvectors, but it is actually part of a larger project to develop a tactic that can translate a Lean goal into an SMT query, invoke an SMT solver, and use the solver's proof to discharge the goal. The project's source code is at: https://github.com/ufmg-smite/lean-smt.\r\n\r\nThe bitvector operations and theorems in this PR are based on a new definition of [`BitVec`](https://github.com/ufmg-smite/lean-smt/blob/main/Smt/Data/BitVec.lean) as `Fin (2 ^ w)`, which is different from the one in Mathlib. This definition was chosen by Wojciech Nawrocki and Joe Hendrix, the authors of the Mathlib version, because it is more efficient and easier to work with (thanks to the existing `Nat` theorems). We plan to replace the Mathlib version with this one once the porting is done.\r\n\r\nThe PR's content is similar to `Data.Nat.Bitwise`, which I used extensively. I think it would be useful to have these bitvector operations and theorems in Mathlib as well. I brought up the idea of adding them to Mathlib in the [Lean Zulip chat](https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/bitblasting.20of.20bitvectors), and Scott Morrison suggested that I open a PR. I apologize for not being clear about this in the PR description.\r\n",
              "author": {
                "login": "mhk119"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5oarcLzwAAAAI42Qfm",
              "createdAt": "2023-06-15T18:30:11Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5oarcLzwAAAAI42Qfs",
              "createdAt": "2023-06-15T18:30:11Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5e_-QX",
              "createdAt": "2023-06-15T23:06:04Z",
              "body": "I'm onboard with the general plan you lay out, my comment is only that this file is not about bitblasting and not about bitvectors, it's about bitwise functions on Nat and it should be named accordingly. As for `Fin (2 ^ n)`, I think it would make sense to call that type something like `UIntN` for consistency with `UInt8`, `UInt16` etc types which have the same definition. (I realize you could either use this as a sequence of bits or as an integral value, or as a signed integer, but given that the underlying representation is as an integer and not a list of bools I think the naming and operations like `+` should reflect that. You can put another newtype on top if you want to emphasize more bitvector-like behavior, although in that case I'm not sure you want to keep the `n` as a parameter.)",
              "author": {
                "login": "digama0"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "a7515c9af85a5c262f2e6b519567216dde6f2e69"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5oarcLzwAAAAI52T1Q",
              "createdAt": "2023-06-18T08:00:56Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "b211ed21dd53e8932bcfbcb8d1aedcdad59c7b7d"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5oarcLzwAAAAI52d7G",
              "createdAt": "2023-06-18T08:20:23Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5oarcLzwAAAAI52pru",
              "createdAt": "2023-06-18T08:52:15Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5oarcLzwAAAAI52p2X",
              "createdAt": "2023-06-18T08:52:50Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5fIaW6",
              "createdAt": "2023-06-18T08:55:24Z",
              "body": "I see. I suppose I should merge our work into `Data.Nat.Bitwise`? I've pushed a commit doing that but the github-actions bot keeps removing the awaiting-CI label ðŸ¤”.",
              "author": {
                "login": "mhk119"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5ZuzKS",
              "createdAt": "2023-06-29T14:35:43Z",
              "body": "On the whole this looks really good, and the main comments are about the naming convention and small changes to statements.",
              "author": {
                "login": "ChrisHughes24"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "068e96b65aa067676649ba6fe6d446acc75a4dcc"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "d3b5b04a6e5b8ab08959487adc889cf0cb46626e"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "4a506c5a101ba0c0c9d83e9099a2623fa3313072"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "e9cf5639852384574d906b1a6da3022b32bd033f"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "7f859343d092b1757d54afb960a4f19e1ed609f1"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "cb5a2522f27c826c5aa7ce42294790a384b3ccbc"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "fd82137e5a8b9757df50b9a0cfee77215d18006d"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "3fb9204d1ea769452ff97bbfa63a514cab977958"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "0b2d9e8d35194e9cd0d8598f5a3282d802e87350"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "78ca18b17e0bd4e67d91d718497b7dac09b9ec56"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "eaf1d2862f53bb2644496f6237b75cb27d846da0"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "ec57592110b55f6e9449bfc2b168f31d83a0818d"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "2c2d8ecf40ec173f769d2035a09bcd3357bcb429"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "4508848776c5d33f202b524cf3c02e2bdc0de1a0"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5oarcLzwAAAAJCgSZE",
              "createdAt": "2023-07-03T08:20:19Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5oarcLzwAAAAJCxu53",
              "createdAt": "2023-07-03T14:52:44Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "835e7aaeb5a5a0724ce77ceaa341bc7462656900"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5oarcLzwAAAAJC0Hqx",
              "createdAt": "2023-07-03T15:49:07Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "74b3eb1d6f59c645ca2dcdf4e8c8df2deb6fb54f"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "251660010ee0dd9f6d37fa1d9e2a8c2387f89f1a"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5oarcLzwAAAAJGF-nY",
              "createdAt": "2023-07-08T21:08:55Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "ef71db15932f51580418a9ad3565a41e2d45cb1a"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "1dfd73f5cc69add92687add4e57eb70fd8197c4e"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "eb61c47b82950ab50bcb6e49b36415212bc105f5"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "3010c55c5bc83073028bcfeab3259863a8f4717d"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5oarcLzwAAAAJHsKks",
              "createdAt": "2023-07-11T22:17:57Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5oarcLzwAAAAJLv9o2",
              "createdAt": "2023-07-19T10:24:48Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "BaseRefChangedEvent"
            },
            {
              "__typename": "BaseRefChangedEvent"
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5oarcLzwAAAAMhHmrj",
              "createdAt": "2024-07-09T13:35:38Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6QWhcl",
              "createdAt": "2024-10-18T08:29:45Z",
              "body": "Coming here randomly for issue triage: is this PR still relevant, or can it be closed? As I understand it, bitblasting functionality is being added to Lean core these days - so this material is useful, but need not be in mathlib :-)",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "__typename": "UnsubscribedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6gebiz",
              "createdAt": "2025-03-01T17:33:54Z",
              "body": "@kim-em can we close this?",
              "author": {
                "login": "j-loreaux"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            }
          ]
        }
      }
    }
  }
}
