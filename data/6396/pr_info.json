{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 86,
        "assignees": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjQ4NjU2Nzkz",
              "login": "ADedecker"
            }
          ]
        },
        "author": {
          "login": "dagurtomas"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "We give algebraic versions of `LocallyConstant.comap` given the relevant algebraic structure on the target. \r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 2,
        "closed": true,
        "closedAt": "2023-08-10T12:07:36Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5jtcC4",
              "body": "Could you merge master?\r\n\r\nAlso, while you're at it, could you do the following cleanup in `Topology.LocallyCostant.Basic`?\r\n- change [LocallyConstant.coe_comap](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant.coe_comap) to\r\n```lean\r\ntheorem coe_comap (f : X → Y) (g : LocallyConstant Y Z) (hf : Continuous f) :\r\n    comap f g = g ∘ f := by\r\n  rw [comap, dif_pos hf]\r\n  rfl\r\n```\r\n- change [LocallyConstant.comap_id](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant.comap_id) to\r\n```lean\r\ntheorem comap_id : comap (@id X) = @id (LocallyConstant X Z) := by\r\n  ext\r\n  simp only [continuous_id, id.def, Function.comp.right_id, coe_comap]\r\n```\r\n- change [LocallyConstant.comap_const](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant.comap_const) to\r\n```lean\r\ntheorem comap_const (f : X → Y) (y : Y) (h : ∀ x, f x = y) :\r\n    (comap f : LocallyConstant Y Z → LocallyConstant X Z) = fun g => (const X (g y)) := by\r\n  ext; rw [coe_comap]\r\n  · simp only [Function.comp_apply, h, coe_const, Function.const_apply]\r\n  · rw [show f = fun _ => y by ext; apply h]\r\n    exact continuous_const\r\n```\r\n\r\nThanks!",
              "createdAt": "2023-08-10T09:14:20Z",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5jt6RJ",
              "body": "Thanks for the helpful review! ",
              "createdAt": "2023-08-10T10:39:09Z",
              "author": {
                "login": "dagurtomas"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5juKbR",
              "body": "Well thanks for your contributions!\r\n\r\nbors merge",
              "createdAt": "2023-08-10T11:30:55Z",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5juOwW",
              "body": "Build failed (retrying...):\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/5820583284/job/15781242538)",
              "createdAt": "2023-08-10T11:43:47Z",
              "author": {
                "login": "bors"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5juWZa",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/5820642225/job/15781435722)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/5820642225/job/15781435928)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/5820642225/job/15781436118)",
              "createdAt": "2023-08-10T12:07:35Z",
              "author": {
                "login": "bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "54fe3aaafcc811ba40ffce6a8819275194550db3",
                "additions": 102,
                "deletions": 0,
                "committedDate": "2023-08-06T09:05:07Z",
                "author": {
                  "name": "dagurtomas",
                  "email": "dagurtomas@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "1918c99e8897f4ea571c529d786edcbbae632c4b",
                "additions": 8,
                "deletions": 10,
                "committedDate": "2023-08-07T08:16:40Z",
                "author": {
                  "name": "dagurtomas",
                  "email": "dagurtomas@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "5e9a7b75768f79255d242eb6d6b855ba4800ba65",
                "additions": 4027,
                "deletions": 2147,
                "committedDate": "2023-08-10T10:06:21Z",
                "author": {
                  "name": "dagurtomas",
                  "email": "dagurtomas@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "2c9bd3911174fb480c004ee1f25acbdd720f46b6",
                "additions": 30,
                "deletions": 49,
                "committedDate": "2023-08-10T10:35:04Z",
                "author": {
                  "name": "dagurtomas",
                  "email": "dagurtomas@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "72e4808a0d739c25be2fb7c5dc44d3a70208b397",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-08-10T10:37:15Z",
                "author": {
                  "name": "dagurtomas",
                  "email": "dagurtomas@gmail.com"
                },
                "statusCheckRollup": null
              }
            }
          ]
        },
        "createdAt": "2023-08-06T09:06:14Z",
        "deletions": 5,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/Topology/LocallyConstant/Algebra.lean",
              "additions": 45,
              "deletions": 0
            },
            {
              "path": "Mathlib/Topology/LocallyConstant/Basic.lean",
              "additions": 41,
              "deletions": 5
            }
          ]
        },
        "headRefName": "LocConstAlgebraNobeling",
        "headRefOid": "72e4808a0d739c25be2fb7c5dc44d3a70208b397",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5XRDxB",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
              "color": "06e039",
              "name": "ready-to-merge"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5dOvAy",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-08-06T12:24:33Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5dqEyy",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ADedecker"
              },
              "submittedAt": "2023-08-10T09:10:11Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 6396,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5dOvAW",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-08-06T12:24:18Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5dOvAy",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-08-06T12:24:33Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5dqEyy",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ADedecker"
              },
              "submittedAt": "2023-08-10T09:10:11Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5MmsSN",
                    "body": "This is a non-terminal simp, which should be squeezed",
                    "createdAt": "2023-08-06T12:24:18Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5MmsSs",
                    "body": "```suggestion\r\n  map_mul' r s := by\r\n```",
                    "createdAt": "2023-08-06T12:24:33Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5M4BV8",
                    "body": "```suggestion\r\n  simp [hf]\r\n```",
                    "createdAt": "2023-08-10T08:23:40Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5M4CSw",
                    "body": "```suggestion\r\n```\r\n\r\nI don't think this `simp` attribute is useful. For this to ever trigger, `simp` has to know about `hf`. But in that case, `coe_comap` also triggers and leads to the same result. Does that make sense?",
                    "createdAt": "2023-08-10T08:26:46Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5M4DmR",
                    "body": "```suggestion\r\ntheorem comap_comap [TopologicalSpace Z] (f : X → Y) (g : Y → Z)\r\n```\r\n`α` is already in the variables. Regarding the name, I think it's more coherent with a lot of the library. The result above can stay as `comap_comp` because it's actually using composition which is useful for rewriting.",
                    "createdAt": "2023-08-10T08:31:06Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5M4E3j",
                    "body": "```suggestion\r\n  rwa [coe_comap_apply _ _ hf, coe_comap_apply _ _ hf, hx] at h\r\n```",
                    "createdAt": "2023-08-10T08:35:28Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5M4KEV",
                    "body": "```suggestion\r\nnoncomputable\r\ndef congrLeft [TopologicalSpace Y] (e : X ≃ₜ Y) : LocallyConstant X Z ≃ LocallyConstant Y Z where\r\n```\r\n\r\nAgain this is for naming consistency",
                    "createdAt": "2023-08-10T08:52:19Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5M4MZW",
                    "body": "```suggestion\r\n/-- `LocallyConstant.comap` is a `MonoidHom`. -/\r\n@[to_additive \"`LocallyConstant.comap` is an `AddMonoidHom`. \"]\r\nnoncomputable\r\ndef comapMonoidHom  [MulOneClass Z] (f : X → Y) (hf : Continuous f) :\r\n```",
                    "createdAt": "2023-08-10T08:59:38Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5M4My4",
                    "body": "```suggestion\r\ndef comapLinearMap {R : Type _} [Semiring R] [AddCommMonoid Z] [Module R Z] (f : X → Y)\r\n```\r\n\r\nAnother possible name for brevity would be `comapₗ`",
                    "createdAt": "2023-08-10T09:00:50Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5M4Ogh",
                    "body": "Usually when we put `injective` we actually use `Function.injective`, the kernel result should be called `ker_comapLinear`. See e.g [LinearMap.lsmul_injective](https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/BilinearMap.html#LinearMap.lsmul_injective) vs [LinearMap.ker_lsmul](https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/BilinearMap.html#LinearMap.ker_lsmul)",
                    "createdAt": "2023-08-10T09:06:44Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5M4PRW",
                    "body": "```suggestion\r\n  map_add' := (comapAddMonoidHom _ e.continuous_invFun).map_add'\r\n```\r\n\r\nThe reason it didn't work is that, contrary to the `map_smul'` field, there's no way to infer the ring `R` here. You could also do:\r\n```lean\r\n  map_add' := (comapLinear (R := R) _ e.continuous_invFun).map_add'\r\n```\r\nBut it's cleaner to just use the additive version.",
                    "createdAt": "2023-08-10T09:09:12Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5M4PfD",
                    "body": "```suggestion\r\ndef congrLeftLinearEquiv {R : Type _} [Semiring R] [AddCommMonoid Z] [Module R Z] (e : X ≃ₜ Y) :\r\n```\r\n\r\nOr `congrLeftₗ`",
                    "createdAt": "2023-08-10T09:09:51Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjI1NjIzODI5",
              "login": "dagurtomas"
            },
            {
              "id": "MDQ6VXNlcjQ4NjU2Nzkz",
              "login": "ADedecker"
            },
            {
              "id": "MDQ6VXNlcjQyNTI2MA==",
              "login": "eric-wieser"
            },
            {
              "id": "U_kgDOB75MNQ",
              "login": "leanprover-community-mathlib4-bot"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": null,
        "title": "[Merged by Bors] - feat: algebraic versions of LocallyConstant.comap",
        "updatedAt": "2023-08-10T12:07:40Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/6396",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "54fe3aaafcc811ba40ffce6a8819275194550db3"
              }
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5N1qzu",
              "createdAt": "2023-08-06T09:07:09Z",
              "source": {
                "id": "PR_kwDOFcwZ1c5W6xOT",
                "title": "[Merged by Bors] - feat: Nobeling's theorem",
                "url": "https://github.com/leanprover-community/mathlib4/pull/6286"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5tj34nzwAAAAJVDecu",
              "createdAt": "2023-08-06T09:07:33Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5tj34nzwAAAAJVDecy",
              "createdAt": "2023-08-06T09:07:33Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5tj34nzwAAAAJVDoFq",
              "createdAt": "2023-08-06T09:33:31Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5dOvAW",
              "createdAt": "2023-08-06T12:24:18Z",
              "body": "",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5dOvAy",
              "createdAt": "2023-08-06T12:24:33Z",
              "body": "",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "1918c99e8897f4ea571c529d786edcbbae632c4b"
              }
            },
            {
              "__typename": "AssignedEvent",
              "id": "AE_lADOFcwZ1c5tj34nzwAAAAJWUUyr",
              "createdAt": "2023-08-08T17:08:08Z",
              "assignee": {
                "id": "MDQ6VXNlcjQ4NjU2Nzkz",
                "login": "ADedecker"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5tj34nzwAAAAJXNVyu",
              "createdAt": "2023-08-09T23:09:44Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5dqEyy",
              "createdAt": "2023-08-10T08:23:40Z",
              "body": "",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5jtcC4",
              "createdAt": "2023-08-10T09:14:20Z",
              "body": "Could you merge master?\r\n\r\nAlso, while you're at it, could you do the following cleanup in `Topology.LocallyCostant.Basic`?\r\n- change [LocallyConstant.coe_comap](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant.coe_comap) to\r\n```lean\r\ntheorem coe_comap (f : X → Y) (g : LocallyConstant Y Z) (hf : Continuous f) :\r\n    comap f g = g ∘ f := by\r\n  rw [comap, dif_pos hf]\r\n  rfl\r\n```\r\n- change [LocallyConstant.comap_id](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant.comap_id) to\r\n```lean\r\ntheorem comap_id : comap (@id X) = @id (LocallyConstant X Z) := by\r\n  ext\r\n  simp only [continuous_id, id.def, Function.comp.right_id, coe_comap]\r\n```\r\n- change [LocallyConstant.comap_const](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant.comap_const) to\r\n```lean\r\ntheorem comap_const (f : X → Y) (y : Y) (h : ∀ x, f x = y) :\r\n    (comap f : LocallyConstant Y Z → LocallyConstant X Z) = fun g => (const X (g y)) := by\r\n  ext; rw [coe_comap]\r\n  · simp only [Function.comp_apply, h, coe_const, Function.const_apply]\r\n  · rw [show f = fun _ => y by ext; apply h]\r\n    exact continuous_const\r\n```\r\n\r\nThanks!",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5tj34nzwAAAAJXbkLL",
              "createdAt": "2023-08-10T09:14:40Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5tj34nzwAAAAJXbkLX",
              "createdAt": "2023-08-10T09:14:40Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "5e9a7b75768f79255d242eb6d6b855ba4800ba65"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "2c9bd3911174fb480c004ee1f25acbdd720f46b6"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "72e4808a0d739c25be2fb7c5dc44d3a70208b397"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5jt6RJ",
              "createdAt": "2023-08-10T10:39:09Z",
              "body": "Thanks for the helpful review! ",
              "author": {
                "login": "dagurtomas"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5tj34nzwAAAAJXfegu",
              "createdAt": "2023-08-10T10:39:36Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5tj34nzwAAAAJXfeg0",
              "createdAt": "2023-08-10T10:39:36Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5tj34nzwAAAAJXfehC",
              "createdAt": "2023-08-10T10:39:36Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5tj34nzwAAAAJXfehP",
              "createdAt": "2023-08-10T10:39:36Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5tj34nzwAAAAJXgSkv",
              "createdAt": "2023-08-10T11:01:48Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5juKbR",
              "createdAt": "2023-08-10T11:30:55Z",
              "body": "Well thanks for your contributions!\r\n\r\nbors merge",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5tj34nzwAAAAJXhSN0",
              "createdAt": "2023-08-10T11:31:07Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
                "name": "ready-to-merge"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5tj34nzwAAAAJXhSPY",
              "createdAt": "2023-08-10T11:31:08Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5juOwW",
              "createdAt": "2023-08-10T11:43:47Z",
              "body": "Build failed (retrying...):\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/5820583284/job/15781242538)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5juWZa",
              "createdAt": "2023-08-10T12:07:35Z",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/5820642225/job/15781435722)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/5820642225/job/15781435928)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/5820642225/job/15781436118)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c5tj34nzwAAAAJXilD9",
              "createdAt": "2023-08-10T12:07:36Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c5tj34nzwAAAAJXilOS",
              "createdAt": "2023-08-10T12:07:40Z"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5N7KFt",
              "createdAt": "2023-08-11T10:32:12Z",
              "source": {
                "id": "PR_kwDOFcwZ1c5XtsHr",
                "title": "[Merged by Bors] - feat: algebraic maps in LocallyConstant",
                "url": "https://github.com/leanprover-community/mathlib4/pull/6520"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            }
          ]
        }
      }
    }
  }
}
