{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 286,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "YaelDillies"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "Sometimes conditional kernels exist \"by chance\" and the existing `Measure.condKernel` and `Kernel.condKernel` definitions fail to capture this. This PR extracts the disintegration property of conditional kernels into two Prop-valued typeclasses `Measure.IsCondKernel` and `Kernel.IsCondKernel`.\r\n\r\n[Zulip](https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/github.20permission/near/453644387)\r\n\r\nCo-authored-by: Kin Yau James Wong <kyjwong0501@gmail.com>\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nFor details on the \"pull request lifecycle\" in mathlib, please see:\r\nhttps://leanprover-community.github.io/contribute/index.html\r\n\r\nIn particular, note that most reviewers will only notice your PR\r\nif it passes the continuous integration checks.\r\nPlease ask for help on https://leanprover.zulipchat.com if needed.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <kyjwong0501@gmail.com>\r\n\r\nIf you are moving or deleting declarations, please include these lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nMoves:\r\n- Vector.* -> Mathlib.Vector.*\r\n- ...\r\n\r\nDeletions:\r\n- Nat.bit1_add_bit1\r\n- ...\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n\r\n-->\r\n- [x] depends on: #15103\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 8,
        "closed": true,
        "closedAt": "2024-07-26T13:52:28Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c6F_Tw7",
              "body": "### PR summary [03f1a7996e](https://github.com/leanprover-community/mathlib4/pull/15105/commits/03f1a7996e872c01eaa543f3da950b0df9ee7534)\n\n#### Import changes for modified files\n\nNo significant changes to the import graph\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n|<details><summary>7 files</summary> `Mathlib.Probability.Kernel.Disintegration.Integral` `Mathlib.Probability.Independence.ZeroOne` `Mathlib.Probability.Kernel.Disintegration.StandardBorel` `Mathlib.Probability.Kernel.CondDistrib` `Mathlib.Probability.Kernel.Condexp` `Mathlib.Probability.Kernel.Disintegration.Unique` `Mathlib.Probability.Independence.Conditional`</details>|1|\n| `Mathlib.Probability.Kernel.Disintegration.Basic`|1720|\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ IsCondKernel.apply_of_ne_zero`\n`+ IsCondKernel.isMarkovKernel`\n`+ IsCondKernel.isProbabilityMeasure`\n`+ IsCondKernel.isSFiniteKernel`\n`+ apply_congr_of_mem_measurableAtom`\n`+ compProd_of_not_isSFiniteKernel`\n`+ compProd_of_not_sfinite`\n`+ condKernel.instIsCondKernel`\n`+ condKernelBorel.instIsCondKernel`\n`+ condKernelCountable.instIsCondKernel`\n`+ condKernelCountable.instIsMarkovKernel`\n`+ condKernelUnitBorel.instIsCondKernel`\n`+ condKernelUnitReal.instIsCondKernel`\n`+ const.instIsFiniteKernel`\n`+ const.instIsMarkovKernel`\n`+ const.instIsSFiniteKernel`\n`+ instIsCondKernel_zero`\n`+ instance _root_.MeasureTheory.Measure.condKernel.instIsCondKernel (œÅ : Measure (Œ± √ó Œ©))`\n`+ instance _root_.ProbabilityTheory.IsSFiniteKernel.sFinite [IsSFiniteKernel Œ∫] (a : Œ±) :`\n`+ isSFiniteKernel_prodMkLeft_unit`\n`+ isSFiniteKernel_prodMkRight_unit`\n`++ IsCondKernel`\n`++ disintegrate`\n`- IsSFiniteKernel.sFinite`\n`- instIsMarkovKernelCondKernelCountable`\n`- isFiniteKernel_const`\n`- isMarkovKernel_const`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\n</details>",
              "createdAt": "2024-07-24T13:39:56Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6GAo01",
              "body": "This PR/issue depends on:\n* ~~leanprover-community/mathlib4#15103~~\nBy **[Dependent Issues](https://github.com/z0al/dependent-issues)** (ü§ñ). Happy coding!\n<!-- By Dependent Issues (Action) - DO NOT REMOVE -->",
              "createdAt": "2024-07-24T15:31:49Z",
              "author": {
                "login": "leanprover-community-mathlib4-bot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6GCn0u",
              "body": "> I am surprised that you don't require a conditional kernel to be a Markov kernel.\r\n\r\nI was considering doing this. However there is a pragmatic reason I did not: `œÅ.IsCondKernel œÅCond ‚Üí IsMarkovKernel œÅCond` cannot be registered as an instance since Lean can't infer `œÅ` from `œÅCond`. I can't make `œÅCond` an `outParam` either since a kernel can be a conditional kernel to several measures/kernels. This seriously limits the usefulness of assuming `œÅCond` to be a Markov kernel within the definition of `IsCondKernel` over simply adding it as an extra assumption.",
              "createdAt": "2024-07-24T20:22:14Z",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6GF0bV",
              "body": "You can remove several `IsSFiniteKernel` hypotheses: if `Œ∫` is non-zero then `Œ∫Cond` is s-finite (and similarly for `œÅCond`). Indeed the composition-product is 0 if one of the factors is not s-finite (by definition), which means that if `Œ∫Cond` is not s-finite and disintegrates `Œ∫`, then `Œ∫` is zero.\r\n\r\nThat remark could also be used in another PR to remove many hypotheses in the Unique file (which you will presumably refactor next to be about the new predicate?).",
              "createdAt": "2024-07-25T07:44:01Z",
              "author": {
                "login": "RemyDegenne"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6GF2ZK",
              "body": "> if `Œ∫Cond` is not s-finite and disintegrates `Œ∫`, then `Œ∫` is zero\r\n\r\nüí°\r\n\r\n> the Unique file (which you will presumably refactor next to be about the new predicate?)\r\n\r\nI had no such plans, but simply because we don't need that file in our project (yet). I am happy to refactor it as well if you think it is a good idea.",
              "createdAt": "2024-07-25T07:48:35Z",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6GQyTA",
              "body": "Yes of course (in fact, I was very sure I had already done so, but clearly I didn't ü§î)",
              "createdAt": "2024-07-26T11:19:50Z",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6GQ-7q",
              "body": "The build is failing, but for a minor thing. The PR looks good to me. Please fix and merge.\r\nThanks!\r\nbors d+",
              "createdAt": "2024-07-26T11:52:13Z",
              "author": {
                "login": "RemyDegenne"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6GQ-8X",
              "body": ":v: YaelDillies can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests).",
              "createdAt": "2024-07-26T11:52:15Z",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6GRJaV",
              "body": "Whoops, indeed\r\n\r\nbors merge",
              "createdAt": "2024-07-26T12:17:24Z",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6GRW6j",
              "body": "Canceled.",
              "createdAt": "2024-07-26T12:49:47Z",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6GRXCy",
              "body": "bors merge",
              "createdAt": "2024-07-26T12:50:04Z",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6GR0mD",
              "body": "Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/10111542348/job/27963700205)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/10111542348/job/27963701360)",
              "createdAt": "2024-07-26T13:52:27Z",
              "author": {
                "login": "mathlib-bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "f5a94db2c0453f8a3c1c8a7d0009e1fbaf2cee79",
                "additions": 194,
                "deletions": 67,
                "committedDate": "2024-07-24T15:50:15Z",
                "author": {
                  "name": "Ya√´l Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "9d18c163e1b55fbb662f8312cd9a2a3171ae4a9c",
                "additions": 13,
                "deletions": 13,
                "committedDate": "2024-07-24T15:50:15Z",
                "author": {
                  "name": "Ya√´l Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "4cb7e4b2f5d431c3d04f133922b7c9f365274257",
                "additions": 0,
                "deletions": 3,
                "committedDate": "2024-07-24T15:50:15Z",
                "author": {
                  "name": "Ya√´l Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "5ceb38fa9649939646fbc0d31fb49718e9bfd2d8",
                "additions": 3,
                "deletions": 3,
                "committedDate": "2024-07-24T15:50:15Z",
                "author": {
                  "name": "Ya√´l Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfb1WuQ",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083239073/job/27879364281"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfb1VZQ",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083239075/job/27879363941"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfRUdFg",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10079900755/job/27868339478"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfRUdHw",
                        "name": "build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10079900756/job/27868339487"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfRUZjw",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10079900430/job/27868338575"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfRUZBA",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10079900429/job/27868338436"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfRUdBQ",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10079900754/job/27868339461"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfb1VXA",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083239073/job/27879363932"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfRUedA",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10079900430/job/27868339828"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfRUb4Q",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10079900429/job/27868339169"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfRUedg",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10079900754/job/27868339830"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfRUcJg",
                        "name": "check workflows (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10079900430/job/27868339238"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfRUdpg",
                        "name": "check workflows",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10079900429/job/27868339622"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfRUazw",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10079900430/job/27868338895"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfRUaaQ",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10079900429/job/27868338793"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfRUf9w",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10079900430/job/27868340215"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfR1qnA",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10079900429/job/27868883612"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfRVNWw",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/27868351835"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfRV7qw",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=15105&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "b2fbfad4c8228799afba635099242e9914b179ba",
                "additions": 3,
                "deletions": 3,
                "committedDate": "2024-07-24T20:24:56Z",
                "author": {
                  "name": "Ya√´l Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfctIMA",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083525340/job/27880278064"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfctIaQ",
                        "name": "build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083525339/job/27880278121"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfctHWw",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083525283/job/27880277851"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfctF8w",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083525285/job/27880277491"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfctJWA",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083525343/job/27880278360"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfctJzg",
                        "name": "Lint style",
                        "conclusion": "FAILURE",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083525285/job/27880278478"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfctKUA",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083525283/job/27880278608"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfctHeQ",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083525343/job/27880277881"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfctJOA",
                        "name": "check workflows (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083525283/job/27880278328"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfctHAQ",
                        "name": "check workflows",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083525285/job/27880277761"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfctItg",
                        "name": "Build",
                        "conclusion": "CANCELLED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083525285/job/27880278198"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfctGBQ",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083525283/job/27880277509"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfdAi2A",
                        "name": "Post-CI job",
                        "conclusion": "CANCELLED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083525285/job/27880596184"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfctLqQ",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083525283/job/27880278953"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfctyng",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/27880288926"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfcuXXQ",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=15105&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "ffb0149da96a3e8ec62382afd3664b9a5e5ef833",
                "additions": 4,
                "deletions": 2,
                "committedDate": "2024-07-24T20:27:22Z",
                "author": {
                  "name": "Ya√´l Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfczd8w",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083559216/job/27880381939"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfczezg",
                        "name": "build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083559218/job/27880382158"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfczbww",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083559100/job/27880381379"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfczc9A",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083559101/job/27880381684"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfczeGA",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083559220/job/27880381976"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfczfKw",
                        "name": "Lint style",
                        "conclusion": "FAILURE",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083559101/job/27880382251"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfczc4A",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083559100/job/27880381664"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfczffQ",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083559220/job/27880382333"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfczd4g",
                        "name": "check workflows (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083559100/job/27880381922"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfczd2w",
                        "name": "check workflows",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083559101/job/27880381915"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfczcAg",
                        "name": "Build",
                        "conclusion": "CANCELLED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083559101/job/27880381442"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfczfVA",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083559100/job/27880382292"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfdFLYQ",
                        "name": "Post-CI job",
                        "conclusion": "CANCELLED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083559101/job/27880672097"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfczgRA",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083559100/job/27880382532"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfc0CGQ",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/27880391193"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfc0yvQ",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=15105&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "b3d0dbd1ffe8b0d3b2734ec58606a313e049f1dc",
                "additions": 2,
                "deletions": 1,
                "committedDate": "2024-07-24T20:29:14Z",
                "author": {
                  "name": "Ya√´l Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfvv7nw",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10090561861/job/27900246943"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfvv53Q",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10090561870/job/27900246493"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfc4Jxg",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083581923/job/27880458694"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfc4JAw",
                        "name": "build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083581898/job/27880458499"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfc4KKw",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083581797/job/27880458795"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfc4KYQ",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083581800/job/27880458849"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfc4JKg",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083581900/job/27880458538"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfvv6Gw",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10090561861/job/27900246555"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfc4IOQ",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083581797/job/27880458297"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfc4LoA",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083581800/job/27880459168"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfc4KRw",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083581900/job/27880458823"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfc4LLQ",
                        "name": "check workflows (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083581797/job/27880459053"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfc4INg",
                        "name": "check workflows",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083581800/job/27880458294"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfc4G_A",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083581797/job/27880457980"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfc4HMg",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083581800/job/27880458034"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfc4MLQ",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083581797/job/27880459309"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfdTApA",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10083581800/job/27880898724"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfc4oIQ",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/27880466465"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfc4Q2A",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=15105&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "b479ba95dff3331cb85083b5d94537bc7bbdd150",
                "additions": 50,
                "deletions": 15,
                "committedDate": "2024-07-25T09:06:21Z",
                "author": {
                  "name": "Ya√´l Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgikFdA",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10108182727/job/27953530228"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgikD3Q",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10108182722/job/27953529821"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfx_8fw",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10091307719/job/27902606463"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfx_7Ig",
                        "name": "build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10091307715/job/27902606114"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfx_2mg",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10091307344/job/27902604954"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfx_3sg",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10091307348/job/27902605234"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfx_7eA",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10091307716/job/27902606200"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgikENA",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10108182727/job/27953529908"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfx_3vA",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10091307344/job/27902605244"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfx_6GQ",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10091307348/job/27902605849"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfx_82g",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10091307716/job/27902606554"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfx_42A",
                        "name": "check workflows (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10091307344/job/27902605528"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfx_4qg",
                        "name": "check workflows",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10091307348/job/27902605482"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfx_55A",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10091307344/job/27902605796"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfx_2WA",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10091307348/job/27902604888"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfx_7Lw",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10091307344/job/27902606127"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfyeXug",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10091307348/job/27903104954"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfyAhTw",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/27902615887"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGfyBwCQ",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=15105&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "e82f600377b000637e1df148af186077ba861ce0",
                "additions": 51,
                "deletions": 40,
                "committedDate": "2024-07-26T11:18:14Z",
                "author": {
                  "name": "Ya√´l Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgo7RGQ",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10110388625/job/27960201497"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgo7ReA",
                        "name": "build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10110388630/job/27960201592"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgo7PqQ",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10110388422/job/27960201129"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgo7OyA",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10110388423/job/27960200904"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgo7Q_g",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10110388624/job/27960201470"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgo7RIw",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10110388422/job/27960201507"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgo7PWA",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10110388423/job/27960201048"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgo7Rww",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10110388624/job/27960201667"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgo7QVw",
                        "name": "check workflows (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10110388422/job/27960201303"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgo7P4w",
                        "name": "check workflows",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10110388423/job/27960201187"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgo7Qgw",
                        "name": "Build",
                        "conclusion": "FAILURE",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10110388423/job/27960201347"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgo7O-Q",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10110388422/job/27960200953"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgo7R5w",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10110388422/job/27960201703"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgpKtKQ",
                        "name": "Post-CI job",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10110388423/job/27960454441"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgo7rTQ",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/27960208205"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgo8bug",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=15105&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "df26ee076d66d45197f6e85329feee711b99ddfd",
                "additions": 1,
                "deletions": 6,
                "committedDate": "2024-07-26T12:16:48Z",
                "author": {
                  "name": "Ya√´l Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgq8XTw",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10111083219/job/27962316623"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgq8XKQ",
                        "name": "build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10111083193/job/27962316585"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgq8Sjw",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10111082618/job/27962315407"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgq8UUA",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10111082602/job/27962315856"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgq8Wxw",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10111083194/job/27962316487"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgq8Vuw",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10111082618/job/27962316219"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgq8TZQ",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10111082602/job/27962315621"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgq8YEA",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10111083194/job/27962316816"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgq8UvA",
                        "name": "check workflows (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10111082618/job/27962315964"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgq8Sjg",
                        "name": "check workflows",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10111082602/job/27962315406"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgq8Rog",
                        "name": "Build",
                        "conclusion": "FAILURE",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10111082602/job/27962315170"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgq8T3g",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10111082618/job/27962315742"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgq8Www",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10111082618/job/27962316483"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgrN2Gg",
                        "name": "Post-CI job",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10111082602/job/27962603034"
                      },
                      {
                        "__typename": "StatusContext",
                        "id": "SC_kwDOFcwZ1c8AAAAHFr7UeQ",
                        "context": "bors",
                        "state": "PENDING",
                        "targetUrl": "https://mathlib-bors-ca18eefec4cb.herokuapp.com/batches/4706",
                        "description": "Running"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgq83AA",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/27962324736"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgq9yag",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=15105&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "03f1a7996e872c01eaa543f3da950b0df9ee7534",
                "additions": 10,
                "deletions": 10,
                "committedDate": "2024-07-26T12:49:41Z",
                "author": {
                  "name": "Ya√´l Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgsPODA",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10111533920/job/27963674124"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgsPNGw",
                        "name": "build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10111533915/job/27963673883"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgsPKiw",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10111533390/job/27963673227"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgsPIjw",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10111533396/job/27963672719"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgsPNUw",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10111533914/job/27963673939"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgsPMtA",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10111533390/job/27963673780"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgsPMcA",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10111533396/job/27963673712"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgsPPLA",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10111533914/job/27963674412"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgsPIhA",
                        "name": "check workflows (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10111533390/job/27963672708"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgsPKeQ",
                        "name": "check workflows",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10111533396/job/27963673209"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgsPHBw",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10111533390/job/27963672327"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgsPHFQ",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10111533396/job/27963672341"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgsPPJQ",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10111533390/job/27963674405"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgsqXwQ",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10111533396/job/27964118977"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgsPsGw",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/27963681819"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGgsQhjQ",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=15105&login=leanprover-community&repository=mathlib4"
                      },
                      {
                        "__typename": "StatusContext",
                        "id": "SC_kwDOFcwZ1c8AAAAHFttC0A",
                        "context": "bors",
                        "state": "SUCCESS",
                        "targetUrl": "https://mathlib-bors-ca18eefec4cb.herokuapp.com/batches/4707",
                        "description": "Build succeeded"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "createdAt": "2024-07-24T13:39:15Z",
        "deletions": 118,
        "files": {
          "nodes": [
            {
              "path": "Mathlib.lean",
              "additions": 1,
              "deletions": 0
            },
            {
              "path": "Mathlib/Probability/Kernel/Basic.lean",
              "additions": 15,
              "deletions": 4
            },
            {
              "path": "Mathlib/Probability/Kernel/Composition.lean",
              "additions": 12,
              "deletions": 0
            },
            {
              "path": "Mathlib/Probability/Kernel/Disintegration/Basic.lean",
              "additions": 168,
              "deletions": 0
            },
            {
              "path": "Mathlib/Probability/Kernel/Disintegration/Integral.lean",
              "additions": 20,
              "deletions": 20
            },
            {
              "path": "Mathlib/Probability/Kernel/Disintegration/StandardBorel.lean",
              "additions": 58,
              "deletions": 92
            },
            {
              "path": "Mathlib/Probability/Kernel/Disintegration/Unique.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/Probability/Kernel/MeasureCompProd.lean",
              "additions": 10,
              "deletions": 0
            }
          ]
        },
        "headRefName": "disintegration_refactor",
        "headRefOid": "03f1a7996e872c01eaa543f3da950b0df9ee7534",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c52WBBM",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABAt13Ow",
              "color": "bfd4f2",
              "name": "delegated"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJqVA",
              "color": "33DBEC",
              "name": "t-measure-probability"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c6DM7jI",
              "body": "Could you add an `IsCondKernel` instance for the kernel disintegration version of `condKernel`, which would replace the `compProd_fst_condKernel` lemma? That is, refactor the kernel version of distintegration in the same way that you refactored the measure version.",
              "state": "COMMENTED",
              "author": {
                "login": "RemyDegenne"
              },
              "submittedAt": "2024-07-26T08:25:52Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 15105,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c6C9vGt",
              "body": "I am surprised that you don't require a conditional kernel to be a Markov kernel.\r\n\r\nIt has to be an \"almost-Markov\" kernel, as proved by the code below (it does not have to be a Markov kernel because you can change it on some null set and keep the composition-product equality).\r\nIn the construction for the standard Borel case, I take extra steps to make sure that it actually is a Markov kernel, in order to simplify its use.\r\n\r\nI't like to hear your thoughts about that.\r\n\r\n```lean\r\n\r\n-- extracted from the proof of `fst_compProd`\r\nlemma fst_compProd' {Œ± Œ≤ Œ≥ : Type*} {_ : MeasurableSpace Œ±} {_ : MeasurableSpace Œ≤}\r\n    {_ : MeasurableSpace Œ≥}\r\n    (Œ∫ : Kernel Œ± Œ≤) (Œ∑ : Kernel (Œ± √ó Œ≤) Œ≥) [IsSFiniteKernel Œ∫] [IsSFiniteKernel Œ∑]\r\n    (x : Œ±) {s : Set Œ≤} (hs : MeasurableSet s) :\r\n    (Œ∫ ‚äó‚Çñ Œ∑).fst x s = ‚à´‚Åª b, s.indicator (fun b ‚Ü¶ (Œ∑ (x, b)) Set.univ) b ‚àÇ(Œ∫ x) := by\r\n  rw [Kernel.fst_apply' _ _ hs, Kernel.compProd_apply]\r\n  swap; ¬∑ exact measurable_fst hs\r\n  simp only [Set.mem_setOf_eq]\r\n  classical\r\n  have : ‚àÄ b : Œ≤, Œ∑ (x, b) {_c | b ‚àà s} = s.indicator (fun b ‚Ü¶ Œ∑ (x, b) Set.univ) b := by\r\n    intro b\r\n    by_cases hb : b ‚àà s <;> simp [hb]\r\n  simp_rw [this]\r\n\r\n-- place this next to `ae_const_le_iff_forall_lt_measure_zero`\r\nlemma ae_le_const_iff_forall_gt_measure_zero {Œ≤} [LinearOrder Œ≤] [TopologicalSpace Œ≤]\r\n    [OrderTopology Œ≤] [FirstCountableTopology Œ≤] (f : Œ± ‚Üí Œ≤) (c : Œ≤) :\r\n    (‚àÄ·µê x ‚àÇŒº, f x ‚â§ c) ‚Üî ‚àÄ b, c < b ‚Üí Œº {x | b ‚â§ f x} = 0 := by\r\n  rw [ae_iff]\r\n  push_neg\r\n  constructor\r\n  ¬∑ intro h b hb\r\n    refine measure_mono_null (fun y hy ‚Ü¶ (hb.trans_le hy : _)) h\r\n  intro hc\r\n  by_cases h : ‚àÄ b, b ‚â§ c\r\n  ¬∑ have : {a : Œ± | c < f a} = ‚àÖ := by\r\n      apply Set.eq_empty_iff_forall_not_mem.2 fun x hx ‚Ü¶ ?_\r\n      refine (lt_irrefl (f x) ?_).elim\r\n      exact (lt_irrefl _ (lt_of_lt_of_le hx (h (f x)))).elim\r\n    simp [this]\r\n  by_cases H : ¬¨IsGLB (Set.Ioi c) c\r\n  ¬∑ have : c ‚àà lowerBounds (Set.Ioi c) := fun y hy => le_of_lt hy\r\n    obtain ‚ü®b, b_up, bc‚ü© : ‚àÉ b : Œ≤, b ‚àà lowerBounds (Set.Ioi c) ‚àß c < b := by\r\n      simpa [IsGLB, IsGreatest, this, upperBounds] using H\r\n    exact measure_mono_null (fun x hx => b_up hx) (hc b bc)\r\n  push_neg at H h\r\n  obtain ‚ü®u, _, u_lt, u_lim, -‚ü© :\r\n    ‚àÉ u : ‚Ñï ‚Üí Œ≤,\r\n      StrictAnti u ‚àß (‚àÄ n : ‚Ñï, c < u n) ‚àß Tendsto u atTop (ùìù c) ‚àß ‚àÄ n : ‚Ñï, u n ‚àà Set.Ioi c :=\r\n    H.exists_seq_strictAnti_tendsto_of_not_mem (lt_irrefl c) h\r\n  have h_Union : {x | c < f x} = ‚ãÉ n : ‚Ñï, {x | u n ‚â§ f x} := by\r\n    ext1 x\r\n    simp_rw [Set.mem_iUnion, Set.mem_setOf_eq]\r\n    constructor <;> intro h\r\n    ¬∑ obtain ‚ü®n, hn‚ü© := ((tendsto_order.1 u_lim).2 _ h).exists\r\n      exact ‚ü®n, hn.le‚ü©\r\n    ¬∑ obtain ‚ü®n, hn‚ü© := h\r\n      exact (u_lt _).trans_le hn\r\n  rw [h_Union, measure_iUnion_null_iff]\r\n  intro n\r\n  exact hc _ (u_lt n)\r\n\r\nlemma ae_markov {Œ± Œ≤ Œ≥ : Type*}\r\n    {_ : MeasurableSpace Œ±} {_ : MeasurableSpace Œ≤} {_ : MeasurableSpace Œ≥}\r\n    (Œ∫ : Kernel Œ± (Œ≤ √ó Œ≥)) [IsFiniteKernel Œ∫] (Œ∫Cond : Kernel (Œ± √ó Œ≤) Œ≥)\r\n    (h : Œ∫.fst ‚äó‚Çñ Œ∫Cond = Œ∫) (a : Œ±) :\r\n    ‚àÄ·µê b ‚àÇ(Œ∫.fst a), IsProbabilityMeasure (Œ∫Cond (a, b)) := by\r\n  by_cases h_sfin : IsSFiniteKernel Œ∫Cond\r\n  swap\r\n  ¬∑ rw [Kernel.compProd_of_not_isSFiniteKernel_right _ _ h_sfin] at h\r\n    simp [h.symm]\r\n  suffices ‚àÄ·µê b ‚àÇ(Œ∫.fst a), Œ∫Cond (a, b) Set.univ = 1 by\r\n    convert this with b\r\n    exact ‚ü®fun _ ‚Ü¶ measure_univ, fun h ‚Ü¶ ‚ü®h‚ü©‚ü©\r\n  suffices (‚àÄ·µê b ‚àÇ(Œ∫.fst a), Œ∫Cond (a, b) Set.univ ‚â§ 1)\r\n      ‚àß (‚àÄ·µê b ‚àÇ(Œ∫.fst a), 1 ‚â§ Œ∫Cond (a, b) Set.univ) by\r\n    filter_upwards [this.1, this.2] with b h1 h2 using le_antisymm h1 h2\r\n  have h_eq a s (hs : MeasurableSet s) :\r\n      ‚à´‚Åª b, s.indicator (fun b ‚Ü¶ (Œ∫Cond (a, b)) Set.univ) b ‚àÇŒ∫.fst a\r\n        = ‚à´‚Åª b, s.indicator 1 b ‚àÇŒ∫.fst a := by\r\n    conv_rhs => rw [lintegral_indicator_one hs, ‚Üê h]\r\n    rw [fst_compProd' _ _ _ hs]\r\n  have h_meas : Measurable fun b ‚Ü¶ Œ∫Cond (a, b) Set.univ :=\r\n    (Œ∫Cond.measurable_coe MeasurableSet.univ).comp measurable_prod_mk_left\r\n  constructor\r\n  ¬∑ rw [ae_le_const_iff_forall_gt_measure_zero]\r\n    intro r hr\r\n    let s := {b | r ‚â§ Œ∫Cond (a,b) Set.univ}\r\n    have hs : MeasurableSet s := h_meas measurableSet_Ici\r\n    specialize h_eq a s hs\r\n    have h_2_le : s.indicator (fun _ ‚Ü¶ r) ‚â§ s.indicator (fun b ‚Ü¶ (Œ∫Cond (a, b)) Set.univ) := by\r\n      intro b\r\n      by_cases hbs : b ‚àà s\r\n      ¬∑ simp only [hbs, Set.indicator_of_mem, Pi.ofNat_apply, Nat.cast_ofNat]\r\n        exact hbs\r\n      ¬∑ simp [hbs]\r\n    have : ‚à´‚Åª b, s.indicator (fun _ ‚Ü¶ r) b ‚àÇ(Œ∫.fst a) ‚â§ ‚à´‚Åª b, s.indicator 1 b ‚àÇŒ∫.fst a :=\r\n      (lintegral_mono h_2_le).trans_eq h_eq\r\n    rw [lintegral_indicator_const hs, lintegral_indicator_one hs] at this\r\n    show Œ∫.fst a s = 0\r\n    by_contra h_ne_zero\r\n    rw [‚Üê not_lt] at this\r\n    refine this ?_\r\n    conv_lhs => rw [‚Üê one_mul (Œ∫.fst a s)]\r\n    exact ENNReal.mul_lt_mul_right' h_ne_zero (measure_ne_top _ _) hr\r\n  ¬∑ rw [ae_const_le_iff_forall_lt_measure_zero]\r\n    intro r hr\r\n    let s := {b | Œ∫Cond (a, b) Set.univ ‚â§ r}\r\n    have hs : MeasurableSet s := h_meas measurableSet_Iic\r\n    specialize h_eq a s hs\r\n    have h_2_le : s.indicator (fun b ‚Ü¶ (Œ∫Cond (a, b)) Set.univ) ‚â§ s.indicator (fun _ ‚Ü¶ r) := by\r\n      intro b\r\n      by_cases hbs : b ‚àà s\r\n      ¬∑ simp only [hbs, Set.indicator_of_mem, Pi.ofNat_apply, Nat.cast_ofNat]\r\n        exact hbs\r\n      ¬∑ simp [hbs]\r\n    have : ‚à´‚Åª b, s.indicator 1 b ‚àÇŒ∫.fst a ‚â§ ‚à´‚Åª b, s.indicator (fun _ ‚Ü¶ r) b ‚àÇ(Œ∫.fst a) :=\r\n      h_eq.symm.trans_le (lintegral_mono h_2_le)\r\n    rw [lintegral_indicator_const hs, lintegral_indicator_one hs] at this\r\n    show Œ∫.fst a s = 0\r\n    by_contra h_ne_zero\r\n    rw [‚Üê not_lt] at this\r\n    refine this ?_\r\n    conv_rhs => rw [‚Üê one_mul (Œ∫.fst a s)]\r\n    exact ENNReal.mul_lt_mul_right' h_ne_zero (measure_ne_top _ _) hr\r\n\r\n```",
              "state": "COMMENTED",
              "author": {
                "login": "RemyDegenne"
              },
              "submittedAt": "2024-07-24T20:03:20Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6DDHLX",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "RemyDegenne"
              },
              "submittedAt": "2024-07-25T08:14:12Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6DM7jI",
              "body": "Could you add an `IsCondKernel` instance for the kernel disintegration version of `condKernel`, which would replace the `compProd_fst_condKernel` lemma? That is, refactor the kernel version of distintegration in the same way that you refactored the measure version.",
              "state": "COMMENTED",
              "author": {
                "login": "RemyDegenne"
              },
              "submittedAt": "2024-07-26T08:25:52Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5kvOfo",
                    "body": "```suggestion\r\nFurther, if `Œ∫` is an s-finite kernel from a countable `Œ±` such that each measure `Œ∫ a` is\r\n```",
                    "createdAt": "2024-07-24T16:18:31Z",
                    "author": {
                      "login": "RemyDegenne"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5kvOnl",
                    "body": "```suggestion\r\n`Mathlib.Probability.Kernel.Disintegration.StandardBorel` for a **construction** of disintegrating kernels.\r\n```",
                    "createdAt": "2024-07-24T16:18:53Z",
                    "author": {
                      "login": "RemyDegenne"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5kvPr4",
                    "body": "End of sentence missing",
                    "createdAt": "2024-07-24T16:22:17Z",
                    "author": {
                      "login": "RemyDegenne"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5kwN3-",
                    "body": "```suggestion\r\nAuthors: Ya√´l Dillies, Kin Yau James Wong, R√©my Degenne\r\n```\r\nSince a non-negligible part of that code is moved from the other file (although slightly changed).",
                    "createdAt": "2024-07-24T20:03:07Z",
                    "author": {
                      "login": "RemyDegenne"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5kyx5N",
                    "body": "The hypothesis `‚àÄ a, œÅ.fst {a} ‚â† 0` is very restrictive. The more useful result might be that if `œÅ.fst {a} ‚â† 0` then `œÅCond a` is a probability measure, which can be extracted from this proof. Can you add that lemma?\r\n\r\nThe more general version of this is the `ae_markov` lemma I wrote in my first comment for kernels and its (yet to be written) corollary for measures. But let's leave that for a future PR.",
                    "createdAt": "2024-07-25T08:14:12Z",
                    "author": {
                      "login": "RemyDegenne"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5k5EAl",
                    "body": "It looks like in that file the measurable space on Omega can be inferred from the measures or kernels, so implicit is better:\r\n```suggestion\r\nvariable {Œ± Œ≤ Œ© : Type*} {mŒ± : MeasurableSpace Œ±} {mŒ≤ : MeasurableSpace Œ≤} {mŒ© : MeasurableSpace Œ©}\r\n```\r\nIf that's not always the case, please add a typeclass argument in the lemmas where it is needed.",
                    "createdAt": "2024-07-26T08:12:08Z",
                    "author": {
                      "login": "RemyDegenne"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5k5FEz",
                    "body": "I am not a fan of hiding complicated hypotheses in variable lines (for readability reasons). Could you move `h_atom` to each lemma/def?",
                    "createdAt": "2024-07-26T08:15:55Z",
                    "author": {
                      "login": "RemyDegenne"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjE0MDkwNTkz",
              "login": "YaelDillies"
            },
            {
              "id": "U_kgDOB75MNQ",
              "login": "leanprover-community-mathlib4-bot"
            },
            {
              "id": "MDQ6VXNlcjQwOTQ3MzI=",
              "login": "RemyDegenne"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGgsPODA",
                "name": "label-and-report-new-contributor",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10111533920/job/27963674124"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGgsPNGw",
                "name": "build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10111533915/job/27963673883"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGgsPKiw",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10111533390/job/27963673227"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGgsPIjw",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10111533396/job/27963672719"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGgsPNUw",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10111533914/job/27963673939"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGgsPMtA",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10111533390/job/27963673780"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGgsPMcA",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10111533396/job/27963673712"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGgsPPLA",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10111533914/job/27963674412"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGgsPIhA",
                "name": "check workflows (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10111533390/job/27963672708"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGgsPKeQ",
                "name": "check workflows",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10111533396/job/27963673209"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGgsPHBw",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10111533390/job/27963672327"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGgsPHFQ",
                "name": "Build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10111533396/job/27963672341"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGgsPPJQ",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10111533390/job/27963674405"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGgsqXwQ",
                "name": "Post-CI job",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10111533396/job/27964118977"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGgsPsGw",
                "name": "New Contributor Check",
                "conclusion": "NEUTRAL",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/27963681819"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGgsQhjQ",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=15105&login=leanprover-community&repository=mathlib4"
              },
              {
                "__typename": "StatusContext",
                "id": "SC_kwDOFcwZ1c8AAAAHFttC0A",
                "context": "bors",
                "state": "SUCCESS",
                "targetUrl": "https://mathlib-bors-ca18eefec4cb.herokuapp.com/batches/4707",
                "description": "Build succeeded"
              }
            ]
          }
        },
        "title": "[Merged by Bors] - refactor: Extract predicate for conditional kernels ",
        "updatedAt": "2024-07-26T13:52:32Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/15105",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6Qsp2EzwAAAAMsdWDx",
              "createdAt": "2024-07-24T13:39:15Z",
              "label": {
                "id": "MDU6TGFiZWwzMjg4OTQyMDg2",
                "name": "blocked-by-other-PR"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6Qsp2EzwAAAAMsdWD4",
              "createdAt": "2024-07-24T13:39:15Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJqVA",
                "name": "t-measure-probability"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6F_Tw7",
              "createdAt": "2024-07-24T13:39:56Z",
              "body": "### PR summary [03f1a7996e](https://github.com/leanprover-community/mathlib4/pull/15105/commits/03f1a7996e872c01eaa543f3da950b0df9ee7534)\n\n#### Import changes for modified files\n\nNo significant changes to the import graph\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n|<details><summary>7 files</summary> `Mathlib.Probability.Kernel.Disintegration.Integral` `Mathlib.Probability.Independence.ZeroOne` `Mathlib.Probability.Kernel.Disintegration.StandardBorel` `Mathlib.Probability.Kernel.CondDistrib` `Mathlib.Probability.Kernel.Condexp` `Mathlib.Probability.Kernel.Disintegration.Unique` `Mathlib.Probability.Independence.Conditional`</details>|1|\n| `Mathlib.Probability.Kernel.Disintegration.Basic`|1720|\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ IsCondKernel.apply_of_ne_zero`\n`+ IsCondKernel.isMarkovKernel`\n`+ IsCondKernel.isProbabilityMeasure`\n`+ IsCondKernel.isSFiniteKernel`\n`+ apply_congr_of_mem_measurableAtom`\n`+ compProd_of_not_isSFiniteKernel`\n`+ compProd_of_not_sfinite`\n`+ condKernel.instIsCondKernel`\n`+ condKernelBorel.instIsCondKernel`\n`+ condKernelCountable.instIsCondKernel`\n`+ condKernelCountable.instIsMarkovKernel`\n`+ condKernelUnitBorel.instIsCondKernel`\n`+ condKernelUnitReal.instIsCondKernel`\n`+ const.instIsFiniteKernel`\n`+ const.instIsMarkovKernel`\n`+ const.instIsSFiniteKernel`\n`+ instIsCondKernel_zero`\n`+ instance _root_.MeasureTheory.Measure.condKernel.instIsCondKernel (œÅ : Measure (Œ± √ó Œ©))`\n`+ instance _root_.ProbabilityTheory.IsSFiniteKernel.sFinite [IsSFiniteKernel Œ∫] (a : Œ±) :`\n`+ isSFiniteKernel_prodMkLeft_unit`\n`+ isSFiniteKernel_prodMkRight_unit`\n`++ IsCondKernel`\n`++ disintegrate`\n`- IsSFiniteKernel.sFinite`\n`- instIsMarkovKernelCondKernelCountable`\n`- isFiniteKernel_const`\n`- isMarkovKernel_const`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\n</details>",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6Qsp2EzwAAAAMsj-g3",
              "createdAt": "2024-07-24T15:31:48Z",
              "label": {
                "id": "MDU6TGFiZWwzMjg4OTQyMDg2",
                "name": "blocked-by-other-PR"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6GAo01",
              "createdAt": "2024-07-24T15:31:49Z",
              "body": "This PR/issue depends on:\n* ~~leanprover-community/mathlib4#15103~~\nBy **[Dependent Issues](https://github.com/z0al/dependent-issues)** (ü§ñ). Happy coding!\n<!-- By Dependent Issues (Action) - DO NOT REMOVE -->",
              "author": {
                "login": "leanprover-community-mathlib4-bot"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c6Qsp2EzwAAAAMslBMm",
              "createdAt": "2024-07-24T15:50:23Z"
            },
            {
              "__typename": "ReviewRequestedEvent",
              "id": "RRE_lADOFcwZ1c6Qsp2EzwAAAAMsuOVi",
              "createdAt": "2024-07-24T19:06:42Z",
              "requestedReviewer": {
                "id": "MDQ6VXNlcjQwOTQ3MzI=",
                "login": "RemyDegenne"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6C9vGt",
              "createdAt": "2024-07-24T16:18:31Z",
              "body": "I am surprised that you don't require a conditional kernel to be a Markov kernel.\r\n\r\nIt has to be an \"almost-Markov\" kernel, as proved by the code below (it does not have to be a Markov kernel because you can change it on some null set and keep the composition-product equality).\r\nIn the construction for the standard Borel case, I take extra steps to make sure that it actually is a Markov kernel, in order to simplify its use.\r\n\r\nI't like to hear your thoughts about that.\r\n\r\n```lean\r\n\r\n-- extracted from the proof of `fst_compProd`\r\nlemma fst_compProd' {Œ± Œ≤ Œ≥ : Type*} {_ : MeasurableSpace Œ±} {_ : MeasurableSpace Œ≤}\r\n    {_ : MeasurableSpace Œ≥}\r\n    (Œ∫ : Kernel Œ± Œ≤) (Œ∑ : Kernel (Œ± √ó Œ≤) Œ≥) [IsSFiniteKernel Œ∫] [IsSFiniteKernel Œ∑]\r\n    (x : Œ±) {s : Set Œ≤} (hs : MeasurableSet s) :\r\n    (Œ∫ ‚äó‚Çñ Œ∑).fst x s = ‚à´‚Åª b, s.indicator (fun b ‚Ü¶ (Œ∑ (x, b)) Set.univ) b ‚àÇ(Œ∫ x) := by\r\n  rw [Kernel.fst_apply' _ _ hs, Kernel.compProd_apply]\r\n  swap; ¬∑ exact measurable_fst hs\r\n  simp only [Set.mem_setOf_eq]\r\n  classical\r\n  have : ‚àÄ b : Œ≤, Œ∑ (x, b) {_c | b ‚àà s} = s.indicator (fun b ‚Ü¶ Œ∑ (x, b) Set.univ) b := by\r\n    intro b\r\n    by_cases hb : b ‚àà s <;> simp [hb]\r\n  simp_rw [this]\r\n\r\n-- place this next to `ae_const_le_iff_forall_lt_measure_zero`\r\nlemma ae_le_const_iff_forall_gt_measure_zero {Œ≤} [LinearOrder Œ≤] [TopologicalSpace Œ≤]\r\n    [OrderTopology Œ≤] [FirstCountableTopology Œ≤] (f : Œ± ‚Üí Œ≤) (c : Œ≤) :\r\n    (‚àÄ·µê x ‚àÇŒº, f x ‚â§ c) ‚Üî ‚àÄ b, c < b ‚Üí Œº {x | b ‚â§ f x} = 0 := by\r\n  rw [ae_iff]\r\n  push_neg\r\n  constructor\r\n  ¬∑ intro h b hb\r\n    refine measure_mono_null (fun y hy ‚Ü¶ (hb.trans_le hy : _)) h\r\n  intro hc\r\n  by_cases h : ‚àÄ b, b ‚â§ c\r\n  ¬∑ have : {a : Œ± | c < f a} = ‚àÖ := by\r\n      apply Set.eq_empty_iff_forall_not_mem.2 fun x hx ‚Ü¶ ?_\r\n      refine (lt_irrefl (f x) ?_).elim\r\n      exact (lt_irrefl _ (lt_of_lt_of_le hx (h (f x)))).elim\r\n    simp [this]\r\n  by_cases H : ¬¨IsGLB (Set.Ioi c) c\r\n  ¬∑ have : c ‚àà lowerBounds (Set.Ioi c) := fun y hy => le_of_lt hy\r\n    obtain ‚ü®b, b_up, bc‚ü© : ‚àÉ b : Œ≤, b ‚àà lowerBounds (Set.Ioi c) ‚àß c < b := by\r\n      simpa [IsGLB, IsGreatest, this, upperBounds] using H\r\n    exact measure_mono_null (fun x hx => b_up hx) (hc b bc)\r\n  push_neg at H h\r\n  obtain ‚ü®u, _, u_lt, u_lim, -‚ü© :\r\n    ‚àÉ u : ‚Ñï ‚Üí Œ≤,\r\n      StrictAnti u ‚àß (‚àÄ n : ‚Ñï, c < u n) ‚àß Tendsto u atTop (ùìù c) ‚àß ‚àÄ n : ‚Ñï, u n ‚àà Set.Ioi c :=\r\n    H.exists_seq_strictAnti_tendsto_of_not_mem (lt_irrefl c) h\r\n  have h_Union : {x | c < f x} = ‚ãÉ n : ‚Ñï, {x | u n ‚â§ f x} := by\r\n    ext1 x\r\n    simp_rw [Set.mem_iUnion, Set.mem_setOf_eq]\r\n    constructor <;> intro h\r\n    ¬∑ obtain ‚ü®n, hn‚ü© := ((tendsto_order.1 u_lim).2 _ h).exists\r\n      exact ‚ü®n, hn.le‚ü©\r\n    ¬∑ obtain ‚ü®n, hn‚ü© := h\r\n      exact (u_lt _).trans_le hn\r\n  rw [h_Union, measure_iUnion_null_iff]\r\n  intro n\r\n  exact hc _ (u_lt n)\r\n\r\nlemma ae_markov {Œ± Œ≤ Œ≥ : Type*}\r\n    {_ : MeasurableSpace Œ±} {_ : MeasurableSpace Œ≤} {_ : MeasurableSpace Œ≥}\r\n    (Œ∫ : Kernel Œ± (Œ≤ √ó Œ≥)) [IsFiniteKernel Œ∫] (Œ∫Cond : Kernel (Œ± √ó Œ≤) Œ≥)\r\n    (h : Œ∫.fst ‚äó‚Çñ Œ∫Cond = Œ∫) (a : Œ±) :\r\n    ‚àÄ·µê b ‚àÇ(Œ∫.fst a), IsProbabilityMeasure (Œ∫Cond (a, b)) := by\r\n  by_cases h_sfin : IsSFiniteKernel Œ∫Cond\r\n  swap\r\n  ¬∑ rw [Kernel.compProd_of_not_isSFiniteKernel_right _ _ h_sfin] at h\r\n    simp [h.symm]\r\n  suffices ‚àÄ·µê b ‚àÇ(Œ∫.fst a), Œ∫Cond (a, b) Set.univ = 1 by\r\n    convert this with b\r\n    exact ‚ü®fun _ ‚Ü¶ measure_univ, fun h ‚Ü¶ ‚ü®h‚ü©‚ü©\r\n  suffices (‚àÄ·µê b ‚àÇ(Œ∫.fst a), Œ∫Cond (a, b) Set.univ ‚â§ 1)\r\n      ‚àß (‚àÄ·µê b ‚àÇ(Œ∫.fst a), 1 ‚â§ Œ∫Cond (a, b) Set.univ) by\r\n    filter_upwards [this.1, this.2] with b h1 h2 using le_antisymm h1 h2\r\n  have h_eq a s (hs : MeasurableSet s) :\r\n      ‚à´‚Åª b, s.indicator (fun b ‚Ü¶ (Œ∫Cond (a, b)) Set.univ) b ‚àÇŒ∫.fst a\r\n        = ‚à´‚Åª b, s.indicator 1 b ‚àÇŒ∫.fst a := by\r\n    conv_rhs => rw [lintegral_indicator_one hs, ‚Üê h]\r\n    rw [fst_compProd' _ _ _ hs]\r\n  have h_meas : Measurable fun b ‚Ü¶ Œ∫Cond (a, b) Set.univ :=\r\n    (Œ∫Cond.measurable_coe MeasurableSet.univ).comp measurable_prod_mk_left\r\n  constructor\r\n  ¬∑ rw [ae_le_const_iff_forall_gt_measure_zero]\r\n    intro r hr\r\n    let s := {b | r ‚â§ Œ∫Cond (a,b) Set.univ}\r\n    have hs : MeasurableSet s := h_meas measurableSet_Ici\r\n    specialize h_eq a s hs\r\n    have h_2_le : s.indicator (fun _ ‚Ü¶ r) ‚â§ s.indicator (fun b ‚Ü¶ (Œ∫Cond (a, b)) Set.univ) := by\r\n      intro b\r\n      by_cases hbs : b ‚àà s\r\n      ¬∑ simp only [hbs, Set.indicator_of_mem, Pi.ofNat_apply, Nat.cast_ofNat]\r\n        exact hbs\r\n      ¬∑ simp [hbs]\r\n    have : ‚à´‚Åª b, s.indicator (fun _ ‚Ü¶ r) b ‚àÇ(Œ∫.fst a) ‚â§ ‚à´‚Åª b, s.indicator 1 b ‚àÇŒ∫.fst a :=\r\n      (lintegral_mono h_2_le).trans_eq h_eq\r\n    rw [lintegral_indicator_const hs, lintegral_indicator_one hs] at this\r\n    show Œ∫.fst a s = 0\r\n    by_contra h_ne_zero\r\n    rw [‚Üê not_lt] at this\r\n    refine this ?_\r\n    conv_lhs => rw [‚Üê one_mul (Œ∫.fst a s)]\r\n    exact ENNReal.mul_lt_mul_right' h_ne_zero (measure_ne_top _ _) hr\r\n  ¬∑ rw [ae_const_le_iff_forall_lt_measure_zero]\r\n    intro r hr\r\n    let s := {b | Œ∫Cond (a, b) Set.univ ‚â§ r}\r\n    have hs : MeasurableSet s := h_meas measurableSet_Iic\r\n    specialize h_eq a s hs\r\n    have h_2_le : s.indicator (fun b ‚Ü¶ (Œ∫Cond (a, b)) Set.univ) ‚â§ s.indicator (fun _ ‚Ü¶ r) := by\r\n      intro b\r\n      by_cases hbs : b ‚àà s\r\n      ¬∑ simp only [hbs, Set.indicator_of_mem, Pi.ofNat_apply, Nat.cast_ofNat]\r\n        exact hbs\r\n      ¬∑ simp [hbs]\r\n    have : ‚à´‚Åª b, s.indicator 1 b ‚àÇŒ∫.fst a ‚â§ ‚à´‚Åª b, s.indicator (fun _ ‚Ü¶ r) b ‚àÇ(Œ∫.fst a) :=\r\n      h_eq.symm.trans_le (lintegral_mono h_2_le)\r\n    rw [lintegral_indicator_const hs, lintegral_indicator_one hs] at this\r\n    show Œ∫.fst a s = 0\r\n    by_contra h_ne_zero\r\n    rw [‚Üê not_lt] at this\r\n    refine this ?_\r\n    conv_rhs => rw [‚Üê one_mul (Œ∫.fst a s)]\r\n    exact ENNReal.mul_lt_mul_right' h_ne_zero (measure_ne_top _ _) hr\r\n\r\n```",
              "author": {
                "login": "RemyDegenne"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6GCn0u",
              "createdAt": "2024-07-24T20:22:14Z",
              "body": "> I am surprised that you don't require a conditional kernel to be a Markov kernel.\r\n\r\nI was considering doing this. However there is a pragmatic reason I did not: `œÅ.IsCondKernel œÅCond ‚Üí IsMarkovKernel œÅCond` cannot be registered as an instance since Lean can't infer `œÅ` from `œÅCond`. I can't make `œÅCond` an `outParam` either since a kernel can be a conditional kernel to several measures/kernels. This seriously limits the usefulness of assuming `œÅCond` to be a Markov kernel within the definition of `IsCondKernel` over simply adding it as an extra assumption.",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6GF0bV",
              "createdAt": "2024-07-25T07:44:01Z",
              "body": "You can remove several `IsSFiniteKernel` hypotheses: if `Œ∫` is non-zero then `Œ∫Cond` is s-finite (and similarly for `œÅCond`). Indeed the composition-product is 0 if one of the factors is not s-finite (by definition), which means that if `Œ∫Cond` is not s-finite and disintegrates `Œ∫`, then `Œ∫` is zero.\r\n\r\nThat remark could also be used in another PR to remove many hypotheses in the Unique file (which you will presumably refactor next to be about the new predicate?).",
              "author": {
                "login": "RemyDegenne"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6GF2ZK",
              "createdAt": "2024-07-25T07:48:35Z",
              "body": "> if `Œ∫Cond` is not s-finite and disintegrates `Œ∫`, then `Œ∫` is zero\r\n\r\nüí°\r\n\r\n> the Unique file (which you will presumably refactor next to be about the new predicate?)\r\n\r\nI had no such plans, but simply because we don't need that file in our project (yet). I am happy to refactor it as well if you think it is a good idea.",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6DDHLX",
              "createdAt": "2024-07-25T08:14:12Z",
              "body": "",
              "author": {
                "login": "RemyDegenne"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6Qsp2EzwAAAAMtHi5p",
              "createdAt": "2024-07-25T08:15:06Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6Qsp2EzwAAAAMtKRNC",
              "createdAt": "2024-07-25T09:06:29Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6DM7jI",
              "createdAt": "2024-07-26T08:12:08Z",
              "body": "Could you add an `IsCondKernel` instance for the kernel disintegration version of `condKernel`, which would replace the `compProd_fst_condKernel` lemma? That is, refactor the kernel version of distintegration in the same way that you refactored the measure version.",
              "author": {
                "login": "RemyDegenne"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6Qsp2EzwAAAAMuHi7U",
              "createdAt": "2024-07-26T09:23:47Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6GQyTA",
              "createdAt": "2024-07-26T11:19:50Z",
              "body": "Yes of course (in fact, I was very sure I had already done so, but clearly I didn't ü§î)",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6Qsp2EzwAAAAMuMTvU",
              "createdAt": "2024-07-26T11:20:01Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6GQ-7q",
              "createdAt": "2024-07-26T11:52:13Z",
              "body": "The build is failing, but for a minor thing. The PR looks good to me. Please fix and merge.\r\nThanks!\r\nbors d+",
              "author": {
                "login": "RemyDegenne"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6GQ-8X",
              "createdAt": "2024-07-26T11:52:15Z",
              "body": ":v: YaelDillies can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests).",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6Qsp2EzwAAAAMuNhFK",
              "createdAt": "2024-07-26T11:52:26Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABAt13Ow",
                "name": "delegated"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6GRJaV",
              "createdAt": "2024-07-26T12:17:24Z",
              "body": "Whoops, indeed\r\n\r\nbors merge",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6GRW6j",
              "createdAt": "2024-07-26T12:49:47Z",
              "body": "Canceled.",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6GRXCy",
              "createdAt": "2024-07-26T12:50:04Z",
              "body": "bors merge",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6GR0mD",
              "createdAt": "2024-07-26T13:52:27Z",
              "body": "Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/10111542348/job/27963700205)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/10111542348/job/27963701360)",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c6Qsp2EzwAAAAMuS_h9",
              "createdAt": "2024-07-26T13:52:28Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c6Qsp2EzwAAAAMuTABK",
              "createdAt": "2024-07-26T13:52:32Z"
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5UOlof",
              "createdAt": "2024-08-01T17:33:55Z",
              "source": {
                "id": "PR_kwDOFcwZ1c529Mz2",
                "title": "feat: MiM PR report",
                "url": "https://github.com/leanprover-community/mathlib4/pull/15355"
              }
            },
            {
              "__typename": "ReferencedEvent"
            }
          ]
        }
      }
    }
  }
}
