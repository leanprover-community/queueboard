{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 27,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "YaelDillies"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "Define new notation for `Finset.sum`/`Finset.prod`. `‚àë i ‚àà s with hi : p i, f i hi` now is notation for `‚àë i : s.filter p, f i.1 (mem_filter.1 i.2).2`.\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n- [x] depends on: #6795\r\n\r\nOther notations we could have are\r\n* `‚àë hi : i ‚àà s, f i hi` as notation for `‚àë i : s, f i.1 i.2`\r\n* `‚àë hi : i ‚àà s with p i, f i hi` as notation for `‚àë i : s.filter p, f i.1 (mem_filter.1 i.2).1`\r\n* `‚àë hi : i ‚àà s with hpi : p i, f i hi hpi` as notation for `‚àë i : s.filter p, f i.1 (mem_filter.1 i.2).1 (mem_filter.1 i.2).2`\r\n\r\nbut Eric seems mildly unhappy about them.\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 1,
        "closed": false,
        "closedAt": null,
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c58UbyG",
              "body": "This PR/issue depends on:\n* ~~leanprover-community/mathlib4#6795~~\nBy **[Dependent Issues](https://github.com/z0al/dependent-issues)** (ü§ñ). Happy coding!\n<!-- By Dependent Issues (Action) - DO NOT REMOVE -->",
              "createdAt": "2024-04-30T15:48:18Z",
              "author": {
                "login": "leanprover-community-mathlib4-bot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5_F4G-",
              "body": "I am very much not a fan of `‚àë hi : i ‚àà s, f i hi` syntax, as it means something completely different from `‚àë·∂† hi : i ‚àà s, f i hi` or `‚®Ö hi : i ‚àà s, f i hi`, which don't quantify over `i` at all.",
              "createdAt": "2024-05-26T14:43:41Z",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5_F5IR",
              "body": "I am aware of this potential confusion, but consider the number of people wondering how to get access to `hi : i ‚àà s` inside the sum. [Zulip is full of such questions](https://leanprover.zulipchat.com/#narrow/search/attach.20finset). I believe it's easier to explain a posteriori why `‚àë·∂† hi : i ‚àà s, f i hi` means something different than why we can't do the same thing as for `if i ‚àà s then a else b`.\r\n\r\nOr maybe you would be happier with `‚àë (hi : i ‚àà s), f i hi`?",
              "createdAt": "2024-05-26T14:59:34Z",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5_GFG_",
              "body": "`‚àë i (hi : i ‚àà s), f i hi` (allowing type info on the `i`) would be ok with me, as this is similar enough to the behavior of binders in `iInf`, even if it doesn't actually generate nested sums.",
              "createdAt": "2024-05-26T17:58:46Z",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5_GYAQ",
              "body": "But `iInf` binders would rather be `\\iInf (hi : i \\in s), ...`?",
              "createdAt": "2024-05-26T19:49:37Z",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6FeTut",
              "body": "### PR summary [3c6c930d69](https://github.com/leanprover-community/mathlib4/pull/11563/commits/3c6c930d69293261cfe829f24f48a80c31967115)\n\n#### Import changes for modified files\n\nNo significant changes to the import graph\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n\n</details>\n\n---\n\n#### Declarations diff\n\nNo declarations were harmed in the making of this PR! üêô\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n---\n\n<details><summary>No changes to technical debt.</summary>\n\nYou can run this locally as\n```\n./scripts/technical-debt-metrics.sh pr_summary\n```\n* The `relative` value is the weighted *sum* of the differences with weight given by the *inverse* of the current value of the statistic.\n* The `absolute` value is the `relative` value divided by the total sum of the inverses of the current values (i.e. the weighted *average* of the differences).\n</details>\n",
              "createdAt": "2024-07-19T14:30:38Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6coghv",
              "body": "In my view it's confusing for `‚àë i ‚àà s with hi : p i, f i hi` to create a coercion to types and `‚àë i ‚àà s with p i, f i` not to, although it's somewhat unavoidable here. But more generally I'm not sure we should be encouraging summing over the coercion of a finset... Nonetheless, I think this is an improvement to the earlier version of this PR.\r\n@eric-wieser, I'd be interested to hear your thoughts here",
              "createdAt": "2025-01-31T17:28:41Z",
              "author": {
                "login": "b-mehta"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6gZvYD",
              "body": "@b-mehta Regarding unavoidability, can we use `Finset.attach` here instead of the coercion? I haven't given this more than a few seconds thought though.",
              "createdAt": "2025-02-28T16:45:28Z",
              "author": {
                "login": "kmill"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6gaLwA",
              "body": "`s.attach` and `(univ : Finset s)` are defeq, so I am not clear what the gain of using either is",
              "createdAt": "2025-02-28T17:44:48Z",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6gaea5",
              "body": "@YaelDillies I think the question is \"do we want lemmas about this to be about sum of attach or sum of coercion?\"",
              "createdAt": "2025-02-28T18:28:11Z",
              "author": {
                "login": "kmill"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6gb8kY",
              "body": "I see. I doubt it hugely matters? But certainly we have a pre-existing issue here: There shouldn't be two ways to write \"the set `s` as a subset of itself\". Maybe we can make `s.attach` be an abbrev for `univ : Finset s`?",
              "createdAt": "2025-02-28T22:53:46Z",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6goiWQ",
              "body": "> Could you please add some tests that demonstrate the expansions?\r\n> \r\n> I'm thinking tests with `#guard_expr` that have the new syntax on the LHS and the expected expanded form on the RHS.\r\n\r\nI am not managing to use `#guard_expr`. Here is my best attempt:\r\n```\r\nimport Mathlib.Algebra.BigOperators.Group.Finset.Defs\r\n\r\nvariable {Œπ : Type*} {s : Finset Œπ} {p : Œπ ‚Üí Prop} [DecidablePred p] {f : ‚àÄ i, p i ‚Üí ‚Ñï}\r\n\r\n#guard_expr\r\n  ‚àë i ‚àà s with hi : p i, f i =\r\n    Finset.sum (Œ± := Finset.filter (fun i : s ‚Ü¶ p i) (Finset.univ : Finset s)) Finset.univ\r\n      fun ‚ü®i, hi‚ü© ‚Ü¶ have ‚ü®_, hi‚ü© := Finset.mem_filter.1 hi; f i hi\r\n-- auxiliary declaration cannot be created when declaration name is not available\r\n```",
              "createdAt": "2025-03-03T16:45:57Z",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6gp7B9",
              "body": "Hmm, that's a consequence of the use of destructuring (it's causing a couple of matches to be defined), paired with a bug in `#guard_expr`. I worry a little about how the notation creates `match`es by the way, since it's possible the same expression will be evaluated in different ways (with whatever might be in the matcher cache) and might have unexpected non-defeqs. Most robust would be defining or otherwise finding a function (that I'm calling `Finset.mapFilter` here; I'm not suggesting this as a name) that lets you write something like this:\r\n```\r\n  ‚àë i ‚àà s with hi : p i, f i =\r\n    Finset.sum (Œ± := Finset.filter (fun i : s ‚Ü¶ p i) (Finset.univ : Finset s)) Finset.univ\r\n      (Finset.mapFilter fun i hi ‚Ü¶ f i hi)\r\n```\r\n\r\nRegarding working around `#guard_expr`, there are two options:\r\n1. Use `example : LHS = RHS := rfl` instead.\r\n2. Write the test using `/-- RHS -/ #guard_msgs in #check LHS`. With the right pretty printing options, you might be able to make it robust.",
              "createdAt": "2025-03-03T19:26:53Z",
              "author": {
                "login": "kmill"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6gsLkO",
              "body": "> @b-mehta Regarding unavoidability, can we use `Finset.attach` here instead of the coercion? I haven't given this more than a few seconds thought though.\r\n\r\nI see this as just as bad; there's still a new coercion from a finset to a type going on. Ultimately my feeling is that summing over a finset in this way is something we shouldn't encourage users to do; it shows up super rarely, and when it does either something else has gone wrong or there's a much cleaner way of writing the intended idea. \r\n\r\nTo use the example from the title of this PR, if I see a beginner trying to write something like that, I'd strongly encourage them to use `‚àë i ‚àà s, if hi : p i then f i hi else 0` instead, which has the advantages of a) already having lemmas describing it b) not having a coercion to types so there's no DTT hell incoming c) having consistent behaviour with the non-dependent `f` version. In fact, now that I think about it, can we have the notation delaborate to this instead? (The junk value 0 is certainly safe since we're bound to be in an AddCommMonoid).",
              "createdAt": "2025-03-04T01:18:18Z",
              "author": {
                "login": "b-mehta"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6gzW7X",
              "body": "I am trying to implement Bhavik's suggestion, but\r\n```\r\n`(Finset.sum $s fun $x ‚Ü¶ if $hp : $p then f $x $hp else 0)\r\n```\r\nwhere `hp : Term` throws\r\n```\r\napplication type mismatch\r\n  hp.raw\r\nargument\r\n  hp\r\nhas type\r\n  TSyntax `term : Type\r\nbut is expected to have type\r\n  TSyntax `Lean.binderIdent : Type\r\n```\r\nAny advice?",
              "createdAt": "2025-03-04T14:24:57Z",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6g18-_",
              "body": "@YaelDillies I think what you can do is change the syntax so that the `with` clause is\r\n```\r\n(\"with \" atomic(binderIdent \" : \")? term)?\r\n```\r\nthen adjust the quotations accordingly. The `atomic` doesn't need any special treatment in the quotations. Something like the following should work\r\n```\r\n$[with [$hp :]? $p]?\r\n```\r\nOr\r\n```\r\n$[with [$hp:binderIdent :]? $p:term]?\r\n```",
              "createdAt": "2025-03-04T18:08:30Z",
              "author": {
                "login": "kmill"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6g2mf6",
              "body": "Isn't your suggestion undoing\r\n> I think the problem is that parsing is greedy, so (term \" : \")? term means \"ah, I saw a term, that means we must have a : next.\"\r\n> One solution would be term (\" : \" term)?, where that first term changes meaning if there's a : clause after it.\r\n\r\nfrom our DMs?",
              "createdAt": "2025-03-04T19:15:56Z",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6g3h6l",
              "body": "I know what I said and I know it looks like that :-)\r\n\r\nHowever, `atomic` is a way to turn off the greediness. I didn't suggest it before because I prefer avoiding `atomic(term \" : \")` since that involves unbounded lookahead. Looking for a single binderIdent is a single token of lookahead.",
              "createdAt": "2025-03-04T21:09:32Z",
              "author": {
                "login": "kmill"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6g4Fe0",
              "body": "Oooh, I see. It seems I am not syntax-fluent yet",
              "createdAt": "2025-03-04T22:08:17Z",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6hDnG8",
              "body": "@kmill, I tried applying your suggestion, but I now get the reverse error:\r\n```\r\napplication type mismatch\r\n  hx.raw\r\nargument\r\n  hx\r\nhas type\r\n  TSyntax `Lean.binderIdent : Type\r\nbut is expected to have type\r\n  TSyntax `term : Type\r\n```\r\nI just don't know how to turn one `TSyntax` into another one, and no example in mathlib seems to run into this issue",
              "createdAt": "2025-03-05T21:07:10Z",
              "author": {
                "login": "YaelDillies"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "0de475d6ffadb5e59fde8c980b63ff2083e51bb2",
                "additions": 27,
                "deletions": 18,
                "committedDate": "2025-03-04T13:54:27Z",
                "author": {
                  "name": "Ya√´l Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "4a8b696f8cc55ff42f2dc38adcd4dc714f614c54",
                "additions": 2,
                "deletions": 4,
                "committedDate": "2025-03-04T14:24:11Z",
                "author": {
                  "name": "Ya√´l Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI42yjpA",
                        "name": "set_pr_emoji",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13656021430/job/38175286180"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI42N3aA",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13655839629/job/38174685032"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI42NyUw",
                        "name": "Add topic label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13655839617/job/38174683731"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI42N1dg",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13655839858/job/38174684534"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI42N2tg",
                        "name": "post-or-update-summary-comment",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13655839885/job/38174684854"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI42N0Gw",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13655839614/job/38174684187"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI42N3fg",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13655839861/job/38174685054"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI42N3cA",
                        "name": "Build",
                        "conclusion": "FAILURE",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13655839614/job/38174685040"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI42N0qw",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13655839629/job/38174684331"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI42N1RQ",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13655839861/job/38174684485"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI42N5EQ",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13655839629/job/38174685457"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI42WNLg",
                        "name": "Post-CI job",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13655839614/job/38174821678"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI42PFiA",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/38174705032"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI42PyaA",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=11563&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "3c6c930d69293261cfe829f24f48a80c31967115",
                "additions": 16,
                "deletions": 14,
                "committedDate": "2025-03-05T21:05:45Z",
                "author": {
                  "name": "Ya√´l Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI6PWrxg",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13685586476/job/38268152774"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI6PWptg",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13685586618/job/38268152246"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI6PWqVA",
                        "name": "post-or-update-summary-comment",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13685586623/job/38268152404"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI6PWpEA",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13685586482/job/38268152080"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI6PWscQ",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13685586637/job/38268152945"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI6PWrJQ",
                        "name": "Build",
                        "conclusion": "FAILURE",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13685586482/job/38268152613"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI6PWpig",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13685586476/job/38268152202"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI6PWrIg",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13685586637/job/38268152610"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI6PWtbA",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13685586476/job/38268153196"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI6PdN2g",
                        "name": "Post-CI job",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13685586482/job/38268259802"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI6PX1QQ",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/38268171585"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI6PYdSA",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=11563&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "createdAt": "2024-03-21T10:13:25Z",
        "deletions": 18,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/Algebra/BigOperators/Group/Finset/Defs.lean",
              "additions": 27,
              "deletions": 18
            }
          ]
        },
        "headRefName": "cute_big_operators",
        "headRefOid": "3c6c930d69293261cfe829f24f48a80c31967115",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5qVyJa",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "MDU6TGFiZWwyOTg0NTM0NDU0",
              "color": "cc317c",
              "name": "help-wanted"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABKAKYew",
              "color": "33DBEC",
              "name": "t-meta"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJjTQ",
              "color": "33DBEC",
              "name": "t-algebra"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c6eBx2v",
              "body": "Could you please add some tests that demonstrate the expansions?\r\n\r\nI'm thinking tests with `#guard_expr` that have the new syntax on the LHS and the expected expanded form on the RHS.",
              "state": "COMMENTED",
              "author": {
                "login": "kmill"
              },
              "submittedAt": "2025-02-28T16:41:49Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "BLOCKED",
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 11563,
        "potentialMergeCommit": {
          "oid": "19f2edc100036812cacd6fd8b800b9f1eb0dafd2"
        },
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": [
            {
              "requestedReviewer": {
                "id": "MDQ6VXNlcjQyNTI2MA==",
                "login": "eric-wieser"
              }
            }
          ]
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c6eBx2v",
              "body": "Could you please add some tests that demonstrate the expansions?\r\n\r\nI'm thinking tests with `#guard_expr` that have the new syntax on the LHS and the expected expanded form on the RHS.",
              "state": "COMMENTED",
              "author": {
                "login": "kmill"
              },
              "submittedAt": "2025-02-28T16:41:49Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": []
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjE0MDkwNTkz",
              "login": "YaelDillies"
            },
            {
              "id": "U_kgDOB75MNQ",
              "login": "leanprover-community-mathlib4-bot"
            },
            {
              "id": "MDQ6VXNlcjQyNTI2MA==",
              "login": "eric-wieser"
            },
            {
              "id": "MDQ6VXNlcjI5OTU5MjI2",
              "login": "b-mehta"
            },
            {
              "id": "MDQ6VXNlcjIzNTMwNw==",
              "login": "kmill"
            },
            {
              "id": "U_kgDOBcsTTQ",
              "login": "leanprover-community-bot-assistant"
            }
          ]
        },
        "state": "OPEN",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI6PWrxg",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13685586476/job/38268152774"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI6PWptg",
                "name": "label-and-report-new-contributor",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13685586618/job/38268152246"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI6PWqVA",
                "name": "post-or-update-summary-comment",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13685586623/job/38268152404"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI6PWpEA",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13685586482/job/38268152080"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI6PWscQ",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13685586637/job/38268152945"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI6PWrJQ",
                "name": "Build",
                "conclusion": "FAILURE",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13685586482/job/38268152613"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI6PWpig",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13685586476/job/38268152202"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI6PWrIg",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13685586637/job/38268152610"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI6PWtbA",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13685586476/job/38268153196"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI6PdN2g",
                "name": "Post-CI job",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13685586482/job/38268259802"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI6PX1QQ",
                "name": "New Contributor Check",
                "conclusion": "NEUTRAL",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/38268171585"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI6PYdSA",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=11563&login=leanprover-community&repository=mathlib4"
              }
            ]
          }
        },
        "title": "feat: `‚àë i ‚àà s with hi : p i, f i hi` syntax for big operators",
        "updatedAt": "2025-03-05T21:11:06Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/11563",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6DHVwNzwAAAALXDn5v",
              "createdAt": "2024-03-21T10:13:41Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6DHVwNzwAAAALXDn58",
              "createdAt": "2024-03-21T10:13:41Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKAKYew",
                "name": "t-meta"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6DHVwNzwAAAALXDn6I",
              "createdAt": "2024-03-21T10:13:42Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJjTQ",
                "name": "t-algebra"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6DHVwNzwAAAALX5ukW",
              "createdAt": "2024-03-22T08:05:16Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6DHVwNzwAAAALX5uke",
              "createdAt": "2024-03-22T08:05:16Z",
              "label": {
                "id": "MDU6TGFiZWwzMjcxMjQ0NzU5",
                "name": "WIP"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6DHVwNzwAAAALX5ukl",
              "createdAt": "2024-03-22T08:05:16Z",
              "label": {
                "id": "MDU6TGFiZWwzMjg4OTQyMDg2",
                "name": "blocked-by-other-PR"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6DHVwNzwAAAALZEJJZ",
              "createdAt": "2024-03-25T09:24:47Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6DHVwNzwAAAALZFmdQ",
              "createdAt": "2024-03-25T09:53:04Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6DHVwNzwAAAALjK_vj",
              "createdAt": "2024-04-09T05:09:38Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6DHVwNzwAAAALmt1Pb",
              "createdAt": "2024-04-14T15:49:20Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6DHVwNzwAAAALsLGti",
              "createdAt": "2024-04-21T23:07:25Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6DHVwNzwAAAALynJqK",
              "createdAt": "2024-04-30T15:48:16Z",
              "label": {
                "id": "MDU6TGFiZWwzMjg4OTQyMDg2",
                "name": "blocked-by-other-PR"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c58UbyG",
              "createdAt": "2024-04-30T15:48:18Z",
              "body": "This PR/issue depends on:\n* ~~leanprover-community/mathlib4#6795~~\nBy **[Dependent Issues](https://github.com/z0al/dependent-issues)** (ü§ñ). Happy coding!\n<!-- By Dependent Issues (Action) - DO NOT REMOVE -->",
              "author": {
                "login": "leanprover-community-mathlib4-bot"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6DHVwNzwAAAALyqASK",
              "createdAt": "2024-04-30T16:37:53Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6DHVwNzwAAAAL01K3t",
              "createdAt": "2024-05-03T14:53:11Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6DHVwNzwAAAAL1Qbem",
              "createdAt": "2024-05-04T15:05:41Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c6DHVwNzwAAAAMDCpZ3",
              "createdAt": "2024-05-26T08:49:56Z"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5_F4G-",
              "createdAt": "2024-05-26T14:43:41Z",
              "body": "I am very much not a fan of `‚àë hi : i ‚àà s, f i hi` syntax, as it means something completely different from `‚àë·∂† hi : i ‚àà s, f i hi` or `‚®Ö hi : i ‚àà s, f i hi`, which don't quantify over `i` at all.",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5_F5IR",
              "createdAt": "2024-05-26T14:59:34Z",
              "body": "I am aware of this potential confusion, but consider the number of people wondering how to get access to `hi : i ‚àà s` inside the sum. [Zulip is full of such questions](https://leanprover.zulipchat.com/#narrow/search/attach.20finset). I believe it's easier to explain a posteriori why `‚àë·∂† hi : i ‚àà s, f i hi` means something different than why we can't do the same thing as for `if i ‚àà s then a else b`.\r\n\r\nOr maybe you would be happier with `‚àë (hi : i ‚àà s), f i hi`?",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5_GFG_",
              "createdAt": "2024-05-26T17:58:46Z",
              "body": "`‚àë i (hi : i ‚àà s), f i hi` (allowing type info on the `i`) would be ok with me, as this is similar enough to the behavior of binders in `iInf`, even if it doesn't actually generate nested sums.",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5_GYAQ",
              "createdAt": "2024-05-26T19:49:37Z",
              "body": "But `iInf` binders would rather be `\\iInf (hi : i \\in s), ...`?",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6DHVwNzwAAAAMEHC3F",
              "createdAt": "2024-05-28T08:35:17Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c6DHVwNzwAAAAMEHRW9",
              "createdAt": "2024-05-28T08:39:50Z"
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6DHVwNzwAAAAMEHvQL",
              "createdAt": "2024-05-28T08:48:54Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6DHVwNzwAAAAMEJdR7",
              "createdAt": "2024-05-28T09:22:09Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c6DHVwNzwAAAAMpKmEG",
              "createdAt": "2024-07-19T14:29:51Z"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6FeTut",
              "createdAt": "2024-07-19T14:30:38Z",
              "body": "### PR summary [3c6c930d69](https://github.com/leanprover-community/mathlib4/pull/11563/commits/3c6c930d69293261cfe829f24f48a80c31967115)\n\n#### Import changes for modified files\n\nNo significant changes to the import graph\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n\n</details>\n\n---\n\n#### Declarations diff\n\nNo declarations were harmed in the making of this PR! üêô\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n---\n\n<details><summary>No changes to technical debt.</summary>\n\nYou can run this locally as\n```\n./scripts/technical-debt-metrics.sh pr_summary\n```\n* The `relative` value is the weighted *sum* of the differences with weight given by the *inverse* of the current value of the statistic.\n* The `absolute` value is the `relative` value divided by the total sum of the inverses of the current values (i.e. the weighted *average* of the differences).\n</details>\n",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6DHVwNzwAAAAMpK9a1",
              "createdAt": "2024-07-19T14:34:48Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6DHVwNzwAAAAOsTwDH",
              "createdAt": "2024-12-28T04:11:16Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c6DHVwNzwAAAAPA6WH6",
              "createdAt": "2025-01-30T09:28:21Z"
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6DHVwNzwAAAAPA6YPH",
              "createdAt": "2025-01-30T09:29:01Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6DHVwNzwAAAAPB1T2q",
              "createdAt": "2025-01-31T09:55:31Z",
              "label": {
                "id": "MDU6TGFiZWwzMjcxMjQ0NzU5",
                "name": "WIP"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6coghv",
              "createdAt": "2025-01-31T17:28:41Z",
              "body": "In my view it's confusing for `‚àë i ‚àà s with hi : p i, f i hi` to create a coercion to types and `‚àë i ‚àà s with p i, f i` not to, although it's somewhat unavoidable here. But more generally I'm not sure we should be encouraging summing over the coercion of a finset... Nonetheless, I think this is an improvement to the earlier version of this PR.\r\n@eric-wieser, I'd be interested to hear your thoughts here",
              "author": {
                "login": "b-mehta"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "ReviewRequestedEvent",
              "id": "RRE_lADOFcwZ1c6DHVwNzwAAAAPYN_o5",
              "createdAt": "2025-02-28T13:27:51Z",
              "requestedReviewer": {
                "id": "MDQ6VXNlcjQyNTI2MA==",
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6eBx2v",
              "createdAt": "2025-02-28T16:41:49Z",
              "body": "Could you please add some tests that demonstrate the expansions?\r\n\r\nI'm thinking tests with `#guard_expr` that have the new syntax on the LHS and the expected expanded form on the RHS.",
              "author": {
                "login": "kmill"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6gZvYD",
              "createdAt": "2025-02-28T16:45:28Z",
              "body": "@b-mehta Regarding unavoidability, can we use `Finset.attach` here instead of the coercion? I haven't given this more than a few seconds thought though.",
              "author": {
                "login": "kmill"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6gaLwA",
              "createdAt": "2025-02-28T17:44:48Z",
              "body": "`s.attach` and `(univ : Finset s)` are defeq, so I am not clear what the gain of using either is",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6gaea5",
              "createdAt": "2025-02-28T18:28:11Z",
              "body": "@YaelDillies I think the question is \"do we want lemmas about this to be about sum of attach or sum of coercion?\"",
              "author": {
                "login": "kmill"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6gb8kY",
              "createdAt": "2025-02-28T22:53:46Z",
              "body": "I see. I doubt it hugely matters? But certainly we have a pre-existing issue here: There shouldn't be two ways to write \"the set `s` as a subset of itself\". Maybe we can make `s.attach` be an abbrev for `univ : Finset s`?",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6goiWQ",
              "createdAt": "2025-03-03T16:45:57Z",
              "body": "> Could you please add some tests that demonstrate the expansions?\r\n> \r\n> I'm thinking tests with `#guard_expr` that have the new syntax on the LHS and the expected expanded form on the RHS.\r\n\r\nI am not managing to use `#guard_expr`. Here is my best attempt:\r\n```\r\nimport Mathlib.Algebra.BigOperators.Group.Finset.Defs\r\n\r\nvariable {Œπ : Type*} {s : Finset Œπ} {p : Œπ ‚Üí Prop} [DecidablePred p] {f : ‚àÄ i, p i ‚Üí ‚Ñï}\r\n\r\n#guard_expr\r\n  ‚àë i ‚àà s with hi : p i, f i =\r\n    Finset.sum (Œ± := Finset.filter (fun i : s ‚Ü¶ p i) (Finset.univ : Finset s)) Finset.univ\r\n      fun ‚ü®i, hi‚ü© ‚Ü¶ have ‚ü®_, hi‚ü© := Finset.mem_filter.1 hi; f i hi\r\n-- auxiliary declaration cannot be created when declaration name is not available\r\n```",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6gp7B9",
              "createdAt": "2025-03-03T19:26:53Z",
              "body": "Hmm, that's a consequence of the use of destructuring (it's causing a couple of matches to be defined), paired with a bug in `#guard_expr`. I worry a little about how the notation creates `match`es by the way, since it's possible the same expression will be evaluated in different ways (with whatever might be in the matcher cache) and might have unexpected non-defeqs. Most robust would be defining or otherwise finding a function (that I'm calling `Finset.mapFilter` here; I'm not suggesting this as a name) that lets you write something like this:\r\n```\r\n  ‚àë i ‚àà s with hi : p i, f i =\r\n    Finset.sum (Œ± := Finset.filter (fun i : s ‚Ü¶ p i) (Finset.univ : Finset s)) Finset.univ\r\n      (Finset.mapFilter fun i hi ‚Ü¶ f i hi)\r\n```\r\n\r\nRegarding working around `#guard_expr`, there are two options:\r\n1. Use `example : LHS = RHS := rfl` instead.\r\n2. Write the test using `/-- RHS -/ #guard_msgs in #check LHS`. With the right pretty printing options, you might be able to make it robust.",
              "author": {
                "login": "kmill"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6gsLkO",
              "createdAt": "2025-03-04T01:18:18Z",
              "body": "> @b-mehta Regarding unavoidability, can we use `Finset.attach` here instead of the coercion? I haven't given this more than a few seconds thought though.\r\n\r\nI see this as just as bad; there's still a new coercion from a finset to a type going on. Ultimately my feeling is that summing over a finset in this way is something we shouldn't encourage users to do; it shows up super rarely, and when it does either something else has gone wrong or there's a much cleaner way of writing the intended idea. \r\n\r\nTo use the example from the title of this PR, if I see a beginner trying to write something like that, I'd strongly encourage them to use `‚àë i ‚àà s, if hi : p i then f i hi else 0` instead, which has the advantages of a) already having lemmas describing it b) not having a coercion to types so there's no DTT hell incoming c) having consistent behaviour with the non-dependent `f` version. In fact, now that I think about it, can we have the notation delaborate to this instead? (The junk value 0 is certainly safe since we're bound to be in an AddCommMonoid).",
              "author": {
                "login": "b-mehta"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "0de475d6ffadb5e59fde8c980b63ff2083e51bb2"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "4a8b696f8cc55ff42f2dc38adcd4dc714f614c54"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c6DHVwNzwAAAAPbL92I",
              "createdAt": "2025-03-04T14:24:18Z"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6gzW7X",
              "createdAt": "2025-03-04T14:24:57Z",
              "body": "I am trying to implement Bhavik's suggestion, but\r\n```\r\n`(Finset.sum $s fun $x ‚Ü¶ if $hp : $p then f $x $hp else 0)\r\n```\r\nwhere `hp : Term` throws\r\n```\r\napplication type mismatch\r\n  hp.raw\r\nargument\r\n  hp\r\nhas type\r\n  TSyntax `term : Type\r\nbut is expected to have type\r\n  TSyntax `Lean.binderIdent : Type\r\n```\r\nAny advice?",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6DHVwNzwAAAAPbMw4J",
              "createdAt": "2025-03-04T14:33:32Z",
              "label": {
                "id": "MDU6TGFiZWwyOTg0NTM0NDU0",
                "name": "help-wanted"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6g18-_",
              "createdAt": "2025-03-04T18:08:30Z",
              "body": "@YaelDillies I think what you can do is change the syntax so that the `with` clause is\r\n```\r\n(\"with \" atomic(binderIdent \" : \")? term)?\r\n```\r\nthen adjust the quotations accordingly. The `atomic` doesn't need any special treatment in the quotations. Something like the following should work\r\n```\r\n$[with [$hp :]? $p]?\r\n```\r\nOr\r\n```\r\n$[with [$hp:binderIdent :]? $p:term]?\r\n```",
              "author": {
                "login": "kmill"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6g2mf6",
              "createdAt": "2025-03-04T19:15:56Z",
              "body": "Isn't your suggestion undoing\r\n> I think the problem is that parsing is greedy, so (term \" : \")? term means \"ah, I saw a term, that means we must have a : next.\"\r\n> One solution would be term (\" : \" term)?, where that first term changes meaning if there's a : clause after it.\r\n\r\nfrom our DMs?",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6g3h6l",
              "createdAt": "2025-03-04T21:09:32Z",
              "body": "I know what I said and I know it looks like that :-)\r\n\r\nHowever, `atomic` is a way to turn off the greediness. I didn't suggest it before because I prefer avoiding `atomic(term \" : \")` since that involves unbounded lookahead. Looking for a single binderIdent is a single token of lookahead.",
              "author": {
                "login": "kmill"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6g4Fe0",
              "createdAt": "2025-03-04T22:08:17Z",
              "body": "Oooh, I see. It seems I am not syntax-fluent yet",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "3c6c930d69293261cfe829f24f48a80c31967115"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6hDnG8",
              "createdAt": "2025-03-05T21:07:10Z",
              "body": "@kmill, I tried applying your suggestion, but I now get the reverse error:\r\n```\r\napplication type mismatch\r\n  hx.raw\r\nargument\r\n  hx\r\nhas type\r\n  TSyntax `Lean.binderIdent : Type\r\nbut is expected to have type\r\n  TSyntax `term : Type\r\n```\r\nI just don't know how to turn one `TSyntax` into another one, and no example in mathlib seems to run into this issue",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            }
          ]
        }
      }
    }
  }
}
