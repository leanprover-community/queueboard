{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 199,
        "assignees": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjc3MzQzNjQ=",
              "login": "ocfnash"
            }
          ]
        },
        "author": {
          "login": "ScottCarnahan"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "This PR defines the Weyl group of a root pairing, and its permutation representation on the indexing set of roots.\r\n\r\nCo-authored-by: Deepro Choudhury\r\n\r\n---\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 2,
        "closed": true,
        "closedAt": "2024-08-19T20:40:37Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c6IEaZ4",
              "body": "### PR summary [d5b2ddc698](https://github.com/leanprover-community/mathlib4/pull/15702/commits/d5b2ddc698dd054e43f3dd084aad17efcd768e0a)\n\n#### Import changes for modified files\n\nNo significant changes to the import graph\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ _root_.RootSystem.reflection_perm_eq_reflection_perm_iff`\n`+ coreflection_inv`\n`+ coreflection_sq`\n`+ exists_root_eq_smul_of_mem_weylGroup`\n`+ mem_range_coroot_of_mem_range_coreflection_of_mem_range_coroot`\n`+ mem_range_root_of_mem_range_reflection_of_mem_range_root`\n`+ pairing_smul_coroot_eq`\n`+ pairing_smul_root_eq`\n`+ range_weylGroupToPerm`\n`+ reflection_inv`\n`+ reflection_mem_weylGroup`\n`+ reflection_perm_eq_reflection_perm_iff_of_isSMulRegular`\n`+ reflection_perm_eq_reflection_perm_iff_of_span`\n`+ reflection_perm_inv`\n`+ reflection_perm_sq`\n`+ reflection_sq`\n`+ smul_mem_of_mem_closure_of_mem`\n`+ two_nsmul_reflection_eq_of_perm_eq`\n`+ weylGroup`\n`+ weylGroupToPerm`\n`+ weylGroupToPerm_apply_reflection`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n</details>",
              "createdAt": "2024-08-11T19:05:29Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6Iz6u9",
              "body": ":v: ScottCarnahan can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests).",
              "createdAt": "2024-08-18T16:03:52Z",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6I7daw",
              "body": "bors r+",
              "createdAt": "2024-08-19T19:28:12Z",
              "author": {
                "login": "ScottCarnahan"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6I78Or",
              "body": "Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/10459968831/job/28965119992)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/10459968831/job/28965119304)",
              "createdAt": "2024-08-19T20:40:37Z",
              "author": {
                "login": "mathlib-bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "796057640df716c4ba7005b78d0702e49fbd6b0b",
                "additions": 63,
                "deletions": 0,
                "committedDate": "2024-08-11T18:54:52Z",
                "author": {
                  "name": "Scott Carnahan",
                  "email": "128885296+ScottCarnahan@users.noreply.github.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqj-IOQ",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10342760395/job/28626094137"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqj-Hhw",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10342760393/job/28626093959"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqilFww",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10342094511/job/28624635331"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqilFvA",
                        "name": "build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10342094507/job/28624635324"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqieN-Q",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10342043244/job/28624522745"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqieObQ",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10342043242/job/28624522861"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqilFzA",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10342094509/job/28624635340"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqj-HhA",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10342760395/job/28626093956"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqieOkg",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10342043244/job/28624522898"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqieOJg",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10342043242/job/28624522790"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqilGCQ",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10342094509/job/28624635401"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqieOZw",
                        "name": "check workflows (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10342043244/job/28624522855"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqieORg",
                        "name": "check workflows",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10342043242/job/28624522822"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqieOOw",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10342043244/job/28624522811"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqieN9w",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10342043242/job/28624522743"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqieOtA",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10342043244/job/28624522932"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqikk5g",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10342043242/job/28624626918"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqilK_g",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/28624636670"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqilKNA",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=15702&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "6a6f66084e6143f3308379afbe8086e84aafd49a",
                "additions": 22,
                "deletions": 18,
                "committedDate": "2024-08-12T08:02:17Z",
                "author": {
                  "name": "Scott Carnahan",
                  "email": "128885296+ScottCarnahan@users.noreply.github.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqw5Y4Q",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10348097238/job/28639647969"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqw5X1g",
                        "name": "build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10348097234/job/28639647702"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqw5TGQ",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10348096606/job/28639646489"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqw5T5g",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10348096605/job/28639646694"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqw5ZHw",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10348097237/job/28639648031"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqw5XEQ",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10348096606/job/28639647505"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqw5XOA",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10348096605/job/28639647544"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqw5X_w",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10348097237/job/28639647743"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqw5V4g",
                        "name": "check workflows (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10348096606/job/28639647202"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqw5SLg",
                        "name": "check workflows",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10348096605/job/28639646254"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqw5YWQ",
                        "name": "Build",
                        "conclusion": "CANCELLED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10348096605/job/28639647833"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqw5UoA",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10348096606/job/28639646880"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqxOuhw",
                        "name": "Post-CI job",
                        "conclusion": "CANCELLED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10348096605/job/28639997575"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqw5YWw",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10348096606/job/28639647835"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqw5wxQ",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/28639654085"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqw6swQ",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=15702&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "27ad611ea94d1c7b0c137b557a44cfe5b3b5bfe3",
                "additions": 1,
                "deletions": 3,
                "committedDate": "2024-08-12T08:04:57Z",
                "author": {
                  "name": "Scott Carnahan",
                  "email": "128885296+ScottCarnahan@users.noreply.github.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGrRcuYw",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10358792645/job/28673781347"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGsh2Nmg",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10386555520/job/28758085018"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGtNks2A",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10401416606/job/28803935448"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGte6O-w",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10407252362/job/28822114043"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGtfGX1A",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10407313897/job/28822312916"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGtfLcTw",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10407338934/job/28822395983"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGtwmGrA",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10413372416/job/28840658604"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGrRcsqQ",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10358792718/job/28673780905"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGsh2Now",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10386555561/job/28758085027"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGtNkr_g",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10401416605/job/28803935230"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGte6O8A",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10407252351/job/28822114032"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGtfGWmg",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10407313888/job/28822312602"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGtfLbFQ",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10407338920/job/28822395669"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGtwmGBA",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10413372418/job/28840658436"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqxAm7g",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10348136989/job/28639766254"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqxAnJg",
                        "name": "build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10348136983/job/28639766310"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqxAfbg",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10348136370/job/28639764334"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqxAgbw",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10348136373/job/28639764591"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqxAn1Q",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10348136979/job/28639766485"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGrRcr_w",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10358792645/job/28673780735"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGsh2OzA",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10386555520/job/28758085324"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGtNkr7g",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10401416606/job/28803935214"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGte6QFQ",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10407252362/job/28822114325"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGtfGWoQ",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10407313897/job/28822312609"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGtfLbTw",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10407338934/job/28822395727"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGtwmGAw",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10413372416/job/28840658435"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqxAhzg",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10348136370/job/28639764942"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqxAiqw",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10348136373/job/28639765163"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqxAmyQ",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10348136979/job/28639766217"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqxAi6w",
                        "name": "check workflows (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10348136370/job/28639765227"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqxAhmg",
                        "name": "check workflows",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10348136373/job/28639764890"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqxAgtg",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10348136370/job/28639764662"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqxAfbQ",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10348136373/job/28639764333"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqxAkAg",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10348136370/job/28639765506"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqxbneQ",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10348136373/job/28640208761"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqxBAGg",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/28639772698"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGqxCEEA",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=15702&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "c401920ced99bd98f98babde7095dae5c9692fee",
                "additions": 15964,
                "deletions": 8815,
                "committedDate": "2024-08-16T18:05:35Z",
                "author": {
                  "name": "Scott Carnahan",
                  "email": "128885296+ScottCarnahan@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "b1e190e7063fcbebbbab2342537986fd7ec3cf5d",
                "additions": 120,
                "deletions": 34,
                "committedDate": "2024-08-16T18:27:03Z",
                "author": {
                  "name": "Scott Carnahan",
                  "email": "128885296+ScottCarnahan@users.noreply.github.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGuYOkfw",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10427477886/job/28882216063"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGu2Tbxg",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10441971702/job/28913753030"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGuYOkgQ",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10427477894/job/28882216065"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGu2TbTQ",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10441971704/job/28913752909"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGuP3YjA",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10424512868/job/28873447564"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGuP3YuQ",
                        "name": "build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10424512865/job/28873447609"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGuP3WpA",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10424512609/job/28873447076"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGuP3WTg",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10424512612/job/28873446990"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGuP3YkQ",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10424512866/job/28873447569"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGuYOlDg",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10427477886/job/28882216206"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGuP3YiA",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10424512609/job/28873447560"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGu2TagA",
                        "name": "Add delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10441971702/job/28913752704"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGuP3ZUg",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10424512612/job/28873447762"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGuP3ZhA",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10424512866/job/28873447812"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGuP3XgA",
                        "name": "check workflows (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10424512609/job/28873447296"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGuP3XQQ",
                        "name": "check workflows",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10424512612/job/28873447233"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGuP3Zuw",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10424512609/job/28873447867"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGuP3X9A",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10424512612/job/28873447412"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGuP3arw",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10424512609/job/28873448111"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGuRVvew",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10424512612/job/28874993531"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGuP3ncQ",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/28873451377"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGuP4uIg",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=15702&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "ba8e357944306e97bad22c57ded156a5d87a6e1d",
                "additions": 3013,
                "deletions": 2020,
                "committedDate": "2024-08-19T09:16:55Z",
                "author": {
                  "name": "Scott Carnahan",
                  "email": "128885296+ScottCarnahan@users.noreply.github.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "aa74becf19ddeafaf955f85f4b71694dbbe8c798",
                "additions": 61,
                "deletions": 31,
                "committedDate": "2024-08-19T12:24:55Z",
                "author": {
                  "name": "Scott Carnahan",
                  "email": "128885296+ScottCarnahan@users.noreply.github.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGvSoyww",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10453293858/job/28943463107"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGvSozdQ",
                        "name": "build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10453293889/job/28943463285"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGvSotBg",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10453293335/job/28943461638"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGvSot1Q",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10453293336/job/28943461845"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGvSoynw",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10453293859/job/28943463071"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGvSowRA",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10453293335/job/28943462468"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGvSostw",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10453293336/job/28943461559"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGvSoz4Q",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10453293859/job/28943463393"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGvSovOQ",
                        "name": "check workflows (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10453293335/job/28943462201"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGvSovEw",
                        "name": "check workflows",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10453293336/job/28943462163"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGvSouOg",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10453293335/job/28943461946"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGvSowCQ",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10453293336/job/28943462409"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGvSoxZw",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10453293335/job/28943462759"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGvUtqKQ",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10453293336/job/28945639977"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGvSpHwA",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/28943468480"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGvSqbEw",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=15702&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "d5b2ddc698dd054e43f3dd084aad17efcd768e0a",
                "additions": 7,
                "deletions": 0,
                "committedDate": "2024-08-19T19:03:09Z",
                "author": {
                  "name": "Scott Carnahan",
                  "email": "128885296+ScottCarnahan@users.noreply.github.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGvlbW-Q",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10459357707/job/28963165945"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGvlbXCQ",
                        "name": "build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10459357703/job/28963165961"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGvlbSZg",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10459357359/job/28963164774"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGvlbUmQ",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10459357362/job/28963165337"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGvlbYRw",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10459357714/job/28963166279"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGvlbWJg",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10459357359/job/28963165734"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGvlbTRw",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10459357362/job/28963164999"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGvlbXTA",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10459357714/job/28963166028"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGvlbTkQ",
                        "name": "check workflows (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10459357359/job/28963165073"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGvlbR7A",
                        "name": "check workflows",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10459357362/job/28963164652"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGvlbUyQ",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10459357359/job/28963165385"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGvlbV3g",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10459357362/job/28963165662"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGvlbX7g",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10459357359/job/28963166190"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGvl3GZQ",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10459357362/job/28963620453"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGvlbo0g",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/28963170514"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAGvldA7w",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=15702&login=leanprover-community&repository=mathlib4"
                      },
                      {
                        "__typename": "StatusContext",
                        "id": "SC_kwDOFcwZ1c8AAAAHMHVnJQ",
                        "context": "bors",
                        "state": "SUCCESS",
                        "targetUrl": "https://mathlib-bors-ca18eefec4cb.herokuapp.com/batches/5183",
                        "description": "Build succeeded"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "createdAt": "2024-08-11T19:04:47Z",
        "deletions": 11,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/Algebra/Group/Subgroup/Pointwise.lean",
              "additions": 10,
              "deletions": 0
            },
            {
              "path": "Mathlib/LinearAlgebra/RootSystem/Defs.lean",
              "additions": 189,
              "deletions": 11
            }
          ]
        },
        "headRefName": "ScottCarnahan/WeylGroup",
        "headRefOid": "d5b2ddc698dd054e43f3dd084aad17efcd768e0a",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c54Cg_G",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABAt13Ow",
              "color": "bfd4f2",
              "name": "delegated"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJjTQ",
              "color": "33DBEC",
              "name": "t-algebra"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c6FB-4t",
              "body": "Thanks! Some formal comments:",
              "state": "COMMENTED",
              "author": {
                "login": "Ruben-VandeVelde"
              },
              "submittedAt": "2024-08-11T21:06:16Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6Fxgi5",
              "body": "I still have reservations about this as the definition of the Weyl group but I think we can proceed for now and see how we get on.\r\n\r\nI think a very desirable property of the definitions and associated API is to maintain perfect symmetry between roots and coroots. I worked quite hard initially to set things up so that this could be the case. So the definition here breaks that and raise the question about what is the Weyl group for the coroots?\r\n\r\nI'm tempted to say that the examples where the permutation representation is not faithful do not deserve to be regarded as root pairings. If we added an axiom which forced faithfulness then we could define the Weyl group as a subgroup of permutations and continue with a symmetric API.\r\n\r\nNotwithstanding all the above, I have run out of time to think about this in detail and what you have proposed is certainly sensible so I think we can proceed. Characterising when `weylGroupToPerm` has trivial kernel seems like a priority to me now.\r\n\r\nAnyway, thanks for doing all this. I've left a few minor suggestions but otherwise LGTM.\r\n\r\nbors d+",
              "state": "APPROVED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2024-08-18T16:03:50Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 15702,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": "APPROVED",
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c6FB-4t",
              "body": "Thanks! Some formal comments:",
              "state": "COMMENTED",
              "author": {
                "login": "Ruben-VandeVelde"
              },
              "submittedAt": "2024-08-11T21:06:16Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6FItM_",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2024-08-12T20:20:16Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6FYwq_",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ScottCarnahan"
              },
              "submittedAt": "2024-08-14T11:17:20Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6Fg8ZD",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2024-08-15T09:00:52Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6FkF00",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ScottCarnahan"
              },
              "submittedAt": "2024-08-15T16:42:39Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6FkJEe",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2024-08-15T16:47:30Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6FkKRw",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2024-08-15T16:49:30Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6FnKl0",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ScottCarnahan"
              },
              "submittedAt": "2024-08-16T01:55:41Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6FvJnX",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ScottCarnahan"
              },
              "submittedAt": "2024-08-16T23:22:30Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6Fxgi5",
              "body": "I still have reservations about this as the definition of the Weyl group but I think we can proceed for now and see how we get on.\r\n\r\nI think a very desirable property of the definitions and associated API is to maintain perfect symmetry between roots and coroots. I worked quite hard initially to set things up so that this could be the case. So the definition here breaks that and raise the question about what is the Weyl group for the coroots?\r\n\r\nI'm tempted to say that the examples where the permutation representation is not faithful do not deserve to be regarded as root pairings. If we added an axiom which forced faithfulness then we could define the Weyl group as a subgroup of permutations and continue with a symmetric API.\r\n\r\nNotwithstanding all the above, I have run out of time to think about this in detail and what you have proposed is certainly sensible so I think we can proceed. Characterising when `weylGroupToPerm` has trivial kernel seems like a priority to me now.\r\n\r\nAnyway, thanks for doing all this. I've left a few minor suggestions but otherwise LGTM.\r\n\r\nbors d+",
              "state": "APPROVED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2024-08-18T16:03:50Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5mGy6q",
                    "body": "```suggestion\r\nlemma reflection_inv :\r\n```",
                    "createdAt": "2024-08-11T21:00:14Z",
                    "author": {
                      "login": "Ruben-VandeVelde"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5mGzCa",
                    "body": "```suggestion\r\n  Subgroup.closure ({ reflection P i | i : ι })\r\n```",
                    "createdAt": "2024-08-11T21:02:34Z",
                    "author": {
                      "login": "Ruben-VandeVelde"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5mGzDu",
                    "body": "Consider pointing to some background. (Wikipedia?)",
                    "createdAt": "2024-08-11T21:02:51Z",
                    "author": {
                      "login": "Ruben-VandeVelde"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5mGzEh",
                    "body": "```suggestion\r\nlemma reflection_mem_weylGroup : P.reflection i ∈ P.weylGroup :=\r\n```",
                    "createdAt": "2024-08-11T21:03:14Z",
                    "author": {
                      "login": "Ruben-VandeVelde"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5mGzGR",
                    "body": "Does the `induction` tactic not work with this theorem?",
                    "createdAt": "2024-08-11T21:03:46Z",
                    "author": {
                      "login": "Ruben-VandeVelde"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5mK9KZ",
                    "body": "Given that we're adding this, I think we should also add:\r\n```lean\r\n@[simp]\r\nlemma reflection_sq :\r\n    P.reflection i ^ 2 = 1 :=\r\n  mul_eq_one_iff_eq_inv.mpr rfl\r\n\r\n@[simp]\r\nlemma reflection_perm_sq :\r\n    P.reflection_perm i ^ 2 = 1 := by\r\n  ext j\r\n  have : P.reflection i (P.reflection i (P.root j)) = P.root j := by simp [← sq, P.reflection_sq i]\r\n  rwa [← root_reflection_perm, ← root_reflection_perm, EmbeddingLike.apply_eq_iff_eq] at this\r\n\r\n@[simp]\r\nlemma reflection_perm_inv :\r\n    (P.reflection_perm i)⁻¹ = P.reflection_perm i :=\r\n  (mul_eq_one_iff_eq_inv.mp <| P.reflection_perm_sq i).symm\r\n```\r\nand also the corresponding two lemmas for `coreflection` to keep the API symmetric.",
                    "createdAt": "2024-08-12T17:29:15Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5mK_lm",
                    "body": "Depending on the outcome of my remarks about the definition of the Weyl group, this lemma might become redundant. However if we do keep it (or something similar) I think we could factor out some smaller results as follows:\r\n```lean\r\n-- This would go next to `Subgroup.closure` API (naming possibly not ideal).\r\n-- Looks like sort of lemma Coxeter group people might want anyway\r\nlemma Subgroup.smul_mem_of_mem_closure_of_mem\r\n    {G X : Type*} [Group G] [MulAction G X] (s : Set G) (t : Set X)\r\n    (hs : ∀ g ∈ s, g⁻¹ ∈ s) (hst : ∀ᵉ (g ∈ s) (x ∈ t), g • x ∈ t)\r\n    {g : G} (hg : g ∈ Subgroup.closure s) {x : X} (hx : x ∈ t) :\r\n    g • x ∈ t := by\r\n  induction hg using Subgroup.closure_induction'' generalizing x with\r\n  | one => simpa\r\n  | mem g' hg' => exact hst g' hg' x hx\r\n  | inv_mem g' hg' => exact hst g'⁻¹ (hs g' hg') x hx\r\n  | mul _ _ _ _ h₁ h₂ => rw [mul_smul]; exact h₁ (h₂ hx)\r\n\r\n-- If we add this, we should also add the coroot / coreflection version\r\nlemma mem_range_root_of_mem_range_reflection_of_mem_range_root\r\n    {r : M ≃ₗ[R] M} {α : M} (hr : r ∈ range P.reflection) (hα : α ∈ range P.root) :\r\n    r • α ∈ range P.root := by\r\n  obtain ⟨i, rfl⟩ := hr\r\n  obtain ⟨j, rfl⟩ := hα\r\n  exact ⟨P.reflection_perm i j, P.root_reflection_perm i j⟩\r\n\r\n-- I claim `w ∈ P.weylGroup` rather than `w : P.weylGroup` will usually be more convenient\r\nlemma exists_root_eq_smul_of_mem_weylGroup {w : M ≃ₗ[R] M} (hw : w ∈ P.weylGroup) (i : ι) :\r\n    ∃ j, P.root j = w • P.root i :=\r\n  Subgroup.smul_mem_of_mem_closure_of_mem (range P.reflection) (range P.root) (by simp)\r\n    (fun _ h _ ↦ P.mem_range_root_of_mem_range_reflection_of_mem_range_root h) hw (mem_range_self i)\r\n```",
                    "createdAt": "2024-08-12T17:38:17Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5mLAS-",
                    "body": "I was expecting to see:\r\n```lean\r\ndef weylGroup : Subgroup (ι ≃ ι) := Subgroup.closure <| range P.reflection_perm\r\n```\r\ntogether with:\r\n```lean\r\n-- Naming TBD\r\ndef weylGroup.toRootEquiv : P.weylGroup →* M ≃ₗ[R] M := sorry\r\n\r\ndef weylGroup.toCorootEquiv : P.weylGroup →* N ≃ₗ[R] N := sorry\r\n```\r\nWhat do you think?\r\n\r\nAlso, there is a mathematical point I need to think about. Specifically, the following is true:\r\n```lean\r\nlemma reflection_perm_eq_reflection_perm_iff :\r\n    P.reflection_perm i = P.reflection_perm j ↔\r\n    ∀ x ∈ span R (range P.root), P.reflection i x = P.reflection j x := by\r\n  refine ⟨fun h x hx ↦ ?_, fun h ↦ ?_⟩\r\n  · induction hx using Submodule.span_induction' with\r\n    | mem x hx =>\r\n      obtain ⟨k, rfl⟩ := hx\r\n      simp only [← root_reflection_perm, h]\r\n    | zero => simp\r\n    | add x _ y _ hx hy => simp [hx, hy]\r\n    | smul t x _ hx => simp [hx]\r\n  · ext k\r\n    apply P.root.injective\r\n    simp [h (P.root k) (Submodule.subset_span <| mem_range_self k)]\r\n```\r\nThis gives us what we need for root systems. However what about if the roots don't span? It's not immediately clear to me whether this might hold in general:\r\n```lean\r\nlemma reflection_perm_eq_reflection_perm_iff' :\r\n    P.reflection_perm i = P.reflection_perm j ↔ P.reflection i = P.reflection j := by\r\n  refine ⟨fun h ↦ ?_, fun h ↦ Equiv.ext fun k ↦ P.root.injective <| by simp [h]⟩\r\n  sorry\r\n```",
                    "createdAt": "2024-08-12T17:40:56Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5mU3TL",
                    "body": "The definition you suggest would be a substantial improvement, if I could prove that it worked (i.e., that the permutation representation is always faithful).  I'm still thinking about that, so perhaps this PR was a bit premature.",
                    "createdAt": "2024-08-14T11:17:20Z",
                    "author": {
                      "login": "ScottCarnahan"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5maQN8",
                    "body": "I had a few minutes this morning and decided to thought a bit more about `reflection_perm_eq_reflection_perm_iff'`. I believe the following is true:\r\n```lean\r\nlemma reflection_perm_eq_reflection_perm_iff' [CharZero R] [IsDomain R] [NoZeroSMulDivisors R M]\r\n    (hij : P.pairing j i ≠ 0) :\r\n    P.reflection_perm i = P.reflection_perm j ↔ P.reflection i = P.reflection j := by\r\n```\r\nbecause if $$r_i$$ and $$r_j$$ are the two reflections and $$n_{ij}$$ are the pairing constants, then:\r\n$$r_i = r_j \\iff \\alpha_i^* \\otimes\\alpha_i = \\alpha_j^*\\otimes\\alpha_j \\iff n_{ii}n_{ji}\\alpha_i^*\\otimes\\alpha_i = n_{ii}n_{ji}\\alpha_j^*\\otimes\\alpha_j $$\r\nand:\r\n$$n_{ii}n_{ji}\\alpha_i^*\\otimes\\alpha_i = (n_{ii}\\alpha_i^*) \\otimes (n_{ji}\\alpha_i) = (n_{ji}\\alpha_j^*) \\otimes (n_{jj}\\alpha_j)$$\r\nbecause the ith and jth permutations agree.\r\n\r\nIt also seems to me that we can prove the result for finite reduced root pairings. Sorry that's rather rushed, I probably won't have time to think about this again for a few days (by which time you may have had a chance to return to it and sort it all out).\r\n\r\nUnfortunately I have to start work now.",
                    "createdAt": "2024-08-15T09:00:52Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5mcP-K",
                    "body": "That's great.  So far, I've been able to show that `Injective fun (x : M) => (2 : R) • x` implies the equivalence.",
                    "createdAt": "2024-08-15T16:42:39Z",
                    "author": {
                      "login": "ScottCarnahan"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5mcSJT",
                    "body": "I had a few minutes over lunch and managed to prove:\r\n```lean\r\nlemma reflection_perm_eq_reflection_perm_iff [CharZero R] [IsDomain R] [NoZeroSMulDivisors R M] :\r\n    P.reflection_perm i = P.reflection_perm j ↔ P.reflection i = P.reflection j := by\r\n  refine ⟨fun h ↦ ?_, fun h ↦ Equiv.ext fun k ↦ P.root.injective <| by simp [h]⟩\r\n  have hr : P.pairing j i • P.root i = P.pairing j j • P.root j := by\r\n    have : P.reflection i (P.root j) = P.reflection j (P.root j) := by\r\n      simp only [← root_reflection_perm, h]\r\n    simpa only [reflection, Module.reflection_apply, sub_right_inj]\r\n  have hc : P.pairing i i • P.coroot i = P.pairing j i • P.coroot j := by\r\n    have : (P.coreflection i) (P.coroot i) = (P.coreflection j) (P.coroot i) := by\r\n      simp only [← coroot_reflection_perm, h]\r\n    simpa only [coreflection, Module.reflection_apply, sub_right_inj]\r\n  have hij : 2 * P.pairing j i ≠ 0 := by\r\n    suffices P.pairing j i ≠ 0 by simpa\r\n    exact fun contra ↦ P.ne_zero j <| by simpa [contra, eq_comm (a := (0 : M))] using hr\r\n  suffices (2 * P.pairing j i) • (P.flip.toLin (P.coroot i)).smulRight (P.root i) =\r\n           (2 * P.pairing j i) • (P.flip.toLin (P.coroot j)).smulRight (P.root j) by\r\n    simpa [reflection, Module.reflection, Module.preReflection] using\r\n      smul_right_injective (M := M →ₗ[R] M) hij this\r\n  suffices (P.flip.toLin (P.pairing i i • P.coroot i)).smulRight (P.pairing j i • P.root i) =\r\n           (P.flip.toLin (P.pairing j i • P.coroot j)).smulRight (P.pairing j j • P.root j) by\r\n    ext x\r\n    replace this := LinearMap.congr_fun this x\r\n    simp only [pairing_same, map_smul, ← mul_smul, LinearMap.coe_smulRight, LinearMap.smul_apply,\r\n      smul_eq_mul] at this ⊢\r\n    convert this using 2 <;> ring\r\n  rw [hr, hc]\r\n\r\nlemma _root_.RootSystem.reflection_perm_eq_reflection_perm_iff (P : RootSystem ι R M N) (i j : ι) :\r\n    P.reflection_perm i = P.reflection_perm j ↔ P.reflection i = P.reflection j := by\r\n  refine ⟨fun h ↦ ?_, fun h ↦ Equiv.ext fun k ↦ P.root.injective <| by simp [h]⟩\r\n  ext x\r\n  have hx : x ∈ span R (range P.root) := by simp [P.span_eq_top]\r\n  induction hx using Submodule.span_induction' with\r\n  | mem x hx =>\r\n    obtain ⟨k, rfl⟩ := hx\r\n    simp only [← root_reflection_perm, h]\r\n  | zero => simp\r\n  | add x _ y _ hx hy => simp [hx, hy]\r\n  | smul t x _ hx => simp [hx]\r\n```\r\nThe fact that there doesn't seem to be a perfect unification of assumptions makes me wonder if we should add an axiom to `RootPairing` (though it's premature to do so now I think).",
                    "createdAt": "2024-08-15T16:47:30Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5mcS7I",
                    "body": "> That's great. So far, I've been able to show that `Injective fun (x : M) => (2 : R) • x` implies the equivalence.\r\n\r\nOh this is great. Note:\r\n```lean\r\nexample [CharZero R] [NoZeroSMulDivisors R M] :\r\n    Injective fun (x : M) => (2 : R) • x :=\r\n  smul_right_injective _ two_ne_zero\r\n```\r\n\r\nAlternatively this is `IsSMulRegular M (2 : R)`.",
                    "createdAt": "2024-08-15T16:49:30Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5meNu6",
                    "body": "Specifically, I have a proof (not too far from your argument) that \r\n`P.reflection_perm i = P.reflection_perm j → ∀ (x : M), 2 • (P.reflection i x -  P.reflection j x) = 0`\r\nAlso, I found a counterexample in char 2. Let `i j` be the only roots, linearly independent, with `P.reflection_perm` acting trivially. If we extend `M` suitably, we can take some `x` on which `P.reflection i x = x` and `P.reflection j x ≠ x`.",
                    "createdAt": "2024-08-16T01:55:41Z",
                    "author": {
                      "login": "ScottCarnahan"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5mjCXw",
                    "body": "In light of the non-faithfulness of the permutation representation in general, I think it is best to keep the current definition of `weylGroup`.",
                    "createdAt": "2024-08-16T23:22:30Z",
                    "author": {
                      "login": "ScottCarnahan"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5mlHsy",
                    "body": "Nitpick:\r\n```suggestion\r\n  Subgroup.closure { P.reflection i | i : ι }\r\n```\r\n(or even `Subgroup.closure (range P.reflection)` if you like)",
                    "createdAt": "2024-08-18T15:48:49Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5mlHtX",
                    "body": "```suggestion\r\n    (fun _ h _ ↦ P.mem_range_root_of_mem_range_reflection_of_mem_range_root h) hw (mem_range_self i)\r\n```",
                    "createdAt": "2024-08-18T15:49:04Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5mlHx5",
                    "body": "I appreciate that you added this in response to a request for a reference but IMHO no reference is better than Wikipedia.\r\n```suggestion\r\nby reflections in roots. -/\r\n```",
                    "createdAt": "2024-08-18T15:50:42Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5mlH1I",
                    "body": "```suggestion\r\n  toFun w :=\r\n  { toFun := fun i => (P.exists_root_eq_smul_of_mem_weylGroup w.2 i).choose\r\n```",
                    "createdAt": "2024-08-18T15:51:30Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5mlH3k",
                    "body": "```suggestion\r\n  map_one' := by ext; simp\r\n```",
                    "createdAt": "2024-08-18T15:51:51Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5mlH6J",
                    "body": "Let's characterise the range:\r\n```suggestion\r\n\r\n@[simp]\r\nlemma range_weylGroupToPerm :\r\n    P.weylGroupToPerm.range = Subgroup.closure (range P.reflection_perm) := by\r\n  refine (Subgroup.closure_eq_of_le _ ?_ ?_).symm\r\n  · rintro - ⟨i, rfl⟩\r\n    simpa only [← weylGroupToPerm_apply_reflection] using mem_range_self _\r\n  · rintro - ⟨⟨w, hw⟩, rfl⟩\r\n    induction hw using Subgroup.closure_induction'' with\r\n    | one =>\r\n      change P.weylGroupToPerm 1 ∈ _\r\n      simpa only [map_one] using Subgroup.one_mem _\r\n    | mem w' hw' =>\r\n      obtain ⟨i, rfl⟩ := hw'\r\n      simpa only [weylGroupToPerm_apply_reflection] using Subgroup.subset_closure (mem_range_self i)\r\n    | inv_mem w' hw' =>\r\n      obtain ⟨i, rfl⟩ := hw'\r\n      simpa only [reflection_inv, weylGroupToPerm_apply_reflection] using\r\n        Subgroup.subset_closure (mem_range_self i)\r\n    | mul w₁ w₂ hw₁ hw₂ h₁ h₂ =>\r\n      simpa only [← Submonoid.mk_mul_mk _ w₁ w₂ hw₁ hw₂, map_mul] using Subgroup.mul_mem _ h₁ h₂\r\n\r\n```",
                    "createdAt": "2024-08-18T15:52:17Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5mlH60",
                    "body": "```suggestion\r\n  (mul_eq_one_iff_eq_inv.mp <| P.reflection_perm_sq i).symm\r\n  \r\n```",
                    "createdAt": "2024-08-18T15:52:36Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5mlH-O",
                    "body": "I think it's better to state this in a less extensional way (no `x`). Furthermore I think this is the sort of proof for which `calc` is great:\r\n```suggestion\r\nlemma two_nsmul_reflection_eq_of_perm_eq (hij : P.reflection_perm i = P.reflection_perm j) :\r\n    2 • ⇑(P.reflection i) = 2 • P.reflection j := by\r\n  ext x\r\n  suffices 2 • P.toLin x (P.coroot i) • P.root i = 2 • P.toLin x (P.coroot j) • P.root j by\r\n    simpa [reflection_apply]\r\n  calc 2 • P.toLin x (P.coroot i) • P.root i\r\n      = P.toLin x (P.coroot i) • ((2 : R) • P.root i) := ?_\r\n    _ = P.toLin x (P.coroot i) • (P.pairing i j • P.root j) := ?_\r\n    _ = P.toLin x (P.pairing i j • P.coroot i) • (P.root j) := ?_\r\n    _ = P.toLin x ((2 : R) • P.coroot j) • (P.root j) := ?_\r\n    _ = 2 • P.toLin x (P.coroot j) • P.root j := ?_\r\n  · rw [smul_comm, ← Nat.cast_smul_eq_nsmul R, Nat.cast_ofNat]\r\n  · rw [P.pairing_smul_root_eq j i i hij.symm, pairing_same]\r\n  · rw [← smul_comm, ← smul_assoc, map_smul]\r\n  · rw [← P.pairing_smul_coroot_eq j i j hij.symm, pairing_same]\r\n  · rw [map_smul, smul_assoc, ← Nat.cast_smul_eq_nsmul R, Nat.cast_ofNat]\r\n```",
                    "createdAt": "2024-08-18T15:54:12Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5mlIBA",
                    "body": "After the changes above:\r\n```suggestion\r\n  suffices ⇑(P.reflection i) = ⇑(P.reflection j) from DFunLike.coe_injective this\r\n  replace h2 : IsSMulRegular (M → M) 2 := IsSMulRegular.pi fun _ ↦ h2\r\n  exact h2 <| P.two_nsmul_reflection_eq_of_perm_eq i j h\r\n```",
                    "createdAt": "2024-08-18T15:55:04Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5mlIB0",
                    "body": "```suggestion\r\n  exact (P.reflection_perm_eq_reflection_perm_iff_of_span i j).mp h x <| by simp [P.span_eq_top]\r\n```",
                    "createdAt": "2024-08-18T15:55:24Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5mlIGk",
                    "body": "Better yet, add\r\n```lean\r\nattribute [simp] RootSystem.span_eq_top\r\n```\r\njust below the definition of `RootSystem` (line 116) and then no need to supply `P.span_eq_top` to `simp` here.",
                    "createdAt": "2024-08-18T15:56:53Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "U_kgDOB66iMA",
              "login": "ScottCarnahan"
            },
            {
              "id": "MDQ6VXNlcjc3MzQzNjQ=",
              "login": "ocfnash"
            },
            {
              "id": "MDQ6VXNlcjY1NTE0MTMx",
              "login": "Ruben-VandeVelde"
            },
            {
              "id": "U_kgDOB75MNQ",
              "login": "leanprover-community-mathlib4-bot"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGvlbW-Q",
                "name": "label-and-report-new-contributor",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10459357707/job/28963165945"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGvlbXCQ",
                "name": "build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10459357703/job/28963165961"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGvlbSZg",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10459357359/job/28963164774"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGvlbUmQ",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10459357362/job/28963165337"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGvlbYRw",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10459357714/job/28963166279"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGvlbWJg",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10459357359/job/28963165734"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGvlbTRw",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10459357362/job/28963164999"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGvlbXTA",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10459357714/job/28963166028"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGvlbTkQ",
                "name": "check workflows (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10459357359/job/28963165073"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGvlbR7A",
                "name": "check workflows",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10459357362/job/28963164652"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGvlbUyQ",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10459357359/job/28963165385"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGvlbV3g",
                "name": "Build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10459357362/job/28963165662"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGvlbX7g",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10459357359/job/28963166190"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGvl3GZQ",
                "name": "Post-CI job",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/10459357362/job/28963620453"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGvlbo0g",
                "name": "New Contributor Check",
                "conclusion": "NEUTRAL",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/28963170514"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAGvldA7w",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=15702&login=leanprover-community&repository=mathlib4"
              },
              {
                "__typename": "StatusContext",
                "id": "SC_kwDOFcwZ1c8AAAAHMHVnJQ",
                "context": "bors",
                "state": "SUCCESS",
                "targetUrl": "https://mathlib-bors-ca18eefec4cb.herokuapp.com/batches/5183",
                "description": "Build succeeded"
              }
            ]
          }
        },
        "title": "[Merged by Bors] - feat (LinearAlgebra/RootSystem/Defs): define Weyl group",
        "updatedAt": "2024-08-19T20:40:41Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/15702",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "ReviewRequestedEvent",
              "id": "RRE_lADOFcwZ1c6SnF6_zwAAAAM4wMs7",
              "createdAt": "2024-08-11T19:04:47Z",
              "requestedReviewer": {
                "id": "MDQ6VXNlcjc3MzQzNjQ=",
                "login": "ocfnash"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6IEaZ4",
              "createdAt": "2024-08-11T19:05:29Z",
              "body": "### PR summary [d5b2ddc698](https://github.com/leanprover-community/mathlib4/pull/15702/commits/d5b2ddc698dd054e43f3dd084aad17efcd768e0a)\n\n#### Import changes for modified files\n\nNo significant changes to the import graph\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ _root_.RootSystem.reflection_perm_eq_reflection_perm_iff`\n`+ coreflection_inv`\n`+ coreflection_sq`\n`+ exists_root_eq_smul_of_mem_weylGroup`\n`+ mem_range_coroot_of_mem_range_coreflection_of_mem_range_coroot`\n`+ mem_range_root_of_mem_range_reflection_of_mem_range_root`\n`+ pairing_smul_coroot_eq`\n`+ pairing_smul_root_eq`\n`+ range_weylGroupToPerm`\n`+ reflection_inv`\n`+ reflection_mem_weylGroup`\n`+ reflection_perm_eq_reflection_perm_iff_of_isSMulRegular`\n`+ reflection_perm_eq_reflection_perm_iff_of_span`\n`+ reflection_perm_inv`\n`+ reflection_perm_sq`\n`+ reflection_sq`\n`+ smul_mem_of_mem_closure_of_mem`\n`+ two_nsmul_reflection_eq_of_perm_eq`\n`+ weylGroup`\n`+ weylGroupToPerm`\n`+ weylGroupToPerm_apply_reflection`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n</details>",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6FB-4t",
              "createdAt": "2024-08-11T21:00:14Z",
              "body": "Thanks! Some formal comments:",
              "author": {
                "login": "Ruben-VandeVelde"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "AssignedEvent",
              "id": "AE_lADOFcwZ1c6SnF6_zwAAAAM5Q60h",
              "createdAt": "2024-08-12T10:14:49Z",
              "assignee": {
                "id": "MDQ6VXNlcjc3MzQzNjQ=",
                "login": "ocfnash"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6FItM_",
              "createdAt": "2024-08-12T17:29:14Z",
              "body": "",
              "author": {
                "login": "ocfnash"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6SnF6_zwAAAAM5x8QR",
              "createdAt": "2024-08-12T20:20:22Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6SnF6_zwAAAAM7OI-Q",
              "createdAt": "2024-08-14T11:17:47Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJjTQ",
                "name": "t-algebra"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6SnF6_zwAAAAM9igHG",
              "createdAt": "2024-08-16T23:21:33Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6Fxgi5",
              "createdAt": "2024-08-18T15:48:49Z",
              "body": "I still have reservations about this as the definition of the Weyl group but I think we can proceed for now and see how we get on.\r\n\r\nI think a very desirable property of the definitions and associated API is to maintain perfect symmetry between roots and coroots. I worked quite hard initially to set things up so that this could be the case. So the definition here breaks that and raise the question about what is the Weyl group for the coroots?\r\n\r\nI'm tempted to say that the examples where the permutation representation is not faithful do not deserve to be regarded as root pairings. If we added an axiom which forced faithfulness then we could define the Weyl group as a subgroup of permutations and continue with a symmetric API.\r\n\r\nNotwithstanding all the above, I have run out of time to think about this in detail and what you have proposed is certainly sensible so I think we can proceed. Characterising when `weylGroupToPerm` has trivial kernel seems like a priority to me now.\r\n\r\nAnyway, thanks for doing all this. I've left a few minor suggestions but otherwise LGTM.\r\n\r\nbors d+",
              "author": {
                "login": "ocfnash"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6Iz6u9",
              "createdAt": "2024-08-18T16:03:52Z",
              "body": ":v: ScottCarnahan can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests).",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6SnF6_zwAAAAM91xSj",
              "createdAt": "2024-08-18T16:04:04Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABAt13Ow",
                "name": "delegated"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6I7daw",
              "createdAt": "2024-08-19T19:28:12Z",
              "body": "bors r+",
              "author": {
                "login": "ScottCarnahan"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6I78Or",
              "createdAt": "2024-08-19T20:40:37Z",
              "body": "Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/10459968831/job/28965119992)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/10459968831/job/28965119304)",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c6SnF6_zwAAAAM-oL3S",
              "createdAt": "2024-08-19T20:40:37Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c6SnF6_zwAAAAM-oMAF",
              "createdAt": "2024-08-19T20:40:41Z"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            }
          ]
        }
      }
    }
  }
}
