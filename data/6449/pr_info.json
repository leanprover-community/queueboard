{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 203,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "ADedecker"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\nThis has been discussed before on [Zulip](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20Cofinite.20maps.3F) and it came up again while working with @kkytola's student. As explained in the docstring, we could absolutely just use `Tendsto f cofinite cofinite` all the time, but (1) we lack some API for it (2) the API is nicer to setup if we have a separate def (e.g for dot notation) and (3) mentioning filters for such a simple concept is really not beginner-friendly.\r\n\r\nI'm not sure at all about the name.\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 4,
        "closed": false,
        "closedAt": null,
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5jkob2",
              "body": "How about making this a class?",
              "createdAt": "2023-08-09T02:03:48Z",
              "author": {
                "login": "alexjbest"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5jpLA8",
              "body": "I have no objection in principle but I don't really see a use case, do you have one in mind?",
              "createdAt": "2023-08-09T16:15:55Z",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5jpvjH",
              "body": "> I have no objection in principle but I don't really see a use case, do you have one in mind?\r\n\r\nCould the potential use brought up by @YaelDillies [on Zulip](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20Cofinite.20maps.3F/near/316212325) be an example where a type class for this would be useful? If `f : X → Y` `[HasFiniteFibers f]` and `s : Finset Y`, then one could have some notation analogous to preimages `f ⁻¹' s : Finset X` with the finiteness of the fibers inferred? But if one cannot have a nice notation for it, it one can just provide an explicit argument to something like `HasFiniteFibers.preim_finset {f : X → Y} (hf : HasFiniteFibers f) (s : Finset Y) : Finset X`. Maybe this should be added anyway? Or rather, should the assumptions of [`Finset.preimage`](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Finset/Preimage.html#Finset.preimage) be relaxed to HasFiniteFibers?",
              "createdAt": "2023-08-09T17:54:05Z",
              "author": {
                "login": "kkytola"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5jqPE6",
              "body": "> I would not have use cases for (binary) disjoint unions, but is it standard to include those as a part of API when a new general definition like this is introduced?\r\n\r\nI wouldn't say it's standard, but I've just added it.",
              "createdAt": "2023-08-09T19:23:17Z",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5jqWC3",
              "body": "Regarding making it a class, my question is more \"are there any cases where the typeclass system would actually have enough information to infer `HasFiniteFibers`. The only case I can think of is functions from an [EmbeddingLike](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/FunLike/Embedding.html#EmbeddingLike) type, and I'm not sure in itself it justifies using a class, especially since that means duplicating lemmas to take either instance or explicit arguments (because there are still a ton of cases where we don't rely on the typeclass system for that)",
              "createdAt": "2023-08-09T19:44:20Z",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5jqZHt",
              "body": "Regarding [Finset.preimage](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Finset/Preimage.html#Finset.preimage), assuming `HasFiniteFibers` wouldn't be a full generalization because the current assumption ([Set.InjOn](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Set/Function.html#Set.InjOn)) does not imply finiteness of fibers. The same goes for [Set.Finite.preimage](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Set/Finite.html#Set.Finite.preimage). \r\nThat said, we could add a `Finset` version of `HasFiniteFibers.finite_preimage`, but I'd say this can wait for a later PR.",
              "createdAt": "2023-08-09T19:54:35Z",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5j9ajN",
              "body": "> Regarding [Finset.preimage](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Finset/Preimage.html#Finset.preimage), assuming `HasFiniteFibers` wouldn't be a full generalization because the current assumption ([Set.InjOn](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Set/Function.html#Set.InjOn)) does not imply finiteness of fibers. The same goes for [Set.Finite.preimage](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Set/Finite.html#Set.Finite.preimage). That said, we could add a `Finset` version of `HasFiniteFibers.finite_preimage`, but I'd say this can wait for a later PR.\r\n\r\n1. I don't think we care so much about restricting injectivity to the set, since it annoyingly makes the function dependent.\r\n2. If we do care about it (you might want to check how it's used in mathlib), then this sounds like an argument in favor of defining `HasFiniteFibersOn` .",
              "createdAt": "2023-08-14T10:06:03Z",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5j_MGA",
              "body": ">   If we do care about it (you might want to check how it's used in mathlib), then this sounds like an argument in favor of defining `HasFiniteFibersOn` .\r\n\r\nI'll have a look at the use cases of this in mathlib. I thought about `HasFiniteFibersOn` but it felt a bit stupid to have \"`f` has finite fibers when restricted to the preimage of a finite set `s`\" as an assumption, like it's just a convoluted way of saying that the preimage of `s` is finite... But of course the point is having nice API so I may do that indeed.\r\n\r\n",
              "createdAt": "2023-08-14T15:04:32Z",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5kBWuo",
              "body": "But of course you will define `HasFiniteFibersOn : Set a -> (a -> b) -> Prop`, not `HasFiniteFibersOn : Finset a -> (a -> b) -> Prop`?",
              "createdAt": "2023-08-14T21:17:16Z",
              "author": {
                "login": "YaelDillies"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "d23439529fe557bfa0bf3e0b9e8002122ccb5702",
                "additions": 82,
                "deletions": 0,
                "committedDate": "2023-08-08T16:12:08Z",
                "author": {
                  "name": "ADedecker",
                  "email": "anatolededecker@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADqPMUUQ",
                        "name": "Add annotations",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5799427974/job/15719404625"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADqPAazw",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5799367372/job/15719209679"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADqPAbvQ",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5799367380/job/15719209917"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADqPAeaQ",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5799367372/job/15719210601"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADqPAd4w",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5799367380/job/15719210467"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADqPAapQ",
                        "name": "Check all files imported",
                        "conclusion": "FAILURE",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5799367380/job/15719209637"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADqPAdLA",
                        "name": "Check all files imported (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5799367372/job/15719210284"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADqPAc4g",
                        "name": "Build",
                        "conclusion": "CANCELLED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5799367380/job/15719210210"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADqPAcFA",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5799367372/job/15719210004"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADqPQIjA",
                        "name": "Post-CI job",
                        "conclusion": "CANCELLED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5799367380/job/15719467148"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADqPAfcQ",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5799367372/job/15719210865"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "465653d4cb3a0a6ba8cc490e6f4f9c73d135aa3d",
                "additions": 1,
                "deletions": 0,
                "committedDate": "2023-08-08T16:20:08Z",
                "author": {
                  "name": "ADedecker",
                  "email": "anatolededecker@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADqzPh_A",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5812247914/job/15757206012"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADqzPg-g",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5812247939/job/15757205754"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADqzQWOA",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5812253538/job/15757219384"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADqzR7dg",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5812263582/job/15757245302"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADqzXfNA",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5812291120/job/15757336372"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADqzcaZg",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5812314941/job/15757417062"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADqzdY2g",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5812319366/job/15757433050"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADq0Knqw",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5812543847/job/15758174123"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADqPP1Rg",
                        "name": "Add annotations",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5799445598/job/15719462214"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADqPPyyA",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5799445354/job/15719461576"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADqPP0Tg",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5799445345/job/15719461966"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADqzPg1Q",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5812247914/job/15757205717"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADqPP2Jg",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5799445354/job/15719462438"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADqPP1cg",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5799445345/job/15719462258"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADqPP0-g",
                        "name": "Check all files imported (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5799445354/job/15719462138"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADqPPyLQ",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5799445345/job/15719461421"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADqPPz0A",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5799445354/job/15719461840"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADqPPzUA",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5799445345/job/15719461712"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADqPP3Sw",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5799445354/job/15719462731"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADqP1VRw",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5799445345/job/15720076615"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "d9bf85baac34ec4401982900d8266345527f10f9",
                "additions": 15,
                "deletions": 0,
                "committedDate": "2023-08-09T19:22:15Z",
                "author": {
                  "name": "ADedecker",
                  "email": "anatolededecker@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADq2KlJw",
                        "name": "Add annotations",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5813215190/job/15760270631"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADq2KjoA",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5813214901/job/15760270240"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADq2Ki-Q",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5813214906/job/15760270073"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADq2Kluw",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5813214901/job/15760270779"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADq2KiMg",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5813214906/job/15760269874"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADq2Kkog",
                        "name": "Check all files imported (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5813214901/job/15760270498"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADq2Kjxw",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5813214906/job/15760270279"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADq2KiVQ",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5813214901/job/15760269909"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADq2Kkgw",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5813214906/job/15760270467"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADq2Kmyg",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5813214901/job/15760271050"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADq3lsOA",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5813214906/job/15761763384"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "6f8c8a4f68e87196daee990088c5cfb78d981275",
                "additions": 14500,
                "deletions": 13033,
                "committedDate": "2023-08-11T09:47:17Z",
                "author": {
                  "name": "ADedecker",
                  "email": "anatolededecker@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "11d1d953cd0cde137ad8e81ebfa173103c2fc97f",
                "additions": 2,
                "deletions": 0,
                "committedDate": "2023-08-11T09:48:49Z",
                "author": {
                  "name": "ADedecker",
                  "email": "anatolededecker@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADrqxG7A",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5831632791/job/15815427820"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADrqxGRg",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5831632802/job/15815427654"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADrpk1cg",
                        "name": "Add annotations",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5831213300/job/15814178162"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADrpkqxg",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5831212411/job/15814175430"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADrpkq9A",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5831212409/job/15814175476"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADrqxGAw",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5831632791/job/15815427587"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADrpksVw",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5831212411/job/15814175831"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADrpksjw",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5831212409/job/15814175887"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADrpkrlQ",
                        "name": "Check all files imported (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5831212411/job/15814175637"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADrpkr-Q",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5831212409/job/15814175737"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADrpktSQ",
                        "name": "Build",
                        "conclusion": "FAILURE",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5831212409/job/15814176073"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADrpktMw",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5831212411/job/15814176051"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADrpkt6g",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5831212411/job/15814176234"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADrqvqHg",
                        "name": "Post-CI job",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5831212409/job/15815404062"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "8c4c2b51d64d1ef5806493a3c50ac50669e94e96",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-08-11T10:36:48Z",
                "author": {
                  "name": "Anatole Dedecker",
                  "email": "anatolededecker@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADrqxuLw",
                        "name": "Add annotations",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5831636273/job/15815437871"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADrqxsKg",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5831636222/job/15815437354"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADrqxtmg",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5831636227/job/15815437722"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADrqxvIA",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5831636222/job/15815438112"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADrqxugQ",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5831636227/job/15815437953"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADrqxuIw",
                        "name": "Check all files imported (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5831636222/job/15815437859"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADrqxvqA",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5831636227/job/15815438248"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADrqxtXg",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5831636222/job/15815437662"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADrqxsWQ",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5831636227/job/15815437401"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADrqxv_Q",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5831636222/job/15815438333"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADrrRkTg",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5831636227/job/15815959630"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "e862a57281993b585d2f736f0769879d6cf871d9",
                "additions": 43,
                "deletions": 3,
                "committedDate": "2023-08-15T12:54:59Z",
                "author": {
                  "name": "ADedecker",
                  "email": "anatolededecker@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADtHGgnA",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5868747150/job/15912247452"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADtIqxTw",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5869266596/job/15913890127"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADtHGgdA",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5868747149/job/15912247412"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADtIqwfw",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5869266592/job/15913889919"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADtC1OSA",
                        "name": "Add annotations",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5867310144/job/15907769928"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADtC1KSw",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5867309690/job/15907768907"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADtC1KZw",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5867309704/job/15907768935"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADtC1MQw",
                        "name": "Lint style",
                        "conclusion": "FAILURE",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5867309704/job/15907769411"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADtHGhoQ",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5868747150/job/15912247713"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADtIqwTg",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5869266596/job/15913889870"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADtC1LPA",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5867309690/job/15907769148"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADtC1NSw",
                        "name": "Check all files imported (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5867309690/job/15907769675"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADtC1LZg",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5867309704/job/15907769190"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADtC1NHQ",
                        "name": "Build",
                        "conclusion": "FAILURE",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5867309704/job/15907769629"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADtC1MMg",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5867309690/job/15907769394"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADtC1Odg",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5867309690/job/15907769974"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADtC3r9A",
                        "name": "Post-CI job",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5867309704/job/15907810292"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "e9087422f0b4edcf875328a56063891d4cc80f45",
                "additions": 65,
                "deletions": 2,
                "committedDate": "2023-08-20T16:54:44Z",
                "author": {
                  "name": "ADedecker",
                  "email": "anatolededecker@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADyL-U2Q",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5992950173/job/16252900569"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADyL-UXQ",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5992950172/job/16252900445"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADyL-UZg",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5992950174/job/16252900454"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADvIk9Rg",
                        "name": "Add annotations",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5918560839/job/16048012614"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADvIk8eQ",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5918560739/job/16048012409"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADvIk8fQ",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5918560740/job/16048012413"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADvIk88w",
                        "name": "Lint style",
                        "conclusion": "FAILURE",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5918560740/job/16048012531"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADyL-UbQ",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5992950173/job/16252900461"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADvIk88g",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5918560739/job/16048012530"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADvIk8pQ",
                        "name": "Check all files imported (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5918560739/job/16048012453"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADvIk8pw",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5918560740/job/16048012455"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADvIk81g",
                        "name": "Build",
                        "conclusion": "FAILURE",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5918560740/job/16048012502"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADvIk81Q",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5918560739/job/16048012501"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADvIk9FA",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5918560739/job/16048012564"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAADvIlerw",
                        "name": "Post-CI job",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/5918560740/job/16048021167"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "409fe6e8839ca6cefa06457812291f95cb8c55f1",
                "additions": 193323,
                "deletions": 88169,
                "committedDate": "2023-12-22T13:45:32Z",
                "author": {
                  "name": "Yaël Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEodwt3w",
                        "name": "Add annotations",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7300553189/job/19895430623"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEodwr5w",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7300553016/job/19895430119"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEodwrvg",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7300553015/job/19895430078"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEodwuBw",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7300553190/job/19895430663"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEodwtng",
                        "name": "Lint style",
                        "conclusion": "FAILURE",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7300553015/job/19895430558"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEodwtwg",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7300553016/job/19895430594"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEodwusw",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7300553190/job/19895430835"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEodwsnA",
                        "name": "Check all files imported (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7300553016/job/19895430300"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEodwsaw",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7300553015/job/19895430251"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEodwtQA",
                        "name": "check workflows (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7300553016/job/19895430464"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEodwtAw",
                        "name": "check workflows",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7300553015/job/19895430403"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEodwuWA",
                        "name": "Build",
                        "conclusion": "FAILURE",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7300553015/job/19895430744"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEodwubw",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7300553016/job/19895430767"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEodwvDg",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7300553016/job/19895430926"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEod1z7Q",
                        "name": "Post-CI job",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7300553015/job/19895514093"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAErF87Lg",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/github/leanprover-community/repo/mathlib4/event-logs?pullRequestNumber=6449"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "createdAt": "2023-08-08T16:18:24Z",
        "deletions": 0,
        "files": {
          "nodes": [
            {
              "path": "Mathlib.lean",
              "additions": 1,
              "deletions": 0
            },
            {
              "path": "Mathlib/Logic/Function/HasFiniteFibers.lean",
              "additions": 192,
              "deletions": 0
            },
            {
              "path": "Mathlib/Order/Filter/Basic.lean",
              "additions": 4,
              "deletions": 0
            },
            {
              "path": "Mathlib/Order/Filter/Cofinite.lean",
              "additions": 6,
              "deletions": 0
            }
          ]
        },
        "headRefName": "AD_finitelyFibered",
        "headRefOid": "409fe6e8839ca6cefa06457812291f95cb8c55f1",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5XczNa",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c7P265b",
              "name": "awaiting-author"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
              "name": "merge-conflict"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJbOw",
              "name": "t-topology"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5fMxLJ",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2023-08-27T20:07:45Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5dl54b",
              "body": "I think this is useful, and the implementation looks excellent! I also find the naming `HasFiniteFibers` good.\r\n\r\nEDIT: The result `Injective.hasFiniteFibers` was there, sorry for the noise! _[OLD: One obvious but probably frequently useful lemma is a very direct consequence of `hasFiniteFibers_iff_finite_preimage`: an injective function has finite fibers. I think this should be added.]_\r\n\r\nThe PR has a result `HasFiniteFibers.prod_map` about (binary) products, which I would immediately have use for. I would not have use cases for (binary) disjoint unions, but is it standard to include those as a part of API when a new general definition like this (`HasFiniteFibers`) is introduced?",
              "state": "COMMENTED",
              "author": {
                "login": "kkytola"
              },
              "submittedAt": "2023-08-09T17:33:00Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "DIRTY",
        "mergeable": "CONFLICTING",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 6449,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5dl54b",
              "body": "I think this is useful, and the implementation looks excellent! I also find the naming `HasFiniteFibers` good.\r\n\r\nEDIT: The result `Injective.hasFiniteFibers` was there, sorry for the noise! _[OLD: One obvious but probably frequently useful lemma is a very direct consequence of `hasFiniteFibers_iff_finite_preimage`: an injective function has finite fibers. I think this should be added.]_\r\n\r\nThe PR has a result `HasFiniteFibers.prod_map` about (binary) products, which I would immediately have use for. I would not have use cases for (binary) disjoint unions, but is it standard to include those as a part of API when a new general definition like this (`HasFiniteFibers`) is introduced?",
              "state": "COMMENTED",
              "author": {
                "login": "kkytola"
              },
              "submittedAt": "2023-08-09T17:33:00Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5dyHSn",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ADedecker"
              },
              "submittedAt": "2023-08-11T10:36:25Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5eGtKe",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2023-08-15T15:20:11Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5eHNYO",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ADedecker"
              },
              "submittedAt": "2023-08-15T16:15:31Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5fMxLJ",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2023-08-27T20:07:45Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5M9d9m",
                    "body": "```suggestion\r\nvariable {α α' β β' γ : Type*}\r\n```",
                    "createdAt": "2023-08-11T10:36:25Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5NLH0U",
                    "body": "Why do you not take `Function.hasFiniteFibers_iff_finite_fibers` as the definition? This is the easiest one to show in concrete cases, I would think.",
                    "createdAt": "2023-08-15T15:20:11Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5NLZaV",
                    "body": "You're probably right. I was enjoying writing `hf hS` all the time (where `hS : S.Finite), but that's not important at all.",
                    "createdAt": "2023-08-15T16:15:31Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5N4uSy",
                    "body": "That looks like weird indenting to me. We would usually do\r\n```suggestion\r\nlemma hasFiniteFibersOn_iff_finite_fibers_inter :\r\n    HasFiniteFibersOn f U ↔ ∀ b, (f ⁻¹' {b} ∩ U).Finite :=\r\n```",
                    "createdAt": "2023-08-27T20:06:25Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5N4uT2",
                    "body": "Looks like a mathportism\r\n```suggestion\r\n    [HasFiniteFibers f,\r\n      Tendsto f cofinite cofinite,\r\n      ∀ ⦃S⦄, S.Finite → (f ⁻¹' S).Finite] := by\r\n```",
                    "createdAt": "2023-08-27T20:07:11Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjQ4NjU2Nzkz",
              "login": "ADedecker"
            },
            {
              "id": "MDQ6VXNlcjE2ODg1MzM=",
              "login": "alexjbest"
            },
            {
              "id": "MDQ6VXNlcjM5NTI4MTAy",
              "login": "kkytola"
            },
            {
              "id": "MDQ6VXNlcjE0MDkwNTkz",
              "login": "YaelDillies"
            },
            {
              "id": "MDQ6VXNlcjEwMTA1MDE2",
              "login": "grunweg"
            },
            {
              "id": "U_kgDOB75MNQ",
              "login": "leanprover-community-mathlib4-bot"
            }
          ]
        },
        "state": "OPEN",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEodwt3w",
                "name": "Add annotations",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7300553189/job/19895430623"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEodwr5w",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7300553016/job/19895430119"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEodwrvg",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7300553015/job/19895430078"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEodwuBw",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7300553190/job/19895430663"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEodwtng",
                "name": "Lint style",
                "conclusion": "FAILURE",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7300553015/job/19895430558"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEodwtwg",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7300553016/job/19895430594"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEodwusw",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7300553190/job/19895430835"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEodwsnA",
                "name": "Check all files imported (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7300553016/job/19895430300"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEodwsaw",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7300553015/job/19895430251"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEodwtQA",
                "name": "check workflows (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7300553016/job/19895430464"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEodwtAw",
                "name": "check workflows",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7300553015/job/19895430403"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEodwuWA",
                "name": "Build",
                "conclusion": "FAILURE",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7300553015/job/19895430744"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEodwubw",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7300553016/job/19895430767"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEodwvDg",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7300553016/job/19895430926"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEod1z7Q",
                "name": "Post-CI job",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7300553015/job/19895514093"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAErF87Lg",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/github/leanprover-community/repo/mathlib4/event-logs?pullRequestNumber=6449"
              }
            ]
          }
        },
        "title": "feat: functions with finite fibers",
        "updatedAt": "2024-08-15T11:13:18Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/6449",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5txObrzwAAAAJWSc36",
              "createdAt": "2023-08-08T16:18:24Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5jkob2",
              "createdAt": "2023-08-09T02:03:48Z",
              "body": "How about making this a class?",
              "author": {
                "login": "alexjbest"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5jpLA8",
              "createdAt": "2023-08-09T16:15:55Z",
              "body": "I have no objection in principle but I don't really see a use case, do you have one in mind?",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5dl54b",
              "createdAt": "2023-08-09T17:33:00Z",
              "body": "I think this is useful, and the implementation looks excellent! I also find the naming `HasFiniteFibers` good.\r\n\r\nEDIT: The result `Injective.hasFiniteFibers` was there, sorry for the noise! _[OLD: One obvious but probably frequently useful lemma is a very direct consequence of `hasFiniteFibers_iff_finite_preimage`: an injective function has finite fibers. I think this should be added.]_\r\n\r\nThe PR has a result `HasFiniteFibers.prod_map` about (binary) products, which I would immediately have use for. I would not have use cases for (binary) disjoint unions, but is it standard to include those as a part of API when a new general definition like this (`HasFiniteFibers`) is introduced?",
              "author": {
                "login": "kkytola"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5jpvjH",
              "createdAt": "2023-08-09T17:54:05Z",
              "body": "> I have no objection in principle but I don't really see a use case, do you have one in mind?\r\n\r\nCould the potential use brought up by @YaelDillies [on Zulip](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20Cofinite.20maps.3F/near/316212325) be an example where a type class for this would be useful? If `f : X → Y` `[HasFiniteFibers f]` and `s : Finset Y`, then one could have some notation analogous to preimages `f ⁻¹' s : Finset X` with the finiteness of the fibers inferred? But if one cannot have a nice notation for it, it one can just provide an explicit argument to something like `HasFiniteFibers.preim_finset {f : X → Y} (hf : HasFiniteFibers f) (s : Finset Y) : Finset X`. Maybe this should be added anyway? Or rather, should the assumptions of [`Finset.preimage`](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Finset/Preimage.html#Finset.preimage) be relaxed to HasFiniteFibers?",
              "author": {
                "login": "kkytola"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5jqPE6",
              "createdAt": "2023-08-09T19:23:17Z",
              "body": "> I would not have use cases for (binary) disjoint unions, but is it standard to include those as a part of API when a new general definition like this is introduced?\r\n\r\nI wouldn't say it's standard, but I've just added it.",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5jqWC3",
              "createdAt": "2023-08-09T19:44:20Z",
              "body": "Regarding making it a class, my question is more \"are there any cases where the typeclass system would actually have enough information to infer `HasFiniteFibers`. The only case I can think of is functions from an [EmbeddingLike](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/FunLike/Embedding.html#EmbeddingLike) type, and I'm not sure in itself it justifies using a class, especially since that means duplicating lemmas to take either instance or explicit arguments (because there are still a ton of cases where we don't rely on the typeclass system for that)",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5jqZHt",
              "createdAt": "2023-08-09T19:54:35Z",
              "body": "Regarding [Finset.preimage](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Finset/Preimage.html#Finset.preimage), assuming `HasFiniteFibers` wouldn't be a full generalization because the current assumption ([Set.InjOn](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Set/Function.html#Set.InjOn)) does not imply finiteness of fibers. The same goes for [Set.Finite.preimage](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Set/Finite.html#Set.Finite.preimage). \r\nThat said, we could add a `Finset` version of `HasFiniteFibers.finite_preimage`, but I'd say this can wait for a later PR.",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5dyHSn",
              "createdAt": "2023-08-11T10:36:24Z",
              "body": "",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5j9ajN",
              "createdAt": "2023-08-14T10:06:03Z",
              "body": "> Regarding [Finset.preimage](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Finset/Preimage.html#Finset.preimage), assuming `HasFiniteFibers` wouldn't be a full generalization because the current assumption ([Set.InjOn](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Set/Function.html#Set.InjOn)) does not imply finiteness of fibers. The same goes for [Set.Finite.preimage](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Set/Finite.html#Set.Finite.preimage). That said, we could add a `Finset` version of `HasFiniteFibers.finite_preimage`, but I'd say this can wait for a later PR.\r\n\r\n1. I don't think we care so much about restricting injectivity to the set, since it annoyingly makes the function dependent.\r\n2. If we do care about it (you might want to check how it's used in mathlib), then this sounds like an argument in favor of defining `HasFiniteFibersOn` .",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5j_MGA",
              "createdAt": "2023-08-14T15:04:32Z",
              "body": ">   If we do care about it (you might want to check how it's used in mathlib), then this sounds like an argument in favor of defining `HasFiniteFibersOn` .\r\n\r\nI'll have a look at the use cases of this in mathlib. I thought about `HasFiniteFibersOn` but it felt a bit stupid to have \"`f` has finite fibers when restricted to the preimage of a finite set `s`\" as an assumption, like it's just a convoluted way of saying that the preimage of `s` is finite... But of course the point is having nice API so I may do that indeed.\r\n\r\n",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5kBWuo",
              "createdAt": "2023-08-14T21:17:16Z",
              "body": "But of course you will define `HasFiniteFibersOn : Set a -> (a -> b) -> Prop`, not `HasFiniteFibersOn : Finset a -> (a -> b) -> Prop`?",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5txObrzwAAAAJZyD2-",
              "createdAt": "2023-08-15T11:45:44Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5txObrzwAAAAJZyD3D",
              "createdAt": "2023-08-15T11:45:44Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5eGtKe",
              "createdAt": "2023-08-15T15:20:10Z",
              "body": "",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5fMxLJ",
              "createdAt": "2023-08-27T20:06:25Z",
              "body": "",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "BaseRefChangedEvent"
            },
            {
              "__typename": "BaseRefChangedEvent"
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5txObrzwAAAAKiTGG1",
              "createdAt": "2023-12-21T09:38:28Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5txObrzwAAAAKjIFps",
              "createdAt": "2023-12-22T13:48:52Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5txObrzwAAAAK_G3DL",
              "createdAt": "2024-02-14T02:49:00Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5txObrzwAAAAM8L0Ya",
              "createdAt": "2024-08-15T11:13:18Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJbOw",
                "name": "t-topology"
              }
            }
          ]
        }
      }
    }
  }
}
