{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 1,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "mo271"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 2,
        "closed": true,
        "closedAt": "2023-08-30T05:05:26Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5lJOLT",
              "body": "suggested by @alreadydone here https://github.com/leanprover-community/mathlib4/pull/6806#discussion_r1307755812",
              "createdAt": "2023-08-29T07:28:12Z",
              "author": {
                "login": "mo271"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5lO4dk",
              "body": "Thanks!\r\nI can find some similar lemmas in mathlib that are simp lemmas (e.g. [Polynomial.hermite_succ](https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/Polynomial/Hermite/Basic.html#Polynomial.hermite_succ), [Cardinal.aleph'_succ](https://leanprover-community.github.io/mathlib4_docs/Mathlib/SetTheory/Cardinal/Ordinal.html#Cardinal.aleph'_succ), aleph_succ, beth_succ) and some that are not ([GeneralizedContinuedFraction.convergents_succ](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/ContinuedFractions/Computation/ApproximationCorollaries.html#GeneralizedContinuedFraction.convergents_succ), [Sensitivity.f_succ_apply](https://leanprover-community.github.io/mathlib4_docs/Archive/Sensitivity.html#Sensitivity.f_succ_apply), [Function.iterate_succ_apply](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Logic/Function/Iterate.html#Function.iterate_succ_apply)), and I think it's reasonable to remove `simp` here.\r\n\r\nmaintainer merge",
              "createdAt": "2023-08-30T02:33:55Z",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5lO4fJ",
              "body": "ðŸš€ Pull request has been placed on the maintainer queue by alreadydone.",
              "createdAt": "2023-08-30T02:34:06Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5lPDj4",
              "body": "bors merge",
              "createdAt": "2023-08-30T03:48:05Z",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5lPQei",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6020312553/job/16331423048)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6020312553/job/16331422763)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6020312553/job/16331422844)",
              "createdAt": "2023-08-30T05:05:25Z",
              "author": {
                "login": "bors"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5lPaVe",
              "body": "> Thanks! I can find some similar lemmas in mathlib that are simp lemmas (e.g. [Polynomial.hermite_succ](https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/Polynomial/Hermite/Basic.html#Polynomial.hermite_succ), [Cardinal.aleph'_succ](https://leanprover-community.github.io/mathlib4_docs/Mathlib/SetTheory/Cardinal/Ordinal.html#Cardinal.aleph'_succ), aleph_succ, beth_succ) and some that are not ([GeneralizedContinuedFraction.convergents_succ](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/ContinuedFractions/Computation/ApproximationCorollaries.html#GeneralizedContinuedFraction.convergents_succ), [Sensitivity.f_succ_apply](https://leanprover-community.github.io/mathlib4_docs/Archive/Sensitivity.html#Sensitivity.f_succ_apply), [Function.iterate_succ_apply](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Logic/Function/Iterate.html#Function.iterate_succ_apply)), and I think it's reasonable to remove `simp` here.\r\n> \r\n@alreadydone \r\nPerhaps also \r\n[Function.iterate_succ](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Logic/Function/Iterate.html#Function.iterate_succ) does not need to be simp?\r\n",
              "createdAt": "2023-08-30T05:57:49Z",
              "author": {
                "login": "mo271"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5lSi9i",
              "body": "Probably? If you [search for it](https://github.com/search?q=repo%3Aleanprover-community%2Fmathlib4%20Function.iterate_succ&type=code) you'll see lots of use of the primed version `Function.iterate_succ'` (or `Function.iterate_succ_apply'`) which transforms the LHS in another way. But I must admit I'm not familiar with rationales to mark a lemma `@[simp]` or not, as I seldom at any `simp` attribute in my work at all ...",
              "createdAt": "2023-08-30T15:06:48Z",
              "author": {
                "login": "alreadydone"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "f3df2b00b1803845636f200154e2a66e5db71141",
                "additions": 0,
                "deletions": 1,
                "committedDate": "2023-08-29T08:26:20Z",
                "author": {
                  "name": "Moritz Firsching",
                  "email": "firsching@google.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "b3ccd6470feba3b6cfae00f39222c7530a672974",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-08-29T10:00:27Z",
                "author": {
                  "name": "Moritz Firsching",
                  "email": "firsching@google.com"
                },
                "statusCheckRollup": null
              }
            }
          ]
        },
        "createdAt": "2023-08-29T07:09:15Z",
        "deletions": 2,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/Data/Complex/Exponential.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Data/Nat/Factorial/Basic.lean",
              "additions": 0,
              "deletions": 1
            }
          ]
        },
        "headRefName": "mo271/simp_factorial",
        "headRefOid": "b3ccd6470feba3b6cfae00f39222c7530a672974",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5ZAHpy",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
              "color": "06e039",
              "name": "ready-to-merge"
            }
          ]
        },
        "latestReviews": {
          "nodes": []
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 6840,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": []
        },
        "reviewThreads": {
          "nodes": []
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjM0OTE2Mjc=",
              "login": "mo271"
            },
            {
              "id": "MDQ6VXNlcjMwNjQxNDU=",
              "login": "alreadydone"
            },
            {
              "id": "MDQ6VXNlcjQ3Nzk1Ng==",
              "login": "kim-em"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": null,
        "title": "[Merged by Bors] - chore: rm `@[simp]` from factorial_succ",
        "updatedAt": "2023-08-30T15:07:16Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/6840",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "ReadyForReviewEvent",
              "id": "RFRE_lADOFcwZ1c5vhbEYzwAAAAJhAM8y",
              "createdAt": "2023-08-29T07:27:05Z"
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5OK0uF",
              "createdAt": "2023-08-29T07:27:45Z",
              "source": {
                "id": "PR_kwDOFcwZ1c5Y22fb",
                "title": "[Merged by Bors] - feat: super factorial written as product",
                "url": "https://github.com/leanprover-community/mathlib4/pull/6806"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5lJOLT",
              "createdAt": "2023-08-29T07:28:12Z",
              "body": "suggested by @alreadydone here https://github.com/leanprover-community/mathlib4/pull/6806#discussion_r1307755812",
              "author": {
                "login": "mo271"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c5vhbEYzwAAAAJhCfXM",
              "createdAt": "2023-08-29T08:25:36Z"
            },
            {
              "__typename": "ReopenedEvent",
              "id": "REE_lADOFcwZ1c5vhbEYzwAAAAJhCffM",
              "createdAt": "2023-08-29T08:25:39Z"
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "f3df2b00b1803845636f200154e2a66e5db71141"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c5vhbEYzwAAAAJhCiNA",
              "createdAt": "2023-08-29T08:26:40Z"
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "b3ccd6470feba3b6cfae00f39222c7530a672974"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5vhbEYzwAAAAJhLbeQ",
              "createdAt": "2023-08-29T12:00:53Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5lO4dk",
              "createdAt": "2023-08-30T02:33:55Z",
              "body": "Thanks!\r\nI can find some similar lemmas in mathlib that are simp lemmas (e.g. [Polynomial.hermite_succ](https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/Polynomial/Hermite/Basic.html#Polynomial.hermite_succ), [Cardinal.aleph'_succ](https://leanprover-community.github.io/mathlib4_docs/Mathlib/SetTheory/Cardinal/Ordinal.html#Cardinal.aleph'_succ), aleph_succ, beth_succ) and some that are not ([GeneralizedContinuedFraction.convergents_succ](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/ContinuedFractions/Computation/ApproximationCorollaries.html#GeneralizedContinuedFraction.convergents_succ), [Sensitivity.f_succ_apply](https://leanprover-community.github.io/mathlib4_docs/Archive/Sensitivity.html#Sensitivity.f_succ_apply), [Function.iterate_succ_apply](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Logic/Function/Iterate.html#Function.iterate_succ_apply)), and I think it's reasonable to remove `simp` here.\r\n\r\nmaintainer merge",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5lO4fJ",
              "createdAt": "2023-08-30T02:34:06Z",
              "body": "ðŸš€ Pull request has been placed on the maintainer queue by alreadydone.",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5lPDj4",
              "createdAt": "2023-08-30T03:48:05Z",
              "body": "bors merge",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5vhbEYzwAAAAJhoj-6",
              "createdAt": "2023-08-30T03:48:18Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
                "name": "ready-to-merge"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5vhbEYzwAAAAJhoj_o",
              "createdAt": "2023-08-30T03:48:19Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5lPQei",
              "createdAt": "2023-08-30T05:05:25Z",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6020312553/job/16331423048)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6020312553/job/16331422763)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6020312553/job/16331422844)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c5vhbEYzwAAAAJhqIs6",
              "createdAt": "2023-08-30T05:05:26Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c5vhbEYzwAAAAJhqIw3",
              "createdAt": "2023-08-30T05:05:29Z"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5lPaVe",
              "createdAt": "2023-08-30T05:57:49Z",
              "body": "> Thanks! I can find some similar lemmas in mathlib that are simp lemmas (e.g. [Polynomial.hermite_succ](https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/Polynomial/Hermite/Basic.html#Polynomial.hermite_succ), [Cardinal.aleph'_succ](https://leanprover-community.github.io/mathlib4_docs/Mathlib/SetTheory/Cardinal/Ordinal.html#Cardinal.aleph'_succ), aleph_succ, beth_succ) and some that are not ([GeneralizedContinuedFraction.convergents_succ](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/ContinuedFractions/Computation/ApproximationCorollaries.html#GeneralizedContinuedFraction.convergents_succ), [Sensitivity.f_succ_apply](https://leanprover-community.github.io/mathlib4_docs/Archive/Sensitivity.html#Sensitivity.f_succ_apply), [Function.iterate_succ_apply](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Logic/Function/Iterate.html#Function.iterate_succ_apply)), and I think it's reasonable to remove `simp` here.\r\n> \r\n@alreadydone \r\nPerhaps also \r\n[Function.iterate_succ](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Logic/Function/Iterate.html#Function.iterate_succ) does not need to be simp?\r\n",
              "author": {
                "login": "mo271"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5OMKza",
              "createdAt": "2023-08-30T10:03:59Z",
              "source": {
                "id": "PR_kwDOFcwZ1c5YtCk4",
                "title": "[Merged by Bors] - feat: super factorial",
                "url": "https://github.com/leanprover-community/mathlib4/pull/6768"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5lSi9i",
              "createdAt": "2023-08-30T15:06:48Z",
              "body": "Probably? If you [search for it](https://github.com/search?q=repo%3Aleanprover-community%2Fmathlib4%20Function.iterate_succ&type=code) you'll see lots of use of the primed version `Function.iterate_succ'` (or `Function.iterate_succ_apply'`) which transforms the LHS in another way. But I must admit I'm not familiar with rationales to mark a lemma `@[simp]` or not, as I seldom at any `simp` attribute in my work at all ...",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5OV4R9",
              "createdAt": "2023-09-10T08:21:22Z",
              "source": {
                "id": "PR_kwDOFcwZ1c5Z8obo",
                "title": "[Merged by Bors] - chore: rm `@simp` from factorial",
                "url": "https://github.com/leanprover-community/mathlib4/pull/7078"
              }
            }
          ]
        }
      }
    }
  }
}
