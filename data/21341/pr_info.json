{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 243,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "YaelDillies"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "* Multiplicativise using the (not so) new `GroupNorm` API.\r\n* Deprecate the lemmas about the quotient norm that hold for all norms.\r\n* Move all remaining lemmas to a single `QuotientAddGroup` namespace. They were currently scattered across `_root_`, `AddSubgroup` and `QuotientAddGroup`.\r\n* Follow the naming convention in lemma names.\r\n\r\n---\r\n- [x] depends on: #21340\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 4,
        "closed": false,
        "closedAt": null,
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c6cuGWR",
              "body": "### PR summary [b2ab40e25d](https://github.com/leanprover-community/mathlib4/pull/21341/commits/b2ab40e25df013dce1cedeaa8893dbac46683bf9)\n\nImport changes exceeding 2%\n\n| %      | File |\n| -      | -    |\n| +2.68% | `Mathlib.Analysis.Normed.Group.AddCircle` |\n\n<details><summary>\n\n#### Import changes for modified files\n\n</summary>\n\nDependency changes\n\n| File | Base Count | Head Count | Change |\n| --- | --- | --- | --- |\n| Mathlib.Analysis.Normed.Group.AddCircle | 1494 | 1534 | +40 (+2.68%) |\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n|<details><summary>13 files</summary> `Mathlib.Analysis.Complex.Angle` `Mathlib.Analysis.SpecialFunctions.BinaryEntropy` `Mathlib.Analysis.SpecialFunctions.Complex.LogDeriv` `Mathlib.Analysis.SpecialFunctions.Log.NegMulLog` `Mathlib.Analysis.SpecialFunctions.Pow.Deriv` `Mathlib.Analysis.SpecialFunctions.Trigonometric.ArctanDeriv` `Mathlib.Analysis.SpecialFunctions.Trigonometric.Bounds` `Mathlib.Analysis.SpecialFunctions.Trigonometric.ComplexDeriv` `Mathlib.Computability.AkraBazzi.AkraBazzi` `Mathlib.Data.Real.Pi.Bounds` `Mathlib.NumberTheory.Bertrand` `Mathlib.NumberTheory.Harmonic.EulerMascheroni` `Mathlib.NumberTheory.Transcendental.Liouville.LiouvilleWith`</details>|1|\n|<details><summary>37 files</summary> `Mathlib.MeasureTheory.Decomposition.Lebesgue` `Mathlib.MeasureTheory.Function.ConditionalExpectation.AEMeasurable` `Mathlib.MeasureTheory.Function.ContinuousMapDense` `Mathlib.MeasureTheory.Function.ConvergenceInMeasure` `Mathlib.MeasureTheory.Function.L1Space.AEEqFun` `Mathlib.MeasureTheory.Function.L1Space.Integrable` `Mathlib.MeasureTheory.Function.LocallyIntegrable` `Mathlib.MeasureTheory.Function.LpOrder` `Mathlib.MeasureTheory.Function.LpSeminorm.Basic` `Mathlib.MeasureTheory.Function.LpSeminorm.ChebyshevMarkov` `Mathlib.MeasureTheory.Function.LpSeminorm.CompareExp` `Mathlib.MeasureTheory.Function.LpSeminorm.TriangleInequality` `Mathlib.MeasureTheory.Function.LpSeminorm.Trim` `Mathlib.MeasureTheory.Function.LpSpace.Basic` `Mathlib.MeasureTheory.Function.LpSpace.ContinuousCompMeasurePreserving` `Mathlib.MeasureTheory.Function.LpSpace.ContinuousFunctions` `Mathlib.MeasureTheory.Function.LpSpace.DomAct.Basic` `Mathlib.MeasureTheory.Function.LpSpace.DomAct.Continuous` `Mathlib.MeasureTheory.Function.SimpleFuncDenseLp` `Mathlib.MeasureTheory.Function.SpecialFunctions.Basic` `Mathlib.MeasureTheory.Function.StronglyMeasurable.Lp` `Mathlib.MeasureTheory.Function.UnifTight` `Mathlib.MeasureTheory.Function.UniformIntegrable` `Mathlib.MeasureTheory.Group.Integral` `Mathlib.MeasureTheory.Integral.BochnerL1` `Mathlib.MeasureTheory.Integral.Bochner` `Mathlib.MeasureTheory.Integral.BoundedContinuousFunction` `Mathlib.MeasureTheory.Integral.IntegrableOn` `Mathlib.MeasureTheory.Integral.MeanInequalities` `Mathlib.MeasureTheory.Integral.SetToL1` `Mathlib.MeasureTheory.Integral.VitaliCaratheodory` `Mathlib.MeasureTheory.Measure.FiniteMeasure` `Mathlib.MeasureTheory.Measure.SeparableMeasure` `Mathlib.Probability.Independence.Integrable` `Mathlib.Probability.Kernel.Integral` `Mathlib.Probability.Moments.IntegrableExpMul` `Mathlib.Probability.ProbabilityMassFunction.Integrals`</details>|2|\n|<details><summary>77 files</summary> `Mathlib.Analysis.AbsoluteValue.Equivalence` `Mathlib.Analysis.Analytic.RadiusLiminf` `Mathlib.Analysis.Asymptotics.ExpGrowth` `Mathlib.Analysis.CStarAlgebra.Multiplier` `Mathlib.Analysis.CStarAlgebra.lpSpace` `Mathlib.Analysis.Calculus.ContDiff.WithLp` `Mathlib.Analysis.Calculus.FDeriv.WithLp` `Mathlib.Analysis.Convex.SpecificFunctions.Basic` `Mathlib.Analysis.Convex.SpecificFunctions.Pow` `Mathlib.Analysis.MeanInequalitiesPow` `Mathlib.Analysis.MeanInequalities` `Mathlib.Analysis.Normed.Algebra.Norm` `Mathlib.Analysis.Normed.Algebra.TrivSqZeroExt` `Mathlib.Analysis.Normed.Algebra.UnitizationL1` `Mathlib.Analysis.Normed.Lp.LpEquiv` `Mathlib.Analysis.Normed.Lp.PiLp` `Mathlib.Analysis.Normed.Lp.ProdLp` `Mathlib.Analysis.Normed.Lp.lpSpace` `Mathlib.Analysis.Normed.Ring.IsPowMulFaithful` `Mathlib.Analysis.Normed.Ring.SeminormFromBounded` `Mathlib.Analysis.Normed.Ring.SeminormFromConst` `Mathlib.Analysis.Normed.Ring.Seminorm` `Mathlib.Analysis.Normed.Ring.SmoothingSeminorm` `Mathlib.Analysis.NormedSpace.DualNumber` `Mathlib.Analysis.PSeries` `Mathlib.Analysis.SpecialFunctions.CompareExp` `Mathlib.Analysis.SpecialFunctions.Complex.Circle` `Mathlib.Analysis.SpecialFunctions.Complex.Log` `Mathlib.Analysis.SpecialFunctions.ContinuousFunctionalCalculus.Rpow.Basic` `Mathlib.Analysis.SpecialFunctions.Log.Base` `Mathlib.Analysis.SpecialFunctions.Log.ENNRealLogExp` `Mathlib.Analysis.SpecialFunctions.Log.ENNRealLog` `Mathlib.Analysis.SpecialFunctions.Log.Monotone` `Mathlib.Analysis.SpecialFunctions.Pow.Asymptotics` `Mathlib.Analysis.SpecialFunctions.Pow.Complex` `Mathlib.Analysis.SpecialFunctions.Pow.Continuity` `Mathlib.Analysis.SpecialFunctions.Pow.NNReal` `Mathlib.Analysis.SpecialFunctions.Pow.Real` `Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan` `Mathlib.Analysis.SpecialFunctions.Trigonometric.Complex` `Mathlib.Analysis.SpecificLimits.FloorPow` `Mathlib.Combinatorics.Additive.Corner.Roth` `Mathlib.Combinatorics.SimpleGraph.Regularity.Bound` `Mathlib.Combinatorics.SimpleGraph.Regularity.Chunk` `Mathlib.Combinatorics.SimpleGraph.Regularity.Increment` `Mathlib.Combinatorics.SimpleGraph.Regularity.Lemma` `Mathlib.Combinatorics.SimpleGraph.Triangle.Removal` `Mathlib.Computability.AkraBazzi.GrowsPolynomially` `Mathlib.Dynamics.TopologicalEntropy.CoverEntropy` `Mathlib.Dynamics.TopologicalEntropy.NetEntropy` `Mathlib.Dynamics.TopologicalEntropy.Semiconj` `Mathlib.Geometry.Euclidean.Angle.Unoriented.RightAngle` `Mathlib.LinearAlgebra.QuadraticForm.Complex` `Mathlib.MeasureTheory.Function.SpecialFunctions.Arctan` `Mathlib.MeasureTheory.Measure.Doubling` `Mathlib.NumberTheory.ClassNumber.AdmissibleCardPowDegree` `Mathlib.NumberTheory.ClassNumber.Finite` `Mathlib.NumberTheory.ClassNumber.FunctionField` `Mathlib.NumberTheory.Cyclotomic.Basic` `Mathlib.NumberTheory.ModularForms.EisensteinSeries.IsBoundedAtImInfty` `Mathlib.NumberTheory.ModularForms.EisensteinSeries.UniformConvergence` `Mathlib.NumberTheory.MulChar.Lemmas` `Mathlib.NumberTheory.Ostrowski` `Mathlib.NumberTheory.SumPrimeReciprocals` `Mathlib.RingTheory.Perfection` `Mathlib.RingTheory.Perfectoid.Untilt` `Mathlib.RingTheory.Polynomial.Cyclotomic.Basic` `Mathlib.RingTheory.Polynomial.Cyclotomic.Expand` `Mathlib.RingTheory.Polynomial.Cyclotomic.Roots` `Mathlib.RingTheory.Polynomial.Eisenstein.IsIntegral` `Mathlib.RingTheory.RootsOfUnity.AlgebraicallyClosed` `Mathlib.RingTheory.RootsOfUnity.Complex` `Mathlib.Topology.Algebra.PontryaginDual` `Mathlib.Topology.MetricSpace.GromovHausdorff` `Mathlib.Topology.MetricSpace.HolderNorm` `Mathlib.Topology.MetricSpace.Holder` `Mathlib.Topology.MetricSpace.Kuratowski`</details>|3|\n| `Mathlib.Analysis.SpecialFunctions.Complex.Arg` `Mathlib.Analysis.SpecialFunctions.Trigonometric.Angle`|4|\n| `Mathlib.Analysis.Normed.Group.AddCircle`|40|\n\n</details>\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ coe_fract`\n`+ exists_norm_mk'_lt`\n`+ exists_norm_mul_lt`\n`+ groupSeminorm`\n`+ instNorm`\n`+ instNormedCommGroup`\n`+ instSeminormedCommGroup`\n`+ instance : NormedAddCommGroup (AddCircle p) := QuotientAddGroup.instNormedAddCommGroup _`\n`+ isGLB_infDist`\n`+ le_infDist`\n`+ le_norm_iff`\n`+ nhds_one_hasBasis`\n`+ norm_eq_groupSeminorm`\n`+ norm_eq_infDist`\n`+ norm_lt_iff`\n`+ norm_mk`\n`+ norm_mk'`\n`+ norm_mk'_eq_zero`\n`+ norm_mk'_eq_zero_iff_mem_closure`\n`+ norm_mk'_le_norm`\n`+ norm_mk_eq_zero`\n`+ norm_mk_eq_zero_iff_mem_closure`\n`+ norm_mk_le_norm`\n`- QuotientAddGroup.norm_eq_infDist`\n`- QuotientAddGroup.norm_lt_iff`\n`- QuotientAddGroup.norm_mk`\n`- instance : NormedAddCommGroup (AddCircle p)`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n</details>\n\n---\n\n<details><summary>Decrease in tech debt: (relative, absolute) = (2.00, 0.00)</summary>\n\n|Current number|Change|Type|\n|-:|:-:|:-|\n|1219|-2|erw|\n\nCurrent commit [b2ab40e25d](https://github.com/leanprover-community/mathlib4/commit/b2ab40e25df013dce1cedeaa8893dbac46683bf9)\nReference commit [07e5270ff5](https://github.com/leanprover-community/mathlib4/commit/07e5270ff5cec4da775e386ed1e7bd50f9334c25)\n\nYou can run this locally as\n```\n./scripts/technical-debt-metrics.sh pr_summary\n```\n* The `relative` value is the weighted *sum* of the differences with weight given by the *inverse* of the current value of the statistic.\n* The `absolute` value is the `relative` value divided by the total sum of the inverses of the current values (i.e. the weighted *average* of the differences).\n</details>\n",
              "createdAt": "2025-02-02T10:13:51Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6cxPxi",
              "body": "This PR/issue depends on:\n* ~~leanprover-community/mathlib4#21340~~\nBy **[Dependent Issues](https://github.com/z0al/dependent-issues)** (🤖). Happy coding!\n<!-- By Dependent Issues (Action) - DO NOT REMOVE -->",
              "createdAt": "2025-02-03T07:21:10Z",
              "author": {
                "login": "mathlib4-dependent-issues-bot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6evcJt",
              "body": "Thanks a lot for working on this! How hard would it be to generalize `QuotientGroup.groupSeminorm` to a pushforward of group seminorms along surjective group morphisms? I'm asking because in functional analysis you sometimes have a surjective linear map from a normed space to a vector space, and you endow the codomain with the norm coming from the identification with the quotient. But I'd rather have a general pushforward operation.",
              "createdAt": "2025-02-17T14:06:37Z",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6exSri",
              "body": "Yes, that's definitely possible. That sound like a separate PR though.",
              "createdAt": "2025-02-17T17:24:21Z",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6e4toN",
              "body": "To be clear, my point was that I'd rather have the quotient case be a special case of the pushforward rather than building the pushforward from the quotient. But indeed we can leave that generalization for later, although I think generalizing the definition of the seminorm in itself is almost immediate.",
              "createdAt": "2025-02-18T13:07:10Z",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6e5ihQ",
              "body": "@ADedecker do you want to self-assign this?",
              "createdAt": "2025-02-18T14:30:40Z",
              "author": {
                "login": "j-loreaux"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "e542d6a1a47f79e205dcfd3a305b6f9c5db845c5",
                "additions": 240,
                "deletions": 154,
                "committedDate": "2025-03-04T14:41:19Z",
                "author": {
                  "name": "Yaël Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "b2ab40e25df013dce1cedeaa8893dbac46683bf9",
                "additions": 6,
                "deletions": 3,
                "committedDate": "2025-03-04T15:18:23Z",
                "author": {
                  "name": "Yaël Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI45uHTQ",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13656924848/job/38178359117"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI45uSXA",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13656925746/job/38178361948"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI45uTAQ",
                        "name": "post-or-update-summary-comment",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13656925764/job/38178362113"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI45uIsw",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13656924839/job/38178359475"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI45uUMg",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13656925754/job/38178362418"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI45uKEQ",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13656924848/job/38178359825"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI45uGww",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13656924839/job/38178358979"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI45uScQ",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13656925754/job/38178361969"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI45uMCA",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13656924848/job/38178360328"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI47HSYA",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13656924839/job/38179820128"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI45v_Ew",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/38178389779"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAI45wYSQ",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=21341&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "createdAt": "2025-02-02T10:12:53Z",
        "deletions": 154,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/Analysis/Normed/Group/AddCircle.lean",
              "additions": 24,
              "deletions": 51
            },
            {
              "path": "Mathlib/Analysis/Normed/Group/Quotient.lean",
              "additions": 207,
              "deletions": 101
            },
            {
              "path": "Mathlib/Topology/Instances/AddCircle.lean",
              "additions": 3,
              "deletions": 0
            },
            {
              "path": "Mathlib/Topology/MetricSpace/HausdorffDistance.lean",
              "additions": 9,
              "deletions": 2
            }
          ]
        },
        "headRefName": "multiplicativise_normed_group_quotient",
        "headRefOid": "b2ab40e25df013dce1cedeaa8893dbac46683bf9",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c6JwcVs",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJeVg",
              "color": "33DBEC",
              "name": "t-analysis"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABwbfWPw",
              "color": "B60205",
              "name": "large-import"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c6d_fZ2",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2025-02-28T12:50:31Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6d_17C",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "b-mehta"
              },
              "submittedAt": "2025-02-28T13:32:30Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6dfJ2P",
              "body": "👍 ",
              "state": "APPROVED",
              "author": {
                "login": "Whysoserioushah"
              },
              "submittedAt": "2025-02-25T19:24:18Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "BLOCKED",
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 21341,
        "potentialMergeCommit": {
          "oid": "57ef45fef2963dcba111689dbc822a1d9200df17"
        },
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": "APPROVED",
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c6dfJ2P",
              "body": "👍 ",
              "state": "APPROVED",
              "author": {
                "login": "Whysoserioushah"
              },
              "submittedAt": "2025-02-25T19:24:18Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6d_LoU",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2025-02-28T12:15:57Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6d_L-j",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2025-02-28T12:16:42Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6d_WaT",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2025-02-28T12:37:07Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6d_ZH-",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2025-02-28T12:42:37Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6d_fZ2",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2025-02-28T12:50:31Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6d_gW4",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2025-02-28T12:51:59Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6d_17C",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "b-mehta"
              },
              "submittedAt": "2025-02-28T13:32:30Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c51vPJ4",
                    "body": "I think you should replace this with `inferInstance`, I think leaving this definition is going to cause more problems not fewer.",
                    "createdAt": "2025-02-28T12:15:57Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c51vVcd",
                    "body": "Good point, that was an oversight",
                    "createdAt": "2025-02-28T12:37:07Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c51vPXs",
                    "body": "Why is \"no replacement\" ok? Should this lemma exist for `infDist`?",
                    "createdAt": "2025-02-28T12:16:42Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c51vXAr",
                    "body": "1. This doesn't seem like a particularly useful lemma\r\n2. This lemma already exists for `⨅`, up to trivial simplifications",
                    "createdAt": "2025-02-28T12:42:37Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c51vanY",
                    "body": "I think the comment should suggest the rough replacement, even if there's no direct lemma.",
                    "createdAt": "2025-02-28T12:50:31Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c51vbJD",
                    "body": "I've written \"See constituent lemmas\". Isn't that enough?",
                    "createdAt": "2025-02-28T12:51:59Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c51vnma",
                    "body": "I'm not really sure what that really means here, and similar for the \"Replaced by a private lemma\" earlier. The idea of deprecation messages is to make it straight-forward for end-users of mathlib to amend their code to the new changes. \r\n\r\nThis proof has also gone from a one-line proof to a `simp only / exact / simpa / aesop`, so it's not particularly nice for someone to see which part of the proof is the correct replacement.\r\n\r\nIt looks to me like there should at least be a lemma saying that `infDist` is the glb of some set, and then you can deprecate in favour of that.",
                    "createdAt": "2025-02-28T13:32:30Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjE0MDkwNTkz",
              "login": "YaelDillies"
            },
            {
              "id": "U_kgDOCsITAQ",
              "login": "mathlib4-dependent-issues-bot"
            },
            {
              "id": "MDQ6VXNlcjQ4NjU2Nzkz",
              "login": "ADedecker"
            },
            {
              "id": "MDQ6VXNlcjg5MjA1OTg=",
              "login": "j-loreaux"
            },
            {
              "id": "MDQ6VXNlcjQyNTI2MA==",
              "login": "eric-wieser"
            },
            {
              "id": "MDQ6VXNlcjI5OTU5MjI2",
              "login": "b-mehta"
            },
            {
              "id": "U_kgDOBoDZIw",
              "login": "Whysoserioushah"
            },
            {
              "id": "U_kgDOBcsTTQ",
              "login": "leanprover-community-bot-assistant"
            }
          ]
        },
        "state": "OPEN",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI45uHTQ",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13656924848/job/38178359117"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI45uSXA",
                "name": "label-and-report-new-contributor",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13656925746/job/38178361948"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI45uTAQ",
                "name": "post-or-update-summary-comment",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13656925764/job/38178362113"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI45uIsw",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13656924839/job/38178359475"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI45uUMg",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13656925754/job/38178362418"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI45uKEQ",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13656924848/job/38178359825"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI45uGww",
                "name": "Build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13656924839/job/38178358979"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI45uScQ",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13656925754/job/38178361969"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI45uMCA",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13656924848/job/38178360328"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI47HSYA",
                "name": "Post-CI job",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13656924839/job/38179820128"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI45v_Ew",
                "name": "New Contributor Check",
                "conclusion": "NEUTRAL",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/38178389779"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAI45wYSQ",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=21341&login=leanprover-community&repository=mathlib4"
              }
            ]
          }
        },
        "title": "refactor(Normed/Group/Quotient): streamline, multiplicativise",
        "updatedAt": "2025-03-04T15:19:31Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/21341",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6cuGWR",
              "createdAt": "2025-02-02T10:13:51Z",
              "body": "### PR summary [b2ab40e25d](https://github.com/leanprover-community/mathlib4/pull/21341/commits/b2ab40e25df013dce1cedeaa8893dbac46683bf9)\n\nImport changes exceeding 2%\n\n| %      | File |\n| -      | -    |\n| +2.68% | `Mathlib.Analysis.Normed.Group.AddCircle` |\n\n<details><summary>\n\n#### Import changes for modified files\n\n</summary>\n\nDependency changes\n\n| File | Base Count | Head Count | Change |\n| --- | --- | --- | --- |\n| Mathlib.Analysis.Normed.Group.AddCircle | 1494 | 1534 | +40 (+2.68%) |\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n|<details><summary>13 files</summary> `Mathlib.Analysis.Complex.Angle` `Mathlib.Analysis.SpecialFunctions.BinaryEntropy` `Mathlib.Analysis.SpecialFunctions.Complex.LogDeriv` `Mathlib.Analysis.SpecialFunctions.Log.NegMulLog` `Mathlib.Analysis.SpecialFunctions.Pow.Deriv` `Mathlib.Analysis.SpecialFunctions.Trigonometric.ArctanDeriv` `Mathlib.Analysis.SpecialFunctions.Trigonometric.Bounds` `Mathlib.Analysis.SpecialFunctions.Trigonometric.ComplexDeriv` `Mathlib.Computability.AkraBazzi.AkraBazzi` `Mathlib.Data.Real.Pi.Bounds` `Mathlib.NumberTheory.Bertrand` `Mathlib.NumberTheory.Harmonic.EulerMascheroni` `Mathlib.NumberTheory.Transcendental.Liouville.LiouvilleWith`</details>|1|\n|<details><summary>37 files</summary> `Mathlib.MeasureTheory.Decomposition.Lebesgue` `Mathlib.MeasureTheory.Function.ConditionalExpectation.AEMeasurable` `Mathlib.MeasureTheory.Function.ContinuousMapDense` `Mathlib.MeasureTheory.Function.ConvergenceInMeasure` `Mathlib.MeasureTheory.Function.L1Space.AEEqFun` `Mathlib.MeasureTheory.Function.L1Space.Integrable` `Mathlib.MeasureTheory.Function.LocallyIntegrable` `Mathlib.MeasureTheory.Function.LpOrder` `Mathlib.MeasureTheory.Function.LpSeminorm.Basic` `Mathlib.MeasureTheory.Function.LpSeminorm.ChebyshevMarkov` `Mathlib.MeasureTheory.Function.LpSeminorm.CompareExp` `Mathlib.MeasureTheory.Function.LpSeminorm.TriangleInequality` `Mathlib.MeasureTheory.Function.LpSeminorm.Trim` `Mathlib.MeasureTheory.Function.LpSpace.Basic` `Mathlib.MeasureTheory.Function.LpSpace.ContinuousCompMeasurePreserving` `Mathlib.MeasureTheory.Function.LpSpace.ContinuousFunctions` `Mathlib.MeasureTheory.Function.LpSpace.DomAct.Basic` `Mathlib.MeasureTheory.Function.LpSpace.DomAct.Continuous` `Mathlib.MeasureTheory.Function.SimpleFuncDenseLp` `Mathlib.MeasureTheory.Function.SpecialFunctions.Basic` `Mathlib.MeasureTheory.Function.StronglyMeasurable.Lp` `Mathlib.MeasureTheory.Function.UnifTight` `Mathlib.MeasureTheory.Function.UniformIntegrable` `Mathlib.MeasureTheory.Group.Integral` `Mathlib.MeasureTheory.Integral.BochnerL1` `Mathlib.MeasureTheory.Integral.Bochner` `Mathlib.MeasureTheory.Integral.BoundedContinuousFunction` `Mathlib.MeasureTheory.Integral.IntegrableOn` `Mathlib.MeasureTheory.Integral.MeanInequalities` `Mathlib.MeasureTheory.Integral.SetToL1` `Mathlib.MeasureTheory.Integral.VitaliCaratheodory` `Mathlib.MeasureTheory.Measure.FiniteMeasure` `Mathlib.MeasureTheory.Measure.SeparableMeasure` `Mathlib.Probability.Independence.Integrable` `Mathlib.Probability.Kernel.Integral` `Mathlib.Probability.Moments.IntegrableExpMul` `Mathlib.Probability.ProbabilityMassFunction.Integrals`</details>|2|\n|<details><summary>77 files</summary> `Mathlib.Analysis.AbsoluteValue.Equivalence` `Mathlib.Analysis.Analytic.RadiusLiminf` `Mathlib.Analysis.Asymptotics.ExpGrowth` `Mathlib.Analysis.CStarAlgebra.Multiplier` `Mathlib.Analysis.CStarAlgebra.lpSpace` `Mathlib.Analysis.Calculus.ContDiff.WithLp` `Mathlib.Analysis.Calculus.FDeriv.WithLp` `Mathlib.Analysis.Convex.SpecificFunctions.Basic` `Mathlib.Analysis.Convex.SpecificFunctions.Pow` `Mathlib.Analysis.MeanInequalitiesPow` `Mathlib.Analysis.MeanInequalities` `Mathlib.Analysis.Normed.Algebra.Norm` `Mathlib.Analysis.Normed.Algebra.TrivSqZeroExt` `Mathlib.Analysis.Normed.Algebra.UnitizationL1` `Mathlib.Analysis.Normed.Lp.LpEquiv` `Mathlib.Analysis.Normed.Lp.PiLp` `Mathlib.Analysis.Normed.Lp.ProdLp` `Mathlib.Analysis.Normed.Lp.lpSpace` `Mathlib.Analysis.Normed.Ring.IsPowMulFaithful` `Mathlib.Analysis.Normed.Ring.SeminormFromBounded` `Mathlib.Analysis.Normed.Ring.SeminormFromConst` `Mathlib.Analysis.Normed.Ring.Seminorm` `Mathlib.Analysis.Normed.Ring.SmoothingSeminorm` `Mathlib.Analysis.NormedSpace.DualNumber` `Mathlib.Analysis.PSeries` `Mathlib.Analysis.SpecialFunctions.CompareExp` `Mathlib.Analysis.SpecialFunctions.Complex.Circle` `Mathlib.Analysis.SpecialFunctions.Complex.Log` `Mathlib.Analysis.SpecialFunctions.ContinuousFunctionalCalculus.Rpow.Basic` `Mathlib.Analysis.SpecialFunctions.Log.Base` `Mathlib.Analysis.SpecialFunctions.Log.ENNRealLogExp` `Mathlib.Analysis.SpecialFunctions.Log.ENNRealLog` `Mathlib.Analysis.SpecialFunctions.Log.Monotone` `Mathlib.Analysis.SpecialFunctions.Pow.Asymptotics` `Mathlib.Analysis.SpecialFunctions.Pow.Complex` `Mathlib.Analysis.SpecialFunctions.Pow.Continuity` `Mathlib.Analysis.SpecialFunctions.Pow.NNReal` `Mathlib.Analysis.SpecialFunctions.Pow.Real` `Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan` `Mathlib.Analysis.SpecialFunctions.Trigonometric.Complex` `Mathlib.Analysis.SpecificLimits.FloorPow` `Mathlib.Combinatorics.Additive.Corner.Roth` `Mathlib.Combinatorics.SimpleGraph.Regularity.Bound` `Mathlib.Combinatorics.SimpleGraph.Regularity.Chunk` `Mathlib.Combinatorics.SimpleGraph.Regularity.Increment` `Mathlib.Combinatorics.SimpleGraph.Regularity.Lemma` `Mathlib.Combinatorics.SimpleGraph.Triangle.Removal` `Mathlib.Computability.AkraBazzi.GrowsPolynomially` `Mathlib.Dynamics.TopologicalEntropy.CoverEntropy` `Mathlib.Dynamics.TopologicalEntropy.NetEntropy` `Mathlib.Dynamics.TopologicalEntropy.Semiconj` `Mathlib.Geometry.Euclidean.Angle.Unoriented.RightAngle` `Mathlib.LinearAlgebra.QuadraticForm.Complex` `Mathlib.MeasureTheory.Function.SpecialFunctions.Arctan` `Mathlib.MeasureTheory.Measure.Doubling` `Mathlib.NumberTheory.ClassNumber.AdmissibleCardPowDegree` `Mathlib.NumberTheory.ClassNumber.Finite` `Mathlib.NumberTheory.ClassNumber.FunctionField` `Mathlib.NumberTheory.Cyclotomic.Basic` `Mathlib.NumberTheory.ModularForms.EisensteinSeries.IsBoundedAtImInfty` `Mathlib.NumberTheory.ModularForms.EisensteinSeries.UniformConvergence` `Mathlib.NumberTheory.MulChar.Lemmas` `Mathlib.NumberTheory.Ostrowski` `Mathlib.NumberTheory.SumPrimeReciprocals` `Mathlib.RingTheory.Perfection` `Mathlib.RingTheory.Perfectoid.Untilt` `Mathlib.RingTheory.Polynomial.Cyclotomic.Basic` `Mathlib.RingTheory.Polynomial.Cyclotomic.Expand` `Mathlib.RingTheory.Polynomial.Cyclotomic.Roots` `Mathlib.RingTheory.Polynomial.Eisenstein.IsIntegral` `Mathlib.RingTheory.RootsOfUnity.AlgebraicallyClosed` `Mathlib.RingTheory.RootsOfUnity.Complex` `Mathlib.Topology.Algebra.PontryaginDual` `Mathlib.Topology.MetricSpace.GromovHausdorff` `Mathlib.Topology.MetricSpace.HolderNorm` `Mathlib.Topology.MetricSpace.Holder` `Mathlib.Topology.MetricSpace.Kuratowski`</details>|3|\n| `Mathlib.Analysis.SpecialFunctions.Complex.Arg` `Mathlib.Analysis.SpecialFunctions.Trigonometric.Angle`|4|\n| `Mathlib.Analysis.Normed.Group.AddCircle`|40|\n\n</details>\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ coe_fract`\n`+ exists_norm_mk'_lt`\n`+ exists_norm_mul_lt`\n`+ groupSeminorm`\n`+ instNorm`\n`+ instNormedCommGroup`\n`+ instSeminormedCommGroup`\n`+ instance : NormedAddCommGroup (AddCircle p) := QuotientAddGroup.instNormedAddCommGroup _`\n`+ isGLB_infDist`\n`+ le_infDist`\n`+ le_norm_iff`\n`+ nhds_one_hasBasis`\n`+ norm_eq_groupSeminorm`\n`+ norm_eq_infDist`\n`+ norm_lt_iff`\n`+ norm_mk`\n`+ norm_mk'`\n`+ norm_mk'_eq_zero`\n`+ norm_mk'_eq_zero_iff_mem_closure`\n`+ norm_mk'_le_norm`\n`+ norm_mk_eq_zero`\n`+ norm_mk_eq_zero_iff_mem_closure`\n`+ norm_mk_le_norm`\n`- QuotientAddGroup.norm_eq_infDist`\n`- QuotientAddGroup.norm_lt_iff`\n`- QuotientAddGroup.norm_mk`\n`- instance : NormedAddCommGroup (AddCircle p)`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n</details>\n\n---\n\n<details><summary>Decrease in tech debt: (relative, absolute) = (2.00, 0.00)</summary>\n\n|Current number|Change|Type|\n|-:|:-:|:-|\n|1219|-2|erw|\n\nCurrent commit [b2ab40e25d](https://github.com/leanprover-community/mathlib4/commit/b2ab40e25df013dce1cedeaa8893dbac46683bf9)\nReference commit [07e5270ff5](https://github.com/leanprover-community/mathlib4/commit/07e5270ff5cec4da775e386ed1e7bd50f9334c25)\n\nYou can run this locally as\n```\n./scripts/technical-debt-metrics.sh pr_summary\n```\n* The `relative` value is the weighted *sum* of the differences with weight given by the *inverse* of the current value of the statistic.\n* The `absolute` value is the `relative` value divided by the total sum of the inverses of the current values (i.e. the weighted *average* of the differences).\n</details>\n",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c53K273",
              "createdAt": "2025-02-02T10:15:17Z",
              "source": {
                "id": "PR_kwDOFcwZ1c6Jwcix",
                "title": "refactor(Normed/Group/Quotient): generalise to non-abelian groups ",
                "url": "https://github.com/leanprover-community/mathlib4/pull/21342"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6obQ2VzwAAAAPCwbYu",
              "createdAt": "2025-02-02T10:21:09Z",
              "label": {
                "id": "MDU6TGFiZWwzMjg4OTQyMDg2",
                "name": "blocked-by-other-PR"
              }
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c53K4FO",
              "createdAt": "2025-02-02T10:21:33Z",
              "source": {
                "id": "PR_kwDOFcwZ1c6DFNPN",
                "title": "feat: group markings",
                "url": "https://github.com/leanprover-community/mathlib4/pull/19475"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6obQ2VzwAAAAPCwdrm",
              "createdAt": "2025-02-02T10:26:05Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJeVg",
                "name": "t-analysis"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c6obQ2VzwAAAAPCxi82",
              "createdAt": "2025-02-02T12:54:46Z"
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6obQ2VzwAAAAPCyBVz",
              "createdAt": "2025-02-02T13:55:09Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABwbfWPw",
                "name": "large-import"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c6obQ2VzwAAAAPDCjLg",
              "createdAt": "2025-02-03T07:20:38Z"
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6obQ2VzwAAAAPDCkjF",
              "createdAt": "2025-02-03T07:21:09Z",
              "label": {
                "id": "MDU6TGFiZWwzMjg4OTQyMDg2",
                "name": "blocked-by-other-PR"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6cxPxi",
              "createdAt": "2025-02-03T07:21:10Z",
              "body": "This PR/issue depends on:\n* ~~leanprover-community/mathlib4#21340~~\nBy **[Dependent Issues](https://github.com/z0al/dependent-issues)** (🤖). Happy coding!\n<!-- By Dependent Issues (Action) - DO NOT REMOVE -->",
              "author": {
                "login": "mathlib4-dependent-issues-bot"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c6obQ2VzwAAAAPDCyMw",
              "createdAt": "2025-02-03T07:26:34Z"
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6obQ2VzwAAAAPNBwoA",
              "createdAt": "2025-02-16T16:51:03Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c6obQ2VzwAAAAPNEWV3",
              "createdAt": "2025-02-16T22:12:47Z"
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6obQ2VzwAAAAPNEWtH",
              "createdAt": "2025-02-16T22:13:29Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6evcJt",
              "createdAt": "2025-02-17T14:06:37Z",
              "body": "Thanks a lot for working on this! How hard would it be to generalize `QuotientGroup.groupSeminorm` to a pushforward of group seminorms along surjective group morphisms? I'm asking because in functional analysis you sometimes have a surjective linear map from a normed space to a vector space, and you endow the codomain with the norm coming from the identification with the quotient. But I'd rather have a general pushforward operation.",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6exSri",
              "createdAt": "2025-02-17T17:24:21Z",
              "body": "Yes, that's definitely possible. That sound like a separate PR though.",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6e4toN",
              "createdAt": "2025-02-18T13:07:10Z",
              "body": "To be clear, my point was that I'd rather have the quotient case be a special case of the pushforward rather than building the pushforward from the quotient. But indeed we can leave that generalization for later, although I think generalizing the definition of the seminorm in itself is almost immediate.",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6e5ihQ",
              "createdAt": "2025-02-18T14:30:40Z",
              "body": "@ADedecker do you want to self-assign this?",
              "author": {
                "login": "j-loreaux"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6dfJ2P",
              "createdAt": "2025-02-25T19:24:18Z",
              "body": "👍 ",
              "author": {
                "login": "Whysoserioushah"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6d_LoU",
              "createdAt": "2025-02-28T12:15:57Z",
              "body": "",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6d_L-j",
              "createdAt": "2025-02-28T12:16:42Z",
              "body": "",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "e542d6a1a47f79e205dcfd3a305b6f9c5db845c5"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "b2ab40e25df013dce1cedeaa8893dbac46683bf9"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c6obQ2VzwAAAAPbRtRv",
              "createdAt": "2025-03-04T15:18:31Z"
            }
          ]
        }
      }
    }
  }
}
