{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 16,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "BoltonBailey"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "A lemma to reexpress card_units without subtraction.\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 2,
        "closed": true,
        "closedAt": "2023-07-19T11:59:35Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5gvjzD",
              "body": "See [here](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/not_dvd_pow_sub_one/near/371786800)",
              "createdAt": "2023-07-06T06:41:40Z",
              "author": {
                "login": "BoltonBailey"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5hq6t5",
              "body": "> The changes here are fine (modulo the suggestion) but I would prefer to develop the API for `Nat.card` rather than `Fintype.card`.\r\n> \r\n> I presume you have an application: could you use `Nat.card` there?\r\n\r\nI am interested in proving \r\n```\r\ntheorem subgroup_of_units_card_ne_zero {F : Type} [Field F] [Fintype F]\r\n    (G : Subgroup (Units (F))) : (Fintype.card G : F) â‰  0\r\n```\r\nI suppose I could just drop in `Nat.card`, but the `Fintype` stipulation is still necessary to make the theorem true.",
              "createdAt": "2023-07-17T18:16:04Z",
              "author": {
                "login": "BoltonBailey"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5hreA1",
              "body": "The noncomputable Fintype instance [caused problems](https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/How.20to.20make.20InferInstance.20ignore.20my.20new.20instance/near/376134852), the fact that I would have to go around locally removing the instance to get other code to work again makes me skeptical that it's the right decision to add it in the first place, especially considering whoever authored the original `card_units` lemma didn't either. We can talk more about it if the reviewers think it's really necessary.",
              "createdAt": "2023-07-17T19:58:40Z",
              "author": {
                "login": "BoltonBailey"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5h3Vei",
              "body": "Thanks!\r\n\r\nbors merge",
              "createdAt": "2023-07-19T11:17:43Z",
              "author": {
                "login": "ocfnash"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5h3jim",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/5598443186/jobs/10238086517)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/5598443186/jobs/10238086386)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/5598443186/jobs/10238086053)",
              "createdAt": "2023-07-19T11:59:33Z",
              "author": {
                "login": "bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "777235bba3ce84586fc9c2643af26137ef3a8cb1",
                "additions": 7,
                "deletions": 0,
                "committedDate": "2023-07-06T06:39:17Z",
                "author": {
                  "name": "Bolton Bailey",
                  "email": "bolton.bailey@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "a561b9a749d6d1b0d715b7224ed4c89683b8bcf4",
                "additions": 9,
                "deletions": 11,
                "committedDate": "2023-07-17T18:28:44Z",
                "author": {
                  "name": "Bolton Bailey",
                  "email": "bolton.bailey@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "93a44c2eac4ae7e20c83dfa8cf5f014324b373c6",
                "additions": 5,
                "deletions": 0,
                "committedDate": "2023-07-17T18:38:02Z",
                "author": {
                  "name": "Bolton Bailey",
                  "email": "bolton.bailey@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "0b765ac6ae31f5b60591c2e76a6558615f38fa23",
                "additions": 3,
                "deletions": 5,
                "committedDate": "2023-07-17T19:54:47Z",
                "author": {
                  "name": "Bolton Bailey",
                  "email": "bolton.bailey@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "f4549c5744fc6c9dcaca14d2e09ea89c5da8d1ad",
                "additions": 4,
                "deletions": 2,
                "committedDate": "2023-07-19T00:27:05Z",
                "author": {
                  "name": "Bolton Bailey",
                  "email": "bolton.bailey@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "aecc1a52d422e7aa3eb416e4652cef3be284709b",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-07-19T00:27:21Z",
                "author": {
                  "name": "Bolton Bailey",
                  "email": "bolton.bailey@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "4a5e168ff6eae638b7ac92eceba2afe0f49192e3",
                "additions": 2,
                "deletions": 2,
                "committedDate": "2023-07-19T00:34:31Z",
                "author": {
                  "name": "Bolton Bailey",
                  "email": "bolton.bailey@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "0be30c57daf1546b408d5242f7a564e60b600e93",
                "additions": 3,
                "deletions": 4,
                "committedDate": "2023-07-19T00:36:55Z",
                "author": {
                  "name": "Bolton Bailey",
                  "email": "bolton.bailey@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "79da3d120b9dcf9c7efc01387bd2bc4a274c54d4",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-07-19T01:12:47Z",
                "author": {
                  "name": "Bolton Bailey",
                  "email": "bolton.bailey@gmail.com"
                },
                "statusCheckRollup": null
              }
            }
          ]
        },
        "createdAt": "2023-07-06T06:40:32Z",
        "deletions": 7,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/Data/Fintype/Units.lean",
              "additions": 15,
              "deletions": 6
            },
            {
              "path": "Mathlib/FieldTheory/Finite/Basic.lean",
              "additions": 1,
              "deletions": 1
            }
          ]
        },
        "headRefName": "BoltonBailey/card_units_add_one",
        "headRefOid": "79da3d120b9dcf9c7efc01387bd2bc4a274c54d4",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5Uxvgw",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
              "color": "06e039",
              "name": "ready-to-merge"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5bd2Zl",
              "body": "I would still prefer if we could develop the API around the new `Nat.card` rather than the old `Fintype.card`. The problem you encountered with that noncomputable instance I suggested is a great example of the advantages of the new design. (Also, apologies for overlooking this issue when I suggested that problematic instance.)\r\n\r\nThe statement you mention can be stated using `Nat.card` as follows:\r\n```lean\r\ninstance neZero_card_subgroup_units_of_finite_field\r\n    {F : Type} [Finite F] [Field F] (G : Subgroup $ Units F) : NeZero (Nat.card G : F) := by\r\n  sorry\r\n```\r\n\r\nHaving said all this, the changes here do improve the existing proof of `Fintype.card_units` so I'd be happy to merge them after the suggestions have been applied.",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-07-18T09:13:09Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 5738,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5bVLsT",
              "body": "The changes here are fine (modulo the suggestion) but I would prefer to develop the API for `Nat.card` rather than `Fintype.card`.\r\n\r\nI presume you have an application: could you use `Nat.card` there?",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-07-17T08:42:57Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5bZhs7",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "BoltonBailey"
              },
              "submittedAt": "2023-07-17T18:22:54Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5bZkn_",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "BoltonBailey"
              },
              "submittedAt": "2023-07-17T18:29:27Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5bd2Zl",
              "body": "I would still prefer if we could develop the API around the new `Nat.card` rather than the old `Fintype.card`. The problem you encountered with that noncomputable instance I suggested is a great example of the advantages of the new design. (Also, apologies for overlooking this issue when I suggested that problematic instance.)\r\n\r\nThe statement you mention can be stated using `Nat.card` as follows:\r\n```lean\r\ninstance neZero_card_subgroup_units_of_finite_field\r\n    {F : Type} [Finite F] [Field F] (G : Subgroup $ Units F) : NeZero (Nat.card G : F) := by\r\n  sorry\r\n```\r\n\r\nHaving said all this, the changes here do improve the existing proof of `Fintype.card_units` so I'd be happy to merge them after the suggestions have been applied.",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-07-18T09:13:09Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5bjpOz",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "BoltonBailey"
              },
              "submittedAt": "2023-07-19T00:26:56Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5bjqEv",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "BoltonBailey"
              },
              "submittedAt": "2023-07-19T00:33:19Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5bjqVn",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "BoltonBailey"
              },
              "submittedAt": "2023-07-19T00:35:14Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5LZx8P",
                    "body": "How about:\r\n```suggestion\r\ntheorem Fintype.card_eq_card_units_add_one [GroupWithZero Î±] [Fintype Î±] :\r\n    Fintype.card Î± = Fintype.card Î±Ë£ + 1 := by\r\n  rw [Fintype.card_units, Nat.sub_add_cancel Fintype.card_pos]\r\n```\r\nNote that this drops the `[Fintype Î±Ë£]` argument because this follows from `[Fintype Î±]` provided we also add the following:\r\n```lean\r\nnoncomputable instance [Monoid Î±] [Fintype Î±] : Fintype Î±Ë£ := Fintype.ofFinite Î±Ë£\r\n```\r\nIn fact that should go above `Fintype.card_units` so that the `[Fintype Î±Ë£]` argument there can also be dropped.",
                    "createdAt": "2023-07-17T08:42:27Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5LccVJ",
                    "body": "@ocfnash Even better would have been to reprove `card_units` using `card_units_add_one`, that way we could use the cancellation lemma without the condition. Are we allowed to modify ported theorem proofs?",
                    "createdAt": "2023-07-17T18:22:54Z",
                    "author": {
                      "login": "BoltonBailey"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5Lcd8n",
                    "body": "(I just went ahead and did it, I assume I'll be told if it's a problem)",
                    "createdAt": "2023-07-17T18:29:27Z",
                    "author": {
                      "login": "BoltonBailey"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5LfK1S",
                    "body": "Here and elsewhere, you should replace `[Fintype Î±Ë£]` with `[DecidableEq Î±]`. I also think the name should be tweaked, as in:\r\n```suggestion\r\ntheorem Fintype.card_eq_card_units_add_one [GroupWithZero Î±] [Fintype Î±] [DecidableEq Î±] :\r\n```",
                    "createdAt": "2023-07-18T08:56:21Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5Liz38",
                    "body": "Wait, do we really want to do change the `[Finite (Units alpha)]` to `[DecidableEq alpha]`? This is making a stronger assumption, why should we do that when it's unnecessary? @ocfnash ",
                    "createdAt": "2023-07-19T00:33:19Z",
                    "author": {
                      "login": "BoltonBailey"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5Li0EP",
                    "body": "Or can we infer DecidableEq from Fintype on the units?",
                    "createdAt": "2023-07-19T00:35:14Z",
                    "author": {
                      "login": "BoltonBailey"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5LfNjk",
                    "body": "You should use either `Fintype` and `Fintype.card` (old) or `Finite` and `Nat.card` (new) but not a mixture. So this should be:\r\n```suggestion\r\ntheorem Nat.card_eq_card_units_add_one [GroupWithZero Î±] [Finite Î±] :\r\n    Nat.card Î± = Nat.card Î±Ë£ + 1 := by\r\n  have : Fintype Î± := Fintype.ofFinite Î±\r\n  classical\r\n    rw [Nat.card_eq_fintype_card, Nat.card_eq_fintype_card, Fintype.card_eq_card_units_add_one]\r\n```",
                    "createdAt": "2023-07-18T09:04:52Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5LizQW",
                    "body": "Ok got it, thanks!",
                    "createdAt": "2023-07-19T00:26:56Z",
                    "author": {
                      "login": "BoltonBailey"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjgwMzA1OTk=",
              "login": "BoltonBailey"
            },
            {
              "id": "MDQ6VXNlcjc3MzQzNjQ=",
              "login": "ocfnash"
            },
            {
              "id": "MDQ6VXNlcjQ3Nzk1Ng==",
              "login": "kim-em"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": null,
        "title": "[Merged by Bors] - feat: add card_units_add_one lemma",
        "updatedAt": "2023-07-19T11:59:39Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/5738",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "777235bba3ce84586fc9c2643af26137ef3a8cb1"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5gvjzD",
              "createdAt": "2023-07-06T06:41:40Z",
              "body": "See [here](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/not_dvd_pow_sub_one/near/371786800)",
              "author": {
                "login": "BoltonBailey"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5qvzZ0zwAAAAJE_ceT",
              "createdAt": "2023-07-06T19:44:48Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5qvzZ0zwAAAAJFJbCf",
              "createdAt": "2023-07-07T02:57:10Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABMtntmA",
                "name": "new-feature"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5bVLsT",
              "createdAt": "2023-07-17T08:42:27Z",
              "body": "The changes here are fine (modulo the suggestion) but I would prefer to develop the API for `Nat.card` rather than `Fintype.card`.\r\n\r\nI presume you have an application: could you use `Nat.card` there?",
              "author": {
                "login": "ocfnash"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5qvzZ0zwAAAAJKNIbk",
              "createdAt": "2023-07-17T08:43:28Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5qvzZ0zwAAAAJKNIbn",
              "createdAt": "2023-07-17T08:43:28Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5hq6t5",
              "createdAt": "2023-07-17T18:16:04Z",
              "body": "> The changes here are fine (modulo the suggestion) but I would prefer to develop the API for `Nat.card` rather than `Fintype.card`.\r\n> \r\n> I presume you have an application: could you use `Nat.card` there?\r\n\r\nI am interested in proving \r\n```\r\ntheorem subgroup_of_units_card_ne_zero {F : Type} [Field F] [Fintype F]\r\n    (G : Subgroup (Units (F))) : (Fintype.card G : F) â‰  0\r\n```\r\nI suppose I could just drop in `Nat.card`, but the `Fintype` stipulation is still necessary to make the theorem true.",
              "author": {
                "login": "BoltonBailey"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "a561b9a749d6d1b0d715b7224ed4c89683b8bcf4"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "93a44c2eac4ae7e20c83dfa8cf5f014324b373c6"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "0b765ac6ae31f5b60591c2e76a6558615f38fa23"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5hreA1",
              "createdAt": "2023-07-17T19:58:40Z",
              "body": "The noncomputable Fintype instance [caused problems](https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/How.20to.20make.20InferInstance.20ignore.20my.20new.20instance/near/376134852), the fact that I would have to go around locally removing the instance to get other code to work again makes me skeptical that it's the right decision to add it in the first place, especially considering whoever authored the original `card_units` lemma didn't either. We can talk more about it if the reviewers think it's really necessary.",
              "author": {
                "login": "BoltonBailey"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5qvzZ0zwAAAAJKx7gy",
              "createdAt": "2023-07-18T02:07:19Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5qvzZ0zwAAAAJKx7g2",
              "createdAt": "2023-07-18T02:07:19Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5bd2Zl",
              "createdAt": "2023-07-18T08:56:20Z",
              "body": "I would still prefer if we could develop the API around the new `Nat.card` rather than the old `Fintype.card`. The problem you encountered with that noncomputable instance I suggested is a great example of the advantages of the new design. (Also, apologies for overlooking this issue when I suggested that problematic instance.)\r\n\r\nThe statement you mention can be stated using `Nat.card` as follows:\r\n```lean\r\ninstance neZero_card_subgroup_units_of_finite_field\r\n    {F : Type} [Finite F] [Field F] (G : Subgroup $ Units F) : NeZero (Nat.card G : F) := by\r\n  sorry\r\n```\r\n\r\nHaving said all this, the changes here do improve the existing proof of `Fintype.card_units` so I'd be happy to merge them after the suggestions have been applied.",
              "author": {
                "login": "ocfnash"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5qvzZ0zwAAAAJK-p1A",
              "createdAt": "2023-07-18T09:13:59Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5qvzZ0zwAAAAJK-p1I",
              "createdAt": "2023-07-18T09:13:59Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "f4549c5744fc6c9dcaca14d2e09ea89c5da8d1ad"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "aecc1a52d422e7aa3eb416e4652cef3be284709b"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "4a5e168ff6eae638b7ac92eceba2afe0f49192e3"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "0be30c57daf1546b408d5242f7a564e60b600e93"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "79da3d120b9dcf9c7efc01387bd2bc4a274c54d4"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5qvzZ0zwAAAAJLgzUJ",
              "createdAt": "2023-07-19T01:19:06Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5qvzZ0zwAAAAJLgzUa",
              "createdAt": "2023-07-19T01:19:06Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5qvzZ0zwAAAAJLhOj1",
              "createdAt": "2023-07-19T01:33:02Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5h3Vei",
              "createdAt": "2023-07-19T11:17:43Z",
              "body": "Thanks!\r\n\r\nbors merge",
              "author": {
                "login": "ocfnash"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5qvzZ0zwAAAAJLxzQ0",
              "createdAt": "2023-07-19T11:17:55Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
                "name": "ready-to-merge"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5h3jim",
              "createdAt": "2023-07-19T11:59:33Z",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/5598443186/jobs/10238086517)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/5598443186/jobs/10238086386)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/5598443186/jobs/10238086053)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c5qvzZ0zwAAAAJLzMb_",
              "createdAt": "2023-07-19T11:59:36Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c5qvzZ0zwAAAAJLzMlS",
              "createdAt": "2023-07-19T11:59:39Z"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5OB_JI",
              "createdAt": "2023-08-19T18:03:07Z",
              "source": {
                "id": "PR_kwDOFcwZ1c5XqCXB",
                "title": "[Merged by Bors] - feat: add theorem about nodal on Subgroup",
                "url": "https://github.com/leanprover-community/mathlib4/pull/6495"
              }
            }
          ]
        }
      }
    }
  }
}
