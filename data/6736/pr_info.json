{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 11,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "linesthatinterlace"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "See also the poll at https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.236736.20Bool.20consistency.2E/near/387566483 and the surrounding discussion.\r\n\r\n---\r\nIn some equivs that use Bool, \"false\" corresponds to \"the thing on the left\" and \"true\" corresponds to the \"thing on the right\". But in a couple of instances, this is implemented the opposite way. This can lead to some footguns unnecssarily. This patch changes the definition of `sumEquivSigmaBool` and `boolArrowEquivProd` in order to make them consistent.\r\n\r\nI think it would also be good to add the \"twist\" Equiv.Perm for Bool given by `not`, but that should probably be a separate PR.\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 3,
        "closed": true,
        "closedAt": "2023-09-06T13:05:37Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5kve42",
              "body": "Maybe so. Essentially it's an endianness question I think on some level, or a related thing. I feel quite strongly that the second is more natural because e.g. it somehow corresponds also we the Fin 2/Bool equiv. false < true feels like it must must always be true and I essentially feel that left < right is \"right\", too, c.f. Sum.lex.",
              "createdAt": "2023-08-23T15:26:14Z",
              "author": {
                "login": "linesthatinterlace"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5lAOWY",
              "body": "@linesthatinterlace I note you have a number of unlabelled PRs. Please try to keep at least one of `awaiting-review` / `awaiting-author` / `WIP` on your PRs, and up to date. PRs without `awaiting-review` will not appear on the #queue, and many reviewers will thus never see them.",
              "createdAt": "2023-08-27T03:13:42Z",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5lAPN2",
              "body": "Oh, I'm so sorry - I didn't know that was the procedure (and I'm afraid the last week I spent in approximate desolation after a family tragedy). I'll get on it and fix them soon.",
              "createdAt": "2023-08-27T03:43:15Z",
              "author": {
                "login": "linesthatinterlace"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5lAPRA",
              "body": "Sorry, that was probably a bit direct.",
              "createdAt": "2023-08-27T03:45:07Z",
              "author": {
                "login": "linesthatinterlace"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5lBFme",
              "body": "@semorrison Do you have any advice for how to get my PRs seen and reviewed? It would be good to get mine moving but I'm not sure how.",
              "createdAt": "2023-08-27T22:58:30Z",
              "author": {
                "login": "linesthatinterlace"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5lCi5D",
              "body": "Making sure that they have a green tick from CI and the `awaiting-review` label is essential.\n\n(There is a #queue linkifier on zulip that many reviewers use, that filters for those conditions. Anyone can use it!)\n\nAfter that, I'd recommend creating a topic in the \"PR reviews\" stream, with a link to your PR, a short description, and a request for review. That often gets people moving! :-)\n\nBest of luck. \n\n",
              "createdAt": "2023-08-28T07:21:27Z",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5lEeE4",
              "body": "The Zulip discussion has produced good evidence that my changes are the way to go. In particular, that very poll chose the second option (https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.236736.20Bool.20consistency.2E/near/387566483), and, perhaps more persuasively, the equivalent Equivs for Fin 2 have 0 < 1: e.g. `piFinTwoEquiv`.\r\n\r\nI think this is thus ready to merge.",
              "createdAt": "2023-08-28T13:07:51Z",
              "author": {
                "login": "linesthatinterlace"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5lzfob",
              "body": "Thanks :tada:\r\n\r\nbors merge",
              "createdAt": "2023-09-06T09:31:43Z",
              "author": {
                "login": "jcommelin"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5lzyxo",
              "body": "Build failed (retrying...):\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6095750110/job/16539947905)",
              "createdAt": "2023-09-06T10:25:15Z",
              "author": {
                "login": "bors"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5l0uuW",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6096402407/job/16541883448)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6096402407/job/16541882994)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6096402407/job/16541883224)",
              "createdAt": "2023-09-06T13:05:36Z",
              "author": {
                "login": "bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "fc2d8f7b27651165c03e1b8c95ae87e1e9a61714",
                "additions": 6,
                "deletions": 6,
                "committedDate": "2023-08-22T14:37:55Z",
                "author": {
                  "name": "Wrenna Robson",
                  "email": "wren.robson@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "0639ab0b9d2dd8c4cc17dbeae5461c1e5ec5c343",
                "additions": 7,
                "deletions": 7,
                "committedDate": "2023-08-29T08:23:30Z",
                "author": {
                  "name": "Wrenna Robson",
                  "email": "wren.robson@gmail.com"
                },
                "statusCheckRollup": null
              }
            }
          ]
        },
        "createdAt": "2023-08-22T16:41:33Z",
        "deletions": 11,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/Logic/Equiv/Basic.lean",
              "additions": 9,
              "deletions": 9
            },
            {
              "path": "Mathlib/Logic/Equiv/Fin.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Order/Atoms.lean",
              "additions": 1,
              "deletions": 1
            }
          ]
        },
        "headRefName": "boolProd_parity",
        "headRefOid": "0639ab0b9d2dd8c4cc17dbeae5461c1e5ec5c343",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5YhNb6",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
              "color": "06e039",
              "name": "ready-to-merge"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5e3Pnp",
              "body": "Ugh, this one seems hard to resolve. One the one hand, `false < true` so false should come first. On the other hand, `if b then when_true else when_false` puts things in the other order, and `cond` copies that. Maybe we need a zulip poll like:\r\n\r\n> Which of the following equivs `e : α × α ≃ (Bool → α)` feels canonical to you?\r\n> * `a = e (a, b) true, b = e (a, b) false`\r\n> * `a = e (a, b) false, b = e (a, b) true`",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-08-23T13:00:34Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 6736,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5e3Pnp",
              "body": "Ugh, this one seems hard to resolve. One the one hand, `false < true` so false should come first. On the other hand, `if b then when_true else when_false` puts things in the other order, and `cond` copies that. Maybe we need a zulip poll like:\r\n\r\n> Which of the following equivs `e : α × α ≃ (Bool → α)` feels canonical to you?\r\n> * `a = e (a, b) true, b = e (a, b) false`\r\n> * `a = e (a, b) false, b = e (a, b) true`",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-08-23T13:00:34Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": []
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjM0MDI1NTky",
              "login": "linesthatinterlace"
            },
            {
              "id": "MDQ6VXNlcjQ3Nzk1Ng==",
              "login": "kim-em"
            },
            {
              "id": "MDQ6VXNlcjU2MzY3MDU=",
              "login": "jcommelin"
            },
            {
              "id": "MDQ6VXNlcjQyNTI2MA==",
              "login": "eric-wieser"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": null,
        "title": "[Merged by Bors] - fix(Logic/Equiv/Basic): Make use of Bool in equivs consistent.",
        "updatedAt": "2023-09-06T13:05:58Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/6736",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "fc2d8f7b27651165c03e1b8c95ae87e1e9a61714"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5e3Pnp",
              "createdAt": "2023-08-23T13:00:34Z",
              "body": "Ugh, this one seems hard to resolve. One the one hand, `false < true` so false should come first. On the other hand, `if b then when_true else when_false` puts things in the other order, and `cond` copies that. Maybe we need a zulip poll like:\r\n\r\n> Which of the following equivs `e : α × α ≃ (Bool → α)` feels canonical to you?\r\n> * `a = e (a, b) true, b = e (a, b) false`\r\n> * `a = e (a, b) false, b = e (a, b) true`",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5kve42",
              "createdAt": "2023-08-23T15:26:14Z",
              "body": "Maybe so. Essentially it's an endianness question I think on some level, or a related thing. I feel quite strongly that the second is more natural because e.g. it somehow corresponds also we the Fin 2/Bool equiv. false < true feels like it must must always be true and I essentially feel that left < right is \"right\", too, c.f. Sum.lex.",
              "author": {
                "login": "linesthatinterlace"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5lAOWY",
              "createdAt": "2023-08-27T03:13:42Z",
              "body": "@linesthatinterlace I note you have a number of unlabelled PRs. Please try to keep at least one of `awaiting-review` / `awaiting-author` / `WIP` on your PRs, and up to date. PRs without `awaiting-review` will not appear on the #queue, and many reviewers will thus never see them.",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5u-WGgzwAAAAJgB652",
              "createdAt": "2023-08-27T03:14:42Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5lAPN2",
              "createdAt": "2023-08-27T03:43:15Z",
              "body": "Oh, I'm so sorry - I didn't know that was the procedure (and I'm afraid the last week I spent in approximate desolation after a family tragedy). I'll get on it and fix them soon.",
              "author": {
                "login": "linesthatinterlace"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5lAPRA",
              "createdAt": "2023-08-27T03:45:07Z",
              "body": "Sorry, that was probably a bit direct.",
              "author": {
                "login": "linesthatinterlace"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5lBFme",
              "createdAt": "2023-08-27T22:58:30Z",
              "body": "@semorrison Do you have any advice for how to get my PRs seen and reviewed? It would be good to get mine moving but I'm not sure how.",
              "author": {
                "login": "linesthatinterlace"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5lCi5D",
              "createdAt": "2023-08-28T07:21:27Z",
              "body": "Making sure that they have a green tick from CI and the `awaiting-review` label is essential.\n\n(There is a #queue linkifier on zulip that many reviewers use, that filters for those conditions. Anyone can use it!)\n\nAfter that, I'd recommend creating a topic in the \"PR reviews\" stream, with a link to your PR, a short description, and a request for review. That often gets people moving! :-)\n\nBest of luck. \n\n",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5lEeE4",
              "createdAt": "2023-08-28T13:07:51Z",
              "body": "The Zulip discussion has produced good evidence that my changes are the way to go. In particular, that very poll chose the second option (https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.236736.20Bool.20consistency.2E/near/387566483), and, perhaps more persuasively, the equivalent Equivs for Fin 2 have 0 < 1: e.g. `piFinTwoEquiv`.\r\n\r\nI think this is thus ready to merge.",
              "author": {
                "login": "linesthatinterlace"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "0639ab0b9d2dd8c4cc17dbeae5461c1e5ec5c343"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5lzfob",
              "createdAt": "2023-09-06T09:31:43Z",
              "body": "Thanks :tada:\r\n\r\nbors merge",
              "author": {
                "login": "jcommelin"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5u-WGgzwAAAAJlirmw",
              "createdAt": "2023-09-06T09:31:55Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
                "name": "ready-to-merge"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5u-WGgzwAAAAJlirp5",
              "createdAt": "2023-09-06T09:31:56Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5lzyxo",
              "createdAt": "2023-09-06T10:25:15Z",
              "body": "Build failed (retrying...):\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6095750110/job/16539947905)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5l0uuW",
              "createdAt": "2023-09-06T13:05:36Z",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6096402407/job/16541883448)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6096402407/job/16541882994)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6096402407/job/16541883224)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c5u-WGgzwAAAAJlrEK8",
              "createdAt": "2023-09-06T13:05:38Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c5u-WGgzwAAAAJlrFDs",
              "createdAt": "2023-09-06T13:05:58Z"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            }
          ]
        }
      }
    }
  }
}
