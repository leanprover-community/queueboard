{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 547,
        "assignees": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjIxMTY1NzA=",
              "login": "Vierkantor"
            }
          ]
        },
        "author": {
          "login": "adomani"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "This PR is a short implementation of the `move_add` tactic.\r\n\r\nIt is intended as a preliminary port, featuring the reordering strategy and a very naïve proof-algorithm.\r\n\r\nA more refined version with a more robust proof will appear in a later PR.\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 4,
        "closed": true,
        "closedAt": "2023-10-09T13:35:29Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5lAVeC",
              "body": "Scott, thank you very much for taking the time to review and leave comments!  I hope that the extended docs make it easier to understand what the tactic does.",
              "createdAt": "2023-08-27T06:45:30Z",
              "author": {
                "login": "adomani"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5oFJRn",
              "body": "I do not know how to please the linter: the last couple of failures of CI are due to\r\n```\r\nDetect changes to header SHAs / Add annotations (pull_request)\r\n```\r\nbut re-running the job does not seem to change much.",
              "createdAt": "2023-10-04T05:49:24Z",
              "author": {
                "login": "adomani"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5oGQNE",
              "body": "> I do not know how to please the linter: the last couple of failures of CI are due to\r\n> \r\n> ```\r\n> Detect changes to header SHAs / Add annotations (pull_request)\r\n> ```\r\n> \r\n> but re-running the job does not seem to change much.\r\n\r\nNo idea either. I've opened a Zulip thread: https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Build.20failed.3A.20detect.20changes.20to.20header.20SHAs",
              "createdAt": "2023-10-04T09:16:31Z",
              "author": {
                "login": "Vierkantor"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5oO5Iu",
              "body": "🚀 Pull request has been placed on the maintainer queue by Vierkantor.",
              "createdAt": "2023-10-05T11:53:56Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5oeXtr",
              "body": "Thanks :tada:\r\n\r\nbors merge",
              "createdAt": "2023-10-09T11:00:22Z",
              "author": {
                "login": "jcommelin"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5ofReK",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6456594805/job/17526396011)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6456594805/job/17526396285)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6456594805/job/17526395353)",
              "createdAt": "2023-10-09T13:35:27Z",
              "author": {
                "login": "bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "ca27f9f6f68a2e0702efb03854877565b418b763",
                "additions": 476,
                "deletions": 0,
                "committedDate": "2023-10-04T13:07:14Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "48dca42b6b84c48efeed4ecb1158ec4cd83235c4",
                "additions": 2,
                "deletions": 1,
                "committedDate": "2023-10-04T13:07:14Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "e2cded11ccf9e13429b8db5c563f80783d7f7627",
                "additions": 5,
                "deletions": 3,
                "committedDate": "2023-10-04T13:07:14Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "47f860fe86ab22074e616a66ee34ba262ab3cf6f",
                "additions": 56,
                "deletions": 2,
                "committedDate": "2023-10-04T13:07:14Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "837f66e7b9547862248fcae97f0a8a3960500910",
                "additions": 23,
                "deletions": 31,
                "committedDate": "2023-10-04T13:07:14Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "d6aaab07dc4f1b4c383e33f0d9eb53e288e1950c",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-10-04T13:07:14Z",
                "author": {
                  "name": "damiano",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "d7fe70f69a81871618008b87f4131eafba7a7a51",
                "additions": 6,
                "deletions": 9,
                "committedDate": "2023-10-04T13:07:14Z",
                "author": {
                  "name": "damiano",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "fcd1cacc170ab1177cf267f21705469b427db4d9",
                "additions": 3,
                "deletions": 2,
                "committedDate": "2023-10-04T13:07:14Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "f55846dabd490dd7226a60d20504d3349cd4285d",
                "additions": 20,
                "deletions": 19,
                "committedDate": "2023-10-04T13:07:14Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "58f7b25b47535223be959ea2924e825ae91e3241",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-10-04T13:07:14Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "43f2f4b5d3dd0ecd5bbf3084072cebad9d505675",
                "additions": 5,
                "deletions": 0,
                "committedDate": "2023-10-04T13:07:14Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "6a35c088e98833aed93d55df9beea9578460b282",
                "additions": 51,
                "deletions": 46,
                "committedDate": "2023-10-04T13:07:14Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "f2e1820922ac34f3051f15248b8ffdf9e81d8756",
                "additions": 17,
                "deletions": 17,
                "committedDate": "2023-10-04T13:07:14Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "8717d46b8f96fcd3bb6d116a6c099f2e3135e311",
                "additions": 28,
                "deletions": 19,
                "committedDate": "2023-10-04T13:07:14Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "805e6308d41d559c7d61cbc6cb097f29064bdc89",
                "additions": 31,
                "deletions": 28,
                "committedDate": "2023-10-04T13:07:14Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "36d0338215e5b77b0b573fad715073ecd977e30e",
                "additions": 3,
                "deletions": 4,
                "committedDate": "2023-10-04T13:07:14Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "3cec535aad2e797c3b76917422578e29339a7563",
                "additions": 10,
                "deletions": 6,
                "committedDate": "2023-10-04T13:07:14Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "70a28108f0e7e4fa2d32cfee02f24462522cfc05",
                "additions": 8,
                "deletions": 8,
                "committedDate": "2023-10-04T13:07:14Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "acf4db3a56a6806ad7905b11cd57793cf958aef1",
                "additions": 8,
                "deletions": 12,
                "committedDate": "2023-10-04T13:07:14Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "21dbd67b2cd68c8680d29c7dbd7e2d60c9fc15a0",
                "additions": 6,
                "deletions": 6,
                "committedDate": "2023-10-04T13:07:14Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "34cba86c59367f7f031f83a08c69b367612a8f65",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-10-04T13:07:14Z",
                "author": {
                  "name": "damiano",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "d0b286376673d5506f3cd42af83d0c94538c7228",
                "additions": 9,
                "deletions": 10,
                "committedDate": "2023-10-04T13:07:14Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "14b48f747ba922a05bd5f702ed9cb644fbb88211",
                "additions": 25,
                "deletions": 27,
                "committedDate": "2023-10-04T13:07:14Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "194528b03e91fee1434e530e050568028d81a393",
                "additions": 6,
                "deletions": 3,
                "committedDate": "2023-10-04T13:07:14Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "55ce2fb8afdaa2a868c474da95c9618fad826968",
                "additions": 6,
                "deletions": 6,
                "committedDate": "2023-10-04T13:07:14Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "1217c47f4f3cce8c5e8b375557c37107261adfc2",
                "additions": 2,
                "deletions": 0,
                "committedDate": "2023-10-04T13:07:14Z",
                "author": {
                  "name": "damiano",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            }
          ]
        },
        "createdAt": "2023-08-14T12:24:22Z",
        "deletions": 0,
        "files": {
          "nodes": [
            {
              "path": "Mathlib.lean",
              "additions": 1,
              "deletions": 0
            },
            {
              "path": "Mathlib/Tactic.lean",
              "additions": 1,
              "deletions": 0
            },
            {
              "path": "Mathlib/Tactic/MoveAdd.lean",
              "additions": 450,
              "deletions": 0
            },
            {
              "path": "test/MoveAdd.lean",
              "additions": 95,
              "deletions": 0
            }
          ]
        },
        "headRefName": "adomani_move_add_short",
        "headRefOid": "1217c47f4f3cce8c5e8b375557c37107261adfc2",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5X4Jx8",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c7mTAET",
              "color": "DA6D43",
              "name": "modifies-tactic-syntax"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
              "color": "06e039",
              "name": "ready-to-merge"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABKAKYew",
              "color": "33DBEC",
              "name": "t-meta"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5fMUWo",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kim-em"
              },
              "submittedAt": "2023-08-27T02:35:42Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5i7GJ6",
              "body": "I'm happy with the changes, thanks! I still don't consider myself experienced enough with Lean 4 metaprogramming to review an entire tactic, so:\r\n\r\nmaintainer merge",
              "state": "APPROVED",
              "author": {
                "login": "Vierkantor"
              },
              "submittedAt": "2023-10-05T11:53:38Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 6576,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": "APPROVED",
        "reviewRequests": {
          "nodes": [
            {
              "requestedReviewer": {
                "id": "MDQ6VXNlcjI1MzE2MTYy",
                "login": "hrmacbeth"
              }
            }
          ]
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5fMUNW",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kim-em"
              },
              "submittedAt": "2023-08-27T02:23:50Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5fMURK",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kim-em"
              },
              "submittedAt": "2023-08-27T02:28:48Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5fMUTm",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kim-em"
              },
              "submittedAt": "2023-08-27T02:31:56Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5fMUUT",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kim-em"
              },
              "submittedAt": "2023-08-27T02:32:38Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5fMUV6",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kim-em"
              },
              "submittedAt": "2023-08-27T02:34:40Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5fMUWo",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kim-em"
              },
              "submittedAt": "2023-08-27T02:35:42Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5fMYo-",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "adomani"
              },
              "submittedAt": "2023-08-27T06:41:38Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5fMYqj",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "adomani"
              },
              "submittedAt": "2023-08-27T06:42:25Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5fMYsl",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "adomani"
              },
              "submittedAt": "2023-08-27T06:43:55Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5fMYt3",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "adomani"
              },
              "submittedAt": "2023-08-27T06:44:43Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5fMZD2",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "adomani"
              },
              "submittedAt": "2023-08-27T06:58:11Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5igrB3",
              "body": "Here's an initial review! I'd like to come back to this in a couple of hours.",
              "state": "APPROVED",
              "author": {
                "login": "Vierkantor"
              },
              "submittedAt": "2023-10-02T13:52:57Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5ih4ON",
              "body": "Some more comments. Hopefully tomorrow I can finish the first round.",
              "state": "COMMENTED",
              "author": {
                "login": "Vierkantor"
              },
              "submittedAt": "2023-10-02T16:24:30Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5iksVG",
              "body": "@Vierkantor, thank you very much for your review!  I started looking at it, but it is getting late!  I will continue tomorrow.\r\n\r\nI will likely end up accepting all your suggestions, but I want to make sure that I actually understand what it is that you are suggesting, so that I learn something!  :-)",
              "state": "COMMENTED",
              "author": {
                "login": "adomani"
              },
              "submittedAt": "2023-10-03T01:07:54Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5ilbhu",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "adomani"
              },
              "submittedAt": "2023-10-03T01:14:15Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5io003",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "Vierkantor"
              },
              "submittedAt": "2023-10-03T10:56:07Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5itl3c",
              "body": "@Vierkantor, thank you very very much for a really thorough review!!\r\n\r\nI am very happy with all of your suggestions: they improved the code in terms of efficiency, readability, clarity.",
              "state": "COMMENTED",
              "author": {
                "login": "adomani"
              },
              "submittedAt": "2023-10-03T23:20:29Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5iuSJz",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "adomani"
              },
              "submittedAt": "2023-10-03T23:40:10Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5ixHqa",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "Vierkantor"
              },
              "submittedAt": "2023-10-04T09:08:34Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5ixH96",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "Vierkantor"
              },
              "submittedAt": "2023-10-04T09:09:13Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5ixJGl",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "Vierkantor"
              },
              "submittedAt": "2023-10-04T09:11:31Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5i7GJ6",
              "body": "I'm happy with the changes, thanks! I still don't consider myself experienced enough with Lean 4 metaprogramming to review an entire tactic, so:\r\n\r\nmaintainer merge",
              "state": "APPROVED",
              "author": {
                "login": "Vierkantor"
              },
              "submittedAt": "2023-10-05T11:53:38Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5N4PWF",
                    "body": "```suggestion\r\nI, DT, already have code for this improvement, but am leaving it for a later PR.\r\n```\r\nI think to the extent we put names in implementation notes we use 3rd person. :-)",
                    "createdAt": "2023-08-27T02:23:50Z",
                    "author": {
                      "login": "kim-em"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5N4Pb3",
                    "body": "I think `Args` is a not good in the name here, as this is uniformly used to refer to the `.app` case.",
                    "createdAt": "2023-08-27T02:28:48Z",
                    "author": {
                      "login": "kim-em"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5N4Ucm",
                    "body": "Changed `Args` to `Inputs`.  I'm happy to accept a different suggestion, if you have one!",
                    "createdAt": "2023-08-27T06:41:38Z",
                    "author": {
                      "login": "adomani"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5N4Pfh",
                    "body": "Just use `#guard`?",
                    "createdAt": "2023-08-27T02:31:56Z",
                    "author": {
                      "login": "kim-em"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5N4Pgv",
                    "body": "Perhaps move these \"internal\" tests to the bottom of the file? Test files are effectively part of the documentation, and its helpful if users can learn how to use the tactic by reading the top of the test file!",
                    "createdAt": "2023-08-27T02:32:38Z",
                    "author": {
                      "login": "kim-em"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5N4UeJ",
                    "body": "I moved these to the other file.",
                    "createdAt": "2023-08-27T06:42:25Z",
                    "author": {
                      "login": "adomani"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5N4PjY",
                    "body": "To be honest, I find this very confusing, and have no idea what the intended behaviour of this tactic is! How many different lists are being reordered here??",
                    "createdAt": "2023-08-27T02:34:40Z",
                    "author": {
                      "login": "kim-em"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5N4Ugh",
                    "body": "I added a more detailed description of the algorithm at the beginning of the other file.  While doing so, I realized how many implicit conventions I was using: I hope that I made enough of them explicit!",
                    "createdAt": "2023-08-27T06:43:55Z",
                    "author": {
                      "login": "adomani"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5N4U6K",
                    "body": "To answer your question, the `move_add` call in this example places (any subset of) its inputs to the right of each sum in which they appear, preserving the calling order.  Thus, `e` will be the rightmost summand of each sum where it appears, the next rightmost term will be `a`, then `f`, and so on.",
                    "createdAt": "2023-08-27T06:58:11Z",
                    "author": {
                      "login": "adomani"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5N4PkM",
                    "body": "I think there needs to be a much clearer and human readable spec of what this is doing. At the moment when I look at the examples I am uniformly confused by the intended semantics.",
                    "createdAt": "2023-08-27T02:35:42Z",
                    "author": {
                      "login": "kim-em"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5N4Uhn",
                    "body": "I gave this a shot: now the doc-module contains more details.\n\nLet me know what is still unclear!\n\n",
                    "createdAt": "2023-08-27T06:44:43Z",
                    "author": {
                      "login": "adomani"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5QB7H5",
                    "body": "```suggestion\r\n* Longer inputs: `move_add [..., a, ..., ← b, ...]`\r\n```",
                    "createdAt": "2023-10-02T13:16:13Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5QB8IM",
                    "body": "When reading this paragraph I found myself wondering exactly when \"likely has the same effect\" applies. Am I right in understanding: `move_add [a, b]` and `move_add [a]; move_add [b]` have the same effect if (and only if?) `a` and `b` do not unify? If so, I would start this paragraph by explaining this assumption.",
                    "createdAt": "2023-10-02T13:19:53Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QESk0",
                    "body": "I always get confused by this, but I think that, while you are almost right, it may not be always the case.  Here is an example:\r\n```lean\r\nexample {a b c : Nat} : a * (a * b + a) + c * (c * b + a) = 0 := by\r\n  move_add [a * _, _ * b]\r\n-- resulting goal:\r\n-- `c * (c * b + a) + a * (a + a * b) = 0`\r\n\r\nexample {a b c : Nat} : a * (a * b + a) + c * (c * b + a) = 0 := by\r\n  move_add [a * _]; move_add [_ * b]\r\n-- resulting goal:\r\n--  `c * (a + c * b) + a * (a * b + a) = 0`\r\n```\r\n\r\nThe main issue is that the matching on *sub*expression happens in some (natural) order, but this order can change if you first move an expression that contains a subexpression that would have matched earlier.",
                    "createdAt": "2023-10-03T00:58:29Z",
                    "author": {
                      "login": "adomani"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QGfHG",
                    "body": "I see, thanks! I suppose we could then write something like \"if the terms matched by `a` and `b` do not overlap\".",
                    "createdAt": "2023-10-03T10:28:04Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QGlWO",
                    "body": "In any case, is it supposed to be an important use of `move_add` to support overlap, or can we simply say that behaviour in case of overlap is unspecified?",
                    "createdAt": "2023-10-03T10:49:00Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QJwYU",
                    "body": "I added the sentence with the non-overlapping case and the unspecified behaviour otherwise.",
                    "createdAt": "2023-10-03T21:00:25Z",
                    "author": {
                      "login": "adomani"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5QB8wv",
                    "body": "```suggestion\r\nvariable {α : Type*} [BEq α]\r\n```",
                    "createdAt": "2023-10-02T13:22:10Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5QB-sU",
                    "body": "Why not pass the name of the operator directly? (Assuming the syntax didn't change in Lean 4: ``move_oper `HAdd.add``.) That seems a lot less prone to accidental misparsing than writing out a small expression.",
                    "createdAt": "2023-10-02T13:28:57Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QKF1-",
                    "body": "I really like this suggestion!",
                    "createdAt": "2023-10-03T22:34:21Z",
                    "author": {
                      "login": "adomani"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5QB_zK",
                    "body": "Instead of `dbg`, why not use a trace option? For example:\r\n```\r\ninitialize registerTraceClass `Tactic.move_oper\r\n\r\n...\r\n\r\ndo\r\n  trace[Tactic.move_oper] m!\"\\nErrors:\\nThe terms in '{unmatched}' were not matched to any atom\"\r\n```",
                    "createdAt": "2023-10-02T13:32:53Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QKOTb",
                    "body": "This is also very nice, thanks!",
                    "createdAt": "2023-10-03T23:09:51Z",
                    "author": {
                      "login": "adomani"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5QCATf",
                    "body": "Is the debug message likely to be very long, and therefore not shown until you opt into it? Otherwise I'd always show as much relevant information as possible when an error occurs.",
                    "createdAt": "2023-10-02T13:34:44Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QKOsg",
                    "body": "There is already an error being reported, showing which user input was not unified with any atom.\r\n\r\nThe debug message gives information about what were the terms before and after unification and how many passes of rewrites have happened.  I think that showing this with every error may be excessive.  It is useful when a bug is found in the tactic to give a hint as to where the issue might be, though.",
                    "createdAt": "2023-10-03T23:12:27Z",
                    "author": {
                      "login": "adomani"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QKPyu",
                    "body": "Here is an example:\r\n```lean\r\nset_option trace.Tactic.move_oper true\r\n\r\nexample (a b : ℕ) : a + b = b + a := by\r\n  move_add [5, ← a, a, 6 + _]  -- `5` and `6 + _` are underlined in red, regardless of the trace\r\n--  Always displayed:\r\n/-\r\nErrors:\r\nThe terms in '[5, 6 + ?m.27046]' were not matched to any atom\r\n-/\r\n\r\n-- output of trace:\r\n/-\r\n[Tactic.move_oper] Matching of input variables:\r\n    * pre-match:  [5, ← a, a, 6 + _]\r\n    * post-match: [(a, true), (a, false)]\r\n    \r\n    ---\r\n    \r\n    Maximum number of iterations: 2\r\n    \r\n    ---\r\n-/\r\n```",
                    "createdAt": "2023-10-03T23:18:23Z",
                    "author": {
                      "login": "adomani"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5QCB8g",
                    "body": "Does this tactic depend on how the operator is associated? That is: does a goal `a + (b + c)` work differently from `(a + b) + c`?",
                    "createdAt": "2023-10-02T13:40:32Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QEKug",
                    "body": "No, the tactic extracts all operands to a list in the \"natural order\" in which they appear and then only acts on the extracted list.  Effectively, it forgets all parentheses.  Thus, `move_add` with no inputs is basically `simp only [add_assoc]`.",
                    "createdAt": "2023-10-03T00:03:04Z",
                    "author": {
                      "login": "adomani"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QGeqr",
                    "body": "Could you add a comment somewhere explaining this?",
                    "createdAt": "2023-10-03T10:26:28Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QJwkF",
                    "body": "I added an `Empty list` item explaining the `simp only [<- add_assoc]` behaviour.",
                    "createdAt": "2023-10-03T21:01:13Z",
                    "author": {
                      "login": "adomani"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5QCCjy",
                    "body": "I'd like a slightly more descriptive name. How about:\r\n```suggestion\r\ndef parseMovements (rws : TSyntax `Lean.Parser.Tactic.rwRuleSeq) (op : Name) (tgt : Expr) :\r\n```",
                    "createdAt": "2023-10-02T13:42:36Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5QCDUg",
                    "body": "Can't you just write:\r\n```suggestion\r\n  stxs.mapM (logErrorAt · \"\") -- underline all non-matching terms\r\n  match dbg, unmatched with\r\n```",
                    "createdAt": "2023-10-02T13:45:20Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QKHYo",
                    "body": "I do not know why, but removing the first `let` gives this error:\r\n```lean\r\ntype mismatch\r\n  List.mapM (fun x ↦ logErrorAt x ((MessageData.ofFormat ∘ format) \"\")) stxs\r\nhas type\r\n  ReaderT Tactic.Context (StateRefT' IO.RealWorld Tactic.State TermElabM) (List Unit) : Type\r\nbut is expected to have type\r\n  TacticM PUnit.{1} : Type\r\n```\r\nRemoving only the second, makes the tactic fail on all tests.\r\n\r\nIt seems that I can remove the `:=` from the `log`s, but not from the `match`.",
                    "createdAt": "2023-10-03T22:43:33Z",
                    "author": {
                      "login": "adomani"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QKOfT",
                    "body": "In any case, with the `trace` this is all much cleaner.  I still could not get rid of the `let` for the `logError`, but the rest looks much tidier!",
                    "createdAt": "2023-10-03T23:11:04Z",
                    "author": {
                      "login": "adomani"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5QCD98",
                    "body": "I don't get the `let` line: why not use `rstx` everywhere? Or is there something I missed here?",
                    "createdAt": "2023-10-02T13:47:33Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QJ5Lg",
                    "body": "I do not understand this entirely myself -- this was code that Alex gave me.  I have tried recycling `rstx` and not defining the intermediate `r` and Lean is not happy: it says that it cannot `GetElem` for `rstx[0]`.\r\n\r\nI think that the issue is that `rstx` is ``rstx: TSyntax `Lean.Parser.Tactic.rwRule`` and the `let r : Syntax` informs Lean that it should forget the typed syntax and treat it as regular `Syntax`.  Honestly, I have a hard time understanding `Syntax` so I may be wrong.",
                    "createdAt": "2023-10-03T21:36:13Z",
                    "author": {
                      "login": "adomani"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QMitH",
                    "body": "I see! The reason is `TSyntax` is a wrapper around `Syntax` and the `let` is somewhat hiding a cast. I guessed so, and I don't know a better way to express it, so this way is fine.",
                    "createdAt": "2023-10-04T09:08:34Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5QCEns",
                    "body": "This is an example of a message that can be displayed with a `trace`.",
                    "createdAt": "2023-10-02T13:49:57Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5QCrmA",
                    "body": "Could you separate this function into multiple parts: one that turns the `rws` into `pairs` (since that is independent of the current target) and one that matches them with the target?",
                    "createdAt": "2023-10-02T15:55:49Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QKBd_",
                    "body": "I really like this suggestion!  In the split, the non-parsing part switched to `MetaM` and went before the actual parsing.",
                    "createdAt": "2023-10-03T22:14:26Z",
                    "author": {
                      "login": "adomani"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5QCscz",
                    "body": "(untested) Slightly more idiomatic should be:\r\n```suggestion\r\n    let atoms := (ops.map Prod.fst).flatten.toList.filter (!isBVar ·)\r\n```",
                    "createdAt": "2023-10-02T15:59:00Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5QCsgq",
                    "body": "Is this not just:\r\n```suggestion\r\n    let (instr, neverMatched) ← pairUp pairs.toList atoms\r\n```",
                    "createdAt": "2023-10-02T15:59:13Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5QCszS",
                    "body": "Could you explain how you choose between List and Array? I had the impression that Array is the right default choice in Lean 4.",
                    "createdAt": "2023-10-02T16:00:18Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QETWE",
                    "body": "I mostly went with the flow: `Expr.getAppArgs` returns an `Array`, but sorting related functions want `List`, so I ended up using both.",
                    "createdAt": "2023-10-03T01:02:34Z",
                    "author": {
                      "login": "adomani"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5QCuFI",
                    "body": "The types are already clear so let's try to write a one-line summary:\r\n```suggestion\r\n/-- Return a sorting key so that all `(a, true)`s are in the list's order\r\nand sorted before all `(a, false)`s, which are also in the list's order.\r\n```",
                    "createdAt": "2023-10-02T16:05:30Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5QCuma",
                    "body": "```suggestion\r\n* elements of `toReorder` that appear with `true` in `instructions` appear at the\r\n```",
                    "createdAt": "2023-10-02T16:07:45Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5QCurN",
                    "body": "Don't forget to indent definition bodies (also below):\r\n```suggestion\r\n  let l := L.length\r\n  match L.find? (Prod.fst · == a) with\r\n  | some (_, b) => if b then - l + (L.indexOf (a, b) : ℤ) else (L.indexOf (a, b) + 1 : ℤ)\r\n  | none => 0\r\n```",
                    "createdAt": "2023-10-02T16:08:05Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5QCuvy",
                    "body": "```suggestion\r\n* similarly, elements of `toReorder` that appear with `false` in `instructions` appear at the\r\n```",
                    "createdAt": "2023-10-02T16:08:24Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5QCvEV",
                    "body": "I like this way of testing! Did you take it from some other file? I do wonder if it shouldn't be in the `test` folder...",
                    "createdAt": "2023-10-02T16:09:51Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QETux",
                    "body": "I am glad that you like it!\r\n\r\nI think that I had it in the `test` folder, but Scott preferred the tests to actually test the tactic, rather than the internals, so I moved it here,",
                    "createdAt": "2023-10-03T01:04:39Z",
                    "author": {
                      "login": "adomani"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QEVqY",
                    "body": "Oh, I see that Scott actually wanted the tests to move to the *bottom* of the test file, not to the *other* file! :facepalm:\r\n\r\nI'll move these tests at the bottom of the (currently) other file when I'll look at this PR when I am less tired!\r\n\r\nEDIT: Done!",
                    "createdAt": "2023-10-03T01:14:15Z",
                    "author": {
                      "login": "adomani"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5QCvSk",
                    "body": "Why not have these variables as parameter to the definition, or reuse them across the definitions in this section?",
                    "createdAt": "2023-10-02T16:10:48Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QKTHa",
                    "body": "I had used `variable ... in` so that in the recursive calls I did not have to repeat them, since they were not changing.\r\n\r\nI have now defined a global variable `op`, but left `R` local to this def, since it is used nowhere else.\r\n\r\nIn general, I am a little worried of making global variable declarations, since they may be incorrectly used in later definitions, but this case seems to work well.",
                    "createdAt": "2023-10-03T23:40:10Z",
                    "author": {
                      "login": "adomani"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QMi7D",
                    "body": "I see! It's actually a nice pattern, I just didn't know that that was the reason.",
                    "createdAt": "2023-10-04T09:09:13Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5QCxn1",
                    "body": "I'd suggest to use the `Qq` library here, if only to document the types of our expressions. Also some tweaking that I discussed in previous comments:\r\n```suggestion\r\n/--  If `sum` is an expression consisting of repeated applications of `op`, then `getAddends`\r\nreturns the Array of those recursively determined arguments whose type is DefEq to `R`. -/\r\npartial def getAddends (R : Q(Type u)) (sum : Q(R)) : MetaM (Array Q(R)) := do\r\n  if sum.isAppOf op then\r\n    let inR ← sum.getAppArgs.filterM fun r => do isDefEq R (← inferType r <|> pure R)\r\n    let new ← inR.mapM (getAddends ·)\r\n    return new.flatten\r\n  else return #[sum]\r\n```",
                    "createdAt": "2023-10-02T16:20:25Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QJwIt",
                    "body": "I have never used `Qq`, and I was not able to get this to work.  I added `import Qq` at the beginning, opened `Qq Meta Elab ...`, defined `universe u`, but cannot find a way to please `Qq`...",
                    "createdAt": "2023-10-03T20:59:31Z",
                    "author": {
                      "login": "adomani"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5QCyN8",
                    "body": "```suggestion\r\npartial def getOps (sum : Expr) : MetaM (Array ((Array Expr) × Expr)) := do\r\n  let summands := ← getAddends op (← inferType sum <|> return sum) sum\r\n  let (first, rest) := if summands.size == 1 then (#[], sum.getExprInputs) else\r\n    (#[(summands, sum)], summands)\r\n  let rest := ← rest.mapM getOps\r\n  return rest.foldl Array.append  first\r\n```",
                    "createdAt": "2023-10-02T16:22:58Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5QCyTb",
                    "body": "```suggestion\r\n  let opargs := sum.getAppArgs\r\n  (opargs.toList.take (opargs.size - 2)).foldl (fun x y => Expr.app x y) sum.getAppFn\r\n```",
                    "createdAt": "2023-10-02T16:23:21Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5QGf69",
                    "body": "```suggestion\r\n/-- `sumList1 op exs` assumes that `op` is the `Name` of a binary operation.\r\nIf `exs` is the list `[e₁, e₂, ..., eₙ]` of `Expr`essions, then `sumList` returns\r\n`op (op( ... op (op e₁ e₂) e₃) ... eₙ)`.\r\n-/\r\npartial\r\ndef sumList1 (prepOp : Expr) : List Expr → Expr\r\n```\r\n(or is `sumList` the intended name?)",
                    "createdAt": "2023-10-03T10:29:34Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QJwC5",
                    "body": "Yes, `sumList` was the intended name, so I switched to using it.",
                    "createdAt": "2023-10-03T20:59:11Z",
                    "author": {
                      "login": "adomani"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5QGgxs",
                    "body": "I don't see any bind in this `do`, so this can be a normal `map`, right? (untested)\r\n```suggestion\r\n  let candidates := sums.map fun (addends, sum) =>\r\n    let reord := reorderUsing addends.toList instructions\r\n    let resummed := sumList1 (prepareOp sum) reord\r\n    if (resummed != sum) then some (sum, resummed) else none\r\n```",
                    "createdAt": "2023-10-03T10:32:35Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QJxCH",
                    "body": "Well-spotted!",
                    "createdAt": "2023-10-03T21:02:48Z",
                    "author": {
                      "login": "adomani"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5QGhA2",
                    "body": "This seems to disagree with your explanation of `move_add []`: here it throws an error instead of reassociating the operator.",
                    "createdAt": "2023-10-03T10:33:30Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QJzcU",
                    "body": "I may have expressed myself badly earlier: `rankSums` \"knows\" if it reassociated, since it compares the subexpression that it finds in the target with the rearranged one (possibly only reassociated).  Thus, if an expression appears in the first factor of `rankSums`, then it has changed, even if only by re-parenthesizing it.  Ultimately, the tactic will try to rewrite the first factor of `rankSums` with the second factor of `rankSums` and prove that the two are equal by the appropriate call of `simp only [add_assoc, add_comm, add_left_comm]`.",
                    "createdAt": "2023-10-03T21:12:07Z",
                    "author": {
                      "login": "adomani"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5QGkXA",
                    "body": "`Expr.replace` has a highly optimized implementation, so let's move it to the outer loop: (untested)\r\n```suggestion\r\n  return tgt.replace (fun e => do\r\n    let (_, new) ← permInstructions.find? (fun (old, new) => e == old)\r\n    return new)\r\n```",
                    "createdAt": "2023-10-03T10:45:25Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QGkeA",
                    "body": "I would expect there is already an implementation of this kind of construction, where we replace a list of expressions with another. But I couldn't find it in the library.\r\n\r\nHowever, if `rankSums` returns a hashmap, we could even write this as `return tgt.replace permInstructions.find?`, so a library function isn't really needed any more.",
                    "createdAt": "2023-10-03T10:45:49Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QJ1eB",
                    "body": "With this version, one of the test fails.  I think that it is important to perform the rewrites sequentially, since rewriting a \"small\" subexpression may invalidate a rewrite of a \"big\" expression that contained it.",
                    "createdAt": "2023-10-03T21:20:27Z",
                    "author": {
                      "login": "adomani"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QMjsX",
                    "body": "I see. Let's add a comment pointing this out:\r\n```suggestion\r\n  let mut permTgt := tgt\r\n  -- We cannot do `Expr.replace` all at once here, we need to follow\r\n  -- the order of the instructions.\r\n  for (old, new) in permInstructions do\r\n    permTgt := permTgt.replace (if · == old then new else none)\r\n  return permTgt\r\n```",
                    "createdAt": "2023-10-04T09:11:31Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5QGmRm",
                    "body": "I'd leave this fact to the documentation of `simpOnlyBuiltins` itself, since it seems likely that this comment goes out of date unnoticed.\r\n```suggestion\r\n```",
                    "createdAt": "2023-10-03T10:51:51Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5QGnF5",
                    "body": "For easier navigation in the file, let's add a signpost here.\r\n```suggestion\r\nThe main driver behind the tactic is `Mathlib.MoveAdd.reorderAndSimp`.\r\n\r\nThe tactic takes the target, replaces the maximal subexpressions whose head symbol is the given\r\n```",
                    "createdAt": "2023-10-03T10:54:25Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5QGnc1",
                    "body": "```suggestion\r\n  let permExpr ← permuteExpr op (← mv.getType'') instr\r\n  -- generate the implication `permutedMv → mv = permutedMv → mv`\r\n  let eqmpr ← mkAppM ``Eq.mpr #[← mkFreshExprMVar (← mkEq (← mv.getType) permExpr)]\r\n  let twoGoals ← mv.apply eqmpr\r\n  guard (twoGoals.length == 2) <|>\r\n    throwError m!\"There should only be 2 goals, instead of {twoGoals.length}\"\r\n  -- `permGoal` is the single goal `mv_permuted`, possibly more operations will be permuted later on\r\n  let permGoal ← twoGoals.filterM fun v => return !(← v.isAssigned)\r\n  match ← (simpGoal (permGoal[1]!) (← move_oper_simpCtx)) with\r\n    | (some x, _) => throwError m!\"'move_oper' could not solve {indentD x.2}\"\r\n    | (none, _) => return permGoal\r\n```",
                    "createdAt": "2023-10-03T10:55:36Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjI5NDY3NzQ1",
              "login": "adomani"
            },
            {
              "id": "MDQ6VXNlcjIxMTY1NzA=",
              "login": "Vierkantor"
            },
            {
              "id": "MDQ6VXNlcjU2MzY3MDU=",
              "login": "jcommelin"
            },
            {
              "id": "MDQ6VXNlcjQ3Nzk1Ng==",
              "login": "kim-em"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": null,
        "title": "[Merged by Bors] - feat(Tactic/MoveAdd): port `move_add`",
        "updatedAt": "2023-10-09T13:35:34Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/6576",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5uP8tazwAAAAJZLIYJ",
              "createdAt": "2023-08-14T12:25:12Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5uP8tazwAAAAJZLIYS",
              "createdAt": "2023-08-14T12:25:12Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7mTAET",
                "name": "modifies-tactic-syntax"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5uP8tazwAAAAJZLIYV",
              "createdAt": "2023-08-14T12:25:12Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKAKYew",
                "name": "t-meta"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5uP8tazwAAAAJZLIYb",
              "createdAt": "2023-08-14T12:25:12Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5uP8tazwAAAAJZL5-j",
              "createdAt": "2023-08-14T12:45:18Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5N9BcN",
              "createdAt": "2023-08-14T15:35:25Z",
              "source": {
                "id": "PR_kwDOFcwZ1c5X5Vo9",
                "title": "chore: `move_add`-driven replacements",
                "url": "https://github.com/leanprover-community/mathlib4/pull/6580"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5fMUNW",
              "createdAt": "2023-08-27T02:23:49Z",
              "body": "",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5fMURK",
              "createdAt": "2023-08-27T02:28:48Z",
              "body": "",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5fMUTm",
              "createdAt": "2023-08-27T02:31:56Z",
              "body": "",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5fMUUT",
              "createdAt": "2023-08-27T02:32:38Z",
              "body": "",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5fMUV6",
              "createdAt": "2023-08-27T02:34:40Z",
              "body": "",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5fMUWo",
              "createdAt": "2023-08-27T02:35:42Z",
              "body": "",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "__typename": "ReviewRequestedEvent",
              "id": "RRE_lADOFcwZ1c5uP8tazwAAAAJgBzSz",
              "createdAt": "2023-08-27T02:36:04Z",
              "requestedReviewer": {
                "id": "MDQ6VXNlcjI1MzE2MTYy",
                "login": "hrmacbeth"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5uP8tazwAAAAJgBzV-",
              "createdAt": "2023-08-27T02:36:22Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5uP8tazwAAAAJgBzV_",
              "createdAt": "2023-08-27T02:36:22Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5lAVeC",
              "createdAt": "2023-08-27T06:45:30Z",
              "body": "Scott, thank you very much for taking the time to review and leave comments!  I hope that the extended docs make it easier to understand what the tactic does.",
              "author": {
                "login": "adomani"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5uP8tazwAAAAJgCv4n",
              "createdAt": "2023-08-27T07:01:15Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5uP8tazwAAAAJgCv4p",
              "createdAt": "2023-08-27T07:01:15Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5uP8tazwAAAAJgCv4t",
              "createdAt": "2023-08-27T07:01:15Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5uP8tazwAAAAJgC2fS",
              "createdAt": "2023-08-27T07:22:29Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "BaseRefChangedEvent"
            },
            {
              "__typename": "BaseRefChangedEvent"
            },
            {
              "__typename": "AssignedEvent",
              "id": "AE_lADOFcwZ1c5uP8tazwAAAAJzY6W1",
              "createdAt": "2023-10-02T13:04:15Z",
              "assignee": {
                "id": "MDQ6VXNlcjIxMTY1NzA=",
                "login": "Vierkantor"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5igrB3",
              "createdAt": "2023-10-02T13:16:13Z",
              "body": "Here's an initial review! I'd like to come back to this in a couple of hours.",
              "author": {
                "login": "Vierkantor"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5ih4ON",
              "createdAt": "2023-10-02T15:55:49Z",
              "body": "Some more comments. Hopefully tomorrow I can finish the first round.",
              "author": {
                "login": "Vierkantor"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5iksVG",
              "createdAt": "2023-10-03T00:03:04Z",
              "body": "@Vierkantor, thank you very much for your review!  I started looking at it, but it is getting late!  I will continue tomorrow.\r\n\r\nI will likely end up accepting all your suggestions, but I want to make sure that I actually understand what it is that you are suggesting, so that I learn something!  :-)",
              "author": {
                "login": "adomani"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5io003",
              "createdAt": "2023-10-03T10:26:28Z",
              "body": "",
              "author": {
                "login": "Vierkantor"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5uP8tazwAAAAJ0CfNM",
              "createdAt": "2023-10-03T10:56:42Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5uP8tazwAAAAJ0CfNT",
              "createdAt": "2023-10-03T10:56:42Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5itl3c",
              "createdAt": "2023-10-03T20:59:11Z",
              "body": "@Vierkantor, thank you very very much for a really thorough review!!\r\n\r\nI am very happy with all of your suggestions: they improved the code in terms of efficiency, readability, clarity.",
              "author": {
                "login": "adomani"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5uP8tazwAAAAJ0f6Ok",
              "createdAt": "2023-10-03T23:49:55Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5uP8tazwAAAAJ0f6Op",
              "createdAt": "2023-10-03T23:49:55Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5uP8tazwAAAAJ0f6Ou",
              "createdAt": "2023-10-03T23:49:55Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5uP8tazwAAAAJ0gDsZ",
              "createdAt": "2023-10-03T23:58:29Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5oFJRn",
              "createdAt": "2023-10-04T05:49:24Z",
              "body": "I do not know how to please the linter: the last couple of failures of CI are due to\r\n```\r\nDetect changes to header SHAs / Add annotations (pull_request)\r\n```\r\nbut re-running the job does not seem to change much.",
              "author": {
                "login": "adomani"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5oGQNE",
              "createdAt": "2023-10-04T09:16:31Z",
              "body": "> I do not know how to please the linter: the last couple of failures of CI are due to\r\n> \r\n> ```\r\n> Detect changes to header SHAs / Add annotations (pull_request)\r\n> ```\r\n> \r\n> but re-running the job does not seem to change much.\r\n\r\nNo idea either. I've opened a Zulip thread: https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Build.20failed.3A.20detect.20changes.20to.20header.20SHAs",
              "author": {
                "login": "Vierkantor"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "ca27f9f6f68a2e0702efb03854877565b418b763"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "48dca42b6b84c48efeed4ecb1158ec4cd83235c4"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "e2cded11ccf9e13429b8db5c563f80783d7f7627"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "47f860fe86ab22074e616a66ee34ba262ab3cf6f"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "837f66e7b9547862248fcae97f0a8a3960500910"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "d6aaab07dc4f1b4c383e33f0d9eb53e288e1950c"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "d7fe70f69a81871618008b87f4131eafba7a7a51"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "fcd1cacc170ab1177cf267f21705469b427db4d9"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "f55846dabd490dd7226a60d20504d3349cd4285d"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "58f7b25b47535223be959ea2924e825ae91e3241"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "43f2f4b5d3dd0ecd5bbf3084072cebad9d505675"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "6a35c088e98833aed93d55df9beea9578460b282"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "f2e1820922ac34f3051f15248b8ffdf9e81d8756"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "8717d46b8f96fcd3bb6d116a6c099f2e3135e311"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "805e6308d41d559c7d61cbc6cb097f29064bdc89"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "36d0338215e5b77b0b573fad715073ecd977e30e"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "3cec535aad2e797c3b76917422578e29339a7563"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "70a28108f0e7e4fa2d32cfee02f24462522cfc05"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "acf4db3a56a6806ad7905b11cd57793cf958aef1"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "21dbd67b2cd68c8680d29c7dbd7e2d60c9fc15a0"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "34cba86c59367f7f031f83a08c69b367612a8f65"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "d0b286376673d5506f3cd42af83d0c94538c7228"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "14b48f747ba922a05bd5f702ed9cb644fbb88211"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "194528b03e91fee1434e530e050568028d81a393"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "55ce2fb8afdaa2a868c474da95c9618fad826968"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "1217c47f4f3cce8c5e8b375557c37107261adfc2"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c5uP8tazwAAAAJ04cGN",
              "createdAt": "2023-10-04T13:07:25Z"
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5i7GJ6",
              "createdAt": "2023-10-05T11:53:38Z",
              "body": "I'm happy with the changes, thanks! I still don't consider myself experienced enough with Lean 4 metaprogramming to review an entire tactic, so:\r\n\r\nmaintainer merge",
              "author": {
                "login": "Vierkantor"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5oO5Iu",
              "createdAt": "2023-10-05T11:53:56Z",
              "body": "🚀 Pull request has been placed on the maintainer queue by Vierkantor.",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5oeXtr",
              "createdAt": "2023-10-09T11:00:22Z",
              "body": "Thanks :tada:\r\n\r\nbors merge",
              "author": {
                "login": "jcommelin"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5uP8tazwAAAAJ3MtZr",
              "createdAt": "2023-10-09T11:00:34Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
                "name": "ready-to-merge"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5uP8tazwAAAAJ3MtcF",
              "createdAt": "2023-10-09T11:00:35Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5ofReK",
              "createdAt": "2023-10-09T13:35:27Z",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6456594805/job/17526396011)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6456594805/job/17526396285)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6456594805/job/17526395353)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c5uP8tazwAAAAJ3TD2d",
              "createdAt": "2023-10-09T13:35:29Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c5uP8tazwAAAAJ3TEDi",
              "createdAt": "2023-10-09T13:35:34Z"
            }
          ]
        }
      }
    }
  }
}
