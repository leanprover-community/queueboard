{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 48,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "eric-wieser"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "Some of these are likely porting errors.\r\nStatements should always be about the heterogenous versions because these are the ones with notation.\r\n\r\nFor places where we are abusing defeq, this debuts the trick of using `(by exact a : B) = (by exact a1) + (by exact b2)` to ensure the `=` and `+` are typed as `B` instead of `A`.\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 8,
        "closed": true,
        "closedAt": "2023-11-17T00:15:25Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5rmqgT",
              "body": "This looks fine but I'd like a second opinion.",
              "createdAt": "2023-11-10T08:27:54Z",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5sJz3y",
              "body": "Can you please fix the Algebra.Group.Ext file too? There's a bunch there as hypotheses.",
              "createdAt": "2023-11-16T14:12:49Z",
              "author": {
                "login": "j-loreaux"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5sKeTv",
              "body": "If it is helpful, this should be all the places where Lean thinks that there is an `Add.add` constant in some statement:\r\n```lean\r\n-- `Mathlib/MeasureTheory/Measure/FiniteMeasure.lean`\r\ninstance instAdd : Add (FiniteMeasure Ω) where add μ ν := ⟨μ + ν, MeasureTheory.isFiniteMeasureAdd⟩\r\n\r\n-- `Mathlib/ModelTheory/Algebra/Ring/Basic.lean`\r\n{ add := addFunc.apply₂ }\r\n  { add := fun x y => funMap addFunc ![x, y] }\r\n\r\n-- `Mathlib/Analysis/Seminorm.lean`\r\n  add p q :=\r\n\r\n-- `Mathlib/Analysis/NormedSpace/Star/Multiplier.lean`\r\n  add a b :=\r\n\r\n-- `Mathlib/Analysis/Convex/Body.lean`\r\n  add K L :=\r\n\r\n-- `Mathlib/Analysis/Convex/Cone/Basic.lean`\r\n  add := Add.add\r\n  add := Add.add\r\n\r\n-- `Mathlib/AlgebraicGeometry/EllipticCurve/Point.lean`\r\n  add := add\r\n\r\n-- `Mathlib/NumberTheory/Zsqrtd/Basic.lean`\r\n  { add := (· + ·)\r\n\r\n-- `Mathlib/NumberTheory/Dioph.lean`\r\n  refine' { add := ((· + ·) : Poly α → Poly α → Poly α)\r\n\r\n-- `Mathlib/Algebra/Ring/BooleanRing.lean`\r\n  add := (· ∆ ·)\r\n  add := xor\r\n\r\n-- `Mathlib/Algebra/Ring/InjSurj.lean`\r\n  add := (· + ·)\r\n  add := (· + ·)\r\n\r\n-- `Mathlib/Algebra/Ring/ULift.lean`\r\n  { add := (· + ·), mul := (· * ·),\r\n  { zero := (0 : ULift α), add := (· + ·), mul := (· * ·), nsmul := AddMonoid.nsmul,\r\n  { zero := (0 : ULift α), add := (· + ·), mul := (· * ·), nsmul := AddMonoid.nsmul,\r\n  { zero := (0 : ULift α), add := (· + ·), mul := (· * ·), nsmul := AddMonoid.nsmul, add_assoc,\r\n  { zero := (0 : ULift α), add := (· + ·), mul := (· * ·), sub := Sub.sub, neg := Neg.neg,\r\n  { zero := (0 : ULift α), add := (· + ·), mul := (· * ·), sub := Sub.sub, neg := Neg.neg,\r\n  { zero := (0 : ULift α), one := (1 : ULift α), add := (· + ·), mul := (· * ·), sub := Sub.sub,\r\n  { zero := (0 : ULift α), one := (1 : ULift α), add := (· + ·), mul := (· * ·), sub := Sub.sub,\r\n  { zero := (0 : ULift α), add := (· + ·), mul := (· * ·), sub := Sub.sub, neg := Neg.neg,\r\n\r\n-- `Mathlib/Algebra/Ring/Pi.lean`\r\n  { add := (· + ·)\r\n\r\n-- `Mathlib/Algebra/Symmetrized.lean`\r\ninstance [Add α] : Add αˢʸᵐ where add a b := sym (unsym a + unsym b)\r\n\r\n-- `Mathlib/Algebra/Homology/ShortComplex/Preadditive.lean`\r\n  add φ φ' :=\r\n\r\n-- `Mathlib/Algebra/Tropical/Basic.lean`\r\n  add := (· + ·)\r\n  add := (· + ·)\r\n\r\n-- `Mathlib/Algebra/Group/TypeTags.lean`\r\n  add x y := ofMul (toMul x * toMul y)\r\n  add := (· + ·)\r\n\r\n-- `Mathlib/Algebra/Expr.lean`\r\n  add x y := q($x + $y)\r\n\r\n-- `Mathlib/Algebra/FreeAlgebra.lean`\r\n  add := Quot.map₂ HAdd.hAdd (fun _ _ _ ↦ Rel.add_compat_right) fun _ _ _ ↦ Rel.add_compat_left\r\n\r\n-- `Mathlib/Algebra/Module/Submodule/Pointwise.lean`\r\n  add := (· ⊔ ·)\r\n\r\n-- `Mathlib/Algebra/Module/LocalizedModule.lean`\r\n  add p1 p2 :=\r\n  add := (· + ·)\r\n\r\n-- `Mathlib/Algebra/Opposites.lean`\r\ninstance add [Add α] : Add αᵐᵒᵖ where add x y := op (unop x + unop y)\r\n\r\n-- `Mathlib/Algebra/Category/Ring/Colimits.lean`\r\n  add := Quotient.map₂ add <| fun x x' rx y y' ry =>\r\n      simp only [(· + ·), (· * ·), Add.add]\r\n      simp only [(· + ·), (· * ·), Add.add]\r\n    Quot.mk Setoid.r (add x y) = Add.add (α := ColimitType F) (Quot.mk _ x) (Quot.mk _ y) :=\r\n\r\n-- `Mathlib/Algebra/Category/GroupCat/Colimits.lean`\r\n  add := Quotient.map₂ add <| fun x x' rx y y' ry =>\r\n    Add.add (α := ColimitType.{w} F) (Quot.mk Setoid.r x) (Quot.mk Setoid.r y) :=\r\n\r\n-- `Mathlib/Algebra/Lie/Submodule.lean`\r\n  add := (· ⊔ ·)\r\n\r\n-- `Mathlib/Algebra/Lie/Free.lean`\r\n  add := Quot.map₂ (· + ·) (fun _ _ _ => Rel.addLeft _) fun _ _ _ => Rel.add_right _\r\n\r\n-- `Mathlib/Algebra/Lie/Basic.lean`\r\n  add f g := { (f : M →ₗ[R] N) + (g : M →ₗ[R] N) with map_lie' := by simp }\r\n\r\n-- `Mathlib/Algebra/Lie/Subalgebra.lean`\r\n  add := (· ⊔ ·)\r\n\r\n-- `Mathlib/Algebra/RingQuot.lean`\r\n  add := (· + ·)\r\n\r\n-- `Mathlib/Tactic/Ring/Basic.lean`\r\n  | ``HAdd.hAdd, _, _ | ``Add.add, _, _\r\n  | ``HAdd.hAdd, _, _ | ``Add.add, _, _ => match e with\r\n\r\n-- `Mathlib/Tactic/Positivity/Basic.lean`\r\n@[positivity _ + _, Add.add _ _] def evalAdd : PositivityExt where eval {u α} zα pα e := do\r\n\r\n-- `Mathlib/Tactic/NormNum/Basic.lean`\r\n@[norm_num _ + _, Add.add _ _] def evalAdd : NormNumExt where eval {u α} e := do\r\n\r\n-- `Mathlib/Tactic/Polyrith.lean`\r\n  | ``HAdd.hAdd, _ | ``Add.add, _ => match e with\r\n\r\n-- `Mathlib/Tactic/Linarith/Parsing.lean`\r\n  add := fun f g => (f.mergeWith (fun _ b b' => b + b') g).filter (fun _ b => b ≠ 0)\r\n\r\n-- `Mathlib/CategoryTheory/Abelian/NonPreadditive.lean`\r\n    { add := (· + ·)\r\n\r\n-- `Mathlib/CategoryTheory/Preadditive/FunctorCategory.lean`\r\n    { add := fun α β => { app := fun X => α.app X + β.app X }\r\n\r\n-- `Mathlib/CategoryTheory/Preadditive/OfBiproducts.lean`\r\n  add := (· +ᵣ ·)\r\n\r\n-- `Mathlib/CategoryTheory/Preadditive/EilenbergMoore.lean`\r\n    { add := fun α β =>\r\n    { add := fun α β =>\r\n\r\n-- `Mathlib/CategoryTheory/Preadditive/EndoFunctor.lean`\r\n    { add := fun α β =>\r\n    { add := fun α β =>\r\n\r\n-- `Mathlib/CategoryTheory/Idempotents/Karoubi.lean`\r\n  add f g :=\r\n\r\n-- `Mathlib/CategoryTheory/Sites/Sheaf.lean`\r\ninstance : Add (P ⟶ Q) where add f g := Sheaf.Hom.mk <| f.1 + g.1\r\n\r\n-- `Mathlib/CategoryTheory/Quotient/Preadditive.lean`\r\n    { add := Preadditive.add r hr\r\n\r\n-- `Mathlib/RingTheory/GradedAlgebra/HomogeneousLocalization.lean`\r\n  add c1 c2 :=\r\n  add :=\r\n\r\n-- `Mathlib/RingTheory/Localization/Basic.lean`\r\n    add := (· + ·)\r\n\r\n-- `Mathlib/RingTheory/WittVector/MulCoeff.lean`\r\n  apply congrArg (Add.add _)\r\n\r\n-- `Mathlib/RingTheory/WittVector/Defs.lean`\r\n  by simp [(· + ·), Add.add, eval, coeff_mk]\r\n\r\n-- `Mathlib/RingTheory/HahnSeries.lean`\r\n  add x y :=\r\n  add := (· + ·)\r\n  add := (· + ·)\r\n\r\n-- `Mathlib/Data/Holor.lean`\r\n  funext fun t => by simp [slice, (· + ·), Add.add]\r\n\r\n-- `Mathlib/Data/ZMod/Defs.lean`\r\n  add := Nat.casesOn n (@Add.add Int _) fun n => @Add.add (Fin n.succ) _\r\n  add := Nat.casesOn n (@Add.add Int _) fun n => @Add.add (Fin n.succ) _\r\n  add := Nat.casesOn n (@Add.add Int _) fun n => @Add.add (Fin n.succ) _\r\n\r\n-- `Mathlib/Data/Rat/Defs.lean`\r\n  add := (· + ·)\r\n\r\n-- `Mathlib/Data/Set/Semiring.lean`\r\n  add s t := Set.up (SetSemiring.down s ∪ SetSemiring.down t)\r\n\r\n-- `Mathlib/Data/Fin/Basic.lean`\r\n  add := (· + ·)\r\n\r\n-- `Mathlib/Data/Real/Basic.lean`\r\n            add := (· + ·)\r\n\r\n-- `Mathlib/Data/Complex/Basic.lean`\r\n    add := (· + ·)\r\n\r\n-- `Mathlib/Data/Nat/PartENat.lean`\r\n  add := (· + ·)\r\n\r\n-- `Mathlib/Data/Nat/Basic.lean`\r\n  add := Nat.add\r\n\r\n-- `Mathlib/Data/Multiset/Basic.lean`\r\n  add := (· + ·)\r\n\r\n-- `Mathlib/Data/Num/Lemmas.lean`\r\n  add := (· + ·)\r\n  refine' { add := (· + ·).. } <;> transfer\r\n    { add := (· + ·)\r\n  add := (· + ·)\r\n\r\n-- `Mathlib/Topology/ContinuousFunction/Bounded.lean`\r\n  add f g :=\r\n\r\n-- `Mathlib/Topology/Algebra/ContinuousAffineMap.lean`\r\n  add f g := { (f : P →ᵃ[R] W) + (g : P →ᵃ[R] W) with cont := f.continuous.add g.continuous }\r\n\r\n-- `Mathlib/Topology/Algebra/Module/Basic.lean`\r\n  add := (· + ·)\r\n\r\n-- `Mathlib/RepresentationTheory/Action.lean`\r\n    { add := fun f g => ⟨f.hom + g.hom, by simp [f.comm, g.comm]⟩\r\n\r\n-- `Mathlib/SetTheory/Surreal/Basic.lean`\r\n  add := (· + ·)\r\n\r\n-- `Mathlib/SetTheory/Ordinal/Notation.lean`\r\n    conv_lhs at h' => simp [HAdd.hAdd, Add.add]\r\n    conv at nf => simp [HAdd.hAdd, Add.add]\r\n    conv in _ + o => simp [HAdd.hAdd, Add.add]\r\n      simp only [Add.add, add, addAux, h'.symm, h, add_assoc, repr] at nf h₁ ⊢\r\n\r\n-- `Mathlib/SetTheory/Ordinal/NaturalOps.lean`\r\n    add := (· + ·)\r\n\r\n-- `Mathlib/SetTheory/Ordinal/Basic.lean`\r\n  add := (· + ·)\r\n\r\n-- `Mathlib/SetTheory/Game/Basic.lean`\r\n  add :=\r\n\r\n-- `Mathlib/SetTheory/Cardinal/Basic.lean`\r\n  add := (· + ·)\r\n\r\n-- `Mathlib/LinearAlgebra/AffineSpace/AffineMap.lean`\r\n  add f g := ⟨f + g, f.linear + g.linear, fun p v => by simp [add_add_add_comm]⟩\r\n\r\n-- `Mathlib/LinearAlgebra/BilinearForm.lean`\r\n  add B D :=\r\n\r\n-- `Mathlib/Geometry/Manifold/Instances/Sphere.lean`\r\n    congr_arg₂ Add.add (congr_arg (fun t => t • (y : E)) h₁) (congr_arg (fun t => t • v) h₂) using 1\r\n\r\n-- `Mathlib/Geometry/Manifold/MFDeriv.lean`\r\n      @Add.add (TangentSpace I z →L[𝕜] E') _ (mfderiv I 𝓘(𝕜, E') f z) (mfderiv I 𝓘(𝕜, E') g z) :=\r\n\r\n-- `Mathlib/Geometry/Manifold/Algebra/LeftInvariantDerivation.lean`\r\n  add X Y :=\r\n\r\n-- `Mathlib/Computability/Language.lean`\r\n  add := (· + ·)\r\n\r\n-- `Mathlib/FieldTheory/RatFunc.lean`\r\n  simp only [HAdd.hAdd, Add.add, RatFunc.add]\r\n  add := (· + ·)\r\n```",
              "createdAt": "2023-11-16T15:29:24Z",
              "author": {
                "login": "adomani"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5sLGnS",
              "body": "@adomani, I deliberately only changed the appearance in *statements* in this PR; the ones in proofs are irrelevant as soon as the proof is over, and the ones in defs are mostly irrelevant because the API lemmas about them use `HAdd`.",
              "createdAt": "2023-11-16T16:57:02Z",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5sNKdE",
              "body": "Thanks!\r\n\r\nbors merge",
              "createdAt": "2023-11-16T22:06:28Z",
              "author": {
                "login": "j-loreaux"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5sNtBV",
              "body": "Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6897560539/job/18765962910)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6897560539/job/18765962710)\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6897560539/job/18765963293)",
              "createdAt": "2023-11-17T00:15:24Z",
              "author": {
                "login": "mathlib-bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "46e302c7087da5287890072ef87f91f20932762f",
                "additions": 26,
                "deletions": 24,
                "committedDate": "2023-11-01T12:56:39Z",
                "author": {
                  "name": "Eric Wieser",
                  "email": "wieser.eric@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "dae4de5323758915172842de67febee474ead3a1",
                "additions": 2,
                "deletions": 2,
                "committedDate": "2023-11-01T14:58:11Z",
                "author": {
                  "name": "Eric Wieser",
                  "email": "wieser.eric@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "ce7e75abf3e91ca9585ac7c931001a5a4d16d31b",
                "additions": 19,
                "deletions": 8,
                "committedDate": "2023-11-16T14:27:38Z",
                "author": {
                  "name": "Eric Wieser",
                  "email": "wieser.eric@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEXYJhUg",
                        "name": "Add annotations",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892124807/job/18748694866"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEXYJfyA",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892124401/job/18748694472"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEXYJdkw",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892124406/job/18748693907"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEXYJhfw",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892124805/job/18748694911"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEXYJhAg",
                        "name": "Lint style",
                        "conclusion": "FAILURE",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892124406/job/18748694786"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEXYJjnQ",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892124401/job/18748695453"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEXYJifA",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892124805/job/18748695164"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEXYJePw",
                        "name": "Check all files imported (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892124401/job/18748694079"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEXYJetA",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892124406/job/18748694196"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEXYJiag",
                        "name": "check workflows (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892124401/job/18748695146"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEXYJf6g",
                        "name": "check workflows",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892124406/job/18748694506"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEXYJg9w",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892124401/job/18748694775"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEXYJiZQ",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892124406/job/18748695141"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEXYJk1Q",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892124401/job/18748695765"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEXZxTZg",
                        "name": "Post-CI job",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892124406/job/18750395238"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "0cf6668724e6c4c45a07d5690584bde0c1c03344",
                "additions": 2,
                "deletions": 1,
                "committedDate": "2023-11-16T15:17:37Z",
                "author": {
                  "name": "Eric Wieser",
                  "email": "wieser.eric@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEXdR08A",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6893765583/job/18754073840"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEXd0Y7w",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6893938101/job/18754640111"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEXdRzwA",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6893765582/job/18754073536"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEXd0XtQ",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6893938110/job/18754639797"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEXaG9vw",
                        "name": "Add annotations",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892751305/job/18750750143"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEXaG6mQ",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892751070/job/18750749337"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEXaG8ag",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892751067/job/18750749802"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEXaG9sg",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892751313/job/18750750130"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEXdRzmw",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6893765583/job/18754073499"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEXd0XiA",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6893938101/job/18754639752"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEXaHACA",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892751070/job/18750750728"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEXaG60Q",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892751067/job/18750749393"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEXaG_KA",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892751313/job/18750750504"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEXaG-nw",
                        "name": "Check all files imported (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892751070/job/18750750367"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEXaG_sQ",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892751067/job/18750750641"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEXaG8ew",
                        "name": "check workflows (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892751070/job/18750749819"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEXaHA7w",
                        "name": "check workflows",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892751067/job/18750750959"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEXaHBmw",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892751070/job/18750751131"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEXaG-RQ",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892751067/job/18750750277"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEXaHDMg",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892751070/job/18750751538"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAEXbar3g",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892751067/job/18752121822"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "createdAt": "2023-11-01T12:58:52Z",
        "deletions": 34,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/Algebra/Category/GroupCat/Colimits.lean",
              "additions": 7,
              "deletions": 6
            },
            {
              "path": "Mathlib/Algebra/Category/Ring/Colimits.lean",
              "additions": 9,
              "deletions": 9
            },
            {
              "path": "Mathlib/Algebra/CharP/Two.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Algebra/Free.lean",
              "additions": 4,
              "deletions": 3
            },
            {
              "path": "Mathlib/Algebra/Group/Ext.lean",
              "additions": 20,
              "deletions": 8
            },
            {
              "path": "Mathlib/Algebra/Order/LatticeGroup.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Algebra/Order/Monoid/OrderDual.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Geometry/Manifold/MFDeriv.lean",
              "additions": 5,
              "deletions": 5
            }
          ]
        },
        "headRefName": "eric-wieser/tidy-hinst-lemmas",
        "headRefOid": "0cf6668724e6c4c45a07d5690584bde0c1c03344",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5eVPXn",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
              "color": "06e039",
              "name": "ready-to-merge"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5naN-7",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "j-loreaux"
              },
              "submittedAt": "2023-11-16T16:41:19Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 8086,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5naN-7",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "j-loreaux"
              },
              "submittedAt": "2023-11-16T16:41:19Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5naWSb",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-11-16T16:56:30Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5TNZ-A",
                    "body": "I don't understand why Lean would elaborate this as `Add.add` instead of `HAdd.hAdd`?",
                    "createdAt": "2023-11-16T16:41:19Z",
                    "author": {
                      "login": "j-loreaux"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5TNgG5",
                    "body": "It didn't; the old proof had to unfold` HAdd.hAdd` into `Add.add` in order for other dsimp lemmas to apply. That's no longer necessary.",
                    "createdAt": "2023-11-16T16:56:30Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjQyNTI2MA==",
              "login": "eric-wieser"
            },
            {
              "id": "MDQ6VXNlcjE0MDkwNTkz",
              "login": "YaelDillies"
            },
            {
              "id": "MDQ6VXNlcjg5MjA1OTg=",
              "login": "j-loreaux"
            },
            {
              "id": "MDQ6VXNlcjI5NDY3NzQ1",
              "login": "adomani"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEXdR08A",
                "name": "Add ready-to-merge label",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6893765583/job/18754073840"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEXd0Y7w",
                "name": "Add ready-to-merge label",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6893938101/job/18754640111"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEXdRzwA",
                "name": "Ping maintainers on Zulip",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6893765582/job/18754073536"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEXd0XtQ",
                "name": "Ping maintainers on Zulip",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6893938110/job/18754639797"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEXaG9vw",
                "name": "Add annotations",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892751305/job/18750750143"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEXaG6mQ",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892751070/job/18750749337"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEXaG8ag",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892751067/job/18750749802"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEXaG9sg",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892751313/job/18750750130"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEXdRzmw",
                "name": "Add delegated label",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6893765583/job/18754073499"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEXd0XiA",
                "name": "Add delegated label",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6893938101/job/18754639752"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEXaHACA",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892751070/job/18750750728"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEXaG60Q",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892751067/job/18750749393"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEXaG_KA",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892751313/job/18750750504"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEXaG-nw",
                "name": "Check all files imported (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892751070/job/18750750367"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEXaG_sQ",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892751067/job/18750750641"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEXaG8ew",
                "name": "check workflows (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892751070/job/18750749819"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEXaHA7w",
                "name": "check workflows",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892751067/job/18750750959"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEXaHBmw",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892751070/job/18750751131"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEXaG-RQ",
                "name": "Build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892751067/job/18750750277"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEXaHDMg",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892751070/job/18750751538"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAEXbar3g",
                "name": "Post-CI job",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/6892751067/job/18752121822"
              }
            ]
          }
        },
        "title": "[Merged by Bors] - fix: remove references to non-heterogenous operators in theorem statements",
        "updatedAt": "2023-11-17T00:15:29Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/8086",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "46e302c7087da5287890072ef87f91f20932762f"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c51j2rTzwAAAAKFphkb",
              "createdAt": "2023-11-01T13:04:40Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c51j2rTzwAAAAKFphkm",
              "createdAt": "2023-11-01T13:04:40Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "dae4de5323758915172842de67febee474ead3a1"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c51j2rTzwAAAAKFv6Fj",
              "createdAt": "2023-11-01T15:35:43Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5rmqgT",
              "createdAt": "2023-11-10T08:27:54Z",
              "body": "This looks fine but I'd like a second opinion.",
              "author": {
                "login": "YaelDillies"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5sJz3y",
              "createdAt": "2023-11-16T14:12:49Z",
              "body": "Can you please fix the Algebra.Group.Ext file too? There's a bunch there as hypotheses.",
              "author": {
                "login": "j-loreaux"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c51j2rTzwAAAAKOh8fI",
              "createdAt": "2023-11-16T14:13:07Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c51j2rTzwAAAAKOh8fS",
              "createdAt": "2023-11-16T14:13:07Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "ce7e75abf3e91ca9585ac7c931001a5a4d16d31b"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c51j2rTzwAAAAKOjf3I",
              "createdAt": "2023-11-16T14:41:28Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c51j2rTzwAAAAKOjf3Y",
              "createdAt": "2023-11-16T14:41:28Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "0cf6668724e6c4c45a07d5690584bde0c1c03344"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5sKeTv",
              "createdAt": "2023-11-16T15:29:24Z",
              "body": "If it is helpful, this should be all the places where Lean thinks that there is an `Add.add` constant in some statement:\r\n```lean\r\n-- `Mathlib/MeasureTheory/Measure/FiniteMeasure.lean`\r\ninstance instAdd : Add (FiniteMeasure Ω) where add μ ν := ⟨μ + ν, MeasureTheory.isFiniteMeasureAdd⟩\r\n\r\n-- `Mathlib/ModelTheory/Algebra/Ring/Basic.lean`\r\n{ add := addFunc.apply₂ }\r\n  { add := fun x y => funMap addFunc ![x, y] }\r\n\r\n-- `Mathlib/Analysis/Seminorm.lean`\r\n  add p q :=\r\n\r\n-- `Mathlib/Analysis/NormedSpace/Star/Multiplier.lean`\r\n  add a b :=\r\n\r\n-- `Mathlib/Analysis/Convex/Body.lean`\r\n  add K L :=\r\n\r\n-- `Mathlib/Analysis/Convex/Cone/Basic.lean`\r\n  add := Add.add\r\n  add := Add.add\r\n\r\n-- `Mathlib/AlgebraicGeometry/EllipticCurve/Point.lean`\r\n  add := add\r\n\r\n-- `Mathlib/NumberTheory/Zsqrtd/Basic.lean`\r\n  { add := (· + ·)\r\n\r\n-- `Mathlib/NumberTheory/Dioph.lean`\r\n  refine' { add := ((· + ·) : Poly α → Poly α → Poly α)\r\n\r\n-- `Mathlib/Algebra/Ring/BooleanRing.lean`\r\n  add := (· ∆ ·)\r\n  add := xor\r\n\r\n-- `Mathlib/Algebra/Ring/InjSurj.lean`\r\n  add := (· + ·)\r\n  add := (· + ·)\r\n\r\n-- `Mathlib/Algebra/Ring/ULift.lean`\r\n  { add := (· + ·), mul := (· * ·),\r\n  { zero := (0 : ULift α), add := (· + ·), mul := (· * ·), nsmul := AddMonoid.nsmul,\r\n  { zero := (0 : ULift α), add := (· + ·), mul := (· * ·), nsmul := AddMonoid.nsmul,\r\n  { zero := (0 : ULift α), add := (· + ·), mul := (· * ·), nsmul := AddMonoid.nsmul, add_assoc,\r\n  { zero := (0 : ULift α), add := (· + ·), mul := (· * ·), sub := Sub.sub, neg := Neg.neg,\r\n  { zero := (0 : ULift α), add := (· + ·), mul := (· * ·), sub := Sub.sub, neg := Neg.neg,\r\n  { zero := (0 : ULift α), one := (1 : ULift α), add := (· + ·), mul := (· * ·), sub := Sub.sub,\r\n  { zero := (0 : ULift α), one := (1 : ULift α), add := (· + ·), mul := (· * ·), sub := Sub.sub,\r\n  { zero := (0 : ULift α), add := (· + ·), mul := (· * ·), sub := Sub.sub, neg := Neg.neg,\r\n\r\n-- `Mathlib/Algebra/Ring/Pi.lean`\r\n  { add := (· + ·)\r\n\r\n-- `Mathlib/Algebra/Symmetrized.lean`\r\ninstance [Add α] : Add αˢʸᵐ where add a b := sym (unsym a + unsym b)\r\n\r\n-- `Mathlib/Algebra/Homology/ShortComplex/Preadditive.lean`\r\n  add φ φ' :=\r\n\r\n-- `Mathlib/Algebra/Tropical/Basic.lean`\r\n  add := (· + ·)\r\n  add := (· + ·)\r\n\r\n-- `Mathlib/Algebra/Group/TypeTags.lean`\r\n  add x y := ofMul (toMul x * toMul y)\r\n  add := (· + ·)\r\n\r\n-- `Mathlib/Algebra/Expr.lean`\r\n  add x y := q($x + $y)\r\n\r\n-- `Mathlib/Algebra/FreeAlgebra.lean`\r\n  add := Quot.map₂ HAdd.hAdd (fun _ _ _ ↦ Rel.add_compat_right) fun _ _ _ ↦ Rel.add_compat_left\r\n\r\n-- `Mathlib/Algebra/Module/Submodule/Pointwise.lean`\r\n  add := (· ⊔ ·)\r\n\r\n-- `Mathlib/Algebra/Module/LocalizedModule.lean`\r\n  add p1 p2 :=\r\n  add := (· + ·)\r\n\r\n-- `Mathlib/Algebra/Opposites.lean`\r\ninstance add [Add α] : Add αᵐᵒᵖ where add x y := op (unop x + unop y)\r\n\r\n-- `Mathlib/Algebra/Category/Ring/Colimits.lean`\r\n  add := Quotient.map₂ add <| fun x x' rx y y' ry =>\r\n      simp only [(· + ·), (· * ·), Add.add]\r\n      simp only [(· + ·), (· * ·), Add.add]\r\n    Quot.mk Setoid.r (add x y) = Add.add (α := ColimitType F) (Quot.mk _ x) (Quot.mk _ y) :=\r\n\r\n-- `Mathlib/Algebra/Category/GroupCat/Colimits.lean`\r\n  add := Quotient.map₂ add <| fun x x' rx y y' ry =>\r\n    Add.add (α := ColimitType.{w} F) (Quot.mk Setoid.r x) (Quot.mk Setoid.r y) :=\r\n\r\n-- `Mathlib/Algebra/Lie/Submodule.lean`\r\n  add := (· ⊔ ·)\r\n\r\n-- `Mathlib/Algebra/Lie/Free.lean`\r\n  add := Quot.map₂ (· + ·) (fun _ _ _ => Rel.addLeft _) fun _ _ _ => Rel.add_right _\r\n\r\n-- `Mathlib/Algebra/Lie/Basic.lean`\r\n  add f g := { (f : M →ₗ[R] N) + (g : M →ₗ[R] N) with map_lie' := by simp }\r\n\r\n-- `Mathlib/Algebra/Lie/Subalgebra.lean`\r\n  add := (· ⊔ ·)\r\n\r\n-- `Mathlib/Algebra/RingQuot.lean`\r\n  add := (· + ·)\r\n\r\n-- `Mathlib/Tactic/Ring/Basic.lean`\r\n  | ``HAdd.hAdd, _, _ | ``Add.add, _, _\r\n  | ``HAdd.hAdd, _, _ | ``Add.add, _, _ => match e with\r\n\r\n-- `Mathlib/Tactic/Positivity/Basic.lean`\r\n@[positivity _ + _, Add.add _ _] def evalAdd : PositivityExt where eval {u α} zα pα e := do\r\n\r\n-- `Mathlib/Tactic/NormNum/Basic.lean`\r\n@[norm_num _ + _, Add.add _ _] def evalAdd : NormNumExt where eval {u α} e := do\r\n\r\n-- `Mathlib/Tactic/Polyrith.lean`\r\n  | ``HAdd.hAdd, _ | ``Add.add, _ => match e with\r\n\r\n-- `Mathlib/Tactic/Linarith/Parsing.lean`\r\n  add := fun f g => (f.mergeWith (fun _ b b' => b + b') g).filter (fun _ b => b ≠ 0)\r\n\r\n-- `Mathlib/CategoryTheory/Abelian/NonPreadditive.lean`\r\n    { add := (· + ·)\r\n\r\n-- `Mathlib/CategoryTheory/Preadditive/FunctorCategory.lean`\r\n    { add := fun α β => { app := fun X => α.app X + β.app X }\r\n\r\n-- `Mathlib/CategoryTheory/Preadditive/OfBiproducts.lean`\r\n  add := (· +ᵣ ·)\r\n\r\n-- `Mathlib/CategoryTheory/Preadditive/EilenbergMoore.lean`\r\n    { add := fun α β =>\r\n    { add := fun α β =>\r\n\r\n-- `Mathlib/CategoryTheory/Preadditive/EndoFunctor.lean`\r\n    { add := fun α β =>\r\n    { add := fun α β =>\r\n\r\n-- `Mathlib/CategoryTheory/Idempotents/Karoubi.lean`\r\n  add f g :=\r\n\r\n-- `Mathlib/CategoryTheory/Sites/Sheaf.lean`\r\ninstance : Add (P ⟶ Q) where add f g := Sheaf.Hom.mk <| f.1 + g.1\r\n\r\n-- `Mathlib/CategoryTheory/Quotient/Preadditive.lean`\r\n    { add := Preadditive.add r hr\r\n\r\n-- `Mathlib/RingTheory/GradedAlgebra/HomogeneousLocalization.lean`\r\n  add c1 c2 :=\r\n  add :=\r\n\r\n-- `Mathlib/RingTheory/Localization/Basic.lean`\r\n    add := (· + ·)\r\n\r\n-- `Mathlib/RingTheory/WittVector/MulCoeff.lean`\r\n  apply congrArg (Add.add _)\r\n\r\n-- `Mathlib/RingTheory/WittVector/Defs.lean`\r\n  by simp [(· + ·), Add.add, eval, coeff_mk]\r\n\r\n-- `Mathlib/RingTheory/HahnSeries.lean`\r\n  add x y :=\r\n  add := (· + ·)\r\n  add := (· + ·)\r\n\r\n-- `Mathlib/Data/Holor.lean`\r\n  funext fun t => by simp [slice, (· + ·), Add.add]\r\n\r\n-- `Mathlib/Data/ZMod/Defs.lean`\r\n  add := Nat.casesOn n (@Add.add Int _) fun n => @Add.add (Fin n.succ) _\r\n  add := Nat.casesOn n (@Add.add Int _) fun n => @Add.add (Fin n.succ) _\r\n  add := Nat.casesOn n (@Add.add Int _) fun n => @Add.add (Fin n.succ) _\r\n\r\n-- `Mathlib/Data/Rat/Defs.lean`\r\n  add := (· + ·)\r\n\r\n-- `Mathlib/Data/Set/Semiring.lean`\r\n  add s t := Set.up (SetSemiring.down s ∪ SetSemiring.down t)\r\n\r\n-- `Mathlib/Data/Fin/Basic.lean`\r\n  add := (· + ·)\r\n\r\n-- `Mathlib/Data/Real/Basic.lean`\r\n            add := (· + ·)\r\n\r\n-- `Mathlib/Data/Complex/Basic.lean`\r\n    add := (· + ·)\r\n\r\n-- `Mathlib/Data/Nat/PartENat.lean`\r\n  add := (· + ·)\r\n\r\n-- `Mathlib/Data/Nat/Basic.lean`\r\n  add := Nat.add\r\n\r\n-- `Mathlib/Data/Multiset/Basic.lean`\r\n  add := (· + ·)\r\n\r\n-- `Mathlib/Data/Num/Lemmas.lean`\r\n  add := (· + ·)\r\n  refine' { add := (· + ·).. } <;> transfer\r\n    { add := (· + ·)\r\n  add := (· + ·)\r\n\r\n-- `Mathlib/Topology/ContinuousFunction/Bounded.lean`\r\n  add f g :=\r\n\r\n-- `Mathlib/Topology/Algebra/ContinuousAffineMap.lean`\r\n  add f g := { (f : P →ᵃ[R] W) + (g : P →ᵃ[R] W) with cont := f.continuous.add g.continuous }\r\n\r\n-- `Mathlib/Topology/Algebra/Module/Basic.lean`\r\n  add := (· + ·)\r\n\r\n-- `Mathlib/RepresentationTheory/Action.lean`\r\n    { add := fun f g => ⟨f.hom + g.hom, by simp [f.comm, g.comm]⟩\r\n\r\n-- `Mathlib/SetTheory/Surreal/Basic.lean`\r\n  add := (· + ·)\r\n\r\n-- `Mathlib/SetTheory/Ordinal/Notation.lean`\r\n    conv_lhs at h' => simp [HAdd.hAdd, Add.add]\r\n    conv at nf => simp [HAdd.hAdd, Add.add]\r\n    conv in _ + o => simp [HAdd.hAdd, Add.add]\r\n      simp only [Add.add, add, addAux, h'.symm, h, add_assoc, repr] at nf h₁ ⊢\r\n\r\n-- `Mathlib/SetTheory/Ordinal/NaturalOps.lean`\r\n    add := (· + ·)\r\n\r\n-- `Mathlib/SetTheory/Ordinal/Basic.lean`\r\n  add := (· + ·)\r\n\r\n-- `Mathlib/SetTheory/Game/Basic.lean`\r\n  add :=\r\n\r\n-- `Mathlib/SetTheory/Cardinal/Basic.lean`\r\n  add := (· + ·)\r\n\r\n-- `Mathlib/LinearAlgebra/AffineSpace/AffineMap.lean`\r\n  add f g := ⟨f + g, f.linear + g.linear, fun p v => by simp [add_add_add_comm]⟩\r\n\r\n-- `Mathlib/LinearAlgebra/BilinearForm.lean`\r\n  add B D :=\r\n\r\n-- `Mathlib/Geometry/Manifold/Instances/Sphere.lean`\r\n    congr_arg₂ Add.add (congr_arg (fun t => t • (y : E)) h₁) (congr_arg (fun t => t • v) h₂) using 1\r\n\r\n-- `Mathlib/Geometry/Manifold/MFDeriv.lean`\r\n      @Add.add (TangentSpace I z →L[𝕜] E') _ (mfderiv I 𝓘(𝕜, E') f z) (mfderiv I 𝓘(𝕜, E') g z) :=\r\n\r\n-- `Mathlib/Geometry/Manifold/Algebra/LeftInvariantDerivation.lean`\r\n  add X Y :=\r\n\r\n-- `Mathlib/Computability/Language.lean`\r\n  add := (· + ·)\r\n\r\n-- `Mathlib/FieldTheory/RatFunc.lean`\r\n  simp only [HAdd.hAdd, Add.add, RatFunc.add]\r\n  add := (· + ·)\r\n```",
              "author": {
                "login": "adomani"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5naN-7",
              "createdAt": "2023-11-16T16:41:19Z",
              "body": "",
              "author": {
                "login": "j-loreaux"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5sLGnS",
              "createdAt": "2023-11-16T16:57:02Z",
              "body": "@adomani, I deliberately only changed the appearance in *statements* in this PR; the ones in proofs are irrelevant as soon as the proof is over, and the ones in defs are mostly irrelevant because the API lemmas about them use `HAdd`.",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5sNKdE",
              "createdAt": "2023-11-16T22:06:28Z",
              "body": "Thanks!\r\n\r\nbors merge",
              "author": {
                "login": "j-loreaux"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c51j2rTzwAAAAKO3vQM",
              "createdAt": "2023-11-16T22:06:39Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
                "name": "ready-to-merge"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c51j2rTzwAAAAKO3vR1",
              "createdAt": "2023-11-16T22:06:39Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5sNtBV",
              "createdAt": "2023-11-17T00:15:24Z",
              "body": "Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6897560539/job/18765962910)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6897560539/job/18765962710)\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6897560539/job/18765963293)",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c51j2rTzwAAAAKO7TWQ",
              "createdAt": "2023-11-17T00:15:25Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c51j2rTzwAAAAKO7Tf2",
              "createdAt": "2023-11-17T00:15:29Z"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            }
          ]
        }
      }
    }
  }
}
