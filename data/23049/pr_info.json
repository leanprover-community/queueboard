{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 217,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "YaelDillies"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "Show that, for `G` and `H` two graphs, such that `G` appears as a subgraph of `H` `n` times, one can remove at most `n` edges from `H` such that the resulting graph is `G`-free.\r\n\r\nFrom ExtrProbCombi (LeanCamCombi)\r\n\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nFor details on the \"pull request lifecycle\" in mathlib, please see:\r\nhttps://leanprover-community.github.io/contribute/index.html\r\n\r\nIn particular, note that most reviewers will only notice your PR\r\nif it passes the continuous integration checks.\r\nPlease ask for help on https://leanprover.zulipchat.com if needed.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nIf you are moving or deleting declarations, please include these lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nMoves:\r\n- Vector.* -> List.Vector.*\r\n- ...\r\n\r\nDeletions:\r\n- Nat.bit1_add_bit1\r\n- ...\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n\r\n-->\r\n- [x] depends on: #23091\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 1,
        "closed": false,
        "closedAt": null,
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c6i7FzO",
              "body": "### PR summary [4d3ee235ee](https://github.com/leanprover-community/mathlib4/pull/23049/commits/4d3ee235eec181f2ed48c8483e8d0df2303a7b14)\n\n<details><summary>\n\n#### Import changes for modified files\n\n</summary>\n\nDependency changes\n\n| File | Base Count | Head Count | Change |\n| --- | --- | --- | --- |\n| Mathlib.Combinatorics.SimpleGraph.Copy | 601 | 603 | +2 (+0.33%) |\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n| `Mathlib.Combinatorics.SimpleGraph.Copy`|2|\n\n</details>\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ Free.killCopies_eq_left`\n`+ copyCount`\n`+ copyCount_bot`\n`+ copyCount_eq_card_image_copyToSubgraph`\n`+ copyCount_eq_zero`\n`+ copyCount_le_labelledCopyCount`\n`+ copyCount_of_isEmpty`\n`+ copyCount_pos`\n`+ free_killCopies`\n`+ killCopies.edgeSet.instFintype`\n`+ killCopies_bot`\n`+ killCopies_eq_left`\n`+ killCopies_le_left`\n`+ labelledCopyCount`\n`+ labelledCopyCount_eq_zero`\n`+ labelledCopyCount_of_isEmpty`\n`+ labelledCopyCount_pos`\n`+ le_card_edgeFinset_killCopies`\n`+ le_card_edgeFinset_killCopies_add_copyCount`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n</details>\n\n---\n\n<details><summary>No changes to technical debt.</summary>\n\nYou can run this locally as\n```\n./scripts/technical-debt-metrics.sh pr_summary\n```\n* The `relative` value is the weighted *sum* of the differences with weight given by the *inverse* of the current value of the statistic.\n* The `absolute` value is the `relative` value divided by the total sum of the inverses of the current values (i.e. the weighted *average* of the differences).\n</details>\n",
              "createdAt": "2025-03-18T14:10:32Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6jsun0",
              "body": "This PR/issue depends on:\n* ~~leanprover-community/mathlib4#23091~~\nBy **[Dependent Issues](https://github.com/z0al/dependent-issues)** (ðŸ¤–). Happy coding!\n<!-- By Dependent Issues (Action) - DO NOT REMOVE -->",
              "createdAt": "2025-03-23T20:33:53Z",
              "author": {
                "login": "mathlib4-dependent-issues-bot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6jtOwV",
              "body": "I've left a bunch of comments, but this is overall looking nice!",
              "createdAt": "2025-03-23T23:20:55Z",
              "author": {
                "login": "b-mehta"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6j0BrU",
              "body": "Doc comments only this time! I think there's still golf and small API things that could be added, but this is on the whole very nice. I quite like the idea of making the def of copyCount closer to the def of labelledCopyCount, as the image of the finset, but I won't insist.",
              "createdAt": "2025-03-24T14:28:30Z",
              "author": {
                "login": "b-mehta"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "017a8b40b2e7d4c16349adf519ae85142e62a8be",
                "additions": 205,
                "deletions": 8,
                "committedDate": "2025-03-23T20:37:34Z",
                "author": {
                  "name": "YaÃ«l Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJI-TW0g",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14022781958/job/39256905426"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJI_BRMg",
                        "name": "set_pr_emoji",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14023123292/job/39257657650"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJI_BK3g",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14023122599/job/39257656030"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJI_Gb5w",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14023162474/job/39257742311"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJI_HVAA",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14023169265/job/39257756928"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJI_I-jA",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14023180952/job/39257783948"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJI-TYjA",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14022782134/job/39256905868"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJI_BKBw",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14023122602/job/39257655815"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJI_Gb4w",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14023162473/job/39257742307"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJI_HVEQ",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14023169269/job/39257756945"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJI_I-mw",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14023180956/job/39257783963"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJI-TYgw",
                        "name": "post-or-update-summary-comment",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14022782133/job/39256905859"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJI-TWww",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14022781959/job/39256905411"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJI-TXLw",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14022781958/job/39256905519"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJI-TXGQ",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14022781959/job/39256905497"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJI-TXdQ",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14022781958/job/39256905589"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJI-cE6Q",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14022781959/job/39257048297"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJI-TrRw",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/39256910663"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJI-T9FA",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=23049&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "be44b861535804ac8543df84dfb1662f4135ba07",
                "additions": 89,
                "deletions": 84,
                "committedDate": "2025-03-23T21:58:59Z",
                "author": {
                  "name": "YaÃ«l Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJI_kwMg",
                        "name": "Lint style",
                        "conclusion": "CANCELLED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14023377790/job/39258239026"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJI_kwQA",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14023377785/job/39258239040"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJI_kw5Q",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14023377899/job/39258239205"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJI_kwtQ",
                        "name": "post-or-update-summary-comment",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14023377891/job/39258239157"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJI_kwcw",
                        "name": "Build",
                        "conclusion": "CANCELLED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14023377790/job/39258239091"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJI_kwhw",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14023377785/job/39258239111"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJI_ldHA",
                        "name": "Post-CI job",
                        "conclusion": "CANCELLED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14023377790/job/39258250524"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJI_kw2Q",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14023377785/job/39258239193"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJI_lAjw",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/39258243215"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJI_k-SQ",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=23049&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "fb4be25ac2a03cd461f03dc319a9d58dd3a4e3d5",
                "additions": 2,
                "deletions": 1,
                "committedDate": "2025-03-23T21:59:52Z",
                "author": {
                  "name": "YaÃ«l Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJI_lV1w",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14023381687/job/39258248663"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJI_mSPA",
                        "name": "set_pr_emoji",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14023388318/job/39258264124"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJA8gCg",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14024009412/job/39259676682"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJEzzvw",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14025637255/job/39263728575"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJE3XcA",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14025659397/job/39263786864"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJE7SZg",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14025685560/job/39263851110"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJOZCHQ",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14029425101/job/39273775645"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJiHEiQ",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14036128774/job/39294452873"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJiP1Kg",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14036173070/job/39294596394"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJiqPSA",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14036304267/job/39295029064"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJi-pPg",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14036406654/job/39295363390"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJkBZBg",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14036740480/job/39296456966"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJkLAsg",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14036786833/job/39296614578"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJk0NKw",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14036990544/job/39297289515"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJk1MAw",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14036995162/job/39297305603"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJk4wHQ",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14037011418/job/39297363997"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJlRtZw",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14037128818/job/39297772903"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJmDP0Q",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14037363640/job/39298584529"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJmODTA",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14037416145/job/39298761548"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJI_lX-w",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14023381837/job/39258249211"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJA8fvg",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14024009398/job/39259676606"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJEzzyQ",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14025637257/job/39263728585"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJE3XiQ",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14025659386/job/39263786889"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJE7SfQ",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14025685567/job/39263851133"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJOZB4A",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14029425099/job/39273775584"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJiHEWg",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14036128827/job/39294452826"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJiP1Og",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14036173046/job/39294596410"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJiqPnQ",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14036304260/job/39295029149"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJi-pow",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14036406652/job/39295363491"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJkBXhw",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14036740478/job/39296456583"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJkLAkw",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14036786831/job/39296614547"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJk0NHQ",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14036990553/job/39297289501"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJk1MTw",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14036995148/job/39297305679"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJk4wIg",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14037011403/job/39297364002"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJlRuEA",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14037128851/job/39297773072"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJmDPTg",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14037363638/job/39298584398"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJmODHA",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14037416124/job/39298761500"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJI_lX-Q",
                        "name": "post-or-update-summary-comment",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14023381841/job/39258249209"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJI_ld-A",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14023381686/job/39258250744"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJI_lWHw",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14023381687/job/39258248735"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJI_le2w",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14023381686/job/39258250971"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJI_lXDw",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14023381687/job/39258248975"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJI_wagw",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14023381686/job/39258430083"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJI_lz_w",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/39258256383"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJI_lc1Q",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=23049&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "b6433eebf4c5da25302d469424f03a7b49454fab",
                "additions": 60,
                "deletions": 56,
                "committedDate": "2025-03-24T14:11:16Z",
                "author": {
                  "name": "YaÃ«l Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJmZsCw",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14037471754/job/39298952203"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJmZr7g",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14037472164/job/39298952174"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJmZsUg",
                        "name": "post-or-update-summary-comment",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14037472169/job/39298952274"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJmZrrA",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14037471761/job/39298952108"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJmZo4Q",
                        "name": "Build",
                        "conclusion": "CANCELLED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14037471761/job/39298951393"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJmZomg",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14037471754/job/39298951322"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJm6dEQ",
                        "name": "Post-CI job",
                        "conclusion": "CANCELLED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14037471761/job/39299489041"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJmZuLA",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14037471754/job/39298952748"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJmbQjg",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/39298977934"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "12ab0f23d6eb4b4366b5de11d374d71ac57d0b6b",
                "additions": 3,
                "deletions": 2,
                "committedDate": "2025-03-24T14:13:22Z",
                "author": {
                  "name": "YaÃ«l Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJmjiUw",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14037519073/job/39299113555"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJmpp5g",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14037548838/job/39299213798"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJm4BBw",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14037618949/job/39299449095"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJnAojA",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14037661382/job/39299590284"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJnDlhQ",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14037675239/job/39299638661"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJnh_zA",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14037823436/job/39300136908"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJoL1UA",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14038022851/job/39300822352"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJtcVxw",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14039658775/job/39306335687"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJtxiog",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14039758633/job/39306683042"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJuIw8w",
                        "name": "Add ready-to-merge or delegated label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14039870076/job/39307063539"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJmjl_Q",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14037519566/job/39299114493"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJmpp4g",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14037548849/job/39299213794"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJm4BzQ",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14037618986/job/39299449293"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJnAqAQ",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14037661383/job/39299590657"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJnDleA",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14037675322/job/39299638648"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJnh_YQ",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14037823432/job/39300136801"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJoL0UA",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14038022855/job/39300822096"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJtcWaA",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14039658779/job/39306335848"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJtxhKQ",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14039758440/job/39306682665"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJuIxtw",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14039870075/job/39307063735"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJmjmug",
                        "name": "post-or-update-summary-comment",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14037519564/job/39299114682"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJm6iHA",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14037519021/job/39299490332"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJmjlTg",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14037519073/job/39299114318"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJm6fsw",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14037519021/job/39299489715"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJmjnqg",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14037519073/job/39299114922"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJnjKBg",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14037519021/job/39300155910"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJmlJUg",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/39299139922"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "d4bffec938c923e6c3445afacd80d8964828397e",
                "additions": 12,
                "deletions": 8,
                "committedDate": "2025-03-24T15:55:25Z",
                "author": {
                  "name": "YaÃ«l Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "4d3ee235eec181f2ed48c8483e8d0df2303a7b14",
                "additions": 7,
                "deletions": 4,
                "committedDate": "2025-03-24T15:57:52Z",
                "author": {
                  "name": "YaÃ«l Dillies",
                  "email": "yael.dillies@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJuPFsQ",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14039901188/job/39307167153"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJuPLvQ",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14039901803/job/39307168701"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJuPLng",
                        "name": "post-or-update-summary-comment",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14039901819/job/39307168670"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJuPFTw",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14039901189/job/39307167055"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJuPIgg",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14039901188/job/39307167874"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJuPHLQ",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14039901189/job/39307167533"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJuPKkA",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14039901188/job/39307168400"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJu52Zw",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14039901189/job/39307867751"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAJJuQ5mA",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/39307196824"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "createdAt": "2025-03-18T14:09:33Z",
        "deletions": 2,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/Combinatorics/SimpleGraph/Copy.lean",
              "additions": 217,
              "deletions": 2
            }
          ]
        },
        "headRefName": "kill_subgraph",
        "headRefOid": "4d3ee235eec181f2ed48c8483e8d0df2303a7b14",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c6PHRMg",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJPeA",
              "color": "33dbec",
              "name": "t-combinatorics"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c6hfQ-G",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mitchell-horner"
              },
              "submittedAt": "2025-03-24T07:17:30Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6hkMXv",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "b-mehta"
              },
              "submittedAt": "2025-03-24T14:35:35Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 23049,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": "APPROVED",
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c6gr12L",
              "body": "This PR seems to do far more than the title and PR description describe, and some of the changes appear unintentional. Did you mean to mark this PR as WIP? ",
              "state": "CHANGES_REQUESTED",
              "author": {
                "login": "b-mehta"
              },
              "submittedAt": "2025-03-18T18:47:33Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6gyoZQ",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2025-03-19T09:25:28Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6gzO4l",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2025-03-19T10:05:41Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6gzjiT",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2025-03-19T10:34:39Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6gzjoO",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2025-03-19T10:34:47Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6hdA7d",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "b-mehta"
              },
              "submittedAt": "2025-03-23T20:23:24Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6hdSJh",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "b-mehta"
              },
              "submittedAt": "2025-03-23T21:22:00Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6hdStF",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2025-03-23T21:27:15Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6hdSv-",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2025-03-23T21:28:04Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6hdS3I",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2025-03-23T21:29:31Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6hdcHb",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "b-mehta"
              },
              "submittedAt": "2025-03-23T23:20:35Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6hd1Ez",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2025-03-24T02:02:55Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6hd1lT",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "b-mehta"
              },
              "submittedAt": "2025-03-24T02:05:08Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6hd2BV",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2025-03-24T02:07:30Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6hfQ-G",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mitchell-horner"
              },
              "submittedAt": "2025-03-24T07:17:30Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6hjGg7",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "b-mehta"
              },
              "submittedAt": "2025-03-24T13:10:21Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6hjIdN",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2025-03-24T13:12:21Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6hjMqA",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "b-mehta"
              },
              "submittedAt": "2025-03-24T13:18:18Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6hjQXC",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2025-03-24T13:23:10Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6hjcVf",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2025-03-24T13:38:22Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6hjeBR",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2025-03-24T13:40:29Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6hjlZS",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "b-mehta"
              },
              "submittedAt": "2025-03-24T13:49:33Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6hjlwz",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2025-03-24T13:49:48Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6hjmsp",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2025-03-24T13:50:35Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6hjrNW",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "b-mehta"
              },
              "submittedAt": "2025-03-24T13:56:09Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6hj0Nu",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2025-03-24T14:06:35Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6hj2Fc",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2025-03-24T14:08:53Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6hj6v0",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2025-03-24T14:14:47Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6hj9Mi",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "b-mehta"
              },
              "submittedAt": "2025-03-24T14:17:55Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6hj-uc",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "b-mehta"
              },
              "submittedAt": "2025-03-24T14:19:48Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6hj_Nw",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "b-mehta"
              },
              "submittedAt": "2025-03-24T14:20:25Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6hj_yP",
              "body": "",
              "state": "APPROVED",
              "author": {
                "login": "b-mehta"
              },
              "submittedAt": "2025-03-24T14:26:46Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6hkMXv",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "b-mehta"
              },
              "submittedAt": "2025-03-24T14:35:35Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6hlFOz",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2025-03-24T15:46:35Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6hlKJG",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2025-03-24T15:51:10Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6hlOWa",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "YaelDillies"
              },
              "submittedAt": "2025-03-24T15:56:30Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c53UE3a",
                    "body": "The old docstring here is more informative than the new.",
                    "createdAt": "2025-03-18T18:40:47Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c53UFEu",
                    "body": "It seems to me that the injective graph homomorphism should be mentioned by copy, rather than by containment.",
                    "createdAt": "2025-03-18T18:41:14Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c53Y05b",
                    "body": "I cannot decipher what you mean with this comment",
                    "createdAt": "2025-03-19T10:34:39Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c53wkzz",
                    "body": "The change I wanted was included in the other PR, resolving this",
                    "createdAt": "2025-03-23T20:23:24Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c53UFIM",
                    "body": "```suggestion\r\nContainment:\r\n```",
                    "createdAt": "2025-03-18T18:41:22Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c53UFPa",
                    "body": "accidental?",
                    "createdAt": "2025-03-18T18:41:39Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c53YUMf",
                    "body": "Indeed",
                    "createdAt": "2025-03-19T09:25:27Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c53UFUS",
                    "body": "```suggestion\r\n* `G âŠ´ H` for `SimpleGraph.IsIndContained G H`.\r\n```",
                    "createdAt": "2025-03-18T18:41:47Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c53UGE_",
                    "body": "I would strongly suggest adding these two declarations in a different PR.",
                    "createdAt": "2025-03-18T18:43:04Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c53Y09I",
                    "body": "#23091",
                    "createdAt": "2025-03-19T10:34:47Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c53UGqR",
                    "body": "Let's also mention this in the module docstring.",
                    "createdAt": "2025-03-18T18:43:45Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c53UHhp",
                    "body": "Did you accidentally leave this in?",
                    "createdAt": "2025-03-18T18:44:36Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c53UIyy",
                    "body": "It looks like you renamed this without deprecation, and it's not clear to me that your new name is any better: in fact it seems closer to the name you complained about in the past",
                    "createdAt": "2025-03-18T18:46:36Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c53YoVy",
                    "body": "Yes, because I worked out again why I had chosen the name as such. The current name is problematic in that it lies in two namespaces: with `Subgraph.Copy.map`, you can neither do dot notation on the `Subgraph` nor on the `Copy`. Furthermore, I have discovered that the most important use case of `isoSubgraphMap` is when `A' := âŠ¤`, which I have made as `isoToSubgraph`, whose name is close to `isoSubgraphMap` and independently guessable.",
                    "createdAt": "2025-03-19T10:05:41Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c53wt2h",
                    "body": "these are duplicates",
                    "createdAt": "2025-03-23T21:18:40Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c53wt3d",
                    "body": "```suggestion\r\n  `G`. This is the negation of `SimpleGraph.IsContained` implemented for convenience.\r\n```",
                    "createdAt": "2025-03-23T21:18:44Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c53wt39",
                    "body": "Why are these deleted?",
                    "createdAt": "2025-03-23T21:18:52Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c53wuSw",
                    "body": "Whoops, hasty merge",
                    "createdAt": "2025-03-23T21:27:15Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c53wt4o",
                    "body": "Why is this deleted?",
                    "createdAt": "2025-03-23T21:18:59Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c53wt5n",
                    "body": "type arguments are weird here",
                    "createdAt": "2025-03-23T21:19:25Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c53wt87",
                    "body": "Let's go with `killCopies`, since there's many things you could kill in a graph!",
                    "createdAt": "2025-03-23T21:20:13Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c53wuV_",
                    "body": "Ah! I wasn't quite sure what to call that, but `killCopies` is a great name ",
                    "createdAt": "2025-03-23T21:28:04Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c53wuBK",
                    "body": "I find the argument order here quite confusing, Usually `G.operation` is a modification of `G`, whereas here it's a modification of the other argument using `G`. What do you think?",
                    "createdAt": "2025-03-23T21:21:54Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c53wuZh",
                    "body": "I don't hugely mind, but I guess it is true that `G.kill H` reads more like \"`G`, where you kill `H`\" than vice-versa. Furthermore, `H` is often used as the graph you're trying to avoid in the literature",
                    "createdAt": "2025-03-23T21:29:31Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c53w0bn",
                    "body": "Oops, I should've caught this before, but probably `IsFree` would be better here...",
                    "createdAt": "2025-03-23T23:07:26Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c53w0ka",
                    "body": "But also, perhaps we want to flip the order here too? (cc @mitchell-horner, since this could break your code and maybe you'll have thoughts)",
                    "createdAt": "2025-03-23T23:08:32Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c53x8XE",
                    "body": "> But also, perhaps we want to flip the order here too? (cc @mitchell-horner, since this could break your code and maybe you'll have thoughts)\r\n\r\n@b-mehta I put the order `H.Free G` ($G$ is $H$-free) because it reads nice (to me) to have `H.Free` as a predicate for simple graphs. \r\nE.g., If you say `G.IsExtremal H.Free â†” (H.Free G) âˆ§ #G.edgeFinset = extremalNumber (card V) H` out-loud, it sounds like the statement it is trying to describe in English. (This is how I judge names. ðŸ˜…)\r\n\r\nIf you flip the order I think the name looses its implied meaning, in which case `G.CopyFree H` ($G$ is $H$-free) might be more self-documenting.\r\nE.g., `G.CopyFree (âŠ¤ : SimpleGraph Î±) â†” G.CliqueFree (card Î±)` reads nice.\r\n\r\nEDIT: and feel free to break my code whenever. ðŸ˜…\r\n",
                    "createdAt": "2025-03-24T07:17:30Z",
                    "author": {
                      "login": "mitchell-horner"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c530H9i",
                    "body": "True, `H.Free G` is nice. \r\n1. `H.IsFree G` is the one which aligns with the new naming convention, so we should make that change (though perhaps not in this PR)\r\n2. `G.IsFreeOf H` or `G.IsFreeFrom H` could work too. But I won't insist this get changed, the argument about `H.Free` being a predicate is pretty convincing",
                    "createdAt": "2025-03-24T13:10:21Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c530I3l",
                    "body": "> 1. `H.IsFree G` is the one which aligns with the new naming convention, so we should make that change (though perhaps not in this PR)\r\n\r\nWe have decided that predicates which are otherwise not adjectives should be prefixed with `Is`. I do not think we agreed on (and personally disagree with) prefixing predicates which are already adjectives with `Is`",
                    "createdAt": "2025-03-24T13:12:21Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c530LOc",
                    "body": "> > 1. `H.IsFree G` is the one which aligns with the new naming convention, so we should make that change (though perhaps not in this PR)\r\n> \r\n> We have decided that predicates which are otherwise not adjectives should be prefixed with `Is`. I do not think we agreed on (and personally disagree with) prefixing predicates which are already adjectives with `Is`\r\n\r\nIn this case I think it's pretty clear that `IsFree` more closely aligns with the informal description - see eg Mitchell's comment above. Consider also `IsSquarefree` and `IsCornerFree`.",
                    "createdAt": "2025-03-24T13:18:18Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c530NOu",
                    "body": "Yes, but `H.Free` reads really closely to \"is `H`-free\", so I am in favor of keeping things the way they are now (and it's also why I didn't point it out on the PR introducing `Free`)",
                    "createdAt": "2025-03-24T13:23:09Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c530nXJ",
                    "body": "Let's leave it for now",
                    "createdAt": "2025-03-24T14:20:25Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c53w0im",
                    "body": "I'd like if we could add a bit more informal description of what this means here.",
                    "createdAt": "2025-03-23T23:08:01Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c53w0lM",
                    "body": "hasty merge?",
                    "createdAt": "2025-03-23T23:08:46Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c53w0ox",
                    "body": "How bad is it to make this computable?",
                    "createdAt": "2025-03-23T23:09:37Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c530T5O",
                    "body": "Computable, probably not so bad, but seems out of scope writing the necessary decidability instances. Efficiently computable, I would say quite hard, because you're basically asking me to implement a graph isomorphism algorithm. ",
                    "createdAt": "2025-03-24T13:38:22Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c530ZCE",
                    "body": "Efficiently computable is definitely not reasonable here. But let's have a TODO to make it computable - probably the decidability instances that come out will be independently useful",
                    "createdAt": "2025-03-24T13:49:33Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c53w0sY",
                    "body": "Woah, this proof is way longer than I would have expected, does it really need to be this long?",
                    "createdAt": "2025-03-23T23:10:10Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c53w1Ux",
                    "body": "It seems to me like this indicates missing API around something in the proof...",
                    "createdAt": "2025-03-23T23:20:34Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c530U0N",
                    "body": "How would you expect it to look? It looks quite how I would expect it to look, namely:\r\n1. Construct the one copy you're claiming is the only one\r\n2. Prove that all other copies are equal to it",
                    "createdAt": "2025-03-24T13:40:29Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c53w0uP",
                    "body": "as before, except this time it seems even worse because we should be able to show `H = bot` easily?",
                    "createdAt": "2025-03-23T23:10:41Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c530ZKX",
                    "body": "I don't really see how `H` being `bot` makes it any easier. It looks you are conflating all `bot` graphs: There is one per type, and in particular for a general fintype `W` we have `(G : SimpleGraph V).copyCount (bot : SimpleGraph W) = #V.choose #W`",
                    "createdAt": "2025-03-24T13:49:48Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c530cHq",
                    "body": "I'm certainly not conflating all `bot` graphs, I'm saying that since `IsEmpty W`, there's a unique choice for what `H` could be, namely the empty one on that type. Why do you think I'm conflating all `bot` graphs?",
                    "createdAt": "2025-03-24T13:56:09Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c530k1O",
                    "body": "Okay, so what is the proof of\r\n```\r\n@[simp] lemma copyCount_bot_of_isEmpty [IsEmpty W] (G : SimpleGraph V) :\r\n    G.copyCount (âŠ¥ : SimpleGraph W) = 1 := by\r\n```\r\n? I am claiming it is no easier than the proof of `copyCount_of_isEmpty` that I currently have",
                    "createdAt": "2025-03-24T14:14:47Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c530mMd",
                    "body": "Well, with labelledCopyCount now I think you beat what I was thinking of anyway, so this is now moot :)",
                    "createdAt": "2025-03-24T14:17:55Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c53w0xm",
                    "body": "Do you want a version of this (and the below) in terms of `Free`? It'd be easy to prove, but still",
                    "createdAt": "2025-03-23T23:11:24Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c53w01X",
                    "body": "also here, how bad is it to make this computable? ",
                    "createdAt": "2025-03-23T23:12:26Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c530ZjM",
                    "body": "Probably just as difficult as the other one",
                    "createdAt": "2025-03-24T13:50:35Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c53w06S",
                    "body": "Perhaps you can use this to prove copyCount empty stuff. It might also make sense to define labelledCopyCount first: the informal definitions are about the same level of \"difficult\", the formal definition of labelledCopyCount is \"simpler\", so it's arguably \"simpler\" overall.",
                    "createdAt": "2025-03-23T23:13:48Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c530hJk",
                    "body": "Yeah, that's a good point",
                    "createdAt": "2025-03-24T14:06:35Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c530nEg",
                    "body": "In fact, you also can use\r\n```\r\n#((Finset.univ : Finset (H.Copy G)).image Copy.toSubgraph)\r\n```\r\nas your definition of copyCount, which is easy to show equivalent to your definition, gives you this inequality easily, and makes computability nicer too... What do you think? \r\n(Of course, whichever you choose, there should be a lemma saying it's equal to the other one)",
                    "createdAt": "2025-03-24T14:19:48Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c531Sa0",
                    "body": "Hmm, I doubt this is a good definition since it requires to either\r\n* assume `W` is finite even though that's unnecessary for the definition\r\n* do a case split on whether `W` is finite or infinite, returning `0` when `W` is infinite and `#((Finset.univ : Finset (H.Copy G)).image Copy.toSubgraph)` when it's finite",
                    "createdAt": "2025-03-24T15:51:10Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c53w083",
                    "body": "Consider making this a module-level TODO instead",
                    "createdAt": "2025-03-23T23:14:23Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c530iML",
                    "body": "I've made it a TODO in the module doc, but kept it there too",
                    "createdAt": "2025-03-24T14:08:53Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c53w0_x",
                    "body": "```suggestion\r\n/-- `G.killCopies H` is a subgraph of `G` where an arbitrary edge was removed from each copy of `H` in\r\n`G`. By construction, it doesn't contain `H` (unless `H` had no edges) and has at most the number of\r\ncopies of `H` edges less than `G`. -/\r\nnoncomputable irreducible_def killCopies (G : SimpleGraph V) (H : SimpleGraph W) :\r\n    SimpleGraph V := by\r\n```\r\nor something. (And I'm happy for this one to remain noncomputable)",
                    "createdAt": "2025-03-23T23:15:24Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c53w1GL",
                    "body": "IMO it's not _ideal_ that the end-user can't access anything about the actual definition or implementation of killCopies, nor any universal property about it. But if we make it clearer in the def docstring that this is intentional, since the changes made to G are deleting completely arbitrary edges to make it happen, then it's probably fine",
                    "createdAt": "2025-03-23T23:17:03Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c53w1K_",
                    "body": "I also realise now that the definition doesn't respect isos in either argument, right? That's unfortunate...",
                    "createdAt": "2025-03-23T23:18:06Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c53xFrj",
                    "body": "What would be the point of making it respect isos? It sounds quite incredibly painful/impossible (because of automorphisms)",
                    "createdAt": "2025-03-24T02:02:55Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c53xF_l",
                    "body": "I'm not saying you should change it to respect isos, but the majority of mathematical definitions respect isomorphisms in their inputs. I'm saying this is an exception.",
                    "createdAt": "2025-03-24T02:05:08Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c53xGRM",
                    "body": "Sure, I would accept that",
                    "createdAt": "2025-03-24T02:07:29Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c53w1Ou",
                    "body": "I think the naming convention says instFintype for this (eg this is what the autogenerated name would be suffixed, and all the exceptions to the rule in mathlib are hand-made, presumably unchanged from the port)",
                    "createdAt": "2025-03-23T23:18:59Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c530ukb",
                    "body": "oops, `edgeSet` rather than `EdgeSet`?",
                    "createdAt": "2025-03-24T14:35:35Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c531Por",
                    "body": "Ah yes indeed",
                    "createdAt": "2025-03-24T15:46:35Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c53w1SZ",
                    "body": "Can we also have the version as `#G.edgeFinset <= ...`, ie not using nat subtraction.",
                    "createdAt": "2025-03-23T23:19:55Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c530nrG",
                    "body": "```suggestion\r\n* `SimpleGraph.copyCount G H`: Number of copies of `H` in `G`, i.e. number of subgroups of `G`\r\n  isomorphic to `H`.\r\n* `SimpleGraph.labelledCopyCount G H`: Number of labelled copies of `H` in `G`, i.e. number of\r\n  graph embeddings from `H` to `G`.\r\n```\r\nnit",
                    "createdAt": "2025-03-24T14:21:06Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c530n2M",
                    "body": "```suggestion\r\n/-- `G.labelledCopyCount H` is the number of labelled copies of `H` in `G`, i.e. the number of graph embeddings from `H` to `G`. See `SimpleGraph.copyCount` for the number of unlabelled copies. -/\r\n```",
                    "createdAt": "2025-03-24T14:21:31Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c530oFI",
                    "body": "```suggestion\r\n/-- `G.copyCount H` is the number of unlabelled copies of `H` in `G`, i.e. the number of subgraphs of `G` isomorphic to `H`.\r\nSee `SimpleGraph.labelledCopyCount` for the number of labelled copies. -/\r\n```\r\n(haven't checked line wrapping!)",
                    "createdAt": "2025-03-24T14:21:59Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c530oJ_",
                    "body": "```suggestion\r\n* `SimpleGraph.copyCount G H`: Number of copies of `H` in `G`, ie number of subgraphs of `G`\r\n```\r\n:)",
                    "createdAt": "2025-03-24T14:22:09Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c531U4b",
                    "body": "Oops",
                    "createdAt": "2025-03-24T15:56:30Z",
                    "author": {
                      "login": "YaelDillies"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c530pOo",
                    "body": "```suggestion\r\n/--\r\n`G.killCopies H` has no effect on `G` if and only if `G` already contained no copies of `H`. See\r\n`Free.killCopies_eq_left` for the reverse implication with no assumption on `H`.\r\n-/\r\nlemma killCopies_eq_left (hH : H â‰  âŠ¥) : G.killCopies H = G â†” H.Free G := by\r\n```\r\n(or some alternate phrasing)",
                    "createdAt": "2025-03-24T14:24:27Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c530pp6",
                    "body": "```suggestion\r\n/-- `G.killCopies H` is a subgraph of `G` where an *arbitrary* edge was removed from each copy of\r\n`H` in `G`. By construction, it doesn't contain `H` (unless `H` had no edges) and has at most the\r\nnumber of copies of `H` edges less than `G`. See `free_killCopies` and `le_card_edgeFinset_killCopies` \r\nfor these two properties. -/\r\n```",
                    "createdAt": "2025-03-24T14:25:23Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjE0MDkwNTkz",
              "login": "YaelDillies"
            },
            {
              "id": "U_kgDOCsITAQ",
              "login": "mathlib4-dependent-issues-bot"
            },
            {
              "id": "MDQ6VXNlcjI5OTU5MjI2",
              "login": "b-mehta"
            },
            {
              "id": "MDQ6VXNlcjI5ODgyOTg3",
              "login": "mitchell-horner"
            },
            {
              "id": "U_kgDOBcsTTQ",
              "login": "leanprover-community-bot-assistant"
            }
          ]
        },
        "state": "OPEN",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAJJuPFsQ",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14039901188/job/39307167153"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAJJuPLvQ",
                "name": "label-and-report-new-contributor",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14039901803/job/39307168701"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAJJuPLng",
                "name": "post-or-update-summary-comment",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14039901819/job/39307168670"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAJJuPFTw",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14039901189/job/39307167055"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAJJuPIgg",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14039901188/job/39307167874"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAJJuPHLQ",
                "name": "Build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14039901189/job/39307167533"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAJJuPKkA",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14039901188/job/39307168400"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAJJu52Zw",
                "name": "Post-CI job",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/14039901189/job/39307867751"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAJJuQ5mA",
                "name": "New Contributor Check",
                "conclusion": "NEUTRAL",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/39307196824"
              }
            ]
          }
        },
        "title": "feat: kill copies of a graph",
        "updatedAt": "2025-03-24T15:58:57Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/23049",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "ReviewRequestedEvent",
              "id": "RRE_lADOFcwZ1c6uj9pVzwAAAAPrciNQ",
              "createdAt": "2025-03-18T14:09:58Z",
              "requestedReviewer": {
                "id": "MDQ6VXNlcjI5OTU5MjI2",
                "login": "b-mehta"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6i7FzO",
              "createdAt": "2025-03-18T14:10:32Z",
              "body": "### PR summary [4d3ee235ee](https://github.com/leanprover-community/mathlib4/pull/23049/commits/4d3ee235eec181f2ed48c8483e8d0df2303a7b14)\n\n<details><summary>\n\n#### Import changes for modified files\n\n</summary>\n\nDependency changes\n\n| File | Base Count | Head Count | Change |\n| --- | --- | --- | --- |\n| Mathlib.Combinatorics.SimpleGraph.Copy | 601 | 603 | +2 (+0.33%) |\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n| `Mathlib.Combinatorics.SimpleGraph.Copy`|2|\n\n</details>\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ Free.killCopies_eq_left`\n`+ copyCount`\n`+ copyCount_bot`\n`+ copyCount_eq_card_image_copyToSubgraph`\n`+ copyCount_eq_zero`\n`+ copyCount_le_labelledCopyCount`\n`+ copyCount_of_isEmpty`\n`+ copyCount_pos`\n`+ free_killCopies`\n`+ killCopies.edgeSet.instFintype`\n`+ killCopies_bot`\n`+ killCopies_eq_left`\n`+ killCopies_le_left`\n`+ labelledCopyCount`\n`+ labelledCopyCount_eq_zero`\n`+ labelledCopyCount_of_isEmpty`\n`+ labelledCopyCount_pos`\n`+ le_card_edgeFinset_killCopies`\n`+ le_card_edgeFinset_killCopies_add_copyCount`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n</details>\n\n---\n\n<details><summary>No changes to technical debt.</summary>\n\nYou can run this locally as\n```\n./scripts/technical-debt-metrics.sh pr_summary\n```\n* The `relative` value is the weighted *sum* of the differences with weight given by the *inverse* of the current value of the statistic.\n* The `absolute` value is the `relative` value divided by the total sum of the inverses of the current values (i.e. the weighted *average* of the differences).\n</details>\n",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6uj9pVzwAAAAPrcqaV",
              "createdAt": "2025-03-18T14:10:39Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJPeA",
                "name": "t-combinatorics"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6gr12L",
              "createdAt": "2025-03-18T18:40:47Z",
              "body": "This PR seems to do far more than the title and PR description describe, and some of the changes appear unintentional. Did you mean to mark this PR as WIP? ",
              "author": {
                "login": "b-mehta"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6uj9pVzwAAAAPr7RO3",
              "createdAt": "2025-03-18T18:47:40Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6uj9pVzwAAAAPs_6Qh",
              "createdAt": "2025-03-19T10:35:07Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6uj9pVzwAAAAPs_65P",
              "createdAt": "2025-03-19T10:35:12Z",
              "label": {
                "id": "MDU6TGFiZWwzMjg4OTQyMDg2",
                "name": "blocked-by-other-PR"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c6uj9pVzwAAAAPtoG9A",
              "createdAt": "2025-03-19T16:31:47Z"
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6uj9pVzwAAAAPxTWTf",
              "createdAt": "2025-03-21T18:16:44Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c6uj9pVzwAAAAPyCIpx",
              "createdAt": "2025-03-23T19:51:37Z"
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6uj9pVzwAAAAPyCJBQ",
              "createdAt": "2025-03-23T19:52:21Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6uj9pVzwAAAAPyCySI",
              "createdAt": "2025-03-23T20:33:51Z",
              "label": {
                "id": "MDU6TGFiZWwzMjg4OTQyMDg2",
                "name": "blocked-by-other-PR"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6jsun0",
              "createdAt": "2025-03-23T20:33:53Z",
              "body": "This PR/issue depends on:\n* ~~leanprover-community/mathlib4#23091~~\nBy **[Dependent Issues](https://github.com/z0al/dependent-issues)** (ðŸ¤–). Happy coding!\n<!-- By Dependent Issues (Action) - DO NOT REMOVE -->",
              "author": {
                "login": "mathlib4-dependent-issues-bot"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "017a8b40b2e7d4c16349adf519ae85142e62a8be"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c6uj9pVzwAAAAPyC4ND",
              "createdAt": "2025-03-23T20:37:46Z"
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6hdSJh",
              "createdAt": "2025-03-23T21:18:40Z",
              "body": "",
              "author": {
                "login": "b-mehta"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6uj9pVzwAAAAPyDyIl",
              "createdAt": "2025-03-23T21:22:08Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "be44b861535804ac8543df84dfb1662f4135ba07"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "fb4be25ac2a03cd461f03dc319a9d58dd3a4e3d5"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6uj9pVzwAAAAPyEX5l",
              "createdAt": "2025-03-23T22:00:38Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6hdcHb",
              "createdAt": "2025-03-23T23:07:26Z",
              "body": "",
              "author": {
                "login": "b-mehta"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6jtOwV",
              "createdAt": "2025-03-23T23:20:55Z",
              "body": "I've left a bunch of comments, but this is overall looking nice!",
              "author": {
                "login": "b-mehta"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "b6433eebf4c5da25302d469424f03a7b49454fab"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "12ab0f23d6eb4b4366b5de11d374d71ac57d0b6b"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6hj_yP",
              "createdAt": "2025-03-24T14:21:06Z",
              "body": "",
              "author": {
                "login": "b-mehta"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6j0BrU",
              "createdAt": "2025-03-24T14:28:30Z",
              "body": "Doc comments only this time! I think there's still golf and small API things that could be added, but this is on the whole very nice. I quite like the idea of making the def of copyCount closer to the def of labelledCopyCount, as the image of the finset, but I won't insist.",
              "author": {
                "login": "b-mehta"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "d4bffec938c923e6c3445afacd80d8964828397e"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "4d3ee235eec181f2ed48c8483e8d0df2303a7b14"
              }
            }
          ]
        }
      }
    }
  }
}
