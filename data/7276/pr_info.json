{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 64,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "ocfnash"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 7,
        "closed": true,
        "closedAt": "2023-09-21T11:01:39Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5nE6bw",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6259984939/job/16997108846)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6259984939/job/16997108357)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6259984939/job/16997109070)",
              "createdAt": "2023-09-21T11:01:38Z",
              "author": {
                "login": "bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "5af05463fdda485312060f019e65ce5170e9b6fb",
                "additions": 56,
                "deletions": 1,
                "committedDate": "2023-09-20T10:28:32Z",
                "author": {
                  "name": "Oliver Nash",
                  "email": "github@olivernash.org"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "9e05cb8756cc6a8c49595efa620f002e1512d4bb",
                "additions": 7,
                "deletions": 10,
                "committedDate": "2023-09-20T13:20:52Z",
                "author": {
                  "name": "Oliver Nash",
                  "email": "github@olivernash.org"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "8f68302c73726c20320556ae95dde19e84d32b0b",
                "additions": 3,
                "deletions": 2,
                "committedDate": "2023-09-20T15:49:52Z",
                "author": {
                  "name": "Oliver Nash",
                  "email": "github@olivernash.org"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "5732c2cb16c28e9458e5374cde2e9ddd89875872",
                "additions": 1,
                "deletions": 2,
                "committedDate": "2023-09-20T16:21:29Z",
                "author": {
                  "name": "Oliver Nash",
                  "email": "github@olivernash.org"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "85b12373d493960e93ea14877bbdaf8e2e49f130",
                "additions": 4,
                "deletions": 2,
                "committedDate": "2023-09-20T17:11:52Z",
                "author": {
                  "name": "Junyan Xu",
                  "email": "junyanxu.math@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "07c4f2380d72e576d2273e1a0669cc6da2779a4f",
                "additions": 0,
                "deletions": 1,
                "committedDate": "2023-09-20T17:15:13Z",
                "author": {
                  "name": "Junyan Xu",
                  "email": "junyanxu.math@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "382f81c4f7250d5c04d0712e2ff75b76e7af7f90",
                "additions": 10,
                "deletions": 8,
                "committedDate": "2023-09-20T17:18:17Z",
                "author": {
                  "name": "Eric Wieser",
                  "email": "wieser.eric@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "d7836977db39c4f2b4032378c636d7d582730103",
                "additions": 2,
                "deletions": 2,
                "committedDate": "2023-09-20T20:12:44Z",
                "author": {
                  "name": "Oliver Nash",
                  "email": "github@olivernash.org"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "75980adfbfcd57d4758f5fba39b3bcea2bc21844",
                "additions": 9,
                "deletions": 9,
                "committedDate": "2023-09-20T20:28:00Z",
                "author": {
                  "name": "Oliver Nash",
                  "email": "github@olivernash.org"
                },
                "statusCheckRollup": null
              }
            }
          ]
        },
        "createdAt": "2023-09-20T10:29:13Z",
        "deletions": 9,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/Algebra/Module/LinearMap.lean",
              "additions": 14,
              "deletions": 4
            },
            {
              "path": "Mathlib/LinearAlgebra/Basis.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/LinearAlgebra/BilinearMap.lean",
              "additions": 0,
              "deletions": 1
            },
            {
              "path": "Mathlib/LinearAlgebra/Finsupp.lean",
              "additions": 3,
              "deletions": 2
            },
            {
              "path": "Mathlib/LinearAlgebra/StdBasis.lean",
              "additions": 24,
              "deletions": 1
            },
            {
              "path": "Mathlib/RingTheory/Finiteness.lean",
              "additions": 7,
              "deletions": 0
            },
            {
              "path": "Mathlib/RingTheory/Noetherian.lean",
              "additions": 15,
              "deletions": 0
            }
          ]
        },
        "headRefName": "ocfnash/noetherian_hom",
        "headRefOid": "75980adfbfcd57d4758f5fba39b3bcea2bc21844",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5axLGW",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
              "color": "06e039",
              "name": "ready-to-merge"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJjTQ",
              "color": "33DBEC",
              "name": "t-algebra"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5hhdHf",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-09-20T17:20:37Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hhb6Q",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2023-09-20T17:17:30Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hf_OZ",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "AntoineChambert-Loir"
              },
              "submittedAt": "2023-09-20T14:21:37Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5heeey",
              "body": "I am not sure we want the same thing for abelian groups (and maybe monoids), but we often duplicate everything done for modules for abelian groups.",
              "state": "COMMENTED",
              "author": {
                "login": "riccardobrasca"
              },
              "submittedAt": "2023-09-20T11:09:52Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hmLz7",
              "body": "Thanks :tada:\r\n\r\nbors merge",
              "state": "APPROVED",
              "author": {
                "login": "jcommelin"
              },
              "submittedAt": "2023-09-21T09:45:39Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 7276,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": "APPROVED",
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5heeey",
              "body": "I am not sure we want the same thing for abelian groups (and maybe monoids), but we often duplicate everything done for modules for abelian groups.",
              "state": "COMMENTED",
              "author": {
                "login": "riccardobrasca"
              },
              "submittedAt": "2023-09-20T11:09:52Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5he57g",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-09-20T12:13:50Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hfcG6",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-09-20T13:21:57Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hfMpG",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "AntoineChambert-Loir"
              },
              "submittedAt": "2023-09-20T13:22:23Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hfcYu",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-09-20T13:22:25Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hfesZ",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-09-20T13:26:28Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hflyC",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-09-20T13:38:06Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hfnGR",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-09-20T13:40:27Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hfwQt",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "AntoineChambert-Loir"
              },
              "submittedAt": "2023-09-20T13:55:44Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hfwY2",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "AntoineChambert-Loir"
              },
              "submittedAt": "2023-09-20T13:55:58Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hf39A",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-09-20T14:09:00Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hf6EW",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-09-20T14:12:36Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hf_OZ",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "AntoineChambert-Loir"
              },
              "submittedAt": "2023-09-20T14:21:37Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hgYhK",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-09-20T15:06:32Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hgaPJ",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-09-20T15:09:28Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hgziF",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-09-20T15:48:42Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hg1DO",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-09-20T15:50:43Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hhRUn",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2023-09-20T16:50:14Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hhZ2n",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-09-20T17:12:07Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hhb6Q",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2023-09-20T17:17:30Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hhcdF",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-09-20T17:18:52Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hhdHf",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-09-20T17:20:37Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hihgs",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-09-20T20:28:43Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hihrl",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-09-20T20:29:12Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hihuj",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-09-20T20:29:20Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hih4o",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-09-20T20:29:37Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hmLz7",
              "body": "Thanks :tada:\r\n\r\nbors merge",
              "state": "APPROVED",
              "author": {
                "login": "jcommelin"
              },
              "submittedAt": "2023-09-21T09:45:39Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5PXJLE",
                    "body": "```suggestion\r\nlemma inj_llcomp_flip_apply_of_surj {f : M →ₗ[R] Nₗ} (h : Surjective f) :\r\n```",
                    "createdAt": "2023-09-20T11:06:33Z",
                    "author": {
                      "login": "riccardobrasca"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PXwB5",
                    "body": "Done",
                    "createdAt": "2023-09-20T13:22:25Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5PXar5",
                    "body": "Arguably this should just be stated as injectivity of `. ∘ₗ g`",
                    "createdAt": "2023-09-20T12:13:50Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PXv2k",
                    "body": "Indeed I slightly prefer this; now changed.",
                    "createdAt": "2023-09-20T13:21:57Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5PXmT-",
                    "body": "You don't need commutativity of `R`.",
                    "createdAt": "2023-09-20T12:53:13Z",
                    "author": {
                      "login": "AntoineChambert-Loir"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PXxdb",
                    "body": "Indeed I was aware of this but the result cannot even be stated in today's Mathlib without commutativity because we only have an `R`-module structure on `N →ₗ[R] M` when `R` is commutative.\r\n\r\nSo I claim this is an independent concern.",
                    "createdAt": "2023-09-20T13:26:28Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PX8WY",
                    "body": "What about [LinearMap.module](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Module/LinearMap.html#LinearMap.module)",
                    "createdAt": "2023-09-20T13:55:57Z",
                    "author": {
                      "login": "AntoineChambert-Loir"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PYBFv",
                    "body": "That would only work if the statement were something like `IsNoetherian R (N →ₗ[S] M)`",
                    "createdAt": "2023-09-20T14:09:00Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PYCbx",
                    "body": "It is [LinearMap.module](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Algebra/Module/LinearMap.html#LinearMap.module) which demands commutativity, via the `SMulCommClass` argument.\r\n\r\nYou can witness this as follows:\r\n```lean\r\nvariable {R M N : Type*} [Ring R] [AddCommGroup M] [Module R M] [AddCommGroup N] [Module R N]\r\n\r\n-- Error: \"failed to synthesize instance `SMulCommClass R R N`\" (disappears if use `CommRing R`)\r\n#check @LinearMap.module R R R M N _ _ _ _ _ _ _ _ _ _\r\n```",
                    "createdAt": "2023-09-20T14:12:36Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PYFy2",
                    "body": "Oh, I see. Sorry for the useless noise…",
                    "createdAt": "2023-09-20T14:21:37Z",
                    "author": {
                      "login": "AntoineChambert-Loir"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5PXms9",
                    "body": "Would it be worthy to add the corollary: if `R` is Noetherian and `M`, `N` are finitely generated, then…",
                    "createdAt": "2023-09-20T12:54:16Z",
                    "author": {
                      "login": "AntoineChambert-Loir"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PX1tm",
                    "body": "If [isNoetherian_of_isNoetherianRing_of_finite](https://leanprover-community.github.io/mathlib4_docs/Mathlib/RingTheory/Noetherian.html#isNoetherian_of_isNoetherianRing_of_finite) were an instance then this result would follow automatically. Unfortunately I recently tried to make that an instance and hit performance problems (see my remark [here](https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/type.20class.20inference.20looping/near/385635549) on Zulip).\r\n\r\nI'm not convinced we should state the lemma you're suggesting explicitly since the user will pick it up by locally enabling `isNoetherian_of_isNoetherianRing_of_finite`. Of course one could create this instance with a comment to remove it once `isNoetherian_of_isNoetherianRing_of_finite` is promoted to an instance: if you really want that I can do it.",
                    "createdAt": "2023-09-20T13:38:06Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PX2iy",
                    "body": "For emphasis, this works:\r\n```lean\r\nattribute [local instance] isNoetherian_of_isNoetherianRing_of_finite\r\n\r\nexample {R M N : Type*} [CommRing R] [IsNoetherianRing R]\r\n    [AddCommGroup M] [AddCommGroup N] [Module R M] [Module R N]\r\n    [Module.Finite R M] [Module.Finite R N] : IsNoetherian R (N →ₗ[R] M) :=\r\n  inferInstance\r\n```",
                    "createdAt": "2023-09-20T13:40:27Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PX8Qq",
                    "body": "Excellent.",
                    "createdAt": "2023-09-20T13:55:44Z",
                    "author": {
                      "login": "AntoineChambert-Loir"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5PYVbq",
                    "body": "Can you prove `cancel_right` with this lemma (using `eq_iff`) instead of vice versa?",
                    "createdAt": "2023-09-20T15:06:32Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PYmxQ",
                    "body": "I don't see any point in this extra work.",
                    "createdAt": "2023-09-20T15:50:43Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PZBOF",
                    "body": "I did the work anyway, since I was looking at the file for other reasons.",
                    "createdAt": "2023-09-20T17:18:51Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PZtbU",
                    "body": "OK!",
                    "createdAt": "2023-09-20T20:29:19Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5PYWbQ",
                    "body": "Isn't this effectively just [`basis.constr_range`](https://leanprover-community.github.io/mathlib_docs/linear_algebra/basis.html#basis.constr_range)?",
                    "createdAt": "2023-09-20T15:09:28Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PYlRd",
                    "body": "Yes except I cannot use that without doing a rather intricate dance to handle the redundant `Nonempty ι` variable which `Basis.constr_range` unfortunately demands.",
                    "createdAt": "2023-09-20T15:48:42Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PY58h",
                    "body": "Quick fix to [Finsupp.lmapDomain_supported](https://leanprover-community.github.io/mathlib4_docs/Mathlib/LinearAlgebra/Finsupp.html#Finsupp.lmapDomain_supported):\r\n```\r\ntheorem lmapDomain_supported (f : α → α') (s : Set α) :\r\n    (supported M R s).map (lmapDomain M R f) = supported M R (f '' s) := by\r\n  classical\r\n  cases isEmpty_or_nonempty α\r\n  · simp [s.eq_empty_of_isEmpty]\r\n  refine ...\r\n```",
                    "createdAt": "2023-09-20T16:50:14Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PY_hr",
                    "body": "I've pushed that change",
                    "createdAt": "2023-09-20T17:12:07Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PZA48",
                    "body": "Thanks! It remains to replace the proof of `range_piEquiv`.",
                    "createdAt": "2023-09-20T17:17:29Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PZtTP",
                    "body": "Oh nice, thanks! I have now replaced the proof of `range_piEquiv`.",
                    "createdAt": "2023-09-20T20:28:43Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5PZBqO",
                    "body": "I added this docstring, but the name is still yours. I don't think using `_inj` and `_surj` like this is particularly standard, so perhaps:\r\n```suggestion\r\n/-- The linear map version of `Function.Surjective.injective_comp_right` -/\r\nlemma injective_comp_right_of_surjective (hg : Surjective g) : Injective fun f : M₂ →ₛₗ[σ₂₃] M₃ ↦ f.comp g :=\r\n  fun _ _ h ↦ ext <| hg.forall.2 (ext_iff.1 h)\r\n```\r\nor\r\n```suggestion\r\n/-- The linear map version of `Function.Surjective.injective_comp_right` -/\r\nlemma _root_.Function.Surjective.injective_linearMapComp_right (hg : Surjective g) : Injective fun f : M₂ →ₛₗ[σ₂₃] M₃ ↦ f.comp g :=\r\n  fun _ _ h ↦ ext <| hg.forall.2 (ext_iff.1 h)\r\n```\r\nor something in between...",
                    "createdAt": "2023-09-20T17:20:37Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PZtZt",
                    "body": "Yeah I was on the fence about the naming. I've renamed with your (second) suggestion.",
                    "createdAt": "2023-09-20T20:29:11Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5PZtfX",
                    "body": "Thanks!",
                    "createdAt": "2023-09-20T20:29:37Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjc3MzQzNjQ=",
              "login": "ocfnash"
            },
            {
              "id": "MDQ6VXNlcjQyNTI2MA==",
              "login": "eric-wieser"
            },
            {
              "id": "MDQ6VXNlcjMwNjQxNDU=",
              "login": "alreadydone"
            },
            {
              "id": "MDQ6VXNlcjQ4MTczNDg=",
              "login": "AntoineChambert-Loir"
            },
            {
              "id": "MDQ6VXNlcjU2MzY3MDU=",
              "login": "jcommelin"
            },
            {
              "id": "MDQ6VXNlcjMyNDkwNTMy",
              "login": "riccardobrasca"
            },
            {
              "id": "U_kgDOB75MNQ",
              "login": "leanprover-community-mathlib4-bot"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": null,
        "title": "[Merged by Bors] - feat: `Hom(N, M)` is Noetherian when `M` is Noetherian and `N` is finitely-generated.",
        "updatedAt": "2023-09-21T11:01:43Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/7276",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "5af05463fdda485312060f019e65ce5170e9b6fb"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5xhzjBzwAAAAJtKV3k",
              "createdAt": "2023-09-20T10:29:13Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5xhzjBzwAAAAJtKV3x",
              "createdAt": "2023-09-20T10:29:14Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5xhzjBzwAAAAJtKV4E",
              "createdAt": "2023-09-20T10:29:14Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJjTQ",
                "name": "t-algebra"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5heeey",
              "createdAt": "2023-09-20T11:06:33Z",
              "body": "I am not sure we want the same thing for abelian groups (and maybe monoids), but we often duplicate everything done for modules for abelian groups.",
              "author": {
                "login": "riccardobrasca"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5xhzjBzwAAAAJtM_rX",
              "createdAt": "2023-09-20T11:38:35Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5he57g",
              "createdAt": "2023-09-20T12:13:50Z",
              "body": "",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "9e05cb8756cc6a8c49595efa620f002e1512d4bb"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5hfMpG",
              "createdAt": "2023-09-20T12:53:13Z",
              "body": "",
              "author": {
                "login": "AntoineChambert-Loir"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5hgYhK",
              "createdAt": "2023-09-20T15:06:31Z",
              "body": "",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5hgaPJ",
              "createdAt": "2023-09-20T15:09:28Z",
              "body": "",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "8f68302c73726c20320556ae95dde19e84d32b0b"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "5732c2cb16c28e9458e5374cde2e9ddd89875872"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "85b12373d493960e93ea14877bbdaf8e2e49f130"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "07c4f2380d72e576d2273e1a0669cc6da2779a4f"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "382f81c4f7250d5c04d0712e2ff75b76e7af7f90"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5hhdHf",
              "createdAt": "2023-09-20T17:20:37Z",
              "body": "",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "d7836977db39c4f2b4032378c636d7d582730103"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "75980adfbfcd57d4758f5fba39b3bcea2bc21844"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5hmLz7",
              "createdAt": "2023-09-21T09:45:39Z",
              "body": "Thanks :tada:\r\n\r\nbors merge",
              "author": {
                "login": "jcommelin"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5xhzjBzwAAAAJt2efA",
              "createdAt": "2023-09-21T09:45:53Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
                "name": "ready-to-merge"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5xhzjBzwAAAAJt2ehT",
              "createdAt": "2023-09-21T09:45:54Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5nE6bw",
              "createdAt": "2023-09-21T11:01:38Z",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6259984939/job/16997108846)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6259984939/job/16997108357)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6259984939/job/16997109070)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c5xhzjBzwAAAAJt5odl",
              "createdAt": "2023-09-21T11:01:39Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c5xhzjBzwAAAAJt5ooR",
              "createdAt": "2023-09-21T11:01:43Z"
            },
            {
              "__typename": "ReferencedEvent"
            }
          ]
        }
      }
    }
  }
}
