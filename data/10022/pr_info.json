{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 407,
        "assignees": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjE4ODgxMw==",
              "login": "urkud"
            }
          ]
        },
        "author": {
          "login": "jvlmdr"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "add (iterated) deriv for prod\r\n\r\n* Add `HasFDerivAt` + variants for `Finset.prod` (and `ContinuousMultilinearMap.mkPiAlgebra`)\r\n* Add missing `iteratedFDerivWithin` equivalents for zero, const (resolves a todo in `Analysis.Calculus.ContDiff.Basic`)\r\n* Add `iteratedFDeriv[Within]_sum` for symmetry\r\n* Add a couple of convenience lemmas for `Sym` and `Finset.{prod,sum}`\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)",
        "changedFiles": 9,
        "closed": true,
        "closedAt": "2024-02-29T20:03:48Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c51M9G_",
              "body": ":v: jvlmdr can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests).",
              "createdAt": "2024-02-27T11:20:22Z",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c51TSa5",
              "body": "Thanks very much!\r\n\r\nShould I add a variant `norm_iteratedFDeriv_list_prod_le` for `List`s with non-commutative multiplication as well? And `contDiff_list_prod`, etc.? Perhaps I should add it as a TODO and leave it for a separate PR, or keep all of the `iteratedFDeriv` theorems for a separate PR?",
              "createdAt": "2024-02-28T00:56:16Z",
              "author": {
                "login": "jvlmdr"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c51XDfA",
              "body": "New PRs are cheap. I would not expand this PR further if I were you, and just open a new PR when you've done what you're suggesting. That makes it also easier to separate reviewed an unreviewed code.\r\nFeel free to leave a to do in the file, if you want.",
              "createdAt": "2024-02-28T13:24:16Z",
              "author": {
                "login": "fpvandoorn"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c51bMvc",
              "body": "Sounds good, I'll do that. Thanks all!",
              "createdAt": "2024-02-28T23:03:28Z",
              "author": {
                "login": "jvlmdr"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c51biYV",
              "body": "bors r+",
              "createdAt": "2024-02-29T00:19:16Z",
              "author": {
                "login": "jvlmdr"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c51bjYJ",
              "body": "Build failed:\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/8088951878/job/22104002225)",
              "createdAt": "2024-02-29T00:23:26Z",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c51b92H",
              "body": "bors r+",
              "createdAt": "2024-02-29T02:04:24Z",
              "author": {
                "login": "jvlmdr"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c51cEm0",
              "body": "Build failed:\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/8090203744/job/22107320931)",
              "createdAt": "2024-02-29T02:37:13Z",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c51de_p",
              "body": "Sorry, there was an upstream change that broke the PR (`List.erase_cons_tail` now uses `beq`). I'll squash, rebase, fix.",
              "createdAt": "2024-02-29T08:41:05Z",
              "author": {
                "login": "jvlmdr"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c51hVsI",
              "body": "Thanks, let's try again\r\n\r\nbors merge",
              "createdAt": "2024-02-29T18:02:36Z",
              "author": {
                "login": "fpvandoorn"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c51hgbo",
              "body": "Build failed (retrying...):\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/8100846836/job/22139722696)",
              "createdAt": "2024-02-29T18:30:26Z",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c51iFJ0",
              "body": "Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/8101173884/job/22140788614)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/8101173884/job/22140788348)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/8101173884/job/22140787802)",
              "createdAt": "2024-02-29T20:03:47Z",
              "author": {
                "login": "mathlib-bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "6daea85ec09abbe9c93323c0b30b4005ff4ed969",
                "additions": 406,
                "deletions": 5,
                "committedDate": "2024-02-29T08:09:48Z",
                "author": {
                  "name": "Jack Valmadre",
                  "email": "jack.valmadre@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFJiBOfg",
                        "name": "Add annotations",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8092900546/job/22114487934"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFJiBLqA",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8092900219/job/22114487208"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFJiBM9Q",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8092900215/job/22114487541"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFJiBQjw",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8092900536/job/22114488463"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFJiBNVA",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8092900219/job/22114487636"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFJiBOjw",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8092900215/job/22114487951"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFJiBPpg",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8092900536/job/22114488230"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFJiBMlA",
                        "name": "Check all files imported (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8092900219/job/22114487444"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFJiBLJg",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8092900215/job/22114487078"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFJiBPLw",
                        "name": "check workflows (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8092900219/job/22114488111"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFJiBMHA",
                        "name": "check workflows",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8092900215/job/22114487324"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFJiBNyg",
                        "name": "Build",
                        "conclusion": "FAILURE",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8092900215/job/22114487754"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFJiBOPQ",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8092900219/job/22114487869"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFJiBQFA",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8092900219/job/22114488340"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFJiItdQ",
                        "name": "Post-CI job",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8092900215/job/22114610549"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFJiCQQg",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/github/leanprover-community/repo/mathlib4/event-logs?pullRequestNumber=10022"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "71bb18cc85c8ed777a49b5103a12475e1c248079",
                "additions": 3,
                "deletions": 2,
                "committedDate": "2024-02-29T11:23:48Z",
                "author": {
                  "name": "Jack Valmadre",
                  "email": "jack.valmadre@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFJo67gw",
                        "name": "Add annotations",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8095300048/job/22121724803"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFJo2AJw",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8095299691/job/22121644071"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFJo1oCw",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8095299690/job/22121637899"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFJo1wew",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8095300043/job/22121640059"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFJo2BAg",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8095299691/job/22121644290"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFJo1o5Q",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8095299690/job/22121638117"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFJo1xKQ",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8095300043/job/22121640233"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFJo2B3Q",
                        "name": "Check all files imported (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8095299691/job/22121644509"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFJo1qqw",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8095299690/job/22121638571"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFJo2DkQ",
                        "name": "check workflows (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8095299691/job/22121644945"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFJo1puQ",
                        "name": "check workflows",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8095299690/job/22121638329"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFJo2CrA",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8095299691/job/22121644716"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFJo1rlQ",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8095299690/job/22121638805"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFJo2EaQ",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8095299691/job/22121645161"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFJrPS-Q",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8095299690/job/22124155641"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFJo2r2g",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/github/leanprover-community/repo/mathlib4/event-logs?pullRequestNumber=10022"
                      },
                      {
                        "__typename": "StatusContext",
                        "id": "SC_kwDOFcwZ1c8AAAAGeQnl5Q",
                        "context": "bors",
                        "state": "SUCCESS",
                        "targetUrl": "https://mathlib-bors-ca18eefec4cb.herokuapp.com/batches/1937",
                        "description": "Build succeeded"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "createdAt": "2024-01-26T03:44:46Z",
        "deletions": 5,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/Algebra/BigOperators/Basic.lean",
              "additions": 8,
              "deletions": 2
            },
            {
              "path": "Mathlib/Analysis/Calculus/ContDiff/Bounds.lean",
              "additions": 60,
              "deletions": 1
            },
            {
              "path": "Mathlib/Analysis/Calculus/Deriv/Mul.lean",
              "additions": 32,
              "deletions": 0
            },
            {
              "path": "Mathlib/Analysis/Calculus/FDeriv/Mul.lean",
              "additions": 224,
              "deletions": 1
            },
            {
              "path": "Mathlib/Data/List/Basic.lean",
              "additions": 21,
              "deletions": 0
            },
            {
              "path": "Mathlib/Data/List/Nodup.lean",
              "additions": 15,
              "deletions": 0
            },
            {
              "path": "Mathlib/Data/Multiset/Basic.lean",
              "additions": 9,
              "deletions": 0
            },
            {
              "path": "Mathlib/Data/Nat/Choose/Multinomial.lean",
              "additions": 23,
              "deletions": 0
            },
            {
              "path": "Mathlib/Data/Sym/Basic.lean",
              "additions": 15,
              "deletions": 1
            }
          ]
        },
        "headRefName": "jvlmdr-deriv-prod",
        "headRefOid": "71bb18cc85c8ed777a49b5103a12475e1c248079",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5lH-ha",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABAt13Ow",
              "color": "bfd4f2",
              "name": "delegated"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
              "color": "06e039",
              "name": "ready-to-merge"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJeVg",
              "color": "33DBEC",
              "name": "t-analysis"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABb5aSCQ",
              "color": "8BBA68",
              "name": "new-contributor"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5xcN4-",
              "body": "Thanks, this looks very good! \r\n\r\nbors d+",
              "state": "COMMENTED",
              "author": {
                "login": "fpvandoorn"
              },
              "submittedAt": "2024-02-27T11:20:20Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5wJQ5W",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2024-02-14T23:14:57Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5wlAnn",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "urkud"
              },
              "submittedAt": "2024-02-19T15:51:31Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 10022,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5t_GYV",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "jvlmdr"
              },
              "submittedAt": "2024-01-26T08:24:18Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5v-ava",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "urkud"
              },
              "submittedAt": "2024-02-13T18:08:47Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5wIG3D",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "jvlmdr"
              },
              "submittedAt": "2024-02-14T20:02:10Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5wIbUJ",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "urkud"
              },
              "submittedAt": "2024-02-14T20:29:05Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5wIk6O",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "jvlmdr"
              },
              "submittedAt": "2024-02-14T20:56:55Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5wIn2k",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "jvlmdr"
              },
              "submittedAt": "2024-02-14T21:05:35Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5wJQ5W",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2024-02-14T23:14:57Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5wJZyo",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "urkud"
              },
              "submittedAt": "2024-02-14T23:47:14Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5wJdPs",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "jvlmdr"
              },
              "submittedAt": "2024-02-15T00:04:58Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5wk5ba",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "urkud"
              },
              "submittedAt": "2024-02-19T15:39:29Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5wk-TE",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "urkud"
              },
              "submittedAt": "2024-02-19T15:46:38Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5wlAnn",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "urkud"
              },
              "submittedAt": "2024-02-19T15:51:31Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5wmqvk",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "jvlmdr"
              },
              "submittedAt": "2024-02-19T21:29:41Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5wmxg7",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "jvlmdr"
              },
              "submittedAt": "2024-02-19T21:54:06Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5xB2hn",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "fpvandoorn"
              },
              "submittedAt": "2024-02-22T16:29:21Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5xFxFd",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "jvlmdr"
              },
              "submittedAt": "2024-02-23T03:48:02Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5xFxKf",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "jvlmdr"
              },
              "submittedAt": "2024-02-23T03:48:42Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5xOrfJ",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "jvlmdr"
              },
              "submittedAt": "2024-02-25T13:01:34Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5xP-ih",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "jvlmdr"
              },
              "submittedAt": "2024-02-26T06:06:09Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5xcN4-",
              "body": "Thanks, this looks very good! \r\n\r\nbors d+",
              "state": "COMMENTED",
              "author": {
                "login": "fpvandoorn"
              },
              "submittedAt": "2024-02-27T11:20:20Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5xi9aq",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "jvlmdr"
              },
              "submittedAt": "2024-02-27T23:11:23Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Xdejg",
                    "body": "Perhaps it would make sense to add `[DecidableEq ι]` here to avoid using `Classical`? (also affects existing theorems `contDiff_update` and `contDiff_single`)",
                    "createdAt": "2024-01-26T08:24:18Z",
                    "author": {
                      "login": "jvlmdr"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5Yto1W",
                    "body": "Current guideline is: if you need `DecidableEq` to **formulate** a theorem, then assume it. If only to prove it, then don't.",
                    "createdAt": "2024-02-13T18:08:47Z",
                    "author": {
                      "login": "urkud"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5Yz4Xd",
                    "body": "Thanks! Here, we would need `DecidableEq ι` to formulate the theorem (for e.g. `Finset ι`), but we don't need it because there is an `open Classical` at the top of the file. So I guess I can leave it as is.",
                    "createdAt": "2024-02-14T20:02:10Z",
                    "author": {
                      "login": "jvlmdr"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5Yz_Xf",
                    "body": "`Finset ι` does not require `DecidableEq ι`. The induction principle you use does. E.g., `Finset.cons_induction_on` doesn't.\r\n\r\nIf there is a `Decidable` instance somewhere in the statement (not the proof!), then we explicitly assume it even if the file has `open Classical`. This way you don't get into trouble when you apply your lemma to `ι = Nat` or `ι = Fin n`, where you have non-classical `DecidableEq` instances.",
                    "createdAt": "2024-02-14T20:29:05Z",
                    "author": {
                      "login": "urkud"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5Y0Hys",
                    "body": "Thanks for the explanation! Sorry, my mistake about `Finset ι`, I had introduced another error and got confused. I see now, the statement doesn't need `DecidableEq` but the proof does due to my use of `Finset.induction` (although it should not be assumed for the theorem because it is not required for its statement).",
                    "createdAt": "2024-02-14T20:56:55Z",
                    "author": {
                      "login": "jvlmdr"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5Y0KNH",
                    "body": "Is it slightly preferable if I modify the proofs to use `Finset.cons_induction` instead?\r\n\r\nIt seems like `contDiff_update` and `contDiff_single` in this same file don't follow the principle of explicitly assuming `Decidable` even where the file has `open Classical`? (Both statements require `DecidableEq`, for `Function.update` and `Pi.single` respectively)",
                    "createdAt": "2024-02-14T21:05:35Z",
                    "author": {
                      "login": "jvlmdr"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5Y0kwA",
                    "body": "Yeah, with `open Classical` you can't tell whether a statement uses DecidableEq or not, because the scoped instance [Classical.decEq](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Logic/Basic.html#Classical.decEq) will be automatically used if it's needed. I think people have been going through files and removing these legacy `open Classical`, and add DecidableEq to the statements that break.\r\n\r\nAnd I do think using `Finset.cons_induction` is preferable.",
                    "createdAt": "2024-02-14T23:14:57Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5Y0qzl",
                    "body": "OTOH, all our topology depends on `Classical.choice`, so it doesn't matter too much. One bonus of `cons_induction` is that you have `a ∉ s` as an assumption, so lemmas like `Finset.sum_cons` don't need you to repeat it.",
                    "createdAt": "2024-02-14T23:47:14Z",
                    "author": {
                      "login": "urkud"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5Y0tSh",
                    "body": "OK, great! I've updated the `sum` theorem to use `Finset.cons_induction` (still with no assumption of `DecidableEq`, and it won't break if `open Classical` is removed). I've kept `Finset.induction` for the `prod` theorem as the statement requires `DecidableEq` anyway (e.g. for `Finset.sym`, `Multiset.multinomial`) and the proof then uses the `insert` form for `Finset.symInsertEquiv`. Thanks for the guidance!\r\n\r\nI'll do a squash + rebase as this is a few hundred commits behind master.",
                    "createdAt": "2024-02-15T00:04:58Z",
                    "author": {
                      "login": "jvlmdr"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZF_B6",
                    "body": "You can use something like (not tested):\r\n```suggestion\r\n  rw [← prod_map _ (.subtype (· ∈ s)), map_erase, attach_map_val]\r\n```",
                    "createdAt": "2024-02-19T15:39:29Z",
                    "author": {
                      "login": "urkud"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5Zg-fH",
                    "body": "Thanks!",
                    "createdAt": "2024-02-25T13:01:34Z",
                    "author": {
                      "login": "jvlmdr"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZGCIq",
                    "body": "Could you please cherry-pick changes to this file to a new branch, so that it can be merged before the `prod` part of the PR? If you do this, then please assign the new PR to me (or request a review from me), and I'll merge it quickly.",
                    "createdAt": "2024-02-19T15:46:38Z",
                    "author": {
                      "login": "urkud"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZHErk",
                    "body": "Thanks! Done as #10733",
                    "createdAt": "2024-02-19T21:29:41Z",
                    "author": {
                      "login": "jvlmdr"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZGDo7",
                    "body": "Should we prove a `List.prod` version for noncommutative normed algebras first, then deduce the `Finset` version from it? BTW, you prove it by generalizing `Finset.univ`, then using induction; why formulate for `univ`, not any `Finset` here?",
                    "createdAt": "2024-02-19T15:51:31Z",
                    "author": {
                      "login": "urkud"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZHH9x",
                    "body": "Oh yes, you're right, it makes more sense to just prove for any `Finset`.\r\n\r\nI agree, it would be good to have `List.prod` and implement this in terms of that.\r\n\r\nI'll revise the PR, thanks!",
                    "createdAt": "2024-02-19T21:54:06Z",
                    "author": {
                      "login": "jvlmdr"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZawYD",
                    "body": "I've pushed a partial first draft. I wasn't sure what form the statements should take for the non-commutative list variants. I've provided these two for `hasStrictFDerivAt_...` (below). The second variant has the advantage that no `Fintype` is required, whereas the first variant supports a more general list. (The `Fintype` assumption is for e.g. `Pi.normedAddCommGroup` for `fderiv`; there is no `NormedAddCommGroup` instance for `List` or `Vector` afaik.)\r\n\r\n(Edit: Removed assumption of `Nodup`)\r\n\r\n```lean\r\ntheorem hasStrictFDerivAt_list_prod' [Fintype ι] {l : List ι} {x : ι → 𝔸} :\r\n    HasStrictFDerivAt (𝕜 := 𝕜) (fun x ↦ (l.map x).prod)\r\n      (∑ i : Fin l.length, ((l.take i).map x).prod •\r\n        smulRight (proj (l.get i)) ((l.drop (.succ i)).map x).prod) x := by ...\r\n\r\ntheorem hasStrictFDerivAt_list_prod'_finRange {n : ℕ} {x : Fin n → 𝔸} :\r\n    HasStrictFDerivAt (𝕜 := 𝕜) (fun x ↦ ((List.finRange n).map x).prod)\r\n      (∑ i : Fin n, (((List.finRange n).take i).map x).prod •\r\n        smulRight (proj i) (((List.finRange n).drop (.succ i)).map x).prod) x := by ...\r\n```\r\n\r\nThen, for the variant that supports composition, I have used the statements:\r\n\r\n```lean\r\nvariable {𝔸' : Type*} [NormedRing 𝔸] [NormedAlgebra 𝕜 𝔸] {f : ι → E → 𝔸} {f : ι → E →L[𝕜] 𝔸}\r\n\r\ntheorem HasFDerivAt.list_prod' {l : List ι} {x : E}\r\n    (h : ∀ i ∈ l, HasFDerivAt (fun x ↦ f i x) (f' i) x) :\r\n    HasFDerivAt (fun x ↦ (l.map fun i ↦ f i x).prod)\r\n      (∑ i : Fin l.length, ((l.take i).map (fun i ↦ f i x)).prod •\r\n        smulRight (f' (l.get i)) ((l.drop (.succ i)).map fun i ↦ f i x).prod) x := by ...\r\n\r\ntheorem HasFDerivAt.func_list_prod' {l : List (E → 𝔸)} {l' : List (E →L[𝕜] 𝔸)} {x : E}\r\n    (hll' : l.length = l'.length)\r\n    (h : ∀ i : Fin l.length, HasFDerivAt (fun x ↦ l.get i x) (l'.get (i.cast hll')) x) :\r\n    HasFDerivAt (fun x ↦ (l.map fun f ↦ f x).prod)\r\n      (∑ i : Fin l'.length, ((l.take i).map (fun f ↦ f x)).prod •\r\n        smulRight (l'.get i) ((l.drop (.succ i)).map fun f ↦ f x).prod) x := by ...\r\n```\r\n\r\n(Maybe it would be cleaner to use a list of pairs for `func_list_prod'`.)\r\n\r\nDoes anyone have an opinion or a better idea for the form of the statement before continuing? Thanks!",
                    "createdAt": "2024-02-23T03:48:02Z",
                    "author": {
                      "login": "jvlmdr"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5Zh-uX",
                    "body": "Update:\r\n\r\nI removed the `HasFDerivAt.func_list_prod'` variant above (with `l : List (E → 𝔸)` a list of functions) and kept only the form with `l : List ι` and `f : ι → E → 𝔸`.\r\n\r\nI added the forms `Has{StrictFDeriv,FDeriv,FDerivWithin}At.xxx_prod` and `fderiv[Within]_xxx_prod` for `list_prod'`, `multiset_prod`, `finset_prod`. I didn't provide `list_prod` (for commutative multiplication), as I figured this can just be transformed to into a `Multiset` product using `Multiset.coe_prod`. (There is a single theorem `hasStrictFDerivAt_list_prod` but this is merely a helper to implement `hasStrictFDerivAt_multiset_prod` via `Quotient.inductionOn`.)\r\n\r\nWhile I didn't use it for the other proofs, I added `has[Strict]FDerivAt_list_prod_attach'` that operates on `x : {i // i ∈ l} → 𝔸` in case this is convenient. It might be unnecessary though.\r\n\r\nI reduced the proof of `Finset.prod_erase_attach` as suggested, and added the analog `Multiset.erase_attach_map_val` for the `multiset_prod` proof. I also added `List.eraseIdx_eq_take_drop_succ` (perhaps belongs in `Std`?) and `List.erase_get` for the `list_prod'` proof.",
                    "createdAt": "2024-02-26T06:06:09Z",
                    "author": {
                      "login": "jvlmdr"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZYQnf",
                    "body": "```suggestion\r\n    ∏ j in s, Function.update f i 1 j = ∏ j in s.erase i, f j := by\r\n```\r\nThis is the canonical spelling. Though I see `prod_update_of_mem` also doesn't use this, so maybe ignore this comment.",
                    "createdAt": "2024-02-22T16:29:20Z",
                    "author": {
                      "login": "fpvandoorn"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZawcH",
                    "body": "Thanks! Yep, I just went for consistency here. We could change `prod_update_of_mem`, but maybe better to do in a separate PR",
                    "createdAt": "2024-02-23T03:48:42Z",
                    "author": {
                      "login": "jvlmdr"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Zpi5A",
                    "body": "```suggestion\r\n    (hxs : UniqueDiffWithinAt 𝕜 s x) (h : ∀ i ∈ l, DifferentiableWithinAt 𝕜 (f i ·) s x) :\r\n```",
                    "createdAt": "2024-02-27T11:16:02Z",
                    "author": {
                      "login": "fpvandoorn"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5Zpj4u",
                    "body": "This seems to be the consistent argument order (at least in this file).",
                    "createdAt": "2024-02-27T11:19:24Z",
                    "author": {
                      "login": "fpvandoorn"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5Ztm9f",
                    "body": "Nice catch, thanks",
                    "createdAt": "2024-02-27T23:11:23Z",
                    "author": {
                      "login": "jvlmdr"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjIyNDE5OA==",
              "login": "jvlmdr"
            },
            {
              "id": "MDQ6VXNlcjczNzYwMTI=",
              "login": "fpvandoorn"
            },
            {
              "id": "MDQ6VXNlcjE4ODgxMw==",
              "login": "urkud"
            },
            {
              "id": "MDQ6VXNlcjMwNjQxNDU=",
              "login": "alreadydone"
            },
            {
              "id": "U_kgDOB75MNQ",
              "login": "leanprover-community-mathlib4-bot"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAFJo67gw",
                "name": "Add annotations",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8095300048/job/22121724803"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAFJo2AJw",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8095299691/job/22121644071"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAFJo1oCw",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8095299690/job/22121637899"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAFJo1wew",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8095300043/job/22121640059"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAFJo2BAg",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8095299691/job/22121644290"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAFJo1o5Q",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8095299690/job/22121638117"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAFJo1xKQ",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8095300043/job/22121640233"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAFJo2B3Q",
                "name": "Check all files imported (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8095299691/job/22121644509"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAFJo1qqw",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8095299690/job/22121638571"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAFJo2DkQ",
                "name": "check workflows (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8095299691/job/22121644945"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAFJo1puQ",
                "name": "check workflows",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8095299690/job/22121638329"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAFJo2CrA",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8095299691/job/22121644716"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAFJo1rlQ",
                "name": "Build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8095299690/job/22121638805"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAFJo2EaQ",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8095299691/job/22121645161"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAFJrPS-Q",
                "name": "Post-CI job",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/8095299690/job/22124155641"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAFJo2r2g",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/github/leanprover-community/repo/mathlib4/event-logs?pullRequestNumber=10022"
              },
              {
                "__typename": "StatusContext",
                "id": "SC_kwDOFcwZ1c8AAAAGeQnl5Q",
                "context": "bors",
                "state": "SUCCESS",
                "targetUrl": "https://mathlib-bors-ca18eefec4cb.herokuapp.com/batches/1937",
                "description": "Build succeeded"
              }
            ]
          }
        },
        "title": "[Merged by Bors] - feat: Add norm_iteratedFDeriv_prod_le using Sym",
        "updatedAt": "2024-02-29T20:03:50Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/10022",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c59QyEDzwAAAAKzseL1",
              "createdAt": "2024-01-26T03:44:46Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c59QyEDzwAAAAKzseL3",
              "createdAt": "2024-01-26T03:44:46Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABMtntmA",
                "name": "new-feature"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c59QyEDzwAAAAKzseL5",
              "createdAt": "2024-01-26T03:44:46Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJeVg",
                "name": "t-analysis"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c59QyEDzwAAAAKzseL6",
              "createdAt": "2024-01-26T03:44:46Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABb5aSCQ",
                "name": "new-contributor"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5t_GYV",
              "createdAt": "2024-01-26T08:24:18Z",
              "body": "",
              "author": {
                "login": "jvlmdr"
              }
            },
            {
              "__typename": "AssignedEvent",
              "id": "AE_lADOFcwZ1c59QyEDzwAAAAK-4p7l",
              "createdAt": "2024-02-13T18:13:47Z",
              "assignee": {
                "id": "MDQ6VXNlcjE4ODgxMw==",
                "login": "urkud"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c59QyEDzwAAAAK_9NiN",
              "createdAt": "2024-02-15T05:44:15Z"
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c59QyEDzwAAAAK_9RJA",
              "createdAt": "2024-02-15T05:45:50Z"
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c59QyEDzwAAAALB-jOj",
              "createdAt": "2024-02-19T05:16:17Z"
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5wk5ba",
              "createdAt": "2024-02-19T15:39:29Z",
              "body": "",
              "author": {
                "login": "urkud"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5wk-TE",
              "createdAt": "2024-02-19T15:46:38Z",
              "body": "",
              "author": {
                "login": "urkud"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5wlAnn",
              "createdAt": "2024-02-19T15:51:31Z",
              "body": "",
              "author": {
                "login": "urkud"
              }
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5Q8s9J",
              "createdAt": "2024-02-19T21:27:06Z",
              "source": {
                "id": "PR_kwDOFcwZ1c5nVLBn",
                "title": "[Merged by Bors] - feat: Basic theorems for iteratedFDerivWithin",
                "url": "https://github.com/leanprover-community/mathlib4/pull/10733"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c59QyEDzwAAAALC5sDF",
              "createdAt": "2024-02-20T10:38:07Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5xB2hn",
              "createdAt": "2024-02-22T16:29:20Z",
              "body": "",
              "author": {
                "login": "fpvandoorn"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c59QyEDzwAAAALF_w0r",
              "createdAt": "2024-02-24T22:51:35Z"
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c59QyEDzwAAAALF_0gz",
              "createdAt": "2024-02-24T23:05:24Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5xcN4-",
              "createdAt": "2024-02-27T11:16:01Z",
              "body": "Thanks, this looks very good! \r\n\r\nbors d+",
              "author": {
                "login": "fpvandoorn"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c51M9G_",
              "createdAt": "2024-02-27T11:20:22Z",
              "body": ":v: jvlmdr can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests).",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c59QyEDzwAAAALHXnIa",
              "createdAt": "2024-02-27T11:20:33Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABAt13Ow",
                "name": "delegated"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c59QyEDzwAAAALHXnKj",
              "createdAt": "2024-02-27T11:20:34Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c51TSa5",
              "createdAt": "2024-02-28T00:56:16Z",
              "body": "Thanks very much!\r\n\r\nShould I add a variant `norm_iteratedFDeriv_list_prod_le` for `List`s with non-commutative multiplication as well? And `contDiff_list_prod`, etc.? Perhaps I should add it as a TODO and leave it for a separate PR, or keep all of the `iteratedFDeriv` theorems for a separate PR?",
              "author": {
                "login": "jvlmdr"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c51XDfA",
              "createdAt": "2024-02-28T13:24:16Z",
              "body": "New PRs are cheap. I would not expand this PR further if I were you, and just open a new PR when you've done what you're suggesting. That makes it also easier to separate reviewed an unreviewed code.\r\nFeel free to leave a to do in the file, if you want.",
              "author": {
                "login": "fpvandoorn"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c51bMvc",
              "createdAt": "2024-02-28T23:03:28Z",
              "body": "Sounds good, I'll do that. Thanks all!",
              "author": {
                "login": "jvlmdr"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c51biYV",
              "createdAt": "2024-02-29T00:19:16Z",
              "body": "bors r+",
              "author": {
                "login": "jvlmdr"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c51bjYJ",
              "createdAt": "2024-02-29T00:23:26Z",
              "body": "Build failed:\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/8088951878/job/22104002225)",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c51b92H",
              "createdAt": "2024-02-29T02:04:24Z",
              "body": "bors r+",
              "author": {
                "login": "jvlmdr"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c51cEm0",
              "createdAt": "2024-02-29T02:37:13Z",
              "body": "Build failed:\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/8090203744/job/22107320931)",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c59QyEDzwAAAALJAWKL",
              "createdAt": "2024-02-29T08:11:28Z"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c51de_p",
              "createdAt": "2024-02-29T08:41:05Z",
              "body": "Sorry, there was an upstream change that broke the PR (`List.erase_cons_tail` now uses `beq`). I'll squash, rebase, fix.",
              "author": {
                "login": "jvlmdr"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c51hVsI",
              "createdAt": "2024-02-29T18:02:36Z",
              "body": "Thanks, let's try again\r\n\r\nbors merge",
              "author": {
                "login": "fpvandoorn"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c59QyEDzwAAAALJcmuR",
              "createdAt": "2024-02-29T18:02:48Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
                "name": "ready-to-merge"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c51hgbo",
              "createdAt": "2024-02-29T18:30:26Z",
              "body": "Build failed (retrying...):\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/8100846836/job/22139722696)",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c51iFJ0",
              "createdAt": "2024-02-29T20:03:47Z",
              "body": "Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/8101173884/job/22140788614)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/8101173884/job/22140788348)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/8101173884/job/22140787802)",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c59QyEDzwAAAALJhXKZ",
              "createdAt": "2024-02-29T20:03:48Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c59QyEDzwAAAALJhXQM",
              "createdAt": "2024-02-29T20:03:50Z"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            }
          ]
        }
      }
    }
  }
}
