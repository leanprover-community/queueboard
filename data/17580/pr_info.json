{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 77,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "mo271"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "---\r\n\r\n- depends on: #17631\r\n\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nFor details on the \"pull request lifecycle\" in mathlib, please see:\r\nhttps://leanprover-community.github.io/contribute/index.html\r\n\r\nIn particular, note that most reviewers will only notice your PR\r\nif it passes the continuous integration checks.\r\nPlease ask for help on https://leanprover.zulipchat.com if needed.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nIf you are moving or deleting declarations, please include these lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nMoves:\r\n- Vector.* -> Mathlib.Vector.*\r\n- ...\r\n\r\nDeletions:\r\n- Nat.bit1_add_bit1\r\n- ...\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 5,
        "closed": false,
        "closedAt": null,
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c6PLi7e",
              "body": "### PR summary [c218e07487](https://github.com/leanprover-community/mathlib4/pull/17580/commits/c218e074873d04790d16e87ab2af202c8c503f0a)\n\nImport changes exceeding 2%\n\n| %      | File |\n| -      | -    |\n| +100.00% | `Mathlib.Tactic.Linter.Style` |\n\n<details><summary>\n\n#### Import changes for modified files\n\n</summary>\n\nDependency changes\n\n| File | Base Count | Head Count | Change |\n| --- | --- | --- | --- |\n| Mathlib.Tactic.Linter.Style | 3 | 6 | +3 (+100.00%) |\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n| `Mathlib.Tactic.Linter.Style`|3|\n\n</details>\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ doubleUnderscore:`\n`+ toEmbeddingOfEqTop_apply`\n`++ double__underscore`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n</details>\n\n---\n\n<details><summary>No changes to technical debt.</summary>\n\nYou can run this locally as\n```\n./scripts/technical-debt-metrics.sh pr_summary\n```\n* The `relative` value is the weighted *sum* of the differences with weight given by the *inverse* of the current value of the statistic.\n* The `absolute` value is the `relative` value divided by the total sum of the inverses of the current values (i.e. the weighted *average* of the differences).\n</details>",
              "createdAt": "2024-10-09T12:21:41Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6PXxrO",
              "body": "!bench",
              "createdAt": "2024-10-10T15:01:16Z",
              "author": {
                "login": "adomani"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6PYEyf",
              "body": "Here are the [benchmark results](http://speed.lean-fro.org/mathlib4/run-detail/e9e1ac43-037d-4e5c-a3a3-e71f6fe67634) for commit be3bc239a87e84cb9b18bd1743e56600c969fcba.\nThe entire run failed.\nFound no significant differences.",
              "createdAt": "2024-10-10T15:34:37Z",
              "author": {
                "login": "leanprover-bot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6PZv6g",
              "body": "!bench",
              "createdAt": "2024-10-10T19:35:58Z",
              "author": {
                "login": "adomani"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6PZ5Tq",
              "body": "Here are the [benchmark results](http://speed.lean-fro.org/mathlib4/run-detail/4e00c69b-d023-4c10-844c-ace97a932165) for commit 2142c45deeabc8bdebf7d20d730663c1a8da10d0.\nThe entire run failed.\nFound no significant differences.",
              "createdAt": "2024-10-10T20:00:06Z",
              "author": {
                "login": "leanprover-bot"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6PZ9Fb",
              "body": "Sorry for sending the code suggestions in such a fragmented fashion: I can only review in small bits and I can't really check the code on my computer.",
              "createdAt": "2024-10-10T20:05:18Z",
              "author": {
                "login": "adomani"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6PaGNT",
              "body": "I like the idea of splitting: while the code addition is not big, it has a somewhat large effect on the `dupNamespace` linter, so investigating those changes and increasing the tests will be good.\r\n\r\nThe other PR with the `nameCheck` can then also develop further and maybe someone has some other style suggestions to look out for.  If the `docPrime` linter will survive, that would also be a good one to merge into the `nameCheck` linter.",
              "createdAt": "2024-10-10T20:29:26Z",
              "author": {
                "login": "adomani"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6PaJSG",
              "body": "part one, refactor of the `dupNamespace` linter is here now: #17631",
              "createdAt": "2024-10-10T20:37:39Z",
              "author": {
                "login": "mo271"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6QVSEO",
              "body": "@adomani  this now works in principle, but he new `getNamesFrom` extracts leads to lots of declarations, which actually have and underscore, see the `build mathlib` step here:\r\nhttps://github.com/leanprover-community/mathlib4/actions/runs/11398241232/job/31714947231?pr=17580\r\n\r\nHow should these false postives be handled best?",
              "createdAt": "2024-10-18T06:00:08Z",
              "author": {
                "login": "mo271"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6QWEmN",
              "body": "The duplicated namespace linter filters out declarations that have macroscopes, via `hasMacroScopes` or something similar.  I can look into this, but in a few hours.",
              "createdAt": "2024-10-18T07:50:10Z",
              "author": {
                "login": "adomani"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6QWX7H",
              "body": "adding \r\n```\r\n      if declName.hasMacroScopes then continue\r\n\r\n```\r\ndidn't help",
              "createdAt": "2024-10-18T08:10:39Z",
              "author": {
                "login": "mo271"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6QYAYU",
              "body": "Looking at the output, there seem to be two different sources of double underscores.\r\n1. `notation` generates such declarations, but the \"position\" of the generated declarations is `default`, so I simply excluded identifiers with `default` position;\r\n2. Certain `elab`s seem to also generate implicit names that can involve double underscores, possible in relation to spaces in the corresponding syntax -- I have not yet thought of what to do with those.\r\n\r\n\r\nFor 2., feel free to look at the output and think of what you would think is a good way forward.  Excluding *all* autogenerated names is a possibility, but I am not sure that it is a good idea, since some commands autogenerate declarations that should be checked (e.g. `to_additive`), while most of the failures here seem to be with `simps`.",
              "createdAt": "2024-10-18T11:06:03Z",
              "author": {
                "login": "adomani"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6VarBj",
              "body": "> For 2., feel free to look at the output and think of what you would think is a good way forward. Excluding _all_ autogenerated names is a possibility, but I am not sure that it is a good idea, since some commands autogenerate declarations that should be checked (e.g. `to_additive`), while most of the failures here seem to be with `simps`.\r\n\r\nperhaps it would be easiest to start with excluding all autogenerated declarations. How to do that, @adomani?\r\n\r\nMeanwhile there are some some new declations with double underscored have been introduced :\r\nhttps://github.com/leanprover-community/mathlib4/blob/698148763dd29cf98dd2c56b8a44ac8e825461ae/Mathlib/CategoryTheory/Monoidal/Functor.lean#L1015\r\nThis came from the refactor in #17904. Was it intentional that the name of this lemma contains a doulbe underscore, @joelriou ?",
              "createdAt": "2024-11-28T21:58:02Z",
              "author": {
                "login": "mo271"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6VcJHK",
              "body": "Moritz, I pushed a modification of the code that simply scans the syntax for a visible declaration id and uses just that in the double-underscore check.  If this change is going to be the way the check is supposed to be done, then the code should be polished and we should remove the bits that were there in order to fetch all the auto-generated names.",
              "createdAt": "2024-11-29T06:43:06Z",
              "author": {
                "login": "adomani"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6VcTH2",
              "body": "Thanks @adomani, I think this is good enough for a now! \r\nI cleaned up the exceptions in the, should the anything else be removed, or is looking at the aliases still useful?\r\n\r\nLooking around it seems that `unitIso_hom_app_tensor_comp_inverse_map_δ_functor__`\r\nis really not so useful to have, since a few lines above we ave the verbatim the same lemma without the underscore:\r\n\r\nhttps://github.com/leanprover-community/mathlib4/blob/698148763dd29cf98dd2c56b8a44ac8e825461ae/Mathlib/CategoryTheory/Monoidal/Functor.lean#L998\r\n\r\n\r\nWhen I decrecate the `__` version, all tests should pass.\r\nSo it seems like an double underscore linter would have been useful in that case...\r\n\r\n",
              "createdAt": "2024-11-29T07:20:40Z",
              "author": {
                "login": "mo271"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6VcyQU",
              "body": "!bench",
              "createdAt": "2024-11-29T08:54:01Z",
              "author": {
                "login": "mo271"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6Vc-Bq",
              "body": "Here are the [benchmark results](http://speed.lean-fro.org/mathlib4/run-detail/9ed7208e-0c92-4c9e-89b0-aa1c04d93015) for commit 226c76b30c173e8dffc8c5cd1a13f087fd2820ea.\nThere were [no significant changes](http://speed.lean-fro.org/mathlib4/compare/2c09eb14-2068-4aa9-97cf-dc696965c165/to/9ed7208e-0c92-4c9e-89b0-aa1c04d93015) against commit 6262f69dea67e2154c0f732fa3d1f814ff7232e4.",
              "createdAt": "2024-11-29T09:21:41Z",
              "author": {
                "login": "leanprover-bot"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "37e001c9b0ea88506bb8a830dd26f3d8322180a2",
                "additions": 82,
                "deletions": 2,
                "committedDate": "2024-11-28T21:52:55Z",
                "author": {
                  "name": "Moritz Firsching",
                  "email": "firsching@google.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH10K2aw",
                        "name": "Lint style",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12075826326/job/33676244587"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH10K2Ug",
                        "name": "Add topic label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12075826314/job/33676244562"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH10K2TA",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12075826327/job/33676244556"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH10K2VQ",
                        "name": "post-or-update-summary-comment",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12075826325/job/33676244565"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH10K3Ag",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12075826316/job/33676244738"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH10K2qQ",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12075826313/job/33676244649"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH10K37w",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12075826316/job/33676244975"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH10K3Iw",
                        "name": "Check all files imported",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12075826326/job/33676244771"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH10K3MA",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12075826313/job/33676244784"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH10K3tQ",
                        "name": "Build",
                        "conclusion": "FAILURE",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12075826313/job/33676244917"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH10K3bw",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12075826316/job/33676244847"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH10K4Vw",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12075826316/job/33676245079"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH11OP1g",
                        "name": "Post-CI job",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12075826313/job/33677348822"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH10LEYA",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/33676248160"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH10K02w",
                        "name": ".github/dependabot.yml",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dependabot-api.githubapp.com"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH10Laaw",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=17580&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "4bbcf55bf29999836800e6254a04eb52f78460db",
                "additions": 9,
                "deletions": 2,
                "committedDate": "2024-11-29T06:38:58Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH1-k9gA",
                        "name": "Lint style",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12080185927/job/33687158144"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH1-k9YA",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12080185931/job/33687158112"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH1-k9xA",
                        "name": "post-or-update-summary-comment",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12080185928/job/33687158212"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH1-k60g",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12080185598/job/33687157458"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH1-k6zw",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12080185595/job/33687157455"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH1-k7ag",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12080185598/job/33687157610"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH1-k-eQ",
                        "name": "Check all files imported",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12080185927/job/33687158393"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH1-k8BA",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12080185595/job/33687157764"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH1-k7ZQ",
                        "name": "Build",
                        "conclusion": "FAILURE",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12080185595/job/33687157605"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH1-k8Kg",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12080185598/job/33687157802"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH1-k8tQ",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12080185598/job/33687157941"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH1_lcUA",
                        "name": "Post-CI job",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12080185595/job/33688214608"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH1-lQCQ",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/33687162889"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH1-l-xQ",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=17580&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "3ecc28210fb3cbc786a1ae7fb44e67131213a1c6",
                "additions": 350,
                "deletions": 138,
                "committedDate": "2024-11-29T06:41:03Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "20fb36af3182d228faa7bb187e1df39587d79bc2",
                "additions": 3,
                "deletions": 1,
                "committedDate": "2024-11-29T06:46:22Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "226c76b30c173e8dffc8c5cd1a13f087fd2820ea",
                "additions": 7,
                "deletions": 15,
                "committedDate": "2024-11-29T07:20:06Z",
                "author": {
                  "name": "Moritz Firsching",
                  "email": "firsching@google.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH1_nvBQ",
                        "name": "Lint style",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12080615901/job/33688252165"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH1_nuqw",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12080615937/job/33688252075"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH1_nuew",
                        "name": "post-or-update-summary-comment",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12080615940/job/33688252027"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH1_nrXw",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12080615211/job/33688251231"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH1_nqbg",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12080615226/job/33688250990"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH1_nqcQ",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12080615211/job/33688250993"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH1_nuAQ",
                        "name": "Check all files imported",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12080615901/job/33688251905"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH1_nrGw",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12080615226/job/33688251163"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH1_npQg",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12080615211/job/33688250690"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH1_npgg",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12080615226/job/33688250754"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH1_nsQQ",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12080615211/job/33688251457"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH2A1K3A",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12080615226/job/33689520860"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH1_oDEA",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/33688257296"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH1_oeIw",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=17580&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "80d08a70d0ebbf090dd06e9d79d58f6983297a03",
                "additions": 7,
                "deletions": 15,
                "committedDate": "2024-11-29T18:03:08Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "c218e074873d04790d16e87ab2af202c8c503f0a",
                "additions": 2,
                "deletions": 12,
                "committedDate": "2024-11-29T18:10:05Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH2X-GNw",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12089081805/job/33713784375"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH2X-GRQ",
                        "name": "post-or-update-summary-comment",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12089081819/job/33713784389"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH2X-Cug",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12089081312/job/33713783482"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH2X-Crg",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12089081319/job/33713783470"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH2X-HdQ",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12089081829/job/33713784693"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH2X-DhA",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12089081312/job/33713783684"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH2X-EJg",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12089081319/job/33713783846"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH2X-GlA",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12089081829/job/33713784468"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH2X-EXg",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12089081312/job/33713783902"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH2X-DaQ",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12089081319/job/33713783657"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH2X-FLg",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12089081312/job/33713784110"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH2Y-sTw",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12089081319/job/33714842703"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH2X-bFQ",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/33713789717"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAH2X_BYg",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=17580&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "createdAt": "2024-10-09T12:20:39Z",
        "deletions": 8,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/CategoryTheory/Monoidal/Functor.lean",
              "additions": 4,
              "deletions": 6
            },
            {
              "path": "Mathlib/ModelTheory/PartialEquiv.lean",
              "additions": 4,
              "deletions": 1
            },
            {
              "path": "Mathlib/Tactic/Linter/Style.lean",
              "additions": 41,
              "deletions": 1
            },
            {
              "path": "MathlibTest/DoubleUnderscore.lean",
              "additions": 19,
              "deletions": 0
            },
            {
              "path": "MathlibTest/Lint.lean",
              "additions": 9,
              "deletions": 0
            }
          ]
        },
        "headRefName": "mo271/declID_linter",
        "headRefOid": "c218e074873d04790d16e87ab2af202c8c503f0a",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5-Ervs",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABk2TD1g",
              "color": "33DBEC",
              "name": "t-linter"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABwbfWPw",
              "color": "B60205",
              "name": "large-import"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c6Mv2gz",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "adomani"
              },
              "submittedAt": "2024-10-10T20:25:14Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6Mvujh",
              "body": "Thanks; I like this version much better. (Thanks also to Damiano, I agree with all your comments!) I found another couple of small opportunities for improvement.\r\n\r\nAs perhaps my biggest comment: this changes the dupNamespace linter, to also catch additivised (and other) declarations. Can you extend the PR description to mention this? (This PR could even be split in two, one for the refactoring and one for the new linter. I don't think that is necessary.)\r\nOh, and while you're at it, please also explain what this linter does in the description I just saw that is also missing :-)",
              "state": "COMMENTED",
              "author": {
                "login": "grunweg"
              },
              "submittedAt": "2024-10-10T20:13:45Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "BLOCKED",
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 17580,
        "potentialMergeCommit": {
          "oid": "9473a32dc1d7b31988027dc4ffdbb73e9cb06867"
        },
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c6MtiHa",
              "body": "This is not a full review - but the new linter itself looks straightforward, so I wouldn't anticipate many further comments. I haven't really reviewed the code in `Linter/Common.lean`.",
              "state": "COMMENTED",
              "author": {
                "login": "grunweg"
              },
              "submittedAt": "2024-10-10T15:38:43Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MvIs-",
              "body": "Thanks for the review!",
              "state": "COMMENTED",
              "author": {
                "login": "mo271"
              },
              "submittedAt": "2024-10-10T19:06:41Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MvRQj",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "adomani"
              },
              "submittedAt": "2024-10-10T19:11:16Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MvTYz",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "adomani"
              },
              "submittedAt": "2024-10-10T19:16:23Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MvUid",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "adomani"
              },
              "submittedAt": "2024-10-10T19:19:24Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MvXE8",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "adomani"
              },
              "submittedAt": "2024-10-10T19:23:56Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MvXJw",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mo271"
              },
              "submittedAt": "2024-10-10T19:24:00Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MviHi",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "adomani"
              },
              "submittedAt": "2024-10-10T19:51:38Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MvbET",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mo271"
              },
              "submittedAt": "2024-10-10T19:59:38Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6Mvmh5",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mo271"
              },
              "submittedAt": "2024-10-10T20:00:21Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MvrXm",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "adomani"
              },
              "submittedAt": "2024-10-10T20:02:56Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6MvreL",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mo271"
              },
              "submittedAt": "2024-10-10T20:03:08Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6Mvvcd",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "adomani"
              },
              "submittedAt": "2024-10-10T20:06:56Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6Mvwwm",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "adomani"
              },
              "submittedAt": "2024-10-10T20:10:18Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6Mvujh",
              "body": "Thanks; I like this version much better. (Thanks also to Damiano, I agree with all your comments!) I found another couple of small opportunities for improvement.\r\n\r\nAs perhaps my biggest comment: this changes the dupNamespace linter, to also catch additivised (and other) declarations. Can you extend the PR description to mention this? (This PR could even be split in two, one for the refactoring and one for the new linter. I don't think that is necessary.)\r\nOh, and while you're at it, please also explain what this linter does in the description I just saw that is also missing :-)",
              "state": "COMMENTED",
              "author": {
                "login": "grunweg"
              },
              "submittedAt": "2024-10-10T20:13:45Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6Mv0uN",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "adomani"
              },
              "submittedAt": "2024-10-10T20:20:29Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6Mv1Ow",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mo271"
              },
              "submittedAt": "2024-10-10T20:21:54Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6Mv2gz",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "adomani"
              },
              "submittedAt": "2024-10-10T20:25:14Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6Mv1uM",
              "body": "I plan to split this into two pull requests:\r\none changing the duplicate namespace linter and one adding the new linter for easier reviewing",
              "state": "COMMENTED",
              "author": {
                "login": "mo271"
              },
              "submittedAt": "2024-10-10T20:26:12Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6Mv3Za",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mo271"
              },
              "submittedAt": "2024-10-10T20:27:29Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6Mv9VI",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mo271"
              },
              "submittedAt": "2024-10-10T20:42:54Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6Mv_3n",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "mo271"
              },
              "submittedAt": "2024-10-10T20:49:42Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rB_s0",
                    "body": "The style linter complains: you should put the module docstring before any open statements.",
                    "createdAt": "2024-10-10T15:32:42Z",
                    "author": {
                      "login": "grunweg"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5rC99F",
                    "body": "done",
                    "createdAt": "2024-10-10T18:51:21Z",
                    "author": {
                      "login": "mo271"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rCAL3",
                    "body": "How about this?\r\nThe `check_declID` linter emits a warning on declarations whose name is non-standard style.\r\n(Currently, this only includes declarations whose names include a double underscore.)",
                    "createdAt": "2024-10-10T15:34:04Z",
                    "author": {
                      "login": "grunweg"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5rC-SJ",
                    "body": "nice, done",
                    "createdAt": "2024-10-10T18:52:28Z",
                    "author": {
                      "login": "mo271"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rCAPp",
                    "body": "Please update this :-)",
                    "createdAt": "2024-10-10T15:34:14Z",
                    "author": {
                      "login": "grunweg"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5rC-Za",
                    "body": "... good catch, done",
                    "createdAt": "2024-10-10T18:52:58Z",
                    "author": {
                      "login": "mo271"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rCASU",
                    "body": "```suggestion",
                    "createdAt": "2024-10-10T15:34:21Z",
                    "author": {
                      "login": "grunweg"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rCAfy",
                    "body": "This is not an identifier *name* (but syntax corresponding to one), right? Can you tweak the comment to make this clearer?",
                    "createdAt": "2024-10-10T15:34:56Z",
                    "author": {
                      "login": "grunweg"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5rC_Le",
                    "body": "rephrased to make it more clear",
                    "createdAt": "2024-10-10T18:55:57Z",
                    "author": {
                      "login": "mo271"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rCAyf",
                    "body": "I like these lines! Can you move this above the the `register_option`, then you can just use `@[inherit_doc] here.",
                    "createdAt": "2024-10-10T15:35:47Z",
                    "author": {
                      "login": "grunweg"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5rDAGk",
                    "body": "done and done",
                    "createdAt": "2024-10-10T18:59:33Z",
                    "author": {
                      "login": "mo271"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rCBFj",
                    "body": "Subjective: I would put the `run` on the the same line. I would also name the variable `stx`, and find a different name below. Both of these are matters of taste.",
                    "createdAt": "2024-10-10T15:36:41Z",
                    "author": {
                      "login": "grunweg"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5rDAls",
                    "body": "ok, both done. ",
                    "createdAt": "2024-10-10T19:01:27Z",
                    "author": {
                      "login": "mo271"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rCBN4",
                    "body": "I think mathlib style is to not brace if conditions.",
                    "createdAt": "2024-10-10T15:37:03Z",
                    "author": {
                      "login": "grunweg"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5rDAuu",
                    "body": "removed the braces \r\n(I have written too much C++ recently...)",
                    "createdAt": "2024-10-10T19:02:02Z",
                    "author": {
                      "login": "mo271"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rCBSj",
                    "body": "\"follow the mathlib naming conventions\"",
                    "createdAt": "2024-10-10T15:37:15Z",
                    "author": {
                      "login": "grunweg"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5rDBG_",
                    "body": "done",
                    "createdAt": "2024-10-10T19:03:21Z",
                    "author": {
                      "login": "mo271"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rCBYD",
                    "body": "You can omit these two lines, right?",
                    "createdAt": "2024-10-10T15:37:29Z",
                    "author": {
                      "login": "grunweg"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5rDBL8",
                    "body": "yes, removed",
                    "createdAt": "2024-10-10T19:03:44Z",
                    "author": {
                      "login": "mo271"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rDDGY",
                    "body": "These lines add the current namespace at the beginning of the output of `getNames`.  However, `getNames` already handles namespaces, so this is no longer needed: it was a \"fix\" for `getIds`, but now it can be removed.",
                    "createdAt": "2024-10-10T19:11:15Z",
                    "author": {
                      "login": "adomani"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5rDGVy",
                    "body": "make sense, done!",
                    "createdAt": "2024-10-10T19:24:00Z",
                    "author": {
                      "login": "mo271"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rDEWd",
                    "body": "How about calling this\r\n* `linter.style.doubleUnderscore` and leave a rename to a possible extension that checks more;\r\n* `linter.style.nameCheck`, so we avoid the \"technical\" `declId` and make this more memorable?",
                    "createdAt": "2024-10-10T19:16:22Z",
                    "author": {
                      "login": "adomani"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5rDI83",
                    "body": "renamed in that spirit \r\nNow we have \r\n- Linter.linter.style.nameCheck  \r\n- Linter.Style.nameCheck.doubleUnderscore",
                    "createdAt": "2024-10-10T19:33:44Z",
                    "author": {
                      "login": "mo271"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rDFFW",
                    "body": "How about we add a check that also verifies that the linter checks the `to_additive` name?  E.g.\r\n* a duplicated namespace arising from additivizing (such as `namespace add @[to_additive] theorem mul`) and\r\n* a double warning arising from `namespace XX @[to_additive] theorem mul__more`.",
                    "createdAt": "2024-10-10T19:19:19Z",
                    "author": {
                      "login": "adomani"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5rDS_E",
                    "body": "That makes sense. Will add when it works again.\r\nAlso the test here should now catch the add.add, right? https://github.com/leanprover-community/mathlib4/blob/3ae6376f67d90e32a4dfbee23157ac3ac4b5508c/test/Lint.lean#L28",
                    "createdAt": "2024-10-10T20:03:07Z",
                    "author": {
                      "login": "mo271"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5rDVS6",
                    "body": "Ah, yes, good point: we already have a test for this!  Hopefully, this test will fail and can be converted into a successful test for the new linter!",
                    "createdAt": "2024-10-10T20:06:56Z",
                    "author": {
                      "login": "adomani"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rDGTM",
                    "body": "```suggestion\r\n```\r\nLooking back at this, I am not so sure that this line is necessary: I think that a non-declaration that happens to add a declaration to the environment would actually produce a name.  Besides, if there are no names to be extracted, clearly the output is going to be `#[]`, so it is probably clearer to remove this last sentence.",
                    "createdAt": "2024-10-10T19:23:50Z",
                    "author": {
                      "login": "adomani"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5rDP1R",
                    "body": "I removed the line",
                    "createdAt": "2024-10-10T19:59:23Z",
                    "author": {
                      "login": "mo271"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rDNZb",
                    "body": "Oh, this is now only linting commands that produce a *single* declaration!  I think that, with the new behaviour of `getNames`, we actually want to run this check on all the entries in `getNames stx`.",
                    "createdAt": "2024-10-10T19:51:37Z",
                    "author": {
                      "login": "adomani"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5rDQJh",
                    "body": "I tried this now, but I don't think it is working as intended yet...\r\ninvestigating",
                    "createdAt": "2024-10-10T20:00:21Z",
                    "author": {
                      "login": "mo271"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5rDWIY",
                    "body": "Glancing at the code, it seems correct and the fact that CI does not appear to be flagging any duplicated namespace seems reasonable.  What makes you suspicious?",
                    "createdAt": "2024-10-10T20:10:18Z",
                    "author": {
                      "login": "adomani"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5rDd6t",
                    "body": "the `to_additive` test is not triggering like it should and also \r\nhttps://github.com/leanprover-community/mathlib4/blob/3ae6376f67d90e32a4dfbee23157ac3ac4b5508c/test/Lint.lean#L52-L58\r\nis now broken, i.e. here the new `dupNamespace` does not trigger anymore, while the old one did.",
                    "createdAt": "2024-10-10T20:42:54Z",
                    "author": {
                      "login": "mo271"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5rDfld",
                    "body": "also there are some new things detected:\r\n```\r\n⚠ [2956/5186] Built Mathlib.Algebra.Algebra.Spectrum\r\nwarning: ././././Mathlib/Algebra/Algebra/Spectrum.lean:1:0: The namespace 'Algebra' is duplicated in the declaration 'AlgHom.term↑ₐ._@.Mathlib.Algebra.Algebra.Spectrum._hyg.8927'\r\nnote: this linter can be disabled with `set_option linter.dupNamespace false`\r\n```",
                    "createdAt": "2024-10-10T20:49:42Z",
                    "author": {
                      "login": "mo271"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rDS4f",
                    "body": "```suggestion\r\n      let declName := id.getId\r\n```\r\nsince I think that `getNames` now always returns an identifier and never a `declId`.  At this point, it may make sense to inline this in `nm` and use `id` directly in `logLint`, since I think that it will print the same as `id.getId`.",
                    "createdAt": "2024-10-10T20:02:56Z",
                    "author": {
                      "login": "adomani"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rDU3j",
                    "body": "Caution: the current version disables the linter for the remainder of the file.\r\n```suggestion\r\nset_option linter.style.nameCheck false in",
                    "createdAt": "2024-10-10T20:05:45Z",
                    "author": {
                      "login": "grunweg"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rDVIe",
                    "body": "```suggestion\r\nThis file contains functions that are used by multiple linters.\r\n-/\r\n\r\nopen Lean Parser Elab Command Meta",
                    "createdAt": "2024-10-10T20:06:14Z",
                    "author": {
                      "login": "grunweg"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rDVYR",
                    "body": "You could compress the let with the loop. Optional!",
                    "createdAt": "2024-10-10T20:07:19Z",
                    "author": {
                      "login": "grunweg"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5rDZLD",
                    "body": "compressed!",
                    "createdAt": "2024-10-10T20:23:13Z",
                    "author": {
                      "login": "mo271"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rDVgn",
                    "body": "```suggestion\r\n(Currently, this only includes declarations whose name includes a double underscore.)\r\n```\r\nI think",
                    "createdAt": "2024-10-10T20:07:53Z",
                    "author": {
                      "login": "grunweg"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rDVjU",
                    "body": "```suggestion\r\nprobably have been introduced by accident.",
                    "createdAt": "2024-10-10T20:08:04Z",
                    "author": {
                      "login": "grunweg"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rDWer",
                    "body": "Can you replace `declID` by `declaration`, please? While we're avoiding technical jargon, let's be consistent.",
                    "createdAt": "2024-10-10T20:11:43Z",
                    "author": {
                      "login": "grunweg"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5rDYkE",
                    "body": "Why is the variable called `sytax` rather than `syntax` or `name`?  `sytax` looks so much like a typo to me!  :smile: ",
                    "createdAt": "2024-10-10T20:20:29Z",
                    "author": {
                      "login": "adomani"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5rDY3Q",
                    "body": "it is, will fix",
                    "createdAt": "2024-10-10T20:21:54Z",
                    "author": {
                      "login": "mo271"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5rDaRS",
                    "body": "done (both the typo and not mentioning `declID`",
                    "createdAt": "2024-10-10T20:27:29Z",
                    "author": {
                      "login": "mo271"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5rDZtu",
                    "body": "```suggestion\r\nimport Lean.DeclarationRange\r\n```\r\nnot too important, since it is hard not to import `Lean.Elab.Command`, but this file seems to only need this earlier import.",
                    "createdAt": "2024-10-10T20:25:14Z",
                    "author": {
                      "login": "adomani"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjM0OTE2Mjc=",
              "login": "mo271"
            },
            {
              "id": "MDQ6VXNlcjI5NDY3NzQ1",
              "login": "adomani"
            },
            {
              "id": "MDQ6VXNlcjg1NjY4Mzk0",
              "login": "leanprover-bot"
            },
            {
              "id": "MDQ6VXNlcjEwMTA1MDE2",
              "login": "grunweg"
            },
            {
              "id": "U_kgDOBcsTTQ",
              "login": "leanprover-community-bot-assistant"
            },
            {
              "id": "U_kgDOCsITAQ",
              "login": "mathlib4-dependent-issues-bot"
            }
          ]
        },
        "state": "OPEN",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH2X-GNw",
                "name": "label-and-report-new-contributor",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12089081805/job/33713784375"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH2X-GRQ",
                "name": "post-or-update-summary-comment",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12089081819/job/33713784389"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH2X-Cug",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12089081312/job/33713783482"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH2X-Crg",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12089081319/job/33713783470"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH2X-HdQ",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12089081829/job/33713784693"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH2X-DhA",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12089081312/job/33713783684"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH2X-EJg",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12089081319/job/33713783846"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH2X-GlA",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12089081829/job/33713784468"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH2X-EXg",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12089081312/job/33713783902"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH2X-DaQ",
                "name": "Build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12089081319/job/33713783657"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH2X-FLg",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12089081312/job/33713784110"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH2Y-sTw",
                "name": "Post-CI job",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/12089081319/job/33714842703"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH2X-bFQ",
                "name": "New Contributor Check",
                "conclusion": "NEUTRAL",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/33713789717"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAH2X_BYg",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=17580&login=leanprover-community&repository=mathlib4"
              }
            ]
          }
        },
        "title": "feat: lint declarations which contain a double underscore",
        "updatedAt": "2024-11-29T18:11:04Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/17580",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6ZhyCpzwAAAANkj0LY",
              "createdAt": "2024-10-09T12:21:39Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABwbfWPw",
                "name": "large-import"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6PLi7e",
              "createdAt": "2024-10-09T12:21:41Z",
              "body": "### PR summary [c218e07487](https://github.com/leanprover-community/mathlib4/pull/17580/commits/c218e074873d04790d16e87ab2af202c8c503f0a)\n\nImport changes exceeding 2%\n\n| %      | File |\n| -      | -    |\n| +100.00% | `Mathlib.Tactic.Linter.Style` |\n\n<details><summary>\n\n#### Import changes for modified files\n\n</summary>\n\nDependency changes\n\n| File | Base Count | Head Count | Change |\n| --- | --- | --- | --- |\n| Mathlib.Tactic.Linter.Style | 3 | 6 | +3 (+100.00%) |\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n| `Mathlib.Tactic.Linter.Style`|3|\n\n</details>\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ doubleUnderscore:`\n`+ toEmbeddingOfEqTop_apply`\n`++ double__underscore`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n</details>\n\n---\n\n<details><summary>No changes to technical debt.</summary>\n\nYou can run this locally as\n```\n./scripts/technical-debt-metrics.sh pr_summary\n```\n* The `relative` value is the weighted *sum* of the differences with weight given by the *inverse* of the current value of the statistic.\n* The `absolute` value is the `relative` value divided by the total sum of the inverses of the current values (i.e. the weighted *average* of the differences).\n</details>",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6ZhyCpzwAAAANkj06v",
              "createdAt": "2024-10-09T12:21:51Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABk2TD1g",
                "name": "t-linter"
              }
            },
            {
              "__typename": "ReadyForReviewEvent",
              "id": "RFRE_lADOFcwZ1c6ZhyCpzwAAAANk_sk6",
              "createdAt": "2024-10-09T20:36:37Z"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6PXxrO",
              "createdAt": "2024-10-10T15:01:16Z",
              "body": "!bench",
              "author": {
                "login": "adomani"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6PYEyf",
              "createdAt": "2024-10-10T15:34:37Z",
              "body": "Here are the [benchmark results](http://speed.lean-fro.org/mathlib4/run-detail/e9e1ac43-037d-4e5c-a3a3-e71f6fe67634) for commit be3bc239a87e84cb9b18bd1743e56600c969fcba.\nThe entire run failed.\nFound no significant differences.",
              "author": {
                "login": "leanprover-bot"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6MtiHa",
              "createdAt": "2024-10-10T15:32:42Z",
              "body": "This is not a full review - but the new linter itself looks straightforward, so I wouldn't anticipate many further comments. I haven't really reviewed the code in `Linter/Common.lean`.",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6MvIs-",
              "createdAt": "2024-10-10T18:51:21Z",
              "body": "Thanks for the review!",
              "author": {
                "login": "mo271"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6MvRQj",
              "createdAt": "2024-10-10T19:11:15Z",
              "body": "",
              "author": {
                "login": "adomani"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6MvTYz",
              "createdAt": "2024-10-10T19:16:22Z",
              "body": "",
              "author": {
                "login": "adomani"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6MvUid",
              "createdAt": "2024-10-10T19:19:19Z",
              "body": "",
              "author": {
                "login": "adomani"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6MvXE8",
              "createdAt": "2024-10-10T19:23:49Z",
              "body": "",
              "author": {
                "login": "adomani"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6PZv6g",
              "createdAt": "2024-10-10T19:35:58Z",
              "body": "!bench",
              "author": {
                "login": "adomani"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6MviHi",
              "createdAt": "2024-10-10T19:51:37Z",
              "body": "",
              "author": {
                "login": "adomani"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6PZ5Tq",
              "createdAt": "2024-10-10T20:00:06Z",
              "body": "Here are the [benchmark results](http://speed.lean-fro.org/mathlib4/run-detail/4e00c69b-d023-4c10-844c-ace97a932165) for commit 2142c45deeabc8bdebf7d20d730663c1a8da10d0.\nThe entire run failed.\nFound no significant differences.",
              "author": {
                "login": "leanprover-bot"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6MvrXm",
              "createdAt": "2024-10-10T20:02:56Z",
              "body": "",
              "author": {
                "login": "adomani"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6PZ9Fb",
              "createdAt": "2024-10-10T20:05:18Z",
              "body": "Sorry for sending the code suggestions in such a fragmented fashion: I can only review in small bits and I can't really check the code on my computer.",
              "author": {
                "login": "adomani"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6Mvujh",
              "createdAt": "2024-10-10T20:05:45Z",
              "body": "Thanks; I like this version much better. (Thanks also to Damiano, I agree with all your comments!) I found another couple of small opportunities for improvement.\r\n\r\nAs perhaps my biggest comment: this changes the dupNamespace linter, to also catch additivised (and other) declarations. Can you extend the PR description to mention this? (This PR could even be split in two, one for the refactoring and one for the new linter. I don't think that is necessary.)\r\nOh, and while you're at it, please also explain what this linter does in the description I just saw that is also missing :-)",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6ZhyCpzwAAAANmCnr-",
              "createdAt": "2024-10-10T20:14:34Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6Mv2gz",
              "createdAt": "2024-10-10T20:25:14Z",
              "body": "",
              "author": {
                "login": "adomani"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6Mv1uM",
              "createdAt": "2024-10-10T20:23:12Z",
              "body": "I plan to split this into two pull requests:\r\none changing the duplicate namespace linter and one adding the new linter for easier reviewing",
              "author": {
                "login": "mo271"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6PaGNT",
              "createdAt": "2024-10-10T20:29:26Z",
              "body": "I like the idea of splitting: while the code addition is not big, it has a somewhat large effect on the `dupNamespace` linter, so investigating those changes and increasing the tests will be good.\r\n\r\nThe other PR with the `nameCheck` can then also develop further and maybe someone has some other style suggestions to look out for.  If the `docPrime` linter will survive, that would also be a good one to merge into the `nameCheck` linter.",
              "author": {
                "login": "adomani"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6PaJSG",
              "createdAt": "2024-10-10T20:37:39Z",
              "body": "part one, refactor of the `dupNamespace` linter is here now: #17631",
              "author": {
                "login": "mo271"
              }
            },
            {
              "__typename": "ConvertToDraftEvent",
              "id": "CTDE_lADOFcwZ1c6ZhyCpzwAAAANmDhAn",
              "createdAt": "2024-10-10T20:37:46Z"
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6ZhyCpzwAAAANmGd0w",
              "createdAt": "2024-10-10T22:10:37Z",
              "label": {
                "id": "MDU6TGFiZWwzMjg4OTQyMDg2",
                "name": "blocked-by-other-PR"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6ZhyCpzwAAAANmGudj",
              "createdAt": "2024-10-10T22:21:08Z",
              "label": {
                "id": "MDU6TGFiZWwzMjg4OTQyMDg2",
                "name": "blocked-by-other-PR"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6ZhyCpzwAAAANoaPtp",
              "createdAt": "2024-10-14T13:51:07Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5dx-XF",
              "createdAt": "2024-10-17T05:53:25Z",
              "source": {
                "id": "PR_kwDOFcwZ1c5-RN9-",
                "title": "[Merged by Bors] - feat(Tactic/Linter/Lint): improve `dupNamespace` linter",
                "url": "https://github.com/leanprover-community/mathlib4/pull/17631"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6ZhyCpzwAAAANs552e",
              "createdAt": "2024-10-18T05:23:57Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6QVSEO",
              "createdAt": "2024-10-18T06:00:08Z",
              "body": "@adomani  this now works in principle, but he new `getNamesFrom` extracts leads to lots of declarations, which actually have and underscore, see the `build mathlib` step here:\r\nhttps://github.com/leanprover-community/mathlib4/actions/runs/11398241232/job/31714947231?pr=17580\r\n\r\nHow should these false postives be handled best?",
              "author": {
                "login": "mo271"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6QWEmN",
              "createdAt": "2024-10-18T07:50:10Z",
              "body": "The duplicated namespace linter filters out declarations that have macroscopes, via `hasMacroScopes` or something similar.  I can look into this, but in a few hours.",
              "author": {
                "login": "adomani"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6QWX7H",
              "createdAt": "2024-10-18T08:10:39Z",
              "body": "adding \r\n```\r\n      if declName.hasMacroScopes then continue\r\n\r\n```\r\ndidn't help",
              "author": {
                "login": "mo271"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6QYAYU",
              "createdAt": "2024-10-18T11:06:03Z",
              "body": "Looking at the output, there seem to be two different sources of double underscores.\r\n1. `notation` generates such declarations, but the \"position\" of the generated declarations is `default`, so I simply excluded identifiers with `default` position;\r\n2. Certain `elab`s seem to also generate implicit names that can involve double underscores, possible in relation to spaces in the corresponding syntax -- I have not yet thought of what to do with those.\r\n\r\n\r\nFor 2., feel free to look at the output and think of what you would think is a good way forward.  Excluding *all* autogenerated names is a possibility, but I am not sure that it is a good idea, since some commands autogenerate declarations that should be checked (e.g. `to_additive`), while most of the failures here seem to be with `simps`.",
              "author": {
                "login": "adomani"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6ZhyCpzwAAAANvvdYh",
              "createdAt": "2024-10-21T07:49:03Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c6ZhyCpzwAAAAOaDYc1",
              "createdAt": "2024-11-28T21:53:17Z"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6VarBj",
              "createdAt": "2024-11-28T21:58:02Z",
              "body": "> For 2., feel free to look at the output and think of what you would think is a good way forward. Excluding _all_ autogenerated names is a possibility, but I am not sure that it is a good idea, since some commands autogenerate declarations that should be checked (e.g. `to_additive`), while most of the failures here seem to be with `simps`.\r\n\r\nperhaps it would be easiest to start with excluding all autogenerated declarations. How to do that, @adomani?\r\n\r\nMeanwhile there are some some new declations with double underscored have been introduced :\r\nhttps://github.com/leanprover-community/mathlib4/blob/698148763dd29cf98dd2c56b8a44ac8e825461ae/Mathlib/CategoryTheory/Monoidal/Functor.lean#L1015\r\nThis came from the refactor in #17904. Was it intentional that the name of this lemma contains a doulbe underscore, @joelriou ?",
              "author": {
                "login": "mo271"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6ZhyCpzwAAAAOaDnkb",
              "createdAt": "2024-11-28T22:06:05Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6VcJHK",
              "createdAt": "2024-11-29T06:43:06Z",
              "body": "Moritz, I pushed a modification of the code that simply scans the syntax for a visible declaration id and uses just that in the double-underscore check.  If this change is going to be the way the check is supposed to be done, then the code should be polished and we should remove the bits that were there in order to fetch all the auto-generated names.",
              "author": {
                "login": "adomani"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6VcTH2",
              "createdAt": "2024-11-29T07:20:40Z",
              "body": "Thanks @adomani, I think this is good enough for a now! \r\nI cleaned up the exceptions in the, should the anything else be removed, or is looking at the aliases still useful?\r\n\r\nLooking around it seems that `unitIso_hom_app_tensor_comp_inverse_map_δ_functor__`\r\nis really not so useful to have, since a few lines above we ave the verbatim the same lemma without the underscore:\r\n\r\nhttps://github.com/leanprover-community/mathlib4/blob/698148763dd29cf98dd2c56b8a44ac8e825461ae/Mathlib/CategoryTheory/Monoidal/Functor.lean#L998\r\n\r\n\r\nWhen I decrecate the `__` version, all tests should pass.\r\nSo it seems like an double underscore linter would have been useful in that case...\r\n\r\n",
              "author": {
                "login": "mo271"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6ZhyCpzwAAAAOaQRsY",
              "createdAt": "2024-11-29T08:53:49Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6VcyQU",
              "createdAt": "2024-11-29T08:54:01Z",
              "body": "!bench",
              "author": {
                "login": "mo271"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6Vc-Bq",
              "createdAt": "2024-11-29T09:21:41Z",
              "body": "Here are the [benchmark results](http://speed.lean-fro.org/mathlib4/run-detail/9ed7208e-0c92-4c9e-89b0-aa1c04d93015) for commit 226c76b30c173e8dffc8c5cd1a13f087fd2820ea.\nThere were [no significant changes](http://speed.lean-fro.org/mathlib4/compare/2c09eb14-2068-4aa9-97cf-dc696965c165/to/9ed7208e-0c92-4c9e-89b0-aa1c04d93015) against commit 6262f69dea67e2154c0f732fa3d1f814ff7232e4.",
              "author": {
                "login": "leanprover-bot"
              }
            },
            {
              "__typename": "ReadyForReviewEvent",
              "id": "RFRE_lADOFcwZ1c6ZhyCpzwAAAAOaSoq3",
              "createdAt": "2024-11-29T09:47:35Z"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            }
          ]
        }
      }
    }
  }
}
