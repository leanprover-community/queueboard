{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 472,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "j-loreaux"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "If S is non-unital subalgebra of a unital R-algebra A, there is a natural map `Unitization R S →ₐ[R] A` whose range is `Algebra.adjoin R (S : Set A)`. When `1 ∉ S` and `R` is a field, this map is injective, and so we can restrict the codomain to `Algebra.adjoin R (S : Set A)` and turn it into an `AlgEquiv`.\r\n\r\nWe specialize this to the `ℕ`-unitization of a non-unital subsemiring and its `Subsemiring.closure`, as well as the `ℤ`-unitization of a non-unital subring and its `Subring.closure`. We also extend the above map to a `StarAlgHom` in the case of `NonUnitalStarSubalgebras`.\r\n\r\nThis continues the non-unital-ization of mathlib.\r\n\r\nCo-authored-by: Anatole Dedecker <anatolededecker@gmail.com>\r\n\r\n---\r\n\r\nDue to some miscommunication on the previous PR #5602 (my fault!) concerning whether or not this was finished, these changes didn't make it in. The previous PR has been reverted in #6717 in order to give a clean diff for this PR. Because this is essentially a fresh PR, I have updated the title PR description.\r\n\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 7,
        "closed": true,
        "closedAt": "2023-09-12T10:53:37Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5jdsFM",
              "body": "> I agree that the proofs look cleaner, but I'm worried that this could actually cause some usability troubles, because it's much easier to compose by an inclusion than to use `codRestrict`. That's why [orthogonalProjection](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/InnerProductSpace/Projection.html#orthogonalProjection) is defined like that for example.\r\n\r\nThanks for the comment. Yes, I understand that. I guess my claim with this PR is that I expect the case where one needs to the map into the subtype to be the rarer of the two, **and**, in the case where one does actually want the map into the subtype, it is likely the case that an equivalence is in fact desired. I'm happy to eat my words if you have a class of counterexamples though! :smiley: \r\n\r\nAs far as [orthogonalProjection](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/InnerProductSpace/Projection.html#orthogonalProjection) goes, while I recognize that version is important too and maps between different Hilbert spaces are necessary to have around, we're definitely going to need the version where it is composed with `Subtype.val` so that it maps from a space to itself. Why? Well, as far as operator algebras are concerned, that's the version that is actually a positive operator! So, I don't consider this sufficiently strong motivation for mapping into the subtype.",
              "createdAt": "2023-08-08T00:07:45Z",
              "author": {
                "login": "j-loreaux"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5jfbIF",
              "body": "> > I agree that the proofs look cleaner, but I'm worried that this could actually cause some usability troubles, because it's much easier to compose by an inclusion than to use `codRestrict`. That's why [orthogonalProjection](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/InnerProductSpace/Projection.html#orthogonalProjection) is defined like that for example.\r\n> \r\n> Thanks for the comment. Yes, I understand that. I guess my claim with this PR is that I expect the case where one needs to the map into the subtype to be the rarer of the two, **and**, in the case where one does actually want the map into the subtype, it is likely the case that an equivalence is in fact desired. I'm happy to eat my words if you have a class of counterexamples though! smiley\r\n> \r\n> As far as [orthogonalProjection](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/InnerProductSpace/Projection.html#orthogonalProjection) goes, while I recognize that version is important too and maps between different Hilbert spaces are necessary to have around, we're definitely going to need the version where it is composed with `Subtype.val` so that it maps from a space to itself. Why? Well, as far as operator algebras are concerned, that's the version that is actually a positive operator! So, I don't consider this sufficiently strong motivation for mapping into the subtype.\r\n\r\nAh right the idea is \"although it makes situation A harder, it makes situation B slightly easier and that's worth it because B happens way more often than A\". That's fine for me then.\r\n\r\nFor orthogonal projection, do you think an abbrev for the composition would be enough? This is completely unrelated to this PR of course.",
              "createdAt": "2023-08-08T08:42:47Z",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5jv0Pc",
              "body": "> For orthogonal projection, do you think an abbrev for the composition would be enough? This is completely unrelated to this PR of course.\r\n\r\nYes, probably an `abbrev` is the best option.",
              "createdAt": "2023-08-10T15:45:21Z",
              "author": {
                "login": "j-loreaux"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5mPSVT",
              "body": "Thanks!\r\n\r\nbors merge",
              "createdAt": "2023-09-12T08:49:02Z",
              "author": {
                "login": "ocfnash"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5mQGup",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6157683641/job/16708914195)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6157683641/job/16708913724)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6157683641/job/16708914807)",
              "createdAt": "2023-09-12T10:53:35Z",
              "author": {
                "login": "bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "1c93e54cc650406f368021cde17dca0e2cc3ec71",
                "additions": 400,
                "deletions": 2,
                "committedDate": "2023-07-19T20:36:32Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "0a779dd4a2ba5bffe243e9999126c6c6353b70be",
                "additions": 1,
                "deletions": 0,
                "committedDate": "2023-07-19T20:38:35Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "f3f065ab009d09cfe6115444503d2c6d4c885712",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-07-19T20:39:24Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "eaccda2e0d6f40fd5a32a02aec348fae889552b6",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-07-19T22:29:10Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "8a257170fcb28880edb0e4674fd6e16dab5259bc",
                "additions": 8743,
                "deletions": 3640,
                "committedDate": "2023-07-28T16:27:57Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "ea99653c047046bae3a109ee980314eec0bb9e81",
                "additions": 27,
                "deletions": 26,
                "committedDate": "2023-07-28T19:18:14Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "44d4df41a83627eb6976ca68b8d33cd6990dfd71",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-08-02T20:19:31Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "35b87da1714f6db12e6cdca9d99df55b51a7f280",
                "additions": 41,
                "deletions": 56,
                "committedDate": "2023-08-02T22:43:55Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "b48bb03896c6f604bdd4e0b4aba93bcb2020749f",
                "additions": 14,
                "deletions": 36,
                "committedDate": "2023-08-03T17:58:59Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "d3112bf0891834a1b1919b5357a81922dc73f9c8",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-08-03T19:14:07Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "4c77b4b48a02ec4e4abf58850646af14fc506edf",
                "additions": 4,
                "deletions": 5,
                "committedDate": "2023-08-03T19:16:54Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "9edbf7ce44dc583439970e09cd203a5b5b2984a0",
                "additions": 34,
                "deletions": 28,
                "committedDate": "2023-08-03T20:25:14Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "4dc2f45430c4c165402bcbc95ef57b8d21c5b052",
                "additions": 27,
                "deletions": 10,
                "committedDate": "2023-08-03T20:38:16Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "c4cf73a7d2d57334ea00dcab30e40a418e182fe9",
                "additions": 19,
                "deletions": 13,
                "committedDate": "2023-08-04T21:45:04Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "3d61d16daffbd11e00af5df59458e1b490dca4ac",
                "additions": 201,
                "deletions": 131,
                "committedDate": "2023-08-04T21:45:58Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "ba8483ddd3b41f6dc9e761e3e1d58f964505e4e5",
                "additions": 0,
                "deletions": 0,
                "committedDate": "2023-08-04T21:54:23Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "dabd025ecfde5c37bded8e0be428fcbc58b14a3d",
                "additions": 10735,
                "deletions": 3428,
                "committedDate": "2023-08-04T21:56:46Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "dea5e71f5baca05ebfbab8af66c44f19a9e974eb",
                "additions": 230,
                "deletions": 520,
                "committedDate": "2023-08-04T21:57:28Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "7c3867d99bff83afc44f54ded3575b4ff0d7525d",
                "additions": 8,
                "deletions": 18,
                "committedDate": "2023-08-08T00:09:19Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "696e152e033486416de7c022f12776f714299ec5",
                "additions": 24,
                "deletions": 22,
                "committedDate": "2023-08-10T15:26:57Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "6c108e75e30d6943732ba0ffa37074d7e4bb1528",
                "additions": 17641,
                "deletions": 13865,
                "committedDate": "2023-08-11T02:51:40Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "afbdfe06c8cdf8765e9b6e80d462e67ecee98217",
                "additions": 0,
                "deletions": 35,
                "committedDate": "2023-08-11T02:55:38Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "451013b407f9cef125ac6506086e54efaf808837",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-08-11T02:56:01Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "1dba10e01805a33c1d627b4fe3a9c5c96878d413",
                "additions": 646,
                "deletions": 118,
                "committedDate": "2023-08-11T20:14:32Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "f288f113fd2ff821001f6b9dbc32094da2e80001",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-08-11T20:16:25Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "6625200d10701482b38b9974b0aaf637dda45563",
                "additions": 3,
                "deletions": 3,
                "committedDate": "2023-08-13T20:43:42Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "d018d27f6b57f04c5e1bac4a3054ac33f9968ad9",
                "additions": 3,
                "deletions": 2,
                "committedDate": "2023-08-13T20:49:48Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "3f48cd58e6c06d04dee008745d397cd766ad85d2",
                "additions": 17,
                "deletions": 15,
                "committedDate": "2023-08-13T20:55:14Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "cc6b9f36931cd14c64de906472b879612c722013",
                "additions": 80,
                "deletions": 72,
                "committedDate": "2023-08-13T21:28:23Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "7a62c659fb8bba51e1bc55bdf2c11125fa63d96a",
                "additions": 20,
                "deletions": 11,
                "committedDate": "2023-08-13T21:32:34Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "64415f60c37eaa32876447ba58afe52b63d3e18e",
                "additions": 2,
                "deletions": 6,
                "committedDate": "2023-08-21T20:33:01Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "252c5ed08341d6a5e9d524061806b6f699a693e1",
                "additions": 12970,
                "deletions": 4729,
                "committedDate": "2023-08-21T20:39:56Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "5eb4c7193b5bd72cd3d5fbcdb567e5c24acf2167",
                "additions": 3,
                "deletions": 3,
                "committedDate": "2023-08-21T20:48:54Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "4ed1c448e0a3523371989e53d402f3f547f259da",
                "additions": 4309,
                "deletions": 2261,
                "committedDate": "2023-08-25T17:38:59Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "db0231cb2a79b4937e8060d2ba129a8dfb91ea27",
                "additions": 1,
                "deletions": 0,
                "committedDate": "2023-08-25T17:47:03Z",
                "author": {
                  "name": "Jireh Loreaux",
                  "email": "loreaujy@gmail.com"
                },
                "statusCheckRollup": null
              }
            }
          ]
        },
        "createdAt": "2023-08-04T22:04:53Z",
        "deletions": 5,
        "files": {
          "nodes": [
            {
              "path": "Mathlib.lean",
              "additions": 1,
              "deletions": 0
            },
            {
              "path": "Mathlib/Algebra/Algebra/Subalgebra/Unitization.lean",
              "additions": 391,
              "deletions": 0
            },
            {
              "path": "Mathlib/Algebra/Star/Subalgebra.lean",
              "additions": 4,
              "deletions": 0
            },
            {
              "path": "Mathlib/GroupTheory/GroupAction/SubMulAction.lean",
              "additions": 18,
              "deletions": 0
            },
            {
              "path": "Mathlib/RingTheory/Adjoin/Basic.lean",
              "additions": 27,
              "deletions": 5
            },
            {
              "path": "Mathlib/RingTheory/Subring/Basic.lean",
              "additions": 16,
              "deletions": 0
            },
            {
              "path": "Mathlib/RingTheory/Subsemiring/Basic.lean",
              "additions": 15,
              "deletions": 0
            }
          ]
        },
        "headRefName": "j-loreaux/Unitize-v2",
        "headRefOid": "db0231cb2a79b4937e8060d2ba129a8dfb91ea27",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5XO10g",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
              "color": "06e039",
              "name": "ready-to-merge"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJjTQ",
              "color": "33DBEC",
              "name": "t-algebra"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5ep1U4",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-08-21T22:54:17Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5efPWJ",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ADedecker"
              },
              "submittedAt": "2023-08-18T22:47:13Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 6372,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5dVlX5",
              "body": "I agree that the proofs look cleaner, but I'm worried that this could actually cause some usability troubles, because it's much easier to compose by an inclusion than to use `codRestrict`. That's why [orthogonalProjection](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/InnerProductSpace/Projection.html#orthogonalProjection) is defined like that for example. ",
              "state": "COMMENTED",
              "author": {
                "login": "ADedecker"
              },
              "submittedAt": "2023-08-07T18:35:39Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5dZGxP",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ADedecker"
              },
              "submittedAt": "2023-08-08T09:43:19Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5dtYS8",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "j-loreaux"
              },
              "submittedAt": "2023-08-10T15:25:07Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5dtYxJ",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "j-loreaux"
              },
              "submittedAt": "2023-08-10T15:26:01Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5dwTlF",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "j-loreaux"
              },
              "submittedAt": "2023-08-11T02:53:24Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5dwToY",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "j-loreaux"
              },
              "submittedAt": "2023-08-11T02:53:59Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5d7Pg_",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ADedecker"
              },
              "submittedAt": "2023-08-13T13:09:52Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5d7kUW",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "j-loreaux"
              },
              "submittedAt": "2023-08-13T21:34:20Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5d7kVO",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "j-loreaux"
              },
              "submittedAt": "2023-08-13T21:34:58Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5efPWJ",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ADedecker"
              },
              "submittedAt": "2023-08-18T22:47:13Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5epL_F",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "j-loreaux"
              },
              "submittedAt": "2023-08-21T20:49:34Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5ep1U4",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-08-21T22:54:17Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5eqEXE",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "j-loreaux"
              },
              "submittedAt": "2023-08-22T00:11:13Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5MqqL4",
                    "body": "```suggestion\r\n    (Unitization.lift f).range = Algebra.adjoin R (NonUnitalAlgHom.range f : Set C) :=\r\n  eq_of_forall_ge_iff fun c ↦ by rw [Unitization.lift_range_le, Algebra.adjoin_le_iff]; rfl\r\n```",
                    "createdAt": "2023-08-07T18:23:17Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5MqrDT",
                    "body": "```suggestion\r\n  let algHom : Unitization R s →ₐ[R] Algebra.adjoin R (s : Set A) :=\r\n```",
                    "createdAt": "2023-08-07T18:27:35Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5MqrjQ",
                    "body": "```suggestion\r\n    (starLift f).range = StarSubalgebra.adjoin R (NonUnitalStarAlgHom.range f : Set C) :=\r\n  eq_of_forall_ge_iff fun c ↦ by \r\n    rw [Unitization.starLift_range_le, StarSubalgebra.adjoin_le_iff]\r\n    rfl\r\n```",
                    "createdAt": "2023-08-07T18:30:03Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5MqsH7",
                    "body": "```suggestion\r\n  let starAlgHom : Unitization R S →⋆ₐ[R] StarSubalgebra.adjoin R (S : Set A) :=\r\n```",
                    "createdAt": "2023-08-07T18:32:22Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Ms6Of",
                    "body": "```suggestion\r\n@[simps! apply_coe]\r\n```\r\nThe generated `symm_apply` lemma is at best completely useless, at worst simp-set poisoning",
                    "createdAt": "2023-08-08T09:13:30Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Ms6Z9",
                    "body": "```suggestion\r\n@[simps! apply_coe]\r\n```\r\nDitto",
                    "createdAt": "2023-08-08T09:14:07Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5MtCaS",
                    "body": "```suggestion\r\n    Unitization R s ≃ₐ[R] Algebra.adjoin R (s : Set A) :=\r\n  let algHom : Unitization R s →ₐ[R] Algebra.adjoin R (s : Set A) :=\r\n    ((NonUnitalSubalgebra.unitization s).codRestrict _\r\n      fun x ↦ (NonUnitalSubalgebra.unitization_range s).le <| AlgHom.mem_range_self _ x)\r\n  AlgEquiv.ofBijective algHom <| by\r\n    refine ⟨?_, fun x ↦ ?_⟩\r\n    · have := AlgHomClass.unitization_injective s h1\r\n        ((Subalgebra.val _).comp <| algHom) fun _ ↦ by simp\r\n      simp only [AlgHom.coe_comp, Subalgebra.coe_val] at this\r\n      exact this.of_comp\r\n    · obtain (⟨a, ha⟩ : (x : A) ∈ (NonUnitalSubalgebra.unitization s).range) :=\r\n        (NonUnitalSubalgebra.unitization_range s).ge x.property\r\n      exact ⟨a, Subtype.ext ha⟩\r\n```\r\n\r\nTwo changes here:\r\n- no more data defined in tactic mode. It was probably fine but I'm scared of defining data in tactic mode, and I also find it a bit cleaner to have a clear distinction\r\n- I replaced some rewriting along `NonUnitalSubalgebra.unitization_range s` by applying the `.le` or `.ge` version. Personally I think it's a bit cleaner, but if you don't like it I have no problem with the original version.",
                    "createdAt": "2023-08-08T09:42:31Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5M6JK8",
                    "body": "Yeah, I thought the tactic mode was safe because I just used `refine` for the data bits, but this is nicer.",
                    "createdAt": "2023-08-10T15:25:07Z",
                    "author": {
                      "login": "j-loreaux"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5MtCme",
                    "body": "```suggestion\r\n    Unitization R S ≃⋆ₐ[R] StarSubalgebra.adjoin R (S : Set A) :=\r\n  let starAlgHom : Unitization R S →⋆ₐ[R] StarSubalgebra.adjoin R (S : Set A) :=\r\n    (S.unitization.codRestrict _\r\n      fun x ↦ S.unitization_range.le <| Set.mem_range_self x)\r\n  StarAlgEquiv.ofBijective starAlgHom <| by\r\n    refine ⟨?_, fun x ↦ ?_⟩\r\n    · have h_eq : S.unitization = (StarSubalgebra.subtype _).comp starAlgHom := rfl\r\n      have this := S.unitization_injective h1\r\n      rw [h_eq, StarAlgHom.coe_comp] at this\r\n      exact this.of_comp\r\n    · obtain (⟨a, ha⟩ : (x : A) ∈ S.unitization.range) :=\r\n        S.unitization_range.ge x.property\r\n      exact ⟨a, Subtype.ext ha⟩\r\n```\r\nSame changes as above.\r\n\r\nDo you know why this definition is so slow?",
                    "createdAt": "2023-08-08T09:43:13Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5M6Jfh",
                    "body": "no, unfortunately I am not sure.",
                    "createdAt": "2023-08-10T15:26:01Z",
                    "author": {
                      "login": "j-loreaux"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5M8MZf",
                    "body": "```suggestion\r\n```",
                    "createdAt": "2023-08-11T02:53:24Z",
                    "author": {
                      "login": "j-loreaux"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5M8MdC",
                    "body": "```suggestion\r\nsection Semiring\r\n```",
                    "createdAt": "2023-08-11T02:53:59Z",
                    "author": {
                      "login": "j-loreaux"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5NDjhu",
                    "body": "```suggestion\r\n```\r\nYou actually don't use this version so I suggest removing the comment (or replacing it with some comparison with the unprimed version).",
                    "createdAt": "2023-08-13T12:28:14Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5NDk1j",
                    "body": "```suggestion\r\n    (unitization s).range = Algebra.adjoin R (s : Set A) := by\r\n```\r\nSame in a lot of other places",
                    "createdAt": "2023-08-13T12:52:19Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5ND3bN",
                    "body": "I've tried to make better use of namespacing throughout the file.",
                    "createdAt": "2023-08-13T21:34:58Z",
                    "author": {
                      "login": "j-loreaux"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5NDk3Y",
                    "body": "```suggestion\r\n/-! ## Star subalgebras -/\r\n```",
                    "createdAt": "2023-08-13T12:52:56Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5NDk_n",
                    "body": "```suggestion\r\n        ((Subalgebra.val _).comp algHom) fun _ ↦ by simp\r\n      rw [AlgHom.coe_comp] at this\r\n```",
                    "createdAt": "2023-08-13T12:56:00Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5NDlqJ",
                    "body": "Maybe we discussed that already, but why can't you use `SetLike` here like you did for subalgebras? The same question applies to the subring and subsemiring results.",
                    "createdAt": "2023-08-13T13:09:14Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5ND3aE",
                    "body": "good point, I've transitioned to `SetLike` everywhere",
                    "createdAt": "2023-08-13T21:34:20Z",
                    "author": {
                      "login": "j-loreaux"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Na1zn",
                    "body": "```suggestion\r\n* `NonUnitalSubalgebra.unitizationAlgEquiv s : Unitization R s ≃ₐ[R] Algebra.adjoin R (s : Set A)`\r\n```",
                    "createdAt": "2023-08-18T21:37:21Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Na2C3",
                    "body": "```suggestion\r\n* `NonUnitalStarSubalgebra s : Unitization R s →⋆ₐ[R] A`: a version of\r\n```\r\nFor consistency.",
                    "createdAt": "2023-08-18T21:39:27Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Na8MX",
                    "body": "```suggestion\r\n```",
                    "createdAt": "2023-08-18T22:44:39Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Na8ab",
                    "body": "Quick note: I was surprised that the proof was different than in the non-star case, which lead me to discover a small hole in the API (see #6668). But there's really no point in enforcing similar proofs for four quick lines so of course you don't have to wait for that.",
                    "createdAt": "2023-08-18T22:47:09Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5Nhg46",
                    "body": "Thanks for plugging that hole for me!",
                    "createdAt": "2023-08-21T20:49:34Z",
                    "author": {
                      "login": "j-loreaux"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Nh4vf",
                    "body": "Is this really the earliest place that this can be defined?",
                    "createdAt": "2023-08-21T22:54:17Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5NiDrm",
                    "body": "Yes, because neither the unital nor the non-unital subobject files import each other.",
                    "createdAt": "2023-08-22T00:11:12Z",
                    "author": {
                      "login": "j-loreaux"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjg5MjA1OTg=",
              "login": "j-loreaux"
            },
            {
              "id": "MDQ6VXNlcjQ4NjU2Nzkz",
              "login": "ADedecker"
            },
            {
              "id": "MDQ6VXNlcjc3MzQzNjQ=",
              "login": "ocfnash"
            },
            {
              "id": "MDQ6VXNlcjQyNTI2MA==",
              "login": "eric-wieser"
            },
            {
              "id": "U_kgDOB75MNQ",
              "login": "leanprover-community-mathlib4-bot"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": null,
        "title": "[Merged by Bors] - feat: maps from the unitization of non-unital subobjects of unital algebras",
        "updatedAt": "2023-09-12T10:53:42Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/6372",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "1c93e54cc650406f368021cde17dca0e2cc3ec71"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "0a779dd4a2ba5bffe243e9999126c6c6353b70be"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "f3f065ab009d09cfe6115444503d2c6d4c885712"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "eaccda2e0d6f40fd5a32a02aec348fae889552b6"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "8a257170fcb28880edb0e4674fd6e16dab5259bc"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "ea99653c047046bae3a109ee980314eec0bb9e81"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "44d4df41a83627eb6976ca68b8d33cd6990dfd71"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "35b87da1714f6db12e6cdca9d99df55b51a7f280"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "b48bb03896c6f604bdd4e0b4aba93bcb2020749f"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "d3112bf0891834a1b1919b5357a81922dc73f9c8"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "4c77b4b48a02ec4e4abf58850646af14fc506edf"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "9edbf7ce44dc583439970e09cd203a5b5b2984a0"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "4dc2f45430c4c165402bcbc95ef57b8d21c5b052"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "c4cf73a7d2d57334ea00dcab30e40a418e182fe9"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "3d61d16daffbd11e00af5df59458e1b490dca4ac"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "ba8483ddd3b41f6dc9e761e3e1d58f964505e4e5"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "dabd025ecfde5c37bded8e0be428fcbc58b14a3d"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "dea5e71f5baca05ebfbab8af66c44f19a9e974eb"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5thF_VzwAAAAJU2HWo",
              "createdAt": "2023-08-04T22:04:53Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5thF_VzwAAAAJU2HWt",
              "createdAt": "2023-08-04T22:04:53Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJjTQ",
                "name": "t-algebra"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5dVlX5",
              "createdAt": "2023-08-07T18:23:16Z",
              "body": "I agree that the proofs look cleaner, but I'm worried that this could actually cause some usability troubles, because it's much easier to compose by an inclusion than to use `codRestrict`. That's why [orthogonalProjection](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/InnerProductSpace/Projection.html#orthogonalProjection) is defined like that for example. ",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5thF_VzwAAAAJVsNzS",
              "createdAt": "2023-08-07T18:35:49Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5thF_VzwAAAAJVsNzZ",
              "createdAt": "2023-08-07T18:35:49Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5jdsFM",
              "createdAt": "2023-08-08T00:07:45Z",
              "body": "> I agree that the proofs look cleaner, but I'm worried that this could actually cause some usability troubles, because it's much easier to compose by an inclusion than to use `codRestrict`. That's why [orthogonalProjection](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/InnerProductSpace/Projection.html#orthogonalProjection) is defined like that for example.\r\n\r\nThanks for the comment. Yes, I understand that. I guess my claim with this PR is that I expect the case where one needs to the map into the subtype to be the rarer of the two, **and**, in the case where one does actually want the map into the subtype, it is likely the case that an equivalence is in fact desired. I'm happy to eat my words if you have a class of counterexamples though! :smiley: \r\n\r\nAs far as [orthogonalProjection](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/InnerProductSpace/Projection.html#orthogonalProjection) goes, while I recognize that version is important too and maps between different Hilbert spaces are necessary to have around, we're definitely going to need the version where it is composed with `Subtype.val` so that it maps from a space to itself. Why? Well, as far as operator algebras are concerned, that's the version that is actually a positive operator! So, I don't consider this sufficiently strong motivation for mapping into the subtype.",
              "author": {
                "login": "j-loreaux"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "7c3867d99bff83afc44f54ded3575b4ff0d7525d"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5thF_VzwAAAAJV1ZBx",
              "createdAt": "2023-08-08T01:32:03Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5thF_VzwAAAAJV1ZB0",
              "createdAt": "2023-08-08T01:32:03Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5jfbIF",
              "createdAt": "2023-08-08T08:42:47Z",
              "body": "> > I agree that the proofs look cleaner, but I'm worried that this could actually cause some usability troubles, because it's much easier to compose by an inclusion than to use `codRestrict`. That's why [orthogonalProjection](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/InnerProductSpace/Projection.html#orthogonalProjection) is defined like that for example.\r\n> \r\n> Thanks for the comment. Yes, I understand that. I guess my claim with this PR is that I expect the case where one needs to the map into the subtype to be the rarer of the two, **and**, in the case where one does actually want the map into the subtype, it is likely the case that an equivalence is in fact desired. I'm happy to eat my words if you have a class of counterexamples though! smiley\r\n> \r\n> As far as [orthogonalProjection](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Analysis/InnerProductSpace/Projection.html#orthogonalProjection) goes, while I recognize that version is important too and maps between different Hilbert spaces are necessary to have around, we're definitely going to need the version where it is composed with `Subtype.val` so that it maps from a space to itself. Why? Well, as far as operator algebras are concerned, that's the version that is actually a positive operator! So, I don't consider this sufficiently strong motivation for mapping into the subtype.\r\n\r\nAh right the idea is \"although it makes situation A harder, it makes situation B slightly easier and that's worth it because B happens way more often than A\". That's fine for me then.\r\n\r\nFor orthogonal projection, do you think an abbrev for the composition would be enough? This is completely unrelated to this PR of course.",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5dZGxP",
              "createdAt": "2023-08-08T09:13:30Z",
              "body": "",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5thF_VzwAAAAJWCVH_",
              "createdAt": "2023-08-08T09:43:28Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5thF_VzwAAAAJWCVID",
              "createdAt": "2023-08-08T09:43:28Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "696e152e033486416de7c022f12776f714299ec5"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5jv0Pc",
              "createdAt": "2023-08-10T15:45:21Z",
              "body": "> For orthogonal projection, do you think an abbrev for the composition would be enough? This is completely unrelated to this PR of course.\r\n\r\nYes, probably an `abbrev` is the best option.",
              "author": {
                "login": "j-loreaux"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5thF_VzwAAAAJXsKb1",
              "createdAt": "2023-08-10T15:45:48Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5thF_VzwAAAAJXsKb5",
              "createdAt": "2023-08-10T15:45:48Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5thF_VzwAAAAJXsKb9",
              "createdAt": "2023-08-10T15:45:48Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5thF_VzwAAAAJXsawo",
              "createdAt": "2023-08-10T15:51:39Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5thF_VzwAAAAJX4UNG",
              "createdAt": "2023-08-10T21:51:07Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "6c108e75e30d6943732ba0ffa37074d7e4bb1528"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5dwTlF",
              "createdAt": "2023-08-11T02:53:24Z",
              "body": "",
              "author": {
                "login": "j-loreaux"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5dwToY",
              "createdAt": "2023-08-11T02:53:59Z",
              "body": "",
              "author": {
                "login": "j-loreaux"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "afbdfe06c8cdf8765e9b6e80d462e67ecee98217"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "451013b407f9cef125ac6506086e54efaf808837"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5thF_VzwAAAAJX8oPw",
              "createdAt": "2023-08-11T02:57:19Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5thF_VzwAAAAJX8oPx",
              "createdAt": "2023-08-11T02:57:19Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5thF_VzwAAAAJX9VaV",
              "createdAt": "2023-08-11T03:56:34Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5thF_VzwAAAAJYT4us",
              "createdAt": "2023-08-11T16:07:47Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "1dba10e01805a33c1d627b4fe3a9c5c96878d413"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "f288f113fd2ff821001f6b9dbc32094da2e80001"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5thF_VzwAAAAJYbWKO",
              "createdAt": "2023-08-11T20:20:32Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5d7Pg_",
              "createdAt": "2023-08-13T12:28:14Z",
              "body": "",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5thF_VzwAAAAJYzq8-",
              "createdAt": "2023-08-13T13:10:37Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5thF_VzwAAAAJYzq9A",
              "createdAt": "2023-08-13T13:10:37Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "6625200d10701482b38b9974b0aaf637dda45563"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "d018d27f6b57f04c5e1bac4a3054ac33f9968ad9"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "3f48cd58e6c06d04dee008745d397cd766ad85d2"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "cc6b9f36931cd14c64de906472b879612c722013"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "7a62c659fb8bba51e1bc55bdf2c11125fa63d96a"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5thF_VzwAAAAJY2mLo",
              "createdAt": "2023-08-13T21:36:05Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5thF_VzwAAAAJY2mLp",
              "createdAt": "2023-08-13T21:36:05Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5OBjwP",
              "createdAt": "2023-08-18T16:46:05Z",
              "source": {
                "id": "PR_kwDOFcwZ1c5YQ7kZ",
                "title": "[Merged by Bors] - feat: missing results about StarAlgHom.codRestrict",
                "url": "https://github.com/leanprover-community/mathlib4/pull/6668"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5efPWJ",
              "createdAt": "2023-08-18T21:37:21Z",
              "body": "",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5thF_VzwAAAAJcCdUo",
              "createdAt": "2023-08-18T22:47:26Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5thF_VzwAAAAJcCdUr",
              "createdAt": "2023-08-18T22:47:26Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "64415f60c37eaa32876447ba58afe52b63d3e18e"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "252c5ed08341d6a5e9d524061806b6f699a693e1"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "5eb4c7193b5bd72cd3d5fbcdb567e5c24acf2167"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5thF_VzwAAAAJdAzRk",
              "createdAt": "2023-08-21T20:50:16Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5thF_VzwAAAAJdAzRp",
              "createdAt": "2023-08-21T20:50:16Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5ep1U4",
              "createdAt": "2023-08-21T22:54:17Z",
              "body": "",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5thF_VzwAAAAJd1KFU",
              "createdAt": "2023-08-23T00:18:52Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "4ed1c448e0a3523371989e53d402f3f547f259da"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "db0231cb2a79b4937e8060d2ba129a8dfb91ea27"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5thF_VzwAAAAJftPa-",
              "createdAt": "2023-08-25T17:49:02Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABIFoUmw",
                "name": "merge-conflict"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5mPSVT",
              "createdAt": "2023-09-12T08:49:02Z",
              "body": "Thanks!\r\n\r\nbors merge",
              "author": {
                "login": "ocfnash"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5thF_VzwAAAAJoh-pi",
              "createdAt": "2023-09-12T08:49:24Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
                "name": "ready-to-merge"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5thF_VzwAAAAJoh-xj",
              "createdAt": "2023-09-12T08:49:25Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5mQGup",
              "createdAt": "2023-09-12T10:53:35Z",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6157683641/job/16708914195)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6157683641/job/16708913724)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6157683641/job/16708914807)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c5thF_VzwAAAAJooBHz",
              "createdAt": "2023-09-12T10:53:37Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c5thF_VzwAAAAJooBTY",
              "createdAt": "2023-09-12T10:53:42Z"
            },
            {
              "__typename": "ReferencedEvent"
            }
          ]
        }
      }
    }
  }
}
