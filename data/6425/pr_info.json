{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 56,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "nomeata"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "Inspired by a file by @pfaffelh\r\n\r\nCo-authored-by: Peter Pfaffelhuber <peter.pfaffelhuber@stochastik.uni-freiburg.de>\r\n\r\n---\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n\r\n\r\nThis was more a finger exercise than a full contribution, but maybe not much is missing for it to be useful enough to be included in mathlib? It could be a condensation kernel for more theory around this?",
        "changedFiles": 2,
        "closed": true,
        "closedAt": "2023-08-24T17:37:11Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5jaWrI",
              "body": "Pinging @pfaffelh",
              "createdAt": "2023-08-07T13:24:17Z",
              "author": {
                "login": "nomeata"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5jqiXB",
              "body": "I’ll be traveling without a laptop for week, and will address review comments afterwards. Should anyone want to adopt this PR and see it through, that’s fine with me as well.",
              "createdAt": "2023-08-09T20:23:03Z",
              "author": {
                "login": "nomeata"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5k1GSJ",
              "body": "I see that there was some discussion about the type of the pmf. I also thought about it, with a different conclusion.\r\nI was willing to merge the definition using `Fin` because it's good to have a first binomial definition, even if we may come back to it later to change it, but my first reaction was that this type does not seem very usable. I have the same issue with the Bernoulli definition we have now. For example, the types of the Bernoulli and binomial distributions currently don't allow to express easily the statement that a binomial is the distribution of a sum of independent r.v. with Bernoulli laws.\r\nIf I were to implement those pmfs, my first choice would be something like Nat, or Q, or even the reals: I am thinking that we will want to sum an arbitrary number of Bernoulli/binomial r.v., so we want to be in at least N, but at some point we will consider a mean, so Q, and we might want to consider limits (law of large numbers, etc.), so the (nonnegative?) real numbers. We could use coercions from `Fin` for those computations, but having everything defined in the same type from the beginning would simplify the computations.\r\n\r\nPerhaps we want the definition of a Bernoulli on any type with a 0 and a 1, with the type as explicit argument. Similarly for the binomial distribution.",
              "createdAt": "2023-08-24T13:06:33Z",
              "author": {
                "login": "RemyDegenne"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5k1LTq",
              "body": "I was wondering about using `Nat` as well. In the application where I’d like to use this, I (kinda) need the extra information `Fin (n+1)` to make the termination checker happy, I am defining something whose `n`’s value depend on an integral over `binominal n` (or something like that).\r\n\r\nIf the expectation would be over all of `Nat`, I’d have to jump through some hoops (maybe using `Pmf.support` as a `Subtype` and integrating over that).\r\n\r\nBut maybe that’s too much of a special case, and the general case is better served by `Nat`?\r\n\r\nOTOH, it’s easy to go from `Fin n` to `Nat`, but harder the other ways, so maybe the current PR carries around more useful information?\r\n\r\n",
              "createdAt": "2023-08-24T13:19:02Z",
              "author": {
                "login": "nomeata"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5k1R84",
              "body": "I agree that `Fin` gives more information than `Nat`, although that info would also be contained in the support. My point of view on this is clearly biased by the math I usually do: I sum random variables and compute empirical means all the time, so I want a type that allows me to do that easily. You can do it with `Fin` by using the coercion to `Nat` or `Real`, but having many coercions can be cumbersome. In general, I can imagine that binomials on different types are useful for different applications, and that's why I concluded my previous message by writing that we might want to take the type as explicit argument.\r\n\r\nFor now, I am perfectly fine with a definition using `Fin`. If there is a need for another definition later, we'll introduce it or we will adapt this one.",
              "createdAt": "2023-08-24T13:34:19Z",
              "author": {
                "login": "RemyDegenne"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5k1SG_",
              "body": "I don't have the benefit of @RemyDegenne 's experience working with the Bernoulli distribution but it sounds like we also want predicates which answer questions like \"is this PMF the Bernoulli / binomial / ... distribution?\" and which can be asked on any type.\r\n\r\nThe definition proposed here is the answer to the question: give me a canonical binomial distribution on `Fin (n + 1)`.",
              "createdAt": "2023-08-24T13:34:43Z",
              "author": {
                "login": "ocfnash"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5k1Um_",
              "body": ":v: RemyDegenne can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests).",
              "createdAt": "2023-08-24T13:40:24Z",
              "author": {
                "login": "bors"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5k1Ux6",
              "body": "LGTM!\r\nbors r+",
              "createdAt": "2023-08-24T13:40:46Z",
              "author": {
                "login": "RemyDegenne"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5k1UzE",
              "body": "(I do realise he can merge it anyway, but just wanted to signal my intentions ;-) )",
              "createdAt": "2023-08-24T13:40:48Z",
              "author": {
                "login": "ocfnash"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5k1VHI",
              "body": "Sorry, just another opinion... Isn't there a general mathlib-rule for this? Frequently, one could define a function on a larger domain by setting all function values to 0 outside of the support. There is nothing special about the binomial distribution, really. ",
              "createdAt": "2023-08-24T13:41:31Z",
              "author": {
                "login": "pfaffelh"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5k1hzT",
              "body": "Build failed:\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/5964812652/job/16180876489)",
              "createdAt": "2023-08-24T14:07:31Z",
              "author": {
                "login": "bors"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5k2GV3",
              "body": "Sorry, this PR was from before `autoImplicits` was turned off; I updated it now.",
              "createdAt": "2023-08-24T15:30:33Z",
              "author": {
                "login": "nomeata"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5k2X88",
              "body": "@RemyDegenne, kindly `bors r+` again :-)",
              "createdAt": "2023-08-24T16:03:19Z",
              "author": {
                "login": "nomeata"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5k2a6m",
              "body": "bors merge",
              "createdAt": "2023-08-24T16:10:25Z",
              "author": {
                "login": "ocfnash"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5k3BQF",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/5966828659/job/16187271965)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/5966828659/job/16187271604)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/5966828659/job/16187272310)",
              "createdAt": "2023-08-24T17:37:10Z",
              "author": {
                "login": "bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "684418f35a50d7ed38f43c31716a2289d1d74275",
                "additions": 58,
                "deletions": 0,
                "committedDate": "2023-08-07T13:14:35Z",
                "author": {
                  "name": "Joachim Breitner",
                  "email": "mail@joachim-breitner.de"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "30edf6767b0ccd727f2c154ae4d36215603d0d3c",
                "additions": 17,
                "deletions": 34,
                "committedDate": "2023-08-07T13:23:17Z",
                "author": {
                  "name": "Joachim Breitner",
                  "email": "mail@joachim-breitner.de"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "c05c143b08fa09d726f6b2b55888b966134cf030",
                "additions": 2,
                "deletions": 5,
                "committedDate": "2023-08-07T13:26:28Z",
                "author": {
                  "name": "Joachim Breitner",
                  "email": "mail@joachim-breitner.de"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "9ea0fa9ac21def9ed15c12bf517d57e8117bc524",
                "additions": 11,
                "deletions": 6,
                "committedDate": "2023-08-07T13:37:51Z",
                "author": {
                  "name": "Joachim Breitner",
                  "email": "mail@joachim-breitner.de"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "dab050ba7de7c923695b0a6d90f2a10353564608",
                "additions": 8,
                "deletions": 10,
                "committedDate": "2023-08-07T13:39:41Z",
                "author": {
                  "name": "Joachim Breitner",
                  "email": "mail@joachim-breitner.de"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "30df2ad5344180496b026b635ae1bb7e5fcb9c6c",
                "additions": 7,
                "deletions": 0,
                "committedDate": "2023-08-07T13:41:17Z",
                "author": {
                  "name": "Joachim Breitner",
                  "email": "mail@joachim-breitner.de"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "e6efd6a0500cd94f40b047b937c5d6b5618fe920",
                "additions": 2,
                "deletions": 2,
                "committedDate": "2023-08-07T13:45:08Z",
                "author": {
                  "name": "Joachim Breitner",
                  "email": "mail@joachim-breitner.de"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "1ecccfebb4699701fc638cc7f77a67493501b714",
                "additions": 13,
                "deletions": 13,
                "committedDate": "2023-08-08T11:46:44Z",
                "author": {
                  "name": "Joachim Breitner",
                  "email": "mail@joachim-breitner.de"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "665f4aa5ffe730e40a3001c74444e9bd8185515b",
                "additions": 6,
                "deletions": 7,
                "committedDate": "2023-08-10T09:15:45Z",
                "author": {
                  "name": "Joachim Breitner",
                  "email": "mail@joachim-breitner.de"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "b3540620b8d6a41aaef54d0e447c9f06f72c80ec",
                "additions": 2,
                "deletions": 2,
                "committedDate": "2023-08-10T09:15:54Z",
                "author": {
                  "name": "Joachim Breitner",
                  "email": "mail@joachim-breitner.de"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "4a3720e59d2d9ac332213a93e40342e8dcf2435b",
                "additions": 4,
                "deletions": 3,
                "committedDate": "2023-08-17T13:32:18Z",
                "author": {
                  "name": "Joachim Breitner",
                  "email": "mail@joachim-breitner.de"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "fe48ef2216a1e6a747d0d2aa898952149758c52c",
                "additions": 2,
                "deletions": 0,
                "committedDate": "2023-08-17T13:32:55Z",
                "author": {
                  "name": "Joachim Breitner",
                  "email": "mail@joachim-breitner.de"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "1c820ff5b6e6d0f01782812f3efbe16fbf79988e",
                "additions": 10,
                "deletions": 7,
                "committedDate": "2023-08-24T11:46:58Z",
                "author": {
                  "name": "Joachim Breitner",
                  "email": "mail@joachim-breitner.de"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "19efd2a962e8a2cdd7642b94d62b0dde839172d3",
                "additions": 35083,
                "deletions": 20904,
                "committedDate": "2023-08-24T15:21:24Z",
                "author": {
                  "name": "Joachim Breitner",
                  "email": "mail@joachim-breitner.de"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "96bf4ac7690692e7d91a2b518948ea5c10d69162",
                "additions": 9,
                "deletions": 6,
                "committedDate": "2023-08-24T15:29:58Z",
                "author": {
                  "name": "Joachim Breitner",
                  "email": "mail@joachim-breitner.de"
                },
                "statusCheckRollup": null
              }
            }
          ]
        },
        "createdAt": "2023-08-07T13:17:38Z",
        "deletions": 0,
        "files": {
          "nodes": [
            {
              "path": "Mathlib.lean",
              "additions": 1,
              "deletions": 0
            },
            {
              "path": "Mathlib/Probability/ProbabilityMassFunction/Binomial.lean",
              "additions": 55,
              "deletions": 0
            }
          ]
        },
        "headRefName": "joachim/binomal_pmf",
        "headRefOid": "96bf4ac7690692e7d91a2b518948ea5c10d69162",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5XVbO2",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABAt13Ow",
              "color": "bfd4f2",
              "name": "delegated"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
              "color": "06e039",
              "name": "ready-to-merge"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJqVA",
              "color": "33DBEC",
              "name": "t-measure-probability"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5dZNtd",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-08-08T09:29:04Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5dqG17",
              "body": "Thanks! Here are a few comments, mostly about spacing.\r\nAbout the names: `binomial_apply_zero` would be better than `binomial_apply_0`. I am also not a fan of `binomial_apply_n` because we don't know what `n` is if we don't look at your notations in this file: call it `binomial_apply_same` perhaps? ",
              "state": "COMMENTED",
              "author": {
                "login": "RemyDegenne"
              },
              "submittedAt": "2023-08-10T08:41:22Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5e_MTR",
              "body": "I think this can be merged now but just in case @RemyDegenne has any further remarks:\r\n\r\nbors d=RemyDegenne",
              "state": "APPROVED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-08-24T13:40:22Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 6425,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": "APPROVED",
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5dWxlg",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-08-07T23:10:59Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5dXtKZ",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "nomeata"
              },
              "submittedAt": "2023-08-08T05:27:44Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5dZNtd",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-08-08T09:29:04Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5dqG17",
              "body": "Thanks! Here are a few comments, mostly about spacing.\r\nAbout the names: `binomial_apply_zero` would be better than `binomial_apply_0`. I am also not a fan of `binomial_apply_n` because we don't know what `n` is if we don't look at your notations in this file: call it `binomial_apply_same` perhaps? ",
              "state": "COMMENTED",
              "author": {
                "login": "RemyDegenne"
              },
              "submittedAt": "2023-08-10T08:41:22Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5e1igS",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-08-23T09:10:29Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5e2gfd",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "nomeata"
              },
              "submittedAt": "2023-08-23T11:09:25Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5e3CiR",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-08-23T12:33:57Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5e47Ji",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "nomeata"
              },
              "submittedAt": "2023-08-23T16:22:49Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5e89K7",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "nomeata"
              },
              "submittedAt": "2023-08-24T08:15:11Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5e9VpI",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-08-24T09:09:51Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5e9coS",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "nomeata"
              },
              "submittedAt": "2023-08-24T09:25:39Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5e9pFL",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-08-24T09:54:54Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5e-KJk",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "nomeata"
              },
              "submittedAt": "2023-08-24T11:16:10Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5e_MTR",
              "body": "I think this can be merged now but just in case @RemyDegenne has any further remarks:\r\n\r\nbors d=RemyDegenne",
              "state": "APPROVED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-08-24T13:40:22Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5MralS",
                    "body": "Do you mean `binomial`? You use one spelling in the docstring, but a different one everywhere else.",
                    "createdAt": "2023-08-07T23:10:59Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5MsB88",
                    "body": "Binomial of course, according to Wikipedia. Silly me. I blame having worked with nominal logic too long. Will fix. Thanks for catching this!",
                    "createdAt": "2023-08-08T05:27:43Z",
                    "author": {
                      "login": "nomeata"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5Ms-tq",
                    "body": "```suggestion\r\n/-- The binomial `Pmf`: The probability of that `i` out of `n` coins come up heads if the\r\nprobability of heads is `p`. -/\r\ndef binomial (p : ENNReal) (h : p ≤ 1) (n : ℕ) : Pmf (Fin (n + 1)) :=\r\n```",
                    "createdAt": "2023-08-08T09:29:04Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5M4CwC",
                    "body": "```suggestion\r\ntheorem binomial_apply_0 : binomial p h n 0 = (1-p)^n := by\r\n  simp [binomial_apply]\r\n```",
                    "createdAt": "2023-08-10T08:28:15Z",
                    "author": {
                      "login": "RemyDegenne"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5M4C1z",
                    "body": "```suggestion\r\ntheorem binomial_apply_n : binomial p h n n = p^n := by\r\n  simp [binomial_apply, Nat.mod_eq_of_lt]\r\n```",
                    "createdAt": "2023-08-10T08:28:31Z",
                    "author": {
                      "login": "RemyDegenne"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5M4C9S",
                    "body": "```suggestion\r\n    binomial p h 1 = (bernoulli p h).map (cond · 1 0) := by\r\n  ext i; fin_cases i <;> simp [tsum_bool, binomial_apply]\r\n```",
                    "createdAt": "2023-08-10T08:28:54Z",
                    "author": {
                      "login": "RemyDegenne"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5M4DcQ",
                    "body": "```suggestion\r\ntheorem binomial_apply :\r\n    binomial p h n i = p^(i : ℕ) * (1-p)^(n - (i : ℕ)) * (n.choose i : ℕ) := rfl\r\n```",
                    "createdAt": "2023-08-10T08:30:35Z",
                    "author": {
                      "login": "RemyDegenne"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5M4EVa",
                    "body": "This looks like a non-terminal simp. Please replace it by a `simp only [...]`.",
                    "createdAt": "2023-08-10T08:33:35Z",
                    "author": {
                      "login": "RemyDegenne"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5M4GCP",
                    "body": "Please close that namespace at the bottom of the file.",
                    "createdAt": "2023-08-10T08:39:25Z",
                    "author": {
                      "login": "RemyDegenne"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5M4GZS",
                    "body": "I'd rather have a single `noncomputable` in front of the definition of binomial. Also here you open a section that you never close. Let's remove that line.\r\n```suggestion\r\n```",
                    "createdAt": "2023-08-10T08:40:37Z",
                    "author": {
                      "login": "RemyDegenne"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5NpagI",
                    "body": "```suggestion\r\nit is equal to `Pmf.bernoulli` for `n = 1`.\r\n```",
                    "createdAt": "2023-08-23T08:53:33Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5NpbgG",
                    "body": "I think it's important to get the word \"independent\" in here somewhere. How about:\r\n```suggestion\r\n/-- The binomial `Pmf`: the probability of observing exactly `i` \"heads\" in a sequence of `n`\r\nindependent coin tosses, each having probability `p` of coming up \"heads\". -/\r\n```",
                    "createdAt": "2023-08-23T08:56:45Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Npe-E",
                    "body": "This looks like a job for `Finset.Nat.antidiagonal`:\r\n```suggestion\r\ndef binomial (p : ENNReal) (h : p ≤ 1) (n : ℕ) : Pmf (antidiagonal n) :=\r\n  .ofFintype (fun ⟨⟨i, j⟩, h⟩ ↦ p^i * (1-p)^j * ((i + j).choose j : ℕ)) (by\r\n```",
                    "createdAt": "2023-08-23T09:08:08Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5NqAzq",
                    "body": "I was actually thinking of providing both variants, just like most of the `choose` API has both, if I recall. As a user id certainly expect to have the binomial distribution on `Fin (n+1)` somewhere.\r\n\r\nShould I do that?",
                    "createdAt": "2023-08-23T11:09:25Z",
                    "author": {
                      "login": "nomeata"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5NqWg1",
                    "body": "I suggest we wait and see if there is demand for the `Fin (n + 1)`-version.\r\n\r\nI admit there are good chances such demand may eventually arise (maybe even soon!) but I think we should at least try to avoid having duplicate definitions for the same thing.",
                    "createdAt": "2023-08-23T12:33:56Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5Nrj4Y",
                    "body": "Hmm. I'm skeptical how it will look like in my project (<https://github.com/nomeata/rerolling-sixes/blob/master/RerollingSixes.lean>).\r\n\r\nDo we have a function `Fintyp (n+1) -> antidiagonal n` so that I can easily map back and forth?\r\n\r\nI'd was inclined to follow the example set by https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Nat/Choose/Sum.html#Commute.add_pow' and `add_pow`. But I can of course do the diagonal variant first.\r\n\r\n",
                    "createdAt": "2023-08-23T16:22:48Z",
                    "author": {
                      "login": "nomeata"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5NuQUW",
                    "body": "I think I’ll park this PR for now and (once I get to it) will first develop the API some more (expected value, relation to `Pmf.bernoulli`, [monotonicity](https://math.stackexchange.com/q/4749194/53195)). Then I can hopefully see better what works best.\r\n\r\n(This should not stop anyone else who cares from taking over, as I don’t know how quickly I’ll get to it.)\r\n\r\n",
                    "createdAt": "2023-08-24T08:15:11Z",
                    "author": {
                      "login": "nomeata"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5NugfX",
                    "body": "> I'd was inclined to follow the example set by https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Nat/Choose/Sum.html#Commute.add_pow' and `add_pow`. But I can of course do the diagonal variant first.\r\n\r\nI don't think this is such a good analogy because `Commute.add_pow` and `Commute.add_pow'` are both theorems but this is a definition.\r\n\r\nMore subjectively, I claim `Commute.add_pow` is not a great lemma because it uses `Nat.sub`. The use of `Nat.sub` here is my main reason for pushing `Finset.Nat.antidiagonal` but it's not the only way to avoid `Nat.sub`. For example, bearing in mind:\r\n```lean\r\nexample  (n : ℕ) (i : Fin (n + 1)) : (↑(Fin.last n - i) : ℕ) = n - (i : ℕ) := by simp [Fin.last_sub]\r\n```\r\nwe could have a `Fin (n + 1)`-supported binomial distribution without using `Nat.sub` as follows:\r\n```suggestion\r\ndef binomial (p : ENNReal) (h : p ≤ 1) (n : ℕ) : Pmf (Fin (n + 1)) :=\r\n  .ofFintype (fun i => p^(i : ℕ) * (1-p)^(↑(Fin.last n - i) : ℕ) * (n.choose i : ℕ)) (by\r\n```\r\n",
                    "createdAt": "2023-08-24T09:09:51Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5NulDv",
                    "body": "Interesting, is `Fin.sub` less worthy of avoidance than `Nat.sub`?\r\n\r\nI understand that `Fin.sub` is annoying; I would hope that we’d build an API around binomial so that one doesn’t often have to drop down to its actual definition, so it matters a bit less what’s happening on the RHS of the `Pmf.binominal` – but it’s type (i.e. whether the carrier is `Nat` or `Fin` or `antidiagonal`) matters much more",
                    "createdAt": "2023-08-24T09:25:39Z",
                    "author": {
                      "login": "nomeata"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5NutQO",
                    "body": "> Interesting, is `Fin.sub` less worthy of avoidance than `Nat.sub`? I understand that `Fin.sub` is annoying;\r\n\r\nThere's nothing wrong with `Fin.sub`, it's just modular arithmetic. Indeed:\r\n```lean\r\nexample (n : ℕ) : AddCommGroup (Fin (n + 1)) := inferInstance\r\n```\r\nso it's a sensible subtraction in which things like `sub_eq_zero` etc. hold. \r\n\r\n>  I would hope that we’d build an API around binomial so that one doesn’t often have to drop down to its actual definition, so it matters a bit less what’s happening on the RHS of the `Pmf.binominal`\r\n\r\nAgreed, but if we can avoid `Nat.sub` (as it seems we can) then we should.\r\n\r\n> but it’s type (i.e. whether the carrier is `Nat` or `Fin` or `antidiagonal`) matters much more\r\n\r\nAlso agreed. Note that there should be API to make it trivial to transport pmfs between domains (and if not we should create it). Given that we can do whatever we like if we also add the following (which seems to be missing, but is worth adding):\r\n```lean\r\ndef antidiagonal_equiv_fin (n : ℕ) : antidiagonal n ≃ Fin (n + 1) where\r\n  toFun := fun ⟨⟨i, j⟩, h⟩ ↦ ⟨i, by\r\n    simp only [mem_antidiagonal] at h\r\n    rw [Nat.lt_succ]\r\n    -- etc\r\n    sorry⟩\r\n  invFun := fun ⟨i, h⟩ ↦ ⟨⟨i, n - i⟩, by\r\n    rw [mem_antidiagonal, add_comm, tsub_add_cancel_iff_le]\r\n    rwa [Nat.lt_succ] at h⟩\r\n  left_inv := by\r\n    rintro ⟨⟨i, j⟩, h⟩\r\n    simp only [ge_iff_le, Subtype.mk.injEq, Prod.mk.injEq, true_and]\r\n    simp only [mem_antidiagonal] at h\r\n    exact tsub_eq_of_eq_add_rev h.symm\r\n  right_inv := fun x ↦ by simp\r\n```\r\n\r\nBut I guess this is all moot if we just use the `Fin.sub` version.",
                    "createdAt": "2023-08-24T09:54:54Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5NvB1J",
                    "body": "Ok, I'll use the `Fin (n+1)` and `Fin.sub` variant, that sounds like a good sweet spot, thanks!\r\n\r\nI'll also PR that equivalence.",
                    "createdAt": "2023-08-24T11:16:09Z",
                    "author": {
                      "login": "nomeata"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjE0ODAzNw==",
              "login": "nomeata"
            },
            {
              "id": "MDQ6VXNlcjQwOTQ3MzI=",
              "login": "RemyDegenne"
            },
            {
              "id": "MDQ6VXNlcjc3MzQzNjQ=",
              "login": "ocfnash"
            },
            {
              "id": "MDQ6VXNlcjQxOTI3NDIy",
              "login": "pfaffelh"
            },
            {
              "id": "MDQ6VXNlcjQyNTI2MA==",
              "login": "eric-wieser"
            },
            {
              "id": "U_kgDOB75MNQ",
              "login": "leanprover-community-mathlib4-bot"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": null,
        "title": "[Merged by Bors] - feat: Pmf.binomial",
        "updatedAt": "2023-08-24T17:37:15Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/6425",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "684418f35a50d7ed38f43c31716a2289d1d74275"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "30edf6767b0ccd727f2c154ae4d36215603d0d3c"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5jaWrI",
              "createdAt": "2023-08-07T13:24:17Z",
              "body": "Pinging @pfaffelh",
              "author": {
                "login": "nomeata"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "c05c143b08fa09d726f6b2b55888b966134cf030"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "9ea0fa9ac21def9ed15c12bf517d57e8117bc524"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "dab050ba7de7c923695b0a6d90f2a10353564608"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "30df2ad5344180496b026b635ae1bb7e5fcb9c6c"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "e6efd6a0500cd94f40b047b937c5d6b5618fe920"
              }
            },
            {
              "__typename": "ReadyForReviewEvent",
              "id": "RFRE_lADOFcwZ1c5to6auzwAAAAJVgN9G",
              "createdAt": "2023-08-07T13:54:58Z"
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5to6auzwAAAAJVgOQZ",
              "createdAt": "2023-08-07T13:55:04Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5to6auzwAAAAJVgOdw",
              "createdAt": "2023-08-07T13:55:09Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJqVA",
                "name": "t-measure-probability"
              }
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5N3DS2",
              "createdAt": "2023-08-07T19:57:01Z",
              "source": {
                "id": "PR_kwDOFcwZ1c5XXuaL",
                "title": "[Merged by Bors] - feat: MeasurableSpace (Fin n)",
                "url": "https://github.com/leanprover-community/mathlib4/pull/6431"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5dWxlg",
              "createdAt": "2023-08-07T23:10:59Z",
              "body": "",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "1ecccfebb4699701fc638cc7f77a67493501b714"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5jqiXB",
              "createdAt": "2023-08-09T20:23:03Z",
              "body": "I’ll be traveling without a laptop for week, and will address review comments afterwards. Should anyone want to adopt this PR and see it through, that’s fine with me as well.",
              "author": {
                "login": "nomeata"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5dqG17",
              "createdAt": "2023-08-10T08:28:14Z",
              "body": "Thanks! Here are a few comments, mostly about spacing.\r\nAbout the names: `binomial_apply_zero` would be better than `binomial_apply_0`. I am also not a fan of `binomial_apply_n` because we don't know what `n` is if we don't look at your notations in this file: call it `binomial_apply_same` perhaps? ",
              "author": {
                "login": "RemyDegenne"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5to6auzwAAAAJXaRqO",
              "createdAt": "2023-08-10T08:41:59Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5to6auzwAAAAJXaRqW",
              "createdAt": "2023-08-10T08:41:59Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "665f4aa5ffe730e40a3001c74444e9bd8185515b"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "b3540620b8d6a41aaef54d0e447c9f06f72c80ec"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "4a3720e59d2d9ac332213a93e40342e8dcf2435b"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "fe48ef2216a1e6a747d0d2aa898952149758c52c"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5to6auzwAAAAJbLGng",
              "createdAt": "2023-08-17T13:33:25Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5to6auzwAAAAJbLGnp",
              "createdAt": "2023-08-17T13:33:25Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5e1igS",
              "createdAt": "2023-08-23T08:53:33Z",
              "body": "",
              "author": {
                "login": "ocfnash"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5to6auzwAAAAJeCVmA",
              "createdAt": "2023-08-23T09:11:18Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5to6auzwAAAAJeCVmL",
              "createdAt": "2023-08-23T09:11:18Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5to6auzwAAAAJerOGR",
              "createdAt": "2023-08-24T08:15:36Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5to6auzwAAAAJerOGW",
              "createdAt": "2023-08-24T08:15:36Z",
              "label": {
                "id": "MDU6TGFiZWwzMjcxMjQ0NzU5",
                "name": "WIP"
              }
            },
            {
              "__typename": "ConvertToDraftEvent",
              "id": "CTDE_lADOFcwZ1c5to6auzwAAAAJerOQ7",
              "createdAt": "2023-08-24T08:15:40Z"
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "1c820ff5b6e6d0f01782812f3efbe16fbf79988e"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5to6auzwAAAAJezMlG",
              "createdAt": "2023-08-24T11:47:27Z",
              "label": {
                "id": "MDU6TGFiZWwzMjcxMjQ0NzU5",
                "name": "WIP"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5to6auzwAAAAJezMlO",
              "createdAt": "2023-08-24T11:47:27Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "ReviewRequestedEvent",
              "id": "RRE_lADOFcwZ1c5to6auzwAAAAJezMmL",
              "createdAt": "2023-08-24T11:47:28Z",
              "requestedReviewer": {
                "id": "MDQ6VXNlcjc3MzQzNjQ=",
                "login": "ocfnash"
              }
            },
            {
              "__typename": "ReadyForReviewEvent",
              "id": "RFRE_lADOFcwZ1c5to6auzwAAAAJezMwx",
              "createdAt": "2023-08-24T11:47:32Z"
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5OG1c2",
              "createdAt": "2023-08-24T12:22:44Z",
              "source": {
                "id": "PR_kwDOFcwZ1c5YsC5b",
                "title": "[Merged by Bors] - feat: Data.Finset.NatAntidiagonal.antidiagonal_equiv_fin",
                "url": "https://github.com/leanprover-community/mathlib4/pull/6766"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5k1GSJ",
              "createdAt": "2023-08-24T13:06:33Z",
              "body": "I see that there was some discussion about the type of the pmf. I also thought about it, with a different conclusion.\r\nI was willing to merge the definition using `Fin` because it's good to have a first binomial definition, even if we may come back to it later to change it, but my first reaction was that this type does not seem very usable. I have the same issue with the Bernoulli definition we have now. For example, the types of the Bernoulli and binomial distributions currently don't allow to express easily the statement that a binomial is the distribution of a sum of independent r.v. with Bernoulli laws.\r\nIf I were to implement those pmfs, my first choice would be something like Nat, or Q, or even the reals: I am thinking that we will want to sum an arbitrary number of Bernoulli/binomial r.v., so we want to be in at least N, but at some point we will consider a mean, so Q, and we might want to consider limits (law of large numbers, etc.), so the (nonnegative?) real numbers. We could use coercions from `Fin` for those computations, but having everything defined in the same type from the beginning would simplify the computations.\r\n\r\nPerhaps we want the definition of a Bernoulli on any type with a 0 and a 1, with the type as explicit argument. Similarly for the binomial distribution.",
              "author": {
                "login": "RemyDegenne"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5k1LTq",
              "createdAt": "2023-08-24T13:19:02Z",
              "body": "I was wondering about using `Nat` as well. In the application where I’d like to use this, I (kinda) need the extra information `Fin (n+1)` to make the termination checker happy, I am defining something whose `n`’s value depend on an integral over `binominal n` (or something like that).\r\n\r\nIf the expectation would be over all of `Nat`, I’d have to jump through some hoops (maybe using `Pmf.support` as a `Subtype` and integrating over that).\r\n\r\nBut maybe that’s too much of a special case, and the general case is better served by `Nat`?\r\n\r\nOTOH, it’s easy to go from `Fin n` to `Nat`, but harder the other ways, so maybe the current PR carries around more useful information?\r\n\r\n",
              "author": {
                "login": "nomeata"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5k1R84",
              "createdAt": "2023-08-24T13:34:19Z",
              "body": "I agree that `Fin` gives more information than `Nat`, although that info would also be contained in the support. My point of view on this is clearly biased by the math I usually do: I sum random variables and compute empirical means all the time, so I want a type that allows me to do that easily. You can do it with `Fin` by using the coercion to `Nat` or `Real`, but having many coercions can be cumbersome. In general, I can imagine that binomials on different types are useful for different applications, and that's why I concluded my previous message by writing that we might want to take the type as explicit argument.\r\n\r\nFor now, I am perfectly fine with a definition using `Fin`. If there is a need for another definition later, we'll introduce it or we will adapt this one.",
              "author": {
                "login": "RemyDegenne"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5k1SG_",
              "createdAt": "2023-08-24T13:34:43Z",
              "body": "I don't have the benefit of @RemyDegenne 's experience working with the Bernoulli distribution but it sounds like we also want predicates which answer questions like \"is this PMF the Bernoulli / binomial / ... distribution?\" and which can be asked on any type.\r\n\r\nThe definition proposed here is the answer to the question: give me a canonical binomial distribution on `Fin (n + 1)`.",
              "author": {
                "login": "ocfnash"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5e_MTR",
              "createdAt": "2023-08-24T13:40:22Z",
              "body": "I think this can be merged now but just in case @RemyDegenne has any further remarks:\r\n\r\nbors d=RemyDegenne",
              "author": {
                "login": "ocfnash"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5k1Um_",
              "createdAt": "2023-08-24T13:40:24Z",
              "body": ":v: RemyDegenne can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests).",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5to6auzwAAAAJe31v9",
              "createdAt": "2023-08-24T13:40:35Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABAt13Ow",
                "name": "delegated"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5to6auzwAAAAJe31yz",
              "createdAt": "2023-08-24T13:40:36Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5k1Ux6",
              "createdAt": "2023-08-24T13:40:46Z",
              "body": "LGTM!\r\nbors r+",
              "author": {
                "login": "RemyDegenne"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5k1UzE",
              "createdAt": "2023-08-24T13:40:48Z",
              "body": "(I do realise he can merge it anyway, but just wanted to signal my intentions ;-) )",
              "author": {
                "login": "ocfnash"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5to6auzwAAAAJe320Q",
              "createdAt": "2023-08-24T13:40:58Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
                "name": "ready-to-merge"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5k1VHI",
              "createdAt": "2023-08-24T13:41:31Z",
              "body": "Sorry, just another opinion... Isn't there a general mathlib-rule for this? Frequently, one could define a function on a larger domain by setting all function values to 0 outside of the support. There is nothing special about the binomial distribution, really. ",
              "author": {
                "login": "pfaffelh"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5k1hzT",
              "createdAt": "2023-08-24T14:07:31Z",
              "body": "Build failed:\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/5964812652/job/16180876489)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "19efd2a962e8a2cdd7642b94d62b0dde839172d3"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "96bf4ac7690692e7d91a2b518948ea5c10d69162"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5k2GV3",
              "createdAt": "2023-08-24T15:30:33Z",
              "body": "Sorry, this PR was from before `autoImplicits` was turned off; I updated it now.",
              "author": {
                "login": "nomeata"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5k2X88",
              "createdAt": "2023-08-24T16:03:19Z",
              "body": "@RemyDegenne, kindly `bors r+` again :-)",
              "author": {
                "login": "nomeata"
              }
            },
            {
              "__typename": "MentionedEvent"
            },
            {
              "__typename": "SubscribedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5k2a6m",
              "createdAt": "2023-08-24T16:10:25Z",
              "body": "bors merge",
              "author": {
                "login": "ocfnash"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5k3BQF",
              "createdAt": "2023-08-24T17:37:10Z",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/5966828659/job/16187271965)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/5966828659/job/16187271604)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/5966828659/job/16187272310)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c5to6auzwAAAAJfCA5X",
              "createdAt": "2023-08-24T17:37:11Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c5to6auzwAAAAJfCBA2",
              "createdAt": "2023-08-24T17:37:15Z"
            }
          ]
        }
      }
    }
  }
}
