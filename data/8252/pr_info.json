{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 167,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "MichaelStollBayreuth"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "We define the set `Nat.smoothNumbers n` consisting of the positive natural numbers all of\r\nwhose prime factors are strictly less than `n`.\r\n\r\nWe also define the finite set `Nat.primesBelow n` to be the set of prime numbers less than `n`.\r\n\r\nThe main definition `Nat.equivProdNatSmoothNumbers` establishes the bijection between\r\n`ℕ × (smoothNumbers p)` and `smoothNumbers (p+1)` given by sending `(e, n)` to `p^e * n`.\r\nHere `p` is a prime number.\r\n\r\nThis is in preparation of Euler Products; see [this Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Euler.20products/near/400111270).\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 3,
        "closed": true,
        "closedAt": "2023-11-11T16:18:39Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5rbLrz",
              "body": "I haven't taken a close look (not on computer) but should the equiv be for any k such that p < k < next prime? I guess that's probably annoying to write and not that useful",
              "createdAt": "2023-11-08T16:54:52Z",
              "author": {
                "login": "ericrbg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5rbURA",
              "body": "That could also work, but there's a lemma saying that if p isn't a prime then p-smooth = p+1 - smooth, which implies your claim. I'd be happy with or without this one",
              "createdAt": "2023-11-08T17:15:50Z",
              "author": {
                "login": "b-mehta"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5rsnBk",
              "body": "Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6835186315/job/18588695769)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6835186315/job/18588695681)\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6835186315/job/18588695728)",
              "createdAt": "2023-11-11T16:18:38Z",
              "author": {
                "login": "mathlib-bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "de376e718625dc0a453ea572e7c83636373e3ec9",
                "additions": 156,
                "deletions": 0,
                "committedDate": "2023-11-07T21:22:17Z",
                "author": {
                  "name": "Michael Stoll",
                  "email": "Michael.Stoll@uni-bayreuth.de"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "7bbdc1adecfc90aef1bdb9a83a62c1786ff57505",
                "additions": 0,
                "deletions": 1,
                "committedDate": "2023-11-08T11:17:06Z",
                "author": {
                  "name": "Michael Stoll",
                  "email": "Michael.Stoll@uni-bayreuth.de"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "372779aa02f61fb3c3b2e5737e447980cfea79b0",
                "additions": 62,
                "deletions": 58,
                "committedDate": "2023-11-08T12:57:12Z",
                "author": {
                  "name": "Michael Stoll",
                  "email": "Michael.Stoll@uni-bayreuth.de"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "18c61ce1153b467641b14555f8cca4976ab08274",
                "additions": 11,
                "deletions": 14,
                "committedDate": "2023-11-08T16:44:56Z",
                "author": {
                  "name": "Michael Stoll",
                  "email": "Michael.Stoll@uni-bayreuth.de"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "aa924845206afedd01ea561e0ebc63e0acd2adf2",
                "additions": 12,
                "deletions": 3,
                "committedDate": "2023-11-08T17:03:03Z",
                "author": {
                  "name": "Michael Stoll",
                  "email": "Michael.Stoll@uni-bayreuth.de"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "68bb40541ed5ce520cbf9a3982509e483cad9c45",
                "additions": 2,
                "deletions": 7,
                "committedDate": "2023-11-08T18:32:35Z",
                "author": {
                  "name": "Michael Stoll",
                  "email": "Michael.Stoll@uni-bayreuth.de"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "a732d6c629cbfa6ae464f9f6484c7f75a6e43dab",
                "additions": 13,
                "deletions": 18,
                "committedDate": "2023-11-08T18:56:30Z",
                "author": {
                  "name": "Michael Stoll",
                  "email": "Michael.Stoll@uni-bayreuth.de"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "506c115ca1ce5237b071b5cccf5cf1c369127076",
                "additions": 2,
                "deletions": 2,
                "committedDate": "2023-11-08T21:03:28Z",
                "author": {
                  "name": "Michael Stoll",
                  "email": "Michael.Stoll@uni-bayreuth.de"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "7c5e8e84b458666557e7375c6528b62af3250d4e",
                "additions": 2,
                "deletions": 2,
                "committedDate": "2023-11-08T21:22:32Z",
                "author": {
                  "name": "Michael Stoll",
                  "email": "Michael.Stoll@uni-bayreuth.de"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "41aa464bcc82361f669cb2680c0e8a0cffac0efc",
                "additions": 3,
                "deletions": 3,
                "committedDate": "2023-11-09T10:58:53Z",
                "author": {
                  "name": "Michael Stoll",
                  "email": "Michael.Stoll@uni-bayreuth.de"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "331b1b31a3352d08235b01e2cbb4fc7258f2eb90",
                "additions": 9,
                "deletions": 0,
                "committedDate": "2023-11-09T11:29:48Z",
                "author": {
                  "name": "Michael Stoll",
                  "email": "Michael.Stoll@uni-bayreuth.de"
                },
                "statusCheckRollup": null
              }
            }
          ]
        },
        "createdAt": "2023-11-07T21:26:43Z",
        "deletions": 3,
        "files": {
          "nodes": [
            {
              "path": "Mathlib.lean",
              "additions": 1,
              "deletions": 0
            },
            {
              "path": "Mathlib/NumberTheory/PrimeCounting.lean",
              "additions": 7,
              "deletions": 3
            },
            {
              "path": "Mathlib/NumberTheory/SmoothNumbers.lean",
              "additions": 159,
              "deletions": 0
            }
          ]
        },
        "headRefName": "euler_product",
        "headRefOid": "331b1b31a3352d08235b01e2cbb4fc7258f2eb90",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5e2ulR",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
              "color": "06e039",
              "name": "ready-to-merge"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJLNA",
              "color": "33DBEC",
              "name": "t-number-theory"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5mmLy0",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-11-08T21:13:20Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mkMgq",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "b-mehta"
              },
              "submittedAt": "2023-11-08T16:18:39Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mqBBT",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ericrbg"
              },
              "submittedAt": "2023-11-09T11:08:36Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mc72z",
              "body": "A number of minor style comments:",
              "state": "COMMENTED",
              "author": {
                "login": "Ruben-VandeVelde"
              },
              "submittedAt": "2023-11-07T22:28:13Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mpaJ5",
              "body": "LGTM. Looks like others have already stepped forward to critique the code in detail so I'll just add a general up-vote in favour. Looking forward to the next instalment.",
              "state": "APPROVED",
              "author": {
                "login": "loefflerd"
              },
              "submittedAt": "2023-11-09T09:49:59Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5m4eYx",
              "body": "Thanks :tada:\r\n\r\nbors merge",
              "state": "APPROVED",
              "author": {
                "login": "jcommelin"
              },
              "submittedAt": "2023-11-11T15:52:23Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 8252,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": "APPROVED",
        "reviewRequests": {
          "nodes": [
            {
              "requestedReviewer": {
                "id": "MDQ6VXNlcjMxODY3ODI3",
                "login": "kbuzzard"
              }
            }
          ]
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5mcxk5",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "b-mehta"
              },
              "submittedAt": "2023-11-07T22:21:56Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mc72z",
              "body": "A number of minor style comments:",
              "state": "COMMENTED",
              "author": {
                "login": "Ruben-VandeVelde"
              },
              "submittedAt": "2023-11-07T22:28:13Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mhm1n",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-11-08T11:16:55Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mhn-u",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-11-08T11:19:39Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mho2V",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-11-08T11:21:49Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mhtGC",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-11-08T11:32:02Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mhtrX",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-11-08T11:33:30Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mht8g",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-11-08T11:34:11Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mhuTf",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-11-08T11:35:02Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mh0wO",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-11-08T11:50:41Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mh1Nl",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-11-08T11:51:40Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mh1YN",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-11-08T11:52:04Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mh1my",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-11-08T11:52:36Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mh2LM",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-11-08T11:53:57Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mh3Th",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-11-08T11:56:08Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mh4I4",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-11-08T11:58:04Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mh4w4",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-11-08T11:59:22Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mkJj6",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-11-08T16:13:10Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mkKP5",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-11-08T16:14:25Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mkMgq",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "b-mehta"
              },
              "submittedAt": "2023-11-08T16:18:39Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mkTUL",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-11-08T16:31:36Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mkZl2",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-11-08T16:43:41Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mmLy0",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-11-08T21:13:20Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mpaJ5",
              "body": "LGTM. Looks like others have already stepped forward to critique the code in detail so I'll just add a general up-vote in favour. Looking forward to the next instalment.",
              "state": "APPROVED",
              "author": {
                "login": "loefflerd"
              },
              "submittedAt": "2023-11-09T09:49:59Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mpb0l",
              "body": "small nits",
              "state": "COMMENTED",
              "author": {
                "login": "ericrbg"
              },
              "submittedAt": "2023-11-09T09:58:47Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mp324",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-11-09T10:48:04Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mp56j",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-11-09T10:52:35Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mp6S4",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-11-09T10:53:28Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mp78G",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-11-09T10:57:12Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mqAIx",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-11-09T11:06:44Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mqBBT",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ericrbg"
              },
              "submittedAt": "2023-11-09T11:08:36Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mqIV0",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-11-09T11:26:12Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5mz9t-",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "MichaelStollBayreuth"
              },
              "submittedAt": "2023-11-10T14:21:53Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5m4eYx",
              "body": "Thanks :tada:\r\n\r\nbors merge",
              "state": "APPROVED",
              "author": {
                "login": "jcommelin"
              },
              "submittedAt": "2023-11-11T15:52:23Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SlsZW",
                    "body": "You should relate this definition to `Nat.primeCounting'`",
                    "createdAt": "2023-11-07T21:34:01Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SqhEf",
                    "body": "I think I will then put something like\r\n```lean\r\nprimesBelow_card_eq_primeCounting' (n : ℕ) : n.primesBelow.card = primeCounting' n\r\n```\r\ninto `Mathlib.NumberTheory.PrimeCounting` (unless there are objections regarding the location).",
                    "createdAt": "2023-11-08T16:13:10Z",
                    "author": {
                      "login": "MichaelStollBayreuth"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SlseB",
                    "body": "```suggestion\r\n  Finset.mem_range.mp <| Finset.mem_of_mem_filter p h\r\n```\r\nThe current proof works, but it breaks the API barrier List/Multiset/Finset",
                    "createdAt": "2023-11-07T21:34:23Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5So8QI",
                    "body": "OK. `apply?` may be to blame :smile: ",
                    "createdAt": "2023-11-08T11:19:39Z",
                    "author": {
                      "login": "MichaelStollBayreuth"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SlsgH",
                    "body": "```suggestion\r\nlemma not_mem_primesBelow (n : ℕ) : n ∉ primesBelow n := by simp\r\n```",
                    "createdAt": "2023-11-07T21:34:34Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SltfA",
                    "body": "```suggestion\r\ndef smoothNumbers (n : ℕ) : Set ℕ := {m | m ≠ 0 ∧ ∀ p ∈ factors m, p < n}\r\n\r\nlemma mem_smoothNumbers {n m : ℕ} : m ∈ smoothNumbers n ↔ m ≠ 0 ∧ ∀ p ∈ factors m, p < n := Iff.rfl\r\n```",
                    "createdAt": "2023-11-07T21:39:26Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5So_ec",
                    "body": "OK, makes sense.",
                    "createdAt": "2023-11-08T11:32:01Z",
                    "author": {
                      "login": "MichaelStollBayreuth"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Sltlx",
                    "body": "```suggestion\r\n@[simp]\r\nlemma smoothNumbers_zero : smoothNumbers 0 = {1} := by\r\n  have h (m : ℕ) : (∀ p ∈ factors m, p < 0) ↔ m.factors = []\r\n  · simp [List.eq_nil_iff_forall_not_mem]\r\n  ext m\r\n  rw [mem_smoothNumbers, h, factors_eq_nil, Set.mem_singleton_iff]\r\n  exact ⟨fun ⟨H₁, H₂⟩ ↦ H₂.resolve_left H₁, fun H ↦ ⟨H.symm ▸ one_ne_zero, Or.inr H⟩⟩\r\n```",
                    "createdAt": "2023-11-07T21:39:55Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SlxNB",
                    "body": "```suggestion\r\n  have h₀ : (n.factors.filter (· < N)).prod ≠ 0\r\n  · exact List.prod_ne_zero fun h => (pos_of_mem_factors (List.mem_of_mem_filter h)).false\r\n  refine ⟨h₀, fun p hp ↦ ?_⟩\r\n  obtain ⟨H₁, H₂⟩ := (mem_factors h₀).mp hp\r\n  have hp' := mem_list_primes_of_dvd_prod H₁.prime\r\n    (fun _ hq => (prime_of_mem_factors (List.mem_of_mem_filter hq)).prime) H₂\r\n  simpa only [decide_eq_true_eq] using List.of_mem_filter hp'\r\n```\r\n`mem_list_primes_of_dvd_prod` is already doing a bunch of the work for you!",
                    "createdAt": "2023-11-07T21:55:30Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SpEQp",
                    "body": "I don't think it gives that much more than `Prime.dvd_prod_iff` that is currently used, so I'll leave it at what Ruben has suggested.",
                    "createdAt": "2023-11-08T11:50:41Z",
                    "author": {
                      "login": "MichaelStollBayreuth"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5Sqi65",
                    "body": "It means you don't need to find another prime `q` and prove anything about whether they are equal or not - you can see that the proof of `mem_list_primes_of_dvd_prod` is already doing the `prime_dvd_prime_iff_eq` step for you.",
                    "createdAt": "2023-11-08T16:18:39Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SqrSW",
                    "body": "OK, and one can inline `hp'`.",
                    "createdAt": "2023-11-08T16:43:41Z",
                    "author": {
                      "login": "MichaelStollBayreuth"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SlyUv",
                    "body": "```suggestion\r\n@[gcongr] lemma smoothNumbers_mono {N M : ℕ} (hNM : N ≤ M) : N.smoothNumbers ⊆ M.smoothNumbers :=\r\n  fun _ hx => ⟨hx.1, fun p hp => (hx.2 p hp).trans_le hNM⟩\r\n\r\n/-- The sets of `N`-smooth and of `(N+1)`-smooth numbers are the same when `N` is not prime. -/\r\nlemma smoothNumbers_succ {N : ℕ} (hN : ¬ N.Prime) : N.succ.smoothNumbers = N.smoothNumbers := by\r\n  ext m\r\n  refine ⟨fun hm ↦ ⟨hm.1, fun p hp ↦ ?_⟩, (smoothNumbers_mono (le_succ N) ·)⟩\r\n  have H : p ≠ N := fun h ↦ hN <| h ▸ prime_of_mem_factors hp\r\n  exact H.lt_of_le (lt_succ.mp <| hm.2 p hp)\r\n```\r\nI think it's worth having this monotonicity lemma.",
                    "createdAt": "2023-11-07T22:00:40Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SpElG",
                    "body": "OK.",
                    "createdAt": "2023-11-08T11:51:39Z",
                    "author": {
                      "login": "MichaelStollBayreuth"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Slytm",
                    "body": "This is true definitionally, but I'm not sure that's guaranteed. I'd be inclined to use the API with\r\n```suggestion\r\nlemma primesBelow_zero : primesBelow 0 = ∅ := by\r\n  rw [primesBelow, Finset.range_zero, Finset.filter_empty]\r\n```",
                    "createdAt": "2023-11-07T22:02:47Z",
                    "author": {
                      "login": "Ruben-VandeVelde"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SqhfE",
                    "body": "OK.",
                    "createdAt": "2023-11-08T16:14:25Z",
                    "author": {
                      "login": "MichaelStollBayreuth"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SlywC",
                    "body": "```suggestion\r\n  Finset.mem_range.mp <| Finset.mem_of_mem_filter p h\r\n```",
                    "createdAt": "2023-11-07T22:02:57Z",
                    "author": {
                      "login": "Ruben-VandeVelde"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Sly7Q",
                    "body": "Golfing opportunity:\r\n```suggestion\r\nlemma not_mem_primesBelow (n : ℕ) : n ∉ primesBelow n := by\r\n  intro hn\r\n  exact (lt_of_mem_primesBelow hn).false\r\n```\r\nor\r\n```suggestion\r\nlemma not_mem_primesBelow (n : ℕ) : n ∉ primesBelow n :=\r\n  fun hn => (lt_of_mem_primesBelow hn).false\r\n```",
                    "createdAt": "2023-11-07T22:03:48Z",
                    "author": {
                      "login": "Ruben-VandeVelde"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5So8xm",
                    "body": "I'll take that one.",
                    "createdAt": "2023-11-08T11:21:49Z",
                    "author": {
                      "login": "MichaelStollBayreuth"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SlzxX",
                    "body": "```suggestion\r\n  simp only [Set.mem_compl_iff, mem_smoothNumbers, Set.mem_diff, ne_eq, not_and, not_forall, not_lt,\r\n    exists_prop, Set.mem_singleton_iff] at hn\r\n  obtain ⟨m, hm₁, hm₂⟩ := hn.1 hn.2\r\n```",
                    "createdAt": "2023-11-07T22:05:02Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SpFKE",
                    "body": "OK.",
                    "createdAt": "2023-11-08T11:53:57Z",
                    "author": {
                      "login": "MichaelStollBayreuth"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Sl2Hz",
                    "body": "```suggestion\r\n/-- If `p` is positive and `n` is `p`-smooth, then every product `p^e * n` is `(p+1)`-smooth. -/\r\nlemma pow_mul_mem_smoothNumbers {p n : ℕ} (hp : p ≠ 0) (e : ℕ) (hn : n ∈ smoothNumbers p) :\r\n    p ^ e * n ∈ smoothNumbers (succ p) := by\r\n  have hp' (e : ℕ) : p ^ e ≠ 0 := pow_ne_zero e hp\r\n  refine ⟨mul_ne_zero (hp' e) hn.1, fun q hq ↦ ?_⟩\r\n  rcases (mem_factors_mul (hp' e) hn.1).mp hq with H | H\r\n  · rw [mem_factors <| hp' e] at H\r\n    exact lt_succ.mpr <| le_of_dvd hp.bot_lt <| Prime.dvd_of_dvd_pow H.1 H.2\r\n  · exact (hn.2 q H).trans <| lt.base p\r\n```\r\nThis is true without the assumption that `p` is prime, it's enough for it to be positive.",
                    "createdAt": "2023-11-07T22:10:20Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SpFuI",
                    "body": "OK. (My use case is with `p` prime, of course, but generalizing does not really hurt.)",
                    "createdAt": "2023-11-08T11:56:08Z",
                    "author": {
                      "login": "MichaelStollBayreuth"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Sl2zj",
                    "body": "```suggestion\r\n@[simp] lemma smoothNumbers_one : smoothNumbers 1 = {1} := by simp [smoothNumbers_succ]\r\n```\r\nYou could add this, if you like.",
                    "createdAt": "2023-11-07T22:13:38Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SpE0B",
                    "body": "OK.",
                    "createdAt": "2023-11-08T11:52:35Z",
                    "author": {
                      "login": "MichaelStollBayreuth"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Sl25E",
                    "body": "Alternative proof:\r\n```suggestion\r\n  ext m\r\n  rw [Set.mem_singleton_iff, smoothNumbers, Set.mem_setOf]\r\n  simp_rw [Nat.not_lt_zero]\r\n  rw [← List.eq_nil_iff_forall_not_mem, factors_eq_nil, and_or_left, not_and_self_iff, false_or,\r\n    ne_and_eq_iff_right zero_ne_one]\r\n```\r\n(Optional, but note in particular `Set.mem_singleton_iff`)",
                    "createdAt": "2023-11-07T22:14:07Z",
                    "author": {
                      "login": "Ruben-VandeVelde"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SqnMg",
                    "body": "I'll take the second one.",
                    "createdAt": "2023-11-08T16:31:36Z",
                    "author": {
                      "login": "MichaelStollBayreuth"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Sl3Cf",
                    "body": "It might be nice here to mention `smoothNumbers_succ` to show what happens if `p` isn't prime, and vice versa?",
                    "createdAt": "2023-11-07T22:14:55Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SpGN0",
                    "body": "OK.",
                    "createdAt": "2023-11-08T11:58:04Z",
                    "author": {
                      "login": "MichaelStollBayreuth"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Sl4P0",
                    "body": "Could be:\r\n```suggestion\r\n  · intro h\r\n    rw [List.prod_eq_zero_iff, List.mem_filter] at h\r\n    exact not_prime_zero <| prime_of_mem_factors h.1\r\n```",
                    "createdAt": "2023-11-07T22:20:01Z",
                    "author": {
                      "login": "Ruben-VandeVelde"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5So_4a",
                    "body": "OK.",
                    "createdAt": "2023-11-08T11:33:29Z",
                    "author": {
                      "login": "MichaelStollBayreuth"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Sl4SJ",
                    "body": "```suggestion\r\n```\r\nThis import seems to be redundant to me",
                    "createdAt": "2023-11-07T22:20:09Z",
                    "author": {
                      "login": "b-mehta"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5So7h4",
                    "body": "OK, yes. It was suggested by `#minimize_imports`, and I didn't check.",
                    "createdAt": "2023-11-08T11:16:55Z",
                    "author": {
                      "login": "MichaelStollBayreuth"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Sl4jP",
                    "body": "Or:\r\n```suggestion\r\n  refine ⟨h₀, fun p H ↦ ?_⟩\r\n  rw [mem_factors h₀] at H\r\n```",
                    "createdAt": "2023-11-07T22:21:23Z",
                    "author": {
                      "login": "Ruben-VandeVelde"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SpAER",
                    "body": "OK.",
                    "createdAt": "2023-11-08T11:34:11Z",
                    "author": {
                      "login": "MichaelStollBayreuth"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Sl4qf",
                    "body": "More readable as\r\n```suggestion\r\n  have hpq : p = q :=\r\n    (prime_dvd_prime_iff_eq H.1 <| prime_of_mem_factors <| List.mem_of_mem_filter hq₁).mp hq₂\r\n  rw [hpq]\r\n```\r\nor\r\n```suggestion\r\n  obtain rfl : p = q :=\r\n    (prime_dvd_prime_iff_eq H.1 <| prime_of_mem_factors <| List.mem_of_mem_filter hq₁).mp hq₂\r\n```",
                    "createdAt": "2023-11-07T22:22:05Z",
                    "author": {
                      "login": "Ruben-VandeVelde"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SpAR7",
                    "body": "I take the second one.",
                    "createdAt": "2023-11-08T11:35:02Z",
                    "author": {
                      "login": "MichaelStollBayreuth"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Sl5Cp",
                    "body": "```suggestion\r\n/-- The non-zero non-`N`-smooth numbers are `≥ N`. -/\r\n```",
                    "createdAt": "2023-11-07T22:24:09Z",
                    "author": {
                      "login": "Ruben-VandeVelde"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SpErF",
                    "body": "Thanks. My keyboard does this sometimes...",
                    "createdAt": "2023-11-08T11:52:04Z",
                    "author": {
                      "login": "MichaelStollBayreuth"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Sl5c7",
                    "body": "Indentation is off here: `toFun` and the other fields should only be indented two spaces",
                    "createdAt": "2023-11-07T22:26:30Z",
                    "author": {
                      "login": "Ruben-VandeVelde"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SpGma",
                    "body": "OK.",
                    "createdAt": "2023-11-08T11:59:22Z",
                    "author": {
                      "login": "MichaelStollBayreuth"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SrxQ_",
                    "body": "As commented on Zulip, I think this is indicative of our markdown parser having issues, that we should fix there instead.",
                    "createdAt": "2023-11-08T21:13:20Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5St24v",
                    "body": "This file is a leaf so it's probably fine, but I think these days we're hesitant about changing/adding imports, fwiw",
                    "createdAt": "2023-11-09T09:52:27Z",
                    "author": {
                      "login": "ericrbg"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SuLHe",
                    "body": "The alternatives would be\r\n1. add `Mathlib.NumberTheory.PrimeCouting` as an import to the new file and put the lemma there. This import would be needed for this statement *only*, so I was hesitant, since this new file will not stay a leaf file.\r\n2. have a separate file for this one lemma with the two relevant imports.\r\n\r\nI'm fine with all possibilities. I just would like some consensus what the preferred solution should be.",
                    "createdAt": "2023-11-09T10:57:12Z",
                    "author": {
                      "login": "MichaelStollBayreuth"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5S0Y7M",
                    "body": "If no more comments are made, then I suggest to leave it as it is now.",
                    "createdAt": "2023-11-10T14:21:53Z",
                    "author": {
                      "login": "MichaelStollBayreuth"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5St3x-",
                    "body": "maybe we want a lemma that says it's equivalent to `∀p, p | m => p < n`, that way zero can get excluded automatically too",
                    "createdAt": "2023-11-09T09:55:14Z",
                    "author": {
                      "login": "ericrbg"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SuNzE",
                    "body": "That statement is wrong: 4 is in `smoothNumbers 3` and `4 ∣ 4`, but `4 < 3` is false.",
                    "createdAt": "2023-11-09T11:06:44Z",
                    "author": {
                      "login": "MichaelStollBayreuth"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SuOSz",
                    "body": "for primes `p`?",
                    "createdAt": "2023-11-09T11:08:36Z",
                    "author": {
                      "login": "ericrbg"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SuTBU",
                    "body": "OK; that works. I'm adding\r\n```lean\r\n/-- `m` is `n`-smooth if and only if all prime divisors of `m` are less than `n`. -/\r\nlemma mem_smoothNumbers' {n m : ℕ} : m ∈ smoothNumbers n ↔ ∀ p, p.Prime → p ∣ m → p < n := ...\r\n```",
                    "createdAt": "2023-11-09T11:26:12Z",
                    "author": {
                      "login": "MichaelStollBayreuth"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5St4ZO",
                    "body": "I thought 0 isn't smooth anyways?",
                    "createdAt": "2023-11-09T09:56:58Z",
                    "author": {
                      "login": "ericrbg"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SuIgY",
                    "body": "Exactly, so 0 is in the complement, so without removing it, the statement would be false.",
                    "createdAt": "2023-11-09T10:48:04Z",
                    "author": {
                      "login": "MichaelStollBayreuth"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5St44Z",
                    "body": "i've never seen `lt.base` used; is there a better lemma for it?",
                    "createdAt": "2023-11-09T09:58:00Z",
                    "author": {
                      "login": "ericrbg"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SuJzC",
                    "body": "I guess this is what `exact?` gives you. Will replace by [lt_succ_self](https://leanprover-community.github.io/mathlib4_docs/Init/Data/Nat/Basic.html#Nat.lt_succ_self).",
                    "createdAt": "2023-11-09T10:52:35Z",
                    "author": {
                      "login": "MichaelStollBayreuth"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5St5DJ",
                    "body": "```suggestion\r\n    exact lt_succ.mpr <| le_of_dvd hp.bot_lt <| H.1.dvd_of_dvd_pow H.2\r\n```",
                    "createdAt": "2023-11-09T09:58:20Z",
                    "author": {
                      "login": "ericrbg"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SuKCX",
                    "body": "OK.",
                    "createdAt": "2023-11-09T10:53:28Z",
                    "author": {
                      "login": "MichaelStollBayreuth"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "U_kgDOBfNrCg",
              "login": "MichaelStollBayreuth"
            },
            {
              "id": "MDQ6VXNlcjM3OTg0ODUx",
              "login": "ericrbg"
            },
            {
              "id": "MDQ6VXNlcjI5OTU5MjI2",
              "login": "b-mehta"
            },
            {
              "id": "MDQ6VXNlcjQyNTI2MA==",
              "login": "eric-wieser"
            },
            {
              "id": "MDQ6VXNlcjM0Mzk2ODg=",
              "login": "loefflerd"
            },
            {
              "id": "MDQ6VXNlcjU2MzY3MDU=",
              "login": "jcommelin"
            },
            {
              "id": "MDQ6VXNlcjY1NTE0MTMx",
              "login": "Ruben-VandeVelde"
            },
            {
              "id": "U_kgDOB75MNQ",
              "login": "leanprover-community-mathlib4-bot"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": null,
        "title": "[Merged by Bors] - feat: add definition of and statements about the set of smooth numbers",
        "updatedAt": "2023-11-11T16:18:42Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/8252",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "de376e718625dc0a453ea572e7c83636373e3ec9"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c52JuP1zwAAAAKJPaev",
              "createdAt": "2023-11-07T21:26:43Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c52JuP1zwAAAAKJPae0",
              "createdAt": "2023-11-07T21:26:43Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c52JuP1zwAAAAKJPae2",
              "createdAt": "2023-11-07T21:26:43Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJLNA",
                "name": "t-number-theory"
              }
            },
            {
              "__typename": "ReviewRequestedEvent",
              "id": "RRE_lADOFcwZ1c52JuP1zwAAAAKJPae8",
              "createdAt": "2023-11-07T21:26:43Z",
              "requestedReviewer": {
                "id": "MDQ6VXNlcjM0Mzk2ODg=",
                "login": "loefflerd"
              }
            },
            {
              "__typename": "ReviewRequestedEvent",
              "id": "RRE_lADOFcwZ1c52JuP1zwAAAAKJPafE",
              "createdAt": "2023-11-07T21:26:44Z",
              "requestedReviewer": {
                "id": "MDQ6VXNlcjMxODY3ODI3",
                "login": "kbuzzard"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c52JuP1zwAAAAKJQCcc",
              "createdAt": "2023-11-07T21:45:06Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5mcxk5",
              "createdAt": "2023-11-07T21:34:01Z",
              "body": "",
              "author": {
                "login": "b-mehta"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5mc72z",
              "createdAt": "2023-11-07T22:02:46Z",
              "body": "A number of minor style comments:",
              "author": {
                "login": "Ruben-VandeVelde"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "7bbdc1adecfc90aef1bdb9a83a62c1786ff57505"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "372779aa02f61fb3c3b2e5737e447980cfea79b0"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "18c61ce1153b467641b14555f8cca4976ab08274"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5rbLrz",
              "createdAt": "2023-11-08T16:54:52Z",
              "body": "I haven't taken a close look (not on computer) but should the equiv be for any k such that p < k < next prime? I guess that's probably annoying to write and not that useful",
              "author": {
                "login": "ericrbg"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "aa924845206afedd01ea561e0ebc63e0acd2adf2"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5rbURA",
              "createdAt": "2023-11-08T17:15:50Z",
              "body": "That could also work, but there's a lemma saying that if p isn't a prime then p-smooth = p+1 - smooth, which implies your claim. I'd be happy with or without this one",
              "author": {
                "login": "b-mehta"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "68bb40541ed5ce520cbf9a3982509e483cad9c45"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "a732d6c629cbfa6ae464f9f6484c7f75a6e43dab"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "506c115ca1ce5237b071b5cccf5cf1c369127076"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5mmLy0",
              "createdAt": "2023-11-08T21:13:20Z",
              "body": "",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "7c5e8e84b458666557e7375c6528b62af3250d4e"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5mpaJ5",
              "createdAt": "2023-11-09T09:49:59Z",
              "body": "LGTM. Looks like others have already stepped forward to critique the code in detail so I'll just add a general up-vote in favour. Looking forward to the next instalment.",
              "author": {
                "login": "loefflerd"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5mpb0l",
              "createdAt": "2023-11-09T09:52:27Z",
              "body": "small nits",
              "author": {
                "login": "ericrbg"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "41aa464bcc82361f669cb2680c0e8a0cffac0efc"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "331b1b31a3352d08235b01e2cbb4fc7258f2eb90"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5m4eYx",
              "createdAt": "2023-11-11T15:52:23Z",
              "body": "Thanks :tada:\r\n\r\nbors merge",
              "author": {
                "login": "jcommelin"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c52JuP1zwAAAAKLo3su",
              "createdAt": "2023-11-11T15:52:37Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
                "name": "ready-to-merge"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c52JuP1zwAAAAKLo3tR",
              "createdAt": "2023-11-11T15:52:37Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5rsnBk",
              "createdAt": "2023-11-11T16:18:38Z",
              "body": "Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6835186315/job/18588695769)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6835186315/job/18588695681)\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6835186315/job/18588695728)",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c52JuP1zwAAAAKLpDt-",
              "createdAt": "2023-11-11T16:18:40Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c52JuP1zwAAAAKLpDvX",
              "createdAt": "2023-11-11T16:18:42Z"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            }
          ]
        }
      }
    }
  }
}
