{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 1204,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "fpvandoorn"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "* Search + replace `emℒp` by `emLp`\r\n* Automatically added deprecations (roughly) by using the regex replace `(theorem|lemma|def) ([^ \\n]*)emLp([^ \\n]*)(((?!\\n\\n)[\\s\\S])*)$` >\r\n```\r\n$1 $2emLp$3$4\r\n\r\n@[deprecated (since := \"2025-02-21\")] \r\nalias $2em𝓛p$3 := $2emLp$3\r\n```\r\n* Undid unwanted alias replaces by `alias ([^ ]*)emLp([^ ]*)` > `alias $1em𝓛p$2`\r\n* Also did some changes to `tendsto_𝓛p`\r\n\r\n---\r\n\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 53,
        "closed": false,
        "closedAt": null,
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c6fbI9n",
              "body": "### PR summary [fb346e8fca](https://github.com/leanprover-community/mathlib4/pull/22164/commits/fb346e8fca6fc1cd6c5345318f7b34ced910d68b)\n\n#### Import changes for modified files\n\nNo significant changes to the import graph\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ AntitoneOn.memLp_isCompact`\n`+ AntitoneOn.memLp_of_measure_ne_top`\n`+ AntitoneOn.memLp_top`\n`+ AntitoneOn.mem𝓛p_isCompact`\n`+ AntitoneOn.mem𝓛p_of_measure_ne_top`\n`+ AntitoneOn.mem𝓛p_top`\n`+ LipschitzWith.comp_memLp`\n`+ LipschitzWith.comp_mem𝓛p`\n`+ MeasureTheory.MemLp.of_comp_antilipschitzWith`\n`+ MeasureTheory.Mem𝓛p.of_comp_antilipschitzWith`\n`+ MemLp`\n`+ MemLp.add`\n`+ MemLp.ae_eq`\n`+ MemLp.aefinStronglyMeasurable`\n`+ MemLp.aestronglyMeasurable`\n`+ MemLp.comp_measurePreserving`\n`+ MemLp.comp_of_map`\n`+ MemLp.condExp`\n`+ MemLp.condExpL2_ae_eq_condExp`\n`+ MemLp.condExpL2_ae_eq_condExp'`\n`+ MemLp.congr_norm`\n`+ MemLp.const_inner`\n`+ MemLp.const_mul`\n`+ MemLp.const_smul`\n`+ MemLp.eLpNormEssSup_indicator_norm_ge_eq_zero`\n`+ MemLp.eLpNorm_eq_integral_rpow_norm`\n`+ MemLp.eLpNorm_indicator_le`\n`+ MemLp.eLpNorm_indicator_le'`\n`+ MemLp.eLpNorm_indicator_le_of_meas`\n`+ MemLp.eLpNorm_indicator_norm_ge_le`\n`+ MemLp.eLpNorm_indicator_norm_ge_pos_le`\n`+ MemLp.eLpNorm_lt_top`\n`+ MemLp.eLpNorm_mk_lt_top`\n`+ MemLp.eLpNorm_ne_top`\n`+ MemLp.exists_boundedContinuous_eLpNorm_sub_le`\n`+ MemLp.exists_boundedContinuous_integral_rpow_sub_le`\n`+ MemLp.exists_eLpNorm_indicator_compl_lt`\n`+ MemLp.exists_hasCompactSupport_eLpNorm_sub_le`\n`+ MemLp.exists_hasCompactSupport_integral_rpow_sub_le`\n`+ MemLp.finStronglyMeasurable_of_stronglyMeasurable`\n`+ MemLp.im`\n`+ MemLp.indicator`\n`+ MemLp.induction`\n`+ MemLp.induction_dense`\n`+ MemLp.induction_stronglyMeasurable`\n`+ MemLp.inner_const`\n`+ MemLp.integrable`\n`+ MemLp.integrable_mul`\n`+ MemLp.integrable_norm_pow`\n`+ MemLp.integrable_norm_pow'`\n`+ MemLp.integrable_norm_rpow`\n`+ MemLp.integrable_norm_rpow'`\n`+ MemLp.integrable_sq`\n`+ MemLp.integral_indicator_norm_ge_le`\n`+ MemLp.integral_indicator_norm_ge_nonneg_le`\n`+ MemLp.integral_indicator_norm_ge_nonneg_le_of_meas`\n`+ MemLp.isProbabilityMeasure_of_indepFun`\n`+ MemLp.left_of_add_measure`\n`+ MemLp.locallyIntegrable`\n`+ MemLp.meas_ge_lt_top`\n`+ MemLp.meas_ge_lt_top'`\n`+ MemLp.mem𝓛p_of_exponent_le`\n`+ MemLp.mem𝓛p_of_exponent_le_of_measure_support_ne_top`\n`+ MemLp.mono'`\n`+ MemLp.mono_exponent`\n`+ MemLp.mono_exponent_of_measure_support_ne_top`\n`+ MemLp.mono_measure`\n`+ MemLp.mul`\n`+ MemLp.mul'`\n`+ MemLp.neg`\n`+ MemLp.norm`\n`+ MemLp.norm_rpow`\n`+ MemLp.norm_rpow_div`\n`+ MemLp.of_bilin`\n`+ MemLp.of_bound`\n`+ MemLp.of_discrete`\n`+ MemLp.of_le`\n`+ MemLp.of_le_mul`\n`+ MemLp.of_measure_le_smul`\n`+ MemLp.of_nnnorm_le_mul`\n`+ MemLp.piecewise`\n`+ MemLp.prod`\n`+ MemLp.prod'`\n`+ MemLp.re`\n`+ MemLp.restrict`\n`+ MemLp.right_of_add_measure`\n`+ MemLp.smul`\n`+ MemLp.smul_measure`\n`+ MemLp.sub`\n`+ MemLp.toLp_const`\n`+ MemLp.uniformIntegrable_of_identDistrib`\n`+ MemLp.uniformIntegrable_of_identDistrib_aux`\n`+ MemLp.zero`\n`+ MemLp.zero'`\n`+ Mem𝓛p`\n`+ Mem𝓛p.ae_eq`\n`+ Mem𝓛p.aefinStronglyMeasurable`\n`+ Mem𝓛p.aestronglyMeasurable`\n`+ Mem𝓛p.comp_measurePreserving`\n`+ Mem𝓛p.comp_of_map`\n`+ Mem𝓛p.condExp`\n`+ Mem𝓛p.condExpL2_ae_eq_condExp`\n`+ Mem𝓛p.condExpL2_ae_eq_condExp'`\n`+ Mem𝓛p.congr_norm`\n`+ Mem𝓛p.const_inner`\n`+ Mem𝓛p.const_mul`\n`+ Mem𝓛p.const_smul`\n`+ Mem𝓛p.eLpNorm_eq_integral_rpow_norm`\n`+ Mem𝓛p.eLpNorm_lt_top`\n`+ Mem𝓛p.eLpNorm_mk_lt_top`\n`+ Mem𝓛p.eLpNorm_ne_top`\n`+ Mem𝓛p.exists_boundedContinuous_eLpNorm_sub_le`\n`+ Mem𝓛p.exists_boundedContinuous_integral_rpow_sub_le`\n`+ Mem𝓛p.exists_eLpNorm_indicator_compl_lt`\n`+ Mem𝓛p.exists_hasCompactSupport_eLpNorm_sub_le`\n`+ Mem𝓛p.exists_hasCompactSupport_integral_rpow_sub_le`\n`+ Mem𝓛p.finStronglyMeasurable_of_stronglyMeasurable`\n`+ Mem𝓛p.im`\n`+ Mem𝓛p.indicator`\n`+ Mem𝓛p.induction_stronglyMeasurable`\n`+ Mem𝓛p.inner_const`\n`+ Mem𝓛p.integrable_sq`\n`+ Mem𝓛p.isProbabilityMeasure_of_indepFun`\n`+ Mem𝓛p.left_of_add_measure`\n`+ Mem𝓛p.locallyIntegrable`\n`+ Mem𝓛p.meas_ge_lt_top`\n`+ Mem𝓛p.meas_ge_lt_top'`\n`+ Mem𝓛p.mono`\n`+ Mem𝓛p.mono'`\n`+ Mem𝓛p.mono_exponent`\n`+ Mem𝓛p.mono_exponent_of_measure_support_ne_top`\n`+ Mem𝓛p.mono_measure`\n`+ Mem𝓛p.mul`\n`+ Mem𝓛p.mul'`\n`+ Mem𝓛p.mul_of_top_left`\n`+ Mem𝓛p.mul_of_top_left'`\n`+ Mem𝓛p.mul_of_top_right`\n`+ Mem𝓛p.mul_of_top_right'`\n`+ Mem𝓛p.neg`\n`+ Mem𝓛p.norm`\n`+ Mem𝓛p.norm_rpow`\n`+ Mem𝓛p.norm_rpow_div`\n`+ Mem𝓛p.of_bilin`\n`+ Mem𝓛p.of_bound`\n`+ Mem𝓛p.of_discrete`\n`+ Mem𝓛p.of_le`\n`+ Mem𝓛p.of_le_mul`\n`+ Mem𝓛p.of_measure_le_smul`\n`+ Mem𝓛p.of_nnnorm_le_mul`\n`+ Mem𝓛p.piecewise`\n`+ Mem𝓛p.prod`\n`+ Mem𝓛p.prod'`\n`+ Mem𝓛p.re`\n`+ Mem𝓛p.restrict`\n`+ Mem𝓛p.right_of_add_measure`\n`+ Mem𝓛p.smul`\n`+ Mem𝓛p.smul_measure`\n`+ Mem𝓛p.smul_of_top_left`\n`+ Mem𝓛p.smul_of_top_right`\n`+ Mem𝓛p.toLp_const`\n`+ Mem𝓛p.uniformIntegrable_of_identDistrib`\n`+ Mem𝓛p.uniformIntegrable_of_identDistrib_aux`\n`+ Mem𝓛p.zero`\n`+ Mem𝓛p.zero'`\n`+ MonotoneOn.memLp_isCompact`\n`+ MonotoneOn.memLp_of_measure_ne_top`\n`+ MonotoneOn.memLp_top`\n`+ MonotoneOn.mem𝓛p_isCompact`\n`+ MonotoneOn.mem𝓛p_of_measure_ne_top`\n`+ MonotoneOn.mem𝓛p_top`\n`+ Submartingale.memLp_limitProcess`\n`+ Submartingale.mem𝓛p_limitProcess`\n`+ _root_.Continuous.memLp_of_hasCompactSupport`\n`+ _root_.Continuous.memLp_top_of_hasCompactSupport`\n`+ _root_.Continuous.mem𝓛p_of_hasCompactSupport`\n`+ _root_.Continuous.mem𝓛p_top_of_hasCompactSupport`\n`+ _root_.HasCompactSupport.memLp_of_bound`\n`+ _root_.HasCompactSupport.mem𝓛p_of_bound`\n`+ _root_.MeasurableEmbedding.memLp_map_measure_iff`\n`+ _root_.MeasurableEmbedding.mem𝓛p_map_measure_iff`\n`+ _root_.MeasurableEquiv.memLp_map_measure_iff`\n`+ _root_.MeasurableEquiv.mem𝓛p_map_measure_iff`\n`+ _root_.MeasureTheory.AEStronglyMeasurable.memLp_truncation`\n`+ _root_.MeasureTheory.MemLp.abs`\n`+ _root_.MeasureTheory.MemLp.exists_simpleFunc_eLpNorm_sub_lt`\n`+ _root_.MeasureTheory.MemLp.inf`\n`+ _root_.MeasureTheory.MemLp.neg_part`\n`+ _root_.MeasureTheory.MemLp.ofReal`\n`+ _root_.MeasureTheory.MemLp.pos_part`\n`+ _root_.MeasureTheory.MemLp.sup`\n`+ _root_.MeasureTheory.Mem𝓛p.abs`\n`+ _root_.MeasureTheory.Mem𝓛p.evariance_lt_top`\n`+ _root_.MeasureTheory.Mem𝓛p.evariance_ne_top`\n`+ _root_.MeasureTheory.Mem𝓛p.inf`\n`+ _root_.MeasureTheory.Mem𝓛p.neg_part`\n`+ _root_.MeasureTheory.Mem𝓛p.ofReal`\n`+ _root_.MeasureTheory.Mem𝓛p.ofReal_variance_eq`\n`+ _root_.MeasureTheory.Mem𝓛p.pos_part`\n`+ _root_.MeasureTheory.Mem𝓛p.sup`\n`+ _root_.MeasureTheory.Mem𝓛p.variance_eq`\n`+ _root_.MeasureTheory.Mem𝓛p.variance_eq_of_integral_eq_zero`\n`+ _root_.MeasureTheory.memLp_re_im_iff`\n`+ _root_.MeasureTheory.mem𝓛p_re_im_iff`\n`+ comp_memLp`\n`+ comp_memLp'`\n`+ comp_mem𝓛p`\n`+ comp_mem𝓛p'`\n`+ evariance_lt_top_iff_memLp`\n`+ evariance_lt_top_iff_mem𝓛p`\n`+ measure_lt_top_of_memLp_indicator`\n`+ measure_preimage_lt_top_of_memLp`\n`+ measure_support_lt_top_of_memLp`\n`+ memLp_add_of_disjoint`\n`+ memLp_approxOn`\n`+ memLp_approxOn_range`\n`+ memLp_comp_iff_of_antilipschitz`\n`+ memLp_congr_ae`\n`+ memLp_congr_norm`\n`+ memLp_const`\n`+ memLp_const_iff`\n`+ memLp_finset_sum`\n`+ memLp_finset_sum'`\n`+ memLp_iff_finMeasSupp`\n`+ memLp_iff_integrable`\n`+ memLp_indicator_const`\n`+ memLp_indicator_iff_restrict`\n`+ memLp_limitProcess_of_eLpNorm_bdd`\n`+ memLp_lineDeriv`\n`+ memLp_map_measure_iff`\n`+ memLp_measure_zero`\n`+ memLp_neg_iff`\n`+ memLp_norm_iff`\n`+ memLp_norm_rpow_iff`\n`+ memLp_of_bounded`\n`+ memLp_of_cauchy_tendsto`\n`+ memLp_of_finite_measure_preimage`\n`+ memLp_of_isFiniteMeasure`\n`+ memLp_of_memLp_trim`\n`+ memLp_of_mem_interior_integrableExpSet`\n`+ memLp_one_iff_integrable`\n`+ memLp_snd`\n`+ memLp_stoppedProcess`\n`+ memLp_stoppedProcess_of_mem_finset`\n`+ memLp_stoppedValue`\n`+ memLp_stoppedValue_of_mem_finset`\n`+ memLp_top_const`\n`+ memLp_top_of_bound`\n`+ memLp_trim_of_mem_lpMeasSubgroup`\n`+ memLp_two_iff_integrable_sq`\n`+ memLp_two_iff_integrable_sq_norm`\n`+ memLp_zero`\n`+ memLp_zero_iff_aestronglyMeasurable`\n`+ mem_Lp_iff_memLp`\n`+ mem_Lp_iff_mem𝓛p`\n`+ mem𝓛p_add_of_disjoint`\n`+ mem𝓛p_comp_iff_of_antilipschitz`\n`+ mem𝓛p_congr_ae`\n`+ mem𝓛p_congr_norm`\n`+ mem𝓛p_const`\n`+ mem𝓛p_const_iff`\n`+ mem𝓛p_iff`\n`+ mem𝓛p_indicator_const`\n`+ mem𝓛p_indicator_iff_restrict`\n`+ mem𝓛p_limitProcess_of_eLpNorm_bdd`\n`+ mem𝓛p_lineDeriv`\n`+ mem𝓛p_map_measure_iff`\n`+ mem𝓛p_measure_zero`\n`+ mem𝓛p_neg_iff`\n`+ mem𝓛p_norm_iff`\n`+ mem𝓛p_norm_rpow_iff`\n`+ mem𝓛p_of_bounded`\n`+ mem𝓛p_of_cauchy_tendsto`\n`+ mem𝓛p_of_mem_interior_integrableExpSet`\n`+ mem𝓛p_of_mem𝓛p_trim`\n`+ mem𝓛p_snd`\n`+ mem𝓛p_top`\n`+ mem𝓛p_top_const`\n`+ mem𝓛p_top_of_bound`\n`+ mem𝓛p_trim_of_mem_lpMeasSubgroup`\n`+ mem𝓛p_two_iff_integrable_sq`\n`+ mem𝓛p_two_iff_integrable_sq_norm`\n`+ mem𝓛p_zero_iff_aestronglyMeasurable`\n`+ tendsto_Lp_iff_tendsto_eLpNorm`\n`+ tendsto_Lp_iff_tendsto_eLpNorm'`\n`+ tendsto_Lp_iff_tendsto_eLpNorm''`\n`+ tendsto_Lp_of_tendsto_eLpNorm`\n`+ zero_mem𝓛p`\n`++ memLp_iff`\n`++ memLp_top`\n`++ mem𝓛p`\n`++++ memLp`\n`+-+- norm_toLp`\n`+-+- toLp`\n`+-+- toLp_add`\n`+-+- toLp_neg`\n`+-+- toLp_sub`\n`+-+- toLp_zero`\n`- AntitoneOn.memℒp_isCompact`\n`- AntitoneOn.memℒp_of_measure_ne_top`\n`- AntitoneOn.memℒp_top`\n`- LipschitzWith.comp_memℒp`\n`- MeasureTheory.Memℒp.of_comp_antilipschitzWith`\n`- Memℒp`\n`- Memℒp.add`\n`- Memℒp.ae_eq`\n`- Memℒp.aefinStronglyMeasurable`\n`- Memℒp.aestronglyMeasurable`\n`- Memℒp.comp_measurePreserving`\n`- Memℒp.comp_of_map`\n`- Memℒp.condExp`\n`- Memℒp.condExpL2_ae_eq_condExp`\n`- Memℒp.condExpL2_ae_eq_condExp'`\n`- Memℒp.congr_norm`\n`- Memℒp.const_inner`\n`- Memℒp.const_mul`\n`- Memℒp.const_smul`\n`- Memℒp.eLpNormEssSup_indicator_norm_ge_eq_zero`\n`- Memℒp.eLpNorm_eq_integral_rpow_norm`\n`- Memℒp.eLpNorm_indicator_le`\n`- Memℒp.eLpNorm_indicator_le'`\n`- Memℒp.eLpNorm_indicator_le_of_meas`\n`- Memℒp.eLpNorm_indicator_norm_ge_le`\n`- Memℒp.eLpNorm_indicator_norm_ge_pos_le`\n`- Memℒp.eLpNorm_lt_top`\n`- Memℒp.eLpNorm_mk_lt_top`\n`- Memℒp.eLpNorm_ne_top`\n`- Memℒp.exists_boundedContinuous_eLpNorm_sub_le`\n`- Memℒp.exists_boundedContinuous_integral_rpow_sub_le`\n`- Memℒp.exists_eLpNorm_indicator_compl_lt`\n`- Memℒp.exists_hasCompactSupport_eLpNorm_sub_le`\n`- Memℒp.exists_hasCompactSupport_integral_rpow_sub_le`\n`- Memℒp.finStronglyMeasurable_of_stronglyMeasurable`\n`- Memℒp.im`\n`- Memℒp.indicator`\n`- Memℒp.induction`\n`- Memℒp.induction_dense`\n`- Memℒp.induction_stronglyMeasurable`\n`- Memℒp.inner_const`\n`- Memℒp.integrable`\n`- Memℒp.integrable_mul`\n`- Memℒp.integrable_norm_pow`\n`- Memℒp.integrable_norm_pow'`\n`- Memℒp.integrable_norm_rpow`\n`- Memℒp.integrable_norm_rpow'`\n`- Memℒp.integrable_sq`\n`- Memℒp.integral_indicator_norm_ge_le`\n`- Memℒp.integral_indicator_norm_ge_nonneg_le`\n`- Memℒp.integral_indicator_norm_ge_nonneg_le_of_meas`\n`- Memℒp.isProbabilityMeasure_of_indepFun`\n`- Memℒp.left_of_add_measure`\n`- Memℒp.locallyIntegrable`\n`- Memℒp.meas_ge_lt_top`\n`- Memℒp.meas_ge_lt_top'`\n`- Memℒp.memℒp_of_exponent_le`\n`- Memℒp.memℒp_of_exponent_le_of_measure_support_ne_top`\n`- Memℒp.mono`\n`- Memℒp.mono'`\n`- Memℒp.mono_exponent`\n`- Memℒp.mono_exponent_of_measure_support_ne_top`\n`- Memℒp.mono_measure`\n`- Memℒp.mul`\n`- Memℒp.mul'`\n`- Memℒp.mul_of_top_left`\n`- Memℒp.mul_of_top_left'`\n`- Memℒp.mul_of_top_right`\n`- Memℒp.mul_of_top_right'`\n`- Memℒp.neg`\n`- Memℒp.norm`\n`- Memℒp.norm_rpow`\n`- Memℒp.norm_rpow_div`\n`- Memℒp.of_bilin`\n`- Memℒp.of_bound`\n`- Memℒp.of_discrete`\n`- Memℒp.of_le`\n`- Memℒp.of_le_mul`\n`- Memℒp.of_measure_le_smul`\n`- Memℒp.of_nnnorm_le_mul`\n`- Memℒp.piecewise`\n`- Memℒp.prod`\n`- Memℒp.prod'`\n`- Memℒp.re`\n`- Memℒp.restrict`\n`- Memℒp.right_of_add_measure`\n`- Memℒp.smul`\n`- Memℒp.smul_measure`\n`- Memℒp.smul_of_top_left`\n`- Memℒp.smul_of_top_right`\n`- Memℒp.sub`\n`- Memℒp.toLp_const`\n`- Memℒp.uniformIntegrable_of_identDistrib`\n`- Memℒp.uniformIntegrable_of_identDistrib_aux`\n`- Memℒp.zero`\n`- Memℒp.zero'`\n`- MonotoneOn.memℒp_isCompact`\n`- MonotoneOn.memℒp_of_measure_ne_top`\n`- MonotoneOn.memℒp_top`\n`- Submartingale.memℒp_limitProcess`\n`- _root_.Continuous.memℒp_of_hasCompactSupport`\n`- _root_.Continuous.memℒp_top_of_hasCompactSupport`\n`- _root_.HasCompactSupport.memℒp_of_bound`\n`- _root_.MeasurableEmbedding.memℒp_map_measure_iff`\n`- _root_.MeasurableEquiv.memℒp_map_measure_iff`\n`- _root_.MeasureTheory.AEStronglyMeasurable.memℒp_truncation`\n`- _root_.MeasureTheory.Memℒp.abs`\n`- _root_.MeasureTheory.Memℒp.evariance_lt_top`\n`- _root_.MeasureTheory.Memℒp.evariance_ne_top`\n`- _root_.MeasureTheory.Memℒp.exists_simpleFunc_eLpNorm_sub_lt`\n`- _root_.MeasureTheory.Memℒp.inf`\n`- _root_.MeasureTheory.Memℒp.neg_part`\n`- _root_.MeasureTheory.Memℒp.ofReal`\n`- _root_.MeasureTheory.Memℒp.ofReal_variance_eq`\n`- _root_.MeasureTheory.Memℒp.pos_part`\n`- _root_.MeasureTheory.Memℒp.sup`\n`- _root_.MeasureTheory.Memℒp.variance_eq`\n`- _root_.MeasureTheory.Memℒp.variance_eq_of_integral_eq_zero`\n`- _root_.MeasureTheory.memℒp_re_im_iff`\n`- comp_memℒp`\n`- comp_memℒp'`\n`- evariance_lt_top_iff_memℒp`\n`- measure_lt_top_of_memℒp_indicator`\n`- measure_preimage_lt_top_of_memℒp`\n`- measure_support_lt_top_of_memℒp`\n`- mem_Lp_iff_memℒp`\n`- memℒp_add_of_disjoint`\n`- memℒp_approxOn`\n`- memℒp_approxOn_range`\n`- memℒp_comp_iff_of_antilipschitz`\n`- memℒp_congr_ae`\n`- memℒp_congr_norm`\n`- memℒp_const`\n`- memℒp_const_iff`\n`- memℒp_finset_sum`\n`- memℒp_finset_sum'`\n`- memℒp_iff_finMeasSupp`\n`- memℒp_iff_integrable`\n`- memℒp_indicator_const`\n`- memℒp_indicator_iff_restrict`\n`- memℒp_limitProcess_of_eLpNorm_bdd`\n`- memℒp_lineDeriv`\n`- memℒp_map_measure_iff`\n`- memℒp_measure_zero`\n`- memℒp_neg_iff`\n`- memℒp_norm_iff`\n`- memℒp_norm_rpow_iff`\n`- memℒp_of_bounded`\n`- memℒp_of_cauchy_tendsto`\n`- memℒp_of_finite_measure_preimage`\n`- memℒp_of_isFiniteMeasure`\n`- memℒp_of_mem_interior_integrableExpSet`\n`- memℒp_of_memℒp_trim`\n`- memℒp_one_iff_integrable`\n`- memℒp_snd`\n`- memℒp_stoppedProcess`\n`- memℒp_stoppedProcess_of_mem_finset`\n`- memℒp_stoppedValue`\n`- memℒp_stoppedValue_of_mem_finset`\n`- memℒp_top_const`\n`- memℒp_top_of_bound`\n`- memℒp_trim_of_mem_lpMeasSubgroup`\n`- memℒp_two_iff_integrable_sq`\n`- memℒp_two_iff_integrable_sq_norm`\n`- memℒp_zero`\n`- memℒp_zero_iff_aestronglyMeasurable`\n`- zero_memℒp`\n`-- memℒp_iff`\n`-- memℒp_top`\n`---- memℒp`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n</details>\n\n---\n\n<details><summary>No changes to technical debt.</summary>\n\nYou can run this locally as\n```\n./scripts/technical-debt-metrics.sh pr_summary\n```\n* The `relative` value is the weighted *sum* of the differences with weight given by the *inverse* of the current value of the statistic.\n* The `absolute` value is the `relative` value divided by the total sum of the inverses of the current values (i.e. the weighted *average* of the differences).\n</details>\n",
              "createdAt": "2025-02-21T14:26:23Z",
              "author": {
                "login": "github-actions"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "a525878eaebb7f0cbeb41f020e5234a53a800dda",
                "additions": 901,
                "deletions": 832,
                "committedDate": "2025-02-21T14:07:13Z",
                "author": {
                  "name": "Floris van Doorn",
                  "email": "fpvdoorn@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIwZlJ2g",
                        "name": "Lint style",
                        "conclusion": "CANCELLED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13458483107/job/37607786970"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIwZlIUQ",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13458483084/job/37607786577"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIwZlIBQ",
                        "name": "Build",
                        "conclusion": "CANCELLED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13458483107/job/37607786501"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIwZlKmw",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13458483084/job/37607787163"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIwZsuqw",
                        "name": "Post-CI job",
                        "conclusion": "CANCELLED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13458483107/job/37607911083"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIwZlMBw",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13458483084/job/37607787527"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "9025db7414072cfa5baafc3f2620c4b7ffd90000",
                "additions": 291,
                "deletions": 0,
                "committedDate": "2025-02-21T14:09:23Z",
                "author": {
                  "name": "Floris van Doorn",
                  "email": "fpvdoorn@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIwZsZnw",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13458521276/job/37607905695"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIwZsy7Q",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13458521282/job/37607912173"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIwZsxHw",
                        "name": "Build",
                        "conclusion": "FAILURE",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13458521282/job/37607911711"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIwZsbKw",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13458521276/job/37607906091"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIwZscsQ",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13458521276/job/37607906481"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIwZz11g",
                        "name": "Post-CI job",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13458521282/job/37608027606"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "fb346e8fca6fc1cd6c5345318f7b34ced910d68b",
                "additions": 36,
                "deletions": 26,
                "committedDate": "2025-02-21T14:22:35Z",
                "author": {
                  "name": "Floris van Doorn",
                  "email": "fpvdoorn@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIwakfmw",
                        "name": "set_pr_emoji",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13458809245/job/37608824731"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIwaaoRg",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13458757672/job/37608663110"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIwakemQ",
                        "name": "Add topic label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13458809265/job/37608824473"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIwake6w",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13458809254/job/37608824555"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIwake-g",
                        "name": "post-or-update-summary-comment",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13458809258/job/37608824570"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIwaaoUg",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13458757671/job/37608663122"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIwakhUQ",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13458809252/job/37608825169"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIwaap4w",
                        "name": "Build",
                        "conclusion": "FAILURE",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13458757671/job/37608663523"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIwaaqVg",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13458757672/job/37608663638"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIwakf0g",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13458809252/job/37608824786"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIwaartA",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13458757672/job/37608663988"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIwagk_w",
                        "name": "Post-CI job",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13458757671/job/37608760575"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIwak9xQ",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/37608832453"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAIwamPpQ",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=22164&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "createdAt": "2025-02-21T14:25:24Z",
        "deletions": 834,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/Analysis/Calculus/Rademacher.lean",
              "additions": 8,
              "deletions": 5
            },
            {
              "path": "Mathlib/Analysis/Convolution.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Analysis/Distribution/SchwartzSpace.lean",
              "additions": 12,
              "deletions": 6
            },
            {
              "path": "Mathlib/Analysis/FunctionalSpaces/SobolevInequality.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Analysis/SpecialFunctions/Gamma/BohrMollerup.lean",
              "additions": 3,
              "deletions": 3
            },
            {
              "path": "Mathlib/Analysis/SumIntegralComparisons.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/Data/ENNReal/Holder.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/MeasureTheory/Decomposition/SignedLebesgue.lean",
              "additions": 3,
              "deletions": 3
            },
            {
              "path": "Mathlib/MeasureTheory/Function/AEEqOfIntegral.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/MeasureTheory/Function/ConditionalExpectation/AEMeasurable.lean",
              "additions": 46,
              "deletions": 40
            },
            {
              "path": "Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.lean",
              "additions": 14,
              "deletions": 5
            },
            {
              "path": "Mathlib/MeasureTheory/Function/ConditionalExpectation/CondexpL1.lean",
              "additions": 8,
              "deletions": 8
            },
            {
              "path": "Mathlib/MeasureTheory/Function/ConditionalExpectation/CondexpL2.lean",
              "additions": 5,
              "deletions": 5
            },
            {
              "path": "Mathlib/MeasureTheory/Function/ConditionalExpectation/Real.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/MeasureTheory/Function/ContinuousMapDense.lean",
              "additions": 41,
              "deletions": 27
            },
            {
              "path": "Mathlib/MeasureTheory/Function/ConvergenceInMeasure.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/MeasureTheory/Function/L1Space/AEEqFun.lean",
              "additions": 5,
              "deletions": 5
            },
            {
              "path": "Mathlib/MeasureTheory/Function/L1Space/Integrable.lean",
              "additions": 54,
              "deletions": 54
            },
            {
              "path": "Mathlib/MeasureTheory/Function/L2Space.lean",
              "additions": 28,
              "deletions": 13
            },
            {
              "path": "Mathlib/MeasureTheory/Function/LocallyIntegrable.lean",
              "additions": 54,
              "deletions": 33
            },
            {
              "path": "Mathlib/MeasureTheory/Function/LpOrder.lean",
              "additions": 20,
              "deletions": 11
            },
            {
              "path": "Mathlib/MeasureTheory/Function/LpSeminorm/Basic.lean",
              "additions": 247,
              "deletions": 103
            },
            {
              "path": "Mathlib/MeasureTheory/Function/LpSeminorm/ChebyshevMarkov.lean",
              "additions": 8,
              "deletions": 2
            },
            {
              "path": "Mathlib/MeasureTheory/Function/LpSeminorm/CompareExp.lean",
              "additions": 59,
              "deletions": 35
            },
            {
              "path": "Mathlib/MeasureTheory/Function/LpSeminorm/TriangleInequality.lean",
              "additions": 9,
              "deletions": 9
            },
            {
              "path": "Mathlib/MeasureTheory/Function/LpSeminorm/Trim.lean",
              "additions": 4,
              "deletions": 1
            },
            {
              "path": "Mathlib/MeasureTheory/Function/LpSpace/Basic.lean",
              "additions": 188,
              "deletions": 114
            },
            {
              "path": "Mathlib/MeasureTheory/Function/LpSpace/DomAct/Basic.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/MeasureTheory/Function/SimpleFuncDenseLp.lean",
              "additions": 111,
              "deletions": 111
            },
            {
              "path": "Mathlib/MeasureTheory/Function/StronglyMeasurable/Lp.lean",
              "additions": 15,
              "deletions": 9
            },
            {
              "path": "Mathlib/MeasureTheory/Function/UnifTight.lean",
              "additions": 17,
              "deletions": 17
            },
            {
              "path": "Mathlib/MeasureTheory/Function/UniformIntegrable.lean",
              "additions": 36,
              "deletions": 36
            },
            {
              "path": "Mathlib/MeasureTheory/Integral/Average.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/MeasureTheory/Integral/Bochner.lean",
              "additions": 11,
              "deletions": 8
            },
            {
              "path": "Mathlib/MeasureTheory/Integral/IntegrableOn.lean",
              "additions": 4,
              "deletions": 4
            },
            {
              "path": "Mathlib/MeasureTheory/Integral/Lebesgue.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/MeasureTheory/Integral/PeakFunction.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/MeasureTheory/Integral/SetIntegral.lean",
              "additions": 18,
              "deletions": 18
            },
            {
              "path": "Mathlib/MeasureTheory/Measure/SeparableMeasure.lean",
              "additions": 3,
              "deletions": 3
            },
            {
              "path": "Mathlib/Probability/CondVar.lean",
              "additions": 4,
              "deletions": 4
            },
            {
              "path": "Mathlib/Probability/ConditionalExpectation.lean",
              "additions": 3,
              "deletions": 3
            },
            {
              "path": "Mathlib/Probability/IdentDistrib.lean",
              "additions": 27,
              "deletions": 15
            },
            {
              "path": "Mathlib/Probability/Independence/Integrable.lean",
              "additions": 8,
              "deletions": 4
            },
            {
              "path": "Mathlib/Probability/Kernel/Disintegration/CDFToKernel.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Probability/Kernel/Disintegration/Density.lean",
              "additions": 4,
              "deletions": 4
            },
            {
              "path": "Mathlib/Probability/Martingale/Convergence.lean",
              "additions": 11,
              "deletions": 8
            },
            {
              "path": "Mathlib/Probability/Moments/IntegrableExpMul.lean",
              "additions": 7,
              "deletions": 4
            },
            {
              "path": "Mathlib/Probability/Process/Filtration.lean",
              "additions": 6,
              "deletions": 3
            },
            {
              "path": "Mathlib/Probability/Process/Stopping.lean",
              "additions": 20,
              "deletions": 20
            },
            {
              "path": "Mathlib/Probability/StrongLaw.lean",
              "additions": 10,
              "deletions": 10
            },
            {
              "path": "Mathlib/Probability/Variance.lean",
              "additions": 48,
              "deletions": 45
            },
            {
              "path": "MathlibTest/MkIffOfInductive.lean",
              "additions": 1,
              "deletions": 2
            },
            {
              "path": "scripts/nolints_prime_decls.txt",
              "additions": 8,
              "deletions": 8
            }
          ]
        },
        "headRefName": "MemLp",
        "headRefOid": "fb346e8fca6fc1cd6c5345318f7b34ced910d68b",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c6MDq8d",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
              "color": "E96E5B",
              "name": "awaiting-CI"
            }
          ]
        },
        "latestReviews": {
          "nodes": []
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "BLOCKED",
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 22164,
        "potentialMergeCommit": {
          "oid": "cab3a5e47d6eff136f43f0f6b39f6d4889f38c14"
        },
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": []
        },
        "reviewThreads": {
          "nodes": []
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjczNzYwMTI=",
              "login": "fpvandoorn"
            }
          ]
        },
        "state": "OPEN",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIwakfmw",
                "name": "set_pr_emoji",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13458809245/job/37608824731"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIwaaoRg",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13458757672/job/37608663110"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIwakemQ",
                "name": "Add topic label",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13458809265/job/37608824473"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIwake6w",
                "name": "label-and-report-new-contributor",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13458809254/job/37608824555"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIwake-g",
                "name": "post-or-update-summary-comment",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13458809258/job/37608824570"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIwaaoUg",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13458757671/job/37608663122"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIwakhUQ",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13458809252/job/37608825169"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIwaap4w",
                "name": "Build",
                "conclusion": "FAILURE",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13458757671/job/37608663523"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIwaaqVg",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13458757672/job/37608663638"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIwakf0g",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13458809252/job/37608824786"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIwaartA",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13458757672/job/37608663988"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIwagk_w",
                "name": "Post-CI job",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/13458757671/job/37608760575"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIwak9xQ",
                "name": "New Contributor Check",
                "conclusion": "NEUTRAL",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/37608832453"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAIwamPpQ",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=22164&login=leanprover-community&repository=mathlib4"
              }
            ]
          }
        },
        "title": "Rename `Mem𝓛p` to `MemLp`",
        "updatedAt": "2025-02-21T14:26:26Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/22164",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "a525878eaebb7f0cbeb41f020e5234a53a800dda"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "9025db7414072cfa5baafc3f2620c4b7ffd90000"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "fb346e8fca6fc1cd6c5345318f7b34ced910d68b"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6rBBkOzwAAAAPRl1kD",
              "createdAt": "2025-02-21T14:25:24Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6fbI9n",
              "createdAt": "2025-02-21T14:26:23Z",
              "body": "### PR summary [fb346e8fca](https://github.com/leanprover-community/mathlib4/pull/22164/commits/fb346e8fca6fc1cd6c5345318f7b34ced910d68b)\n\n#### Import changes for modified files\n\nNo significant changes to the import graph\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ AntitoneOn.memLp_isCompact`\n`+ AntitoneOn.memLp_of_measure_ne_top`\n`+ AntitoneOn.memLp_top`\n`+ AntitoneOn.mem𝓛p_isCompact`\n`+ AntitoneOn.mem𝓛p_of_measure_ne_top`\n`+ AntitoneOn.mem𝓛p_top`\n`+ LipschitzWith.comp_memLp`\n`+ LipschitzWith.comp_mem𝓛p`\n`+ MeasureTheory.MemLp.of_comp_antilipschitzWith`\n`+ MeasureTheory.Mem𝓛p.of_comp_antilipschitzWith`\n`+ MemLp`\n`+ MemLp.add`\n`+ MemLp.ae_eq`\n`+ MemLp.aefinStronglyMeasurable`\n`+ MemLp.aestronglyMeasurable`\n`+ MemLp.comp_measurePreserving`\n`+ MemLp.comp_of_map`\n`+ MemLp.condExp`\n`+ MemLp.condExpL2_ae_eq_condExp`\n`+ MemLp.condExpL2_ae_eq_condExp'`\n`+ MemLp.congr_norm`\n`+ MemLp.const_inner`\n`+ MemLp.const_mul`\n`+ MemLp.const_smul`\n`+ MemLp.eLpNormEssSup_indicator_norm_ge_eq_zero`\n`+ MemLp.eLpNorm_eq_integral_rpow_norm`\n`+ MemLp.eLpNorm_indicator_le`\n`+ MemLp.eLpNorm_indicator_le'`\n`+ MemLp.eLpNorm_indicator_le_of_meas`\n`+ MemLp.eLpNorm_indicator_norm_ge_le`\n`+ MemLp.eLpNorm_indicator_norm_ge_pos_le`\n`+ MemLp.eLpNorm_lt_top`\n`+ MemLp.eLpNorm_mk_lt_top`\n`+ MemLp.eLpNorm_ne_top`\n`+ MemLp.exists_boundedContinuous_eLpNorm_sub_le`\n`+ MemLp.exists_boundedContinuous_integral_rpow_sub_le`\n`+ MemLp.exists_eLpNorm_indicator_compl_lt`\n`+ MemLp.exists_hasCompactSupport_eLpNorm_sub_le`\n`+ MemLp.exists_hasCompactSupport_integral_rpow_sub_le`\n`+ MemLp.finStronglyMeasurable_of_stronglyMeasurable`\n`+ MemLp.im`\n`+ MemLp.indicator`\n`+ MemLp.induction`\n`+ MemLp.induction_dense`\n`+ MemLp.induction_stronglyMeasurable`\n`+ MemLp.inner_const`\n`+ MemLp.integrable`\n`+ MemLp.integrable_mul`\n`+ MemLp.integrable_norm_pow`\n`+ MemLp.integrable_norm_pow'`\n`+ MemLp.integrable_norm_rpow`\n`+ MemLp.integrable_norm_rpow'`\n`+ MemLp.integrable_sq`\n`+ MemLp.integral_indicator_norm_ge_le`\n`+ MemLp.integral_indicator_norm_ge_nonneg_le`\n`+ MemLp.integral_indicator_norm_ge_nonneg_le_of_meas`\n`+ MemLp.isProbabilityMeasure_of_indepFun`\n`+ MemLp.left_of_add_measure`\n`+ MemLp.locallyIntegrable`\n`+ MemLp.meas_ge_lt_top`\n`+ MemLp.meas_ge_lt_top'`\n`+ MemLp.mem𝓛p_of_exponent_le`\n`+ MemLp.mem𝓛p_of_exponent_le_of_measure_support_ne_top`\n`+ MemLp.mono'`\n`+ MemLp.mono_exponent`\n`+ MemLp.mono_exponent_of_measure_support_ne_top`\n`+ MemLp.mono_measure`\n`+ MemLp.mul`\n`+ MemLp.mul'`\n`+ MemLp.neg`\n`+ MemLp.norm`\n`+ MemLp.norm_rpow`\n`+ MemLp.norm_rpow_div`\n`+ MemLp.of_bilin`\n`+ MemLp.of_bound`\n`+ MemLp.of_discrete`\n`+ MemLp.of_le`\n`+ MemLp.of_le_mul`\n`+ MemLp.of_measure_le_smul`\n`+ MemLp.of_nnnorm_le_mul`\n`+ MemLp.piecewise`\n`+ MemLp.prod`\n`+ MemLp.prod'`\n`+ MemLp.re`\n`+ MemLp.restrict`\n`+ MemLp.right_of_add_measure`\n`+ MemLp.smul`\n`+ MemLp.smul_measure`\n`+ MemLp.sub`\n`+ MemLp.toLp_const`\n`+ MemLp.uniformIntegrable_of_identDistrib`\n`+ MemLp.uniformIntegrable_of_identDistrib_aux`\n`+ MemLp.zero`\n`+ MemLp.zero'`\n`+ Mem𝓛p`\n`+ Mem𝓛p.ae_eq`\n`+ Mem𝓛p.aefinStronglyMeasurable`\n`+ Mem𝓛p.aestronglyMeasurable`\n`+ Mem𝓛p.comp_measurePreserving`\n`+ Mem𝓛p.comp_of_map`\n`+ Mem𝓛p.condExp`\n`+ Mem𝓛p.condExpL2_ae_eq_condExp`\n`+ Mem𝓛p.condExpL2_ae_eq_condExp'`\n`+ Mem𝓛p.congr_norm`\n`+ Mem𝓛p.const_inner`\n`+ Mem𝓛p.const_mul`\n`+ Mem𝓛p.const_smul`\n`+ Mem𝓛p.eLpNorm_eq_integral_rpow_norm`\n`+ Mem𝓛p.eLpNorm_lt_top`\n`+ Mem𝓛p.eLpNorm_mk_lt_top`\n`+ Mem𝓛p.eLpNorm_ne_top`\n`+ Mem𝓛p.exists_boundedContinuous_eLpNorm_sub_le`\n`+ Mem𝓛p.exists_boundedContinuous_integral_rpow_sub_le`\n`+ Mem𝓛p.exists_eLpNorm_indicator_compl_lt`\n`+ Mem𝓛p.exists_hasCompactSupport_eLpNorm_sub_le`\n`+ Mem𝓛p.exists_hasCompactSupport_integral_rpow_sub_le`\n`+ Mem𝓛p.finStronglyMeasurable_of_stronglyMeasurable`\n`+ Mem𝓛p.im`\n`+ Mem𝓛p.indicator`\n`+ Mem𝓛p.induction_stronglyMeasurable`\n`+ Mem𝓛p.inner_const`\n`+ Mem𝓛p.integrable_sq`\n`+ Mem𝓛p.isProbabilityMeasure_of_indepFun`\n`+ Mem𝓛p.left_of_add_measure`\n`+ Mem𝓛p.locallyIntegrable`\n`+ Mem𝓛p.meas_ge_lt_top`\n`+ Mem𝓛p.meas_ge_lt_top'`\n`+ Mem𝓛p.mono`\n`+ Mem𝓛p.mono'`\n`+ Mem𝓛p.mono_exponent`\n`+ Mem𝓛p.mono_exponent_of_measure_support_ne_top`\n`+ Mem𝓛p.mono_measure`\n`+ Mem𝓛p.mul`\n`+ Mem𝓛p.mul'`\n`+ Mem𝓛p.mul_of_top_left`\n`+ Mem𝓛p.mul_of_top_left'`\n`+ Mem𝓛p.mul_of_top_right`\n`+ Mem𝓛p.mul_of_top_right'`\n`+ Mem𝓛p.neg`\n`+ Mem𝓛p.norm`\n`+ Mem𝓛p.norm_rpow`\n`+ Mem𝓛p.norm_rpow_div`\n`+ Mem𝓛p.of_bilin`\n`+ Mem𝓛p.of_bound`\n`+ Mem𝓛p.of_discrete`\n`+ Mem𝓛p.of_le`\n`+ Mem𝓛p.of_le_mul`\n`+ Mem𝓛p.of_measure_le_smul`\n`+ Mem𝓛p.of_nnnorm_le_mul`\n`+ Mem𝓛p.piecewise`\n`+ Mem𝓛p.prod`\n`+ Mem𝓛p.prod'`\n`+ Mem𝓛p.re`\n`+ Mem𝓛p.restrict`\n`+ Mem𝓛p.right_of_add_measure`\n`+ Mem𝓛p.smul`\n`+ Mem𝓛p.smul_measure`\n`+ Mem𝓛p.smul_of_top_left`\n`+ Mem𝓛p.smul_of_top_right`\n`+ Mem𝓛p.toLp_const`\n`+ Mem𝓛p.uniformIntegrable_of_identDistrib`\n`+ Mem𝓛p.uniformIntegrable_of_identDistrib_aux`\n`+ Mem𝓛p.zero`\n`+ Mem𝓛p.zero'`\n`+ MonotoneOn.memLp_isCompact`\n`+ MonotoneOn.memLp_of_measure_ne_top`\n`+ MonotoneOn.memLp_top`\n`+ MonotoneOn.mem𝓛p_isCompact`\n`+ MonotoneOn.mem𝓛p_of_measure_ne_top`\n`+ MonotoneOn.mem𝓛p_top`\n`+ Submartingale.memLp_limitProcess`\n`+ Submartingale.mem𝓛p_limitProcess`\n`+ _root_.Continuous.memLp_of_hasCompactSupport`\n`+ _root_.Continuous.memLp_top_of_hasCompactSupport`\n`+ _root_.Continuous.mem𝓛p_of_hasCompactSupport`\n`+ _root_.Continuous.mem𝓛p_top_of_hasCompactSupport`\n`+ _root_.HasCompactSupport.memLp_of_bound`\n`+ _root_.HasCompactSupport.mem𝓛p_of_bound`\n`+ _root_.MeasurableEmbedding.memLp_map_measure_iff`\n`+ _root_.MeasurableEmbedding.mem𝓛p_map_measure_iff`\n`+ _root_.MeasurableEquiv.memLp_map_measure_iff`\n`+ _root_.MeasurableEquiv.mem𝓛p_map_measure_iff`\n`+ _root_.MeasureTheory.AEStronglyMeasurable.memLp_truncation`\n`+ _root_.MeasureTheory.MemLp.abs`\n`+ _root_.MeasureTheory.MemLp.exists_simpleFunc_eLpNorm_sub_lt`\n`+ _root_.MeasureTheory.MemLp.inf`\n`+ _root_.MeasureTheory.MemLp.neg_part`\n`+ _root_.MeasureTheory.MemLp.ofReal`\n`+ _root_.MeasureTheory.MemLp.pos_part`\n`+ _root_.MeasureTheory.MemLp.sup`\n`+ _root_.MeasureTheory.Mem𝓛p.abs`\n`+ _root_.MeasureTheory.Mem𝓛p.evariance_lt_top`\n`+ _root_.MeasureTheory.Mem𝓛p.evariance_ne_top`\n`+ _root_.MeasureTheory.Mem𝓛p.inf`\n`+ _root_.MeasureTheory.Mem𝓛p.neg_part`\n`+ _root_.MeasureTheory.Mem𝓛p.ofReal`\n`+ _root_.MeasureTheory.Mem𝓛p.ofReal_variance_eq`\n`+ _root_.MeasureTheory.Mem𝓛p.pos_part`\n`+ _root_.MeasureTheory.Mem𝓛p.sup`\n`+ _root_.MeasureTheory.Mem𝓛p.variance_eq`\n`+ _root_.MeasureTheory.Mem𝓛p.variance_eq_of_integral_eq_zero`\n`+ _root_.MeasureTheory.memLp_re_im_iff`\n`+ _root_.MeasureTheory.mem𝓛p_re_im_iff`\n`+ comp_memLp`\n`+ comp_memLp'`\n`+ comp_mem𝓛p`\n`+ comp_mem𝓛p'`\n`+ evariance_lt_top_iff_memLp`\n`+ evariance_lt_top_iff_mem𝓛p`\n`+ measure_lt_top_of_memLp_indicator`\n`+ measure_preimage_lt_top_of_memLp`\n`+ measure_support_lt_top_of_memLp`\n`+ memLp_add_of_disjoint`\n`+ memLp_approxOn`\n`+ memLp_approxOn_range`\n`+ memLp_comp_iff_of_antilipschitz`\n`+ memLp_congr_ae`\n`+ memLp_congr_norm`\n`+ memLp_const`\n`+ memLp_const_iff`\n`+ memLp_finset_sum`\n`+ memLp_finset_sum'`\n`+ memLp_iff_finMeasSupp`\n`+ memLp_iff_integrable`\n`+ memLp_indicator_const`\n`+ memLp_indicator_iff_restrict`\n`+ memLp_limitProcess_of_eLpNorm_bdd`\n`+ memLp_lineDeriv`\n`+ memLp_map_measure_iff`\n`+ memLp_measure_zero`\n`+ memLp_neg_iff`\n`+ memLp_norm_iff`\n`+ memLp_norm_rpow_iff`\n`+ memLp_of_bounded`\n`+ memLp_of_cauchy_tendsto`\n`+ memLp_of_finite_measure_preimage`\n`+ memLp_of_isFiniteMeasure`\n`+ memLp_of_memLp_trim`\n`+ memLp_of_mem_interior_integrableExpSet`\n`+ memLp_one_iff_integrable`\n`+ memLp_snd`\n`+ memLp_stoppedProcess`\n`+ memLp_stoppedProcess_of_mem_finset`\n`+ memLp_stoppedValue`\n`+ memLp_stoppedValue_of_mem_finset`\n`+ memLp_top_const`\n`+ memLp_top_of_bound`\n`+ memLp_trim_of_mem_lpMeasSubgroup`\n`+ memLp_two_iff_integrable_sq`\n`+ memLp_two_iff_integrable_sq_norm`\n`+ memLp_zero`\n`+ memLp_zero_iff_aestronglyMeasurable`\n`+ mem_Lp_iff_memLp`\n`+ mem_Lp_iff_mem𝓛p`\n`+ mem𝓛p_add_of_disjoint`\n`+ mem𝓛p_comp_iff_of_antilipschitz`\n`+ mem𝓛p_congr_ae`\n`+ mem𝓛p_congr_norm`\n`+ mem𝓛p_const`\n`+ mem𝓛p_const_iff`\n`+ mem𝓛p_iff`\n`+ mem𝓛p_indicator_const`\n`+ mem𝓛p_indicator_iff_restrict`\n`+ mem𝓛p_limitProcess_of_eLpNorm_bdd`\n`+ mem𝓛p_lineDeriv`\n`+ mem𝓛p_map_measure_iff`\n`+ mem𝓛p_measure_zero`\n`+ mem𝓛p_neg_iff`\n`+ mem𝓛p_norm_iff`\n`+ mem𝓛p_norm_rpow_iff`\n`+ mem𝓛p_of_bounded`\n`+ mem𝓛p_of_cauchy_tendsto`\n`+ mem𝓛p_of_mem_interior_integrableExpSet`\n`+ mem𝓛p_of_mem𝓛p_trim`\n`+ mem𝓛p_snd`\n`+ mem𝓛p_top`\n`+ mem𝓛p_top_const`\n`+ mem𝓛p_top_of_bound`\n`+ mem𝓛p_trim_of_mem_lpMeasSubgroup`\n`+ mem𝓛p_two_iff_integrable_sq`\n`+ mem𝓛p_two_iff_integrable_sq_norm`\n`+ mem𝓛p_zero_iff_aestronglyMeasurable`\n`+ tendsto_Lp_iff_tendsto_eLpNorm`\n`+ tendsto_Lp_iff_tendsto_eLpNorm'`\n`+ tendsto_Lp_iff_tendsto_eLpNorm''`\n`+ tendsto_Lp_of_tendsto_eLpNorm`\n`+ zero_mem𝓛p`\n`++ memLp_iff`\n`++ memLp_top`\n`++ mem𝓛p`\n`++++ memLp`\n`+-+- norm_toLp`\n`+-+- toLp`\n`+-+- toLp_add`\n`+-+- toLp_neg`\n`+-+- toLp_sub`\n`+-+- toLp_zero`\n`- AntitoneOn.memℒp_isCompact`\n`- AntitoneOn.memℒp_of_measure_ne_top`\n`- AntitoneOn.memℒp_top`\n`- LipschitzWith.comp_memℒp`\n`- MeasureTheory.Memℒp.of_comp_antilipschitzWith`\n`- Memℒp`\n`- Memℒp.add`\n`- Memℒp.ae_eq`\n`- Memℒp.aefinStronglyMeasurable`\n`- Memℒp.aestronglyMeasurable`\n`- Memℒp.comp_measurePreserving`\n`- Memℒp.comp_of_map`\n`- Memℒp.condExp`\n`- Memℒp.condExpL2_ae_eq_condExp`\n`- Memℒp.condExpL2_ae_eq_condExp'`\n`- Memℒp.congr_norm`\n`- Memℒp.const_inner`\n`- Memℒp.const_mul`\n`- Memℒp.const_smul`\n`- Memℒp.eLpNormEssSup_indicator_norm_ge_eq_zero`\n`- Memℒp.eLpNorm_eq_integral_rpow_norm`\n`- Memℒp.eLpNorm_indicator_le`\n`- Memℒp.eLpNorm_indicator_le'`\n`- Memℒp.eLpNorm_indicator_le_of_meas`\n`- Memℒp.eLpNorm_indicator_norm_ge_le`\n`- Memℒp.eLpNorm_indicator_norm_ge_pos_le`\n`- Memℒp.eLpNorm_lt_top`\n`- Memℒp.eLpNorm_mk_lt_top`\n`- Memℒp.eLpNorm_ne_top`\n`- Memℒp.exists_boundedContinuous_eLpNorm_sub_le`\n`- Memℒp.exists_boundedContinuous_integral_rpow_sub_le`\n`- Memℒp.exists_eLpNorm_indicator_compl_lt`\n`- Memℒp.exists_hasCompactSupport_eLpNorm_sub_le`\n`- Memℒp.exists_hasCompactSupport_integral_rpow_sub_le`\n`- Memℒp.finStronglyMeasurable_of_stronglyMeasurable`\n`- Memℒp.im`\n`- Memℒp.indicator`\n`- Memℒp.induction`\n`- Memℒp.induction_dense`\n`- Memℒp.induction_stronglyMeasurable`\n`- Memℒp.inner_const`\n`- Memℒp.integrable`\n`- Memℒp.integrable_mul`\n`- Memℒp.integrable_norm_pow`\n`- Memℒp.integrable_norm_pow'`\n`- Memℒp.integrable_norm_rpow`\n`- Memℒp.integrable_norm_rpow'`\n`- Memℒp.integrable_sq`\n`- Memℒp.integral_indicator_norm_ge_le`\n`- Memℒp.integral_indicator_norm_ge_nonneg_le`\n`- Memℒp.integral_indicator_norm_ge_nonneg_le_of_meas`\n`- Memℒp.isProbabilityMeasure_of_indepFun`\n`- Memℒp.left_of_add_measure`\n`- Memℒp.locallyIntegrable`\n`- Memℒp.meas_ge_lt_top`\n`- Memℒp.meas_ge_lt_top'`\n`- Memℒp.memℒp_of_exponent_le`\n`- Memℒp.memℒp_of_exponent_le_of_measure_support_ne_top`\n`- Memℒp.mono`\n`- Memℒp.mono'`\n`- Memℒp.mono_exponent`\n`- Memℒp.mono_exponent_of_measure_support_ne_top`\n`- Memℒp.mono_measure`\n`- Memℒp.mul`\n`- Memℒp.mul'`\n`- Memℒp.mul_of_top_left`\n`- Memℒp.mul_of_top_left'`\n`- Memℒp.mul_of_top_right`\n`- Memℒp.mul_of_top_right'`\n`- Memℒp.neg`\n`- Memℒp.norm`\n`- Memℒp.norm_rpow`\n`- Memℒp.norm_rpow_div`\n`- Memℒp.of_bilin`\n`- Memℒp.of_bound`\n`- Memℒp.of_discrete`\n`- Memℒp.of_le`\n`- Memℒp.of_le_mul`\n`- Memℒp.of_measure_le_smul`\n`- Memℒp.of_nnnorm_le_mul`\n`- Memℒp.piecewise`\n`- Memℒp.prod`\n`- Memℒp.prod'`\n`- Memℒp.re`\n`- Memℒp.restrict`\n`- Memℒp.right_of_add_measure`\n`- Memℒp.smul`\n`- Memℒp.smul_measure`\n`- Memℒp.smul_of_top_left`\n`- Memℒp.smul_of_top_right`\n`- Memℒp.sub`\n`- Memℒp.toLp_const`\n`- Memℒp.uniformIntegrable_of_identDistrib`\n`- Memℒp.uniformIntegrable_of_identDistrib_aux`\n`- Memℒp.zero`\n`- Memℒp.zero'`\n`- MonotoneOn.memℒp_isCompact`\n`- MonotoneOn.memℒp_of_measure_ne_top`\n`- MonotoneOn.memℒp_top`\n`- Submartingale.memℒp_limitProcess`\n`- _root_.Continuous.memℒp_of_hasCompactSupport`\n`- _root_.Continuous.memℒp_top_of_hasCompactSupport`\n`- _root_.HasCompactSupport.memℒp_of_bound`\n`- _root_.MeasurableEmbedding.memℒp_map_measure_iff`\n`- _root_.MeasurableEquiv.memℒp_map_measure_iff`\n`- _root_.MeasureTheory.AEStronglyMeasurable.memℒp_truncation`\n`- _root_.MeasureTheory.Memℒp.abs`\n`- _root_.MeasureTheory.Memℒp.evariance_lt_top`\n`- _root_.MeasureTheory.Memℒp.evariance_ne_top`\n`- _root_.MeasureTheory.Memℒp.exists_simpleFunc_eLpNorm_sub_lt`\n`- _root_.MeasureTheory.Memℒp.inf`\n`- _root_.MeasureTheory.Memℒp.neg_part`\n`- _root_.MeasureTheory.Memℒp.ofReal`\n`- _root_.MeasureTheory.Memℒp.ofReal_variance_eq`\n`- _root_.MeasureTheory.Memℒp.pos_part`\n`- _root_.MeasureTheory.Memℒp.sup`\n`- _root_.MeasureTheory.Memℒp.variance_eq`\n`- _root_.MeasureTheory.Memℒp.variance_eq_of_integral_eq_zero`\n`- _root_.MeasureTheory.memℒp_re_im_iff`\n`- comp_memℒp`\n`- comp_memℒp'`\n`- evariance_lt_top_iff_memℒp`\n`- measure_lt_top_of_memℒp_indicator`\n`- measure_preimage_lt_top_of_memℒp`\n`- measure_support_lt_top_of_memℒp`\n`- mem_Lp_iff_memℒp`\n`- memℒp_add_of_disjoint`\n`- memℒp_approxOn`\n`- memℒp_approxOn_range`\n`- memℒp_comp_iff_of_antilipschitz`\n`- memℒp_congr_ae`\n`- memℒp_congr_norm`\n`- memℒp_const`\n`- memℒp_const_iff`\n`- memℒp_finset_sum`\n`- memℒp_finset_sum'`\n`- memℒp_iff_finMeasSupp`\n`- memℒp_iff_integrable`\n`- memℒp_indicator_const`\n`- memℒp_indicator_iff_restrict`\n`- memℒp_limitProcess_of_eLpNorm_bdd`\n`- memℒp_lineDeriv`\n`- memℒp_map_measure_iff`\n`- memℒp_measure_zero`\n`- memℒp_neg_iff`\n`- memℒp_norm_iff`\n`- memℒp_norm_rpow_iff`\n`- memℒp_of_bounded`\n`- memℒp_of_cauchy_tendsto`\n`- memℒp_of_finite_measure_preimage`\n`- memℒp_of_isFiniteMeasure`\n`- memℒp_of_mem_interior_integrableExpSet`\n`- memℒp_of_memℒp_trim`\n`- memℒp_one_iff_integrable`\n`- memℒp_snd`\n`- memℒp_stoppedProcess`\n`- memℒp_stoppedProcess_of_mem_finset`\n`- memℒp_stoppedValue`\n`- memℒp_stoppedValue_of_mem_finset`\n`- memℒp_top_const`\n`- memℒp_top_of_bound`\n`- memℒp_trim_of_mem_lpMeasSubgroup`\n`- memℒp_two_iff_integrable_sq`\n`- memℒp_two_iff_integrable_sq_norm`\n`- memℒp_zero`\n`- memℒp_zero_iff_aestronglyMeasurable`\n`- zero_memℒp`\n`-- memℒp_iff`\n`-- memℒp_top`\n`---- memℒp`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n</details>\n\n---\n\n<details><summary>No changes to technical debt.</summary>\n\nYou can run this locally as\n```\n./scripts/technical-debt-metrics.sh pr_summary\n```\n* The `relative` value is the weighted *sum* of the differences with weight given by the *inverse* of the current value of the statistic.\n* The `absolute` value is the `relative` value divided by the total sum of the inverses of the current values (i.e. the weighted *average* of the differences).\n</details>\n",
              "author": {
                "login": "github-actions"
              }
            }
          ]
        }
      }
    }
  }
}
