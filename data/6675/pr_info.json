{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 90,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "urkud"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "---\r\n\r\nI need this as a technical assumption in an upcoming PR about continuity of the action of `DomMulAct M` on `Lp`.\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)",
        "changedFiles": 4,
        "closed": true,
        "closedAt": "2023-08-30T17:46:19Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5kbZ15",
              "body": "I don't like `CocompactSMul` as a name due to the existence of https://en.wikipedia.org/wiki/Cocompact_group_action\r\n\r\nThis is really a technical condition that would never be talked about in usual maths (since everyone just talks about group actions) so I think it's best if the name is a bit technical :sweat_smile: but I have no good suggestion. \r\n\r\nBy the way, do you have a use case for the `Lp` result for monoid actions?",
              "createdAt": "2023-08-19T09:37:43Z",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5kb4YP",
              "body": "> This is really a technical condition that would never be talked about in usual maths (since everyone just talks about group actions) so I think it's best if the name is a bit technical 😅 but I have no good suggestion.\r\n> \r\n\r\n`CompactPreimageSMul` (renamed)?\r\n\r\n> By the way, do you have a use case for the `Lp` result for monoid actions?\r\n\r\nYes, ~more details later today.~ I'm going to use it to prove the following fact (under some topological assumptions on `G` which I'm trying to minimize - WIP): if `H : Subgroup G` is topologically dense and `s : Set G` is a.e. invariant under multiplication of all `g ∈ H`, then `s` is a.e. invariant under multiplications of all `g : G`. In particular, if `Subgroup.closure {g}` is topologically dense, then multiplication by `g` is ergodic.",
              "createdAt": "2023-08-19T15:38:46Z",
              "author": {
                "login": "urkud"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5lSWRR",
              "body": ":v: urkud can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests).",
              "createdAt": "2023-08-30T14:36:33Z",
              "author": {
                "login": "bors"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5lSjQI",
              "body": "bors merge",
              "createdAt": "2023-08-30T15:07:29Z",
              "author": {
                "login": "urkud"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5lTdP3",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * Build\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6027747864/job/16353609237)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6027747864/job/16353608859)",
              "createdAt": "2023-08-30T17:46:18Z",
              "author": {
                "login": "bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "42c8d83d0b3ed400cb25f596edebba6ee58fc16e",
                "additions": 46,
                "deletions": 0,
                "committedDate": "2023-08-19T02:41:05Z",
                "author": {
                  "name": "Yury G. Kudryashov",
                  "email": "urkud@urkud.name"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "0725c5afd6bc69a8739fb5454c07d469c70524ad",
                "additions": 3,
                "deletions": 1,
                "committedDate": "2023-08-19T03:42:00Z",
                "author": {
                  "name": "Yury G. Kudryashov",
                  "email": "urkud@urkud.name"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "6b6493fe23466c30b74a046e763ec63ffad061e0",
                "additions": 4,
                "deletions": 3,
                "committedDate": "2023-08-19T05:24:16Z",
                "author": {
                  "name": "Yury G. Kudryashov",
                  "email": "urkud@urkud.name"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "9c1576638c971c88a47f0811ed1fa50a455fed05",
                "additions": 662,
                "deletions": 326,
                "committedDate": "2023-08-19T16:22:57Z",
                "author": {
                  "name": "Yury G. Kudryashov",
                  "email": "urkud@urkud.name"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "e1085629f9f867c6d5d1f968bc03375f0a7423fe",
                "additions": 10,
                "deletions": 10,
                "committedDate": "2023-08-19T16:26:21Z",
                "author": {
                  "name": "Yury G. Kudryashov",
                  "email": "urkud@urkud.name"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "e8f9c1d398ff0d6e8bd504b690604608a2e6a193",
                "additions": 4813,
                "deletions": 3280,
                "committedDate": "2023-08-24T06:46:34Z",
                "author": {
                  "name": "Yury G. Kudryashov",
                  "email": "urkud@urkud.name"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "79a20471c334080984a347ae02652b7baf505120",
                "additions": 807,
                "deletions": 85,
                "committedDate": "2023-08-25T05:14:37Z",
                "author": {
                  "name": "Yury G. Kudryashov",
                  "email": "urkud@urkud.name"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "74f8ea4c1a8e1bc15d865466db5e3229a7dcea00",
                "additions": 16,
                "deletions": 7,
                "committedDate": "2023-08-25T06:34:14Z",
                "author": {
                  "name": "Yury G. Kudryashov",
                  "email": "urkud@urkud.name"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "c8c7696d5cb10e1acb83040b434df81dcab168ed",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-08-25T14:44:09Z",
                "author": {
                  "name": "Yury G. Kudryashov",
                  "email": "urkud@urkud.name"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "b94e6904d8609df026f967496085bcf7e7912ba6",
                "additions": 333,
                "deletions": 132,
                "committedDate": "2023-08-25T15:00:58Z",
                "author": {
                  "name": "Yury G. Kudryashov",
                  "email": "urkud@urkud.name"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "444260e125ff7db9ca14ce1820c82f65201161c0",
                "additions": 68,
                "deletions": 45,
                "committedDate": "2023-08-25T16:57:51Z",
                "author": {
                  "name": "Yury G. Kudryashov",
                  "email": "urkud@urkud.name"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "4a04c8bae97fd39bc08b20f4a332e20842d3d105",
                "additions": 3,
                "deletions": 1,
                "committedDate": "2023-08-30T15:06:58Z",
                "author": {
                  "name": "Yury G. Kudryashov",
                  "email": "urkud@urkud.name"
                },
                "statusCheckRollup": null
              }
            }
          ]
        },
        "createdAt": "2023-08-19T02:41:26Z",
        "deletions": 7,
        "files": {
          "nodes": [
            {
              "path": "Mathlib.lean",
              "additions": 1,
              "deletions": 0
            },
            {
              "path": "Mathlib/Topology/Algebra/ProperConstSMul.lean",
              "additions": 69,
              "deletions": 0
            },
            {
              "path": "Mathlib/Topology/ProperMap.lean",
              "additions": 16,
              "deletions": 7
            },
            {
              "path": "Mathlib/Topology/Separation.lean",
              "additions": 4,
              "deletions": 0
            }
          ]
        },
        "headRefName": "YK-cocompact-smul",
        "headRefOid": "4a04c8bae97fd39bc08b20f4a332e20842d3d105",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5YSnRq",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABAt13Ow",
              "color": "bfd4f2",
              "name": "delegated"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
              "color": "06e039",
              "name": "ready-to-merge"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJbOw",
              "color": "33DBEC",
              "name": "t-topology"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5fiFjU",
              "body": "Thanks a lot, and sorry for the slow review!\r\nI have no opinion about proper map / compact preimages in this case, but since properness covers your use cases I'd say it's completely fine to rely on the (small) existing API for `IsProperMap`.\r\n\r\nbors d+",
              "state": "COMMENTED",
              "author": {
                "login": "ADedecker"
              },
              "submittedAt": "2023-08-30T14:36:31Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 6675,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5egK6p",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "urkud"
              },
              "submittedAt": "2023-08-19T03:40:46Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5egLXk",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "urkud"
              },
              "submittedAt": "2023-08-19T03:41:51Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5egq2m",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ADedecker"
              },
              "submittedAt": "2023-08-19T09:54:51Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5eg59z",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "urkud"
              },
              "submittedAt": "2023-08-19T15:44:42Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5ehNLW",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ADedecker"
              },
              "submittedAt": "2023-08-19T22:22:22Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5ehP8b",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "urkud"
              },
              "submittedAt": "2023-08-20T02:10:00Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5ehs_1",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ADedecker"
              },
              "submittedAt": "2023-08-20T13:14:52Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5fEeg1",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "urkud"
              },
              "submittedAt": "2023-08-25T06:39:25Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5fEfoL",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "urkud"
              },
              "submittedAt": "2023-08-25T06:41:07Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5fiFjU",
              "body": "Thanks a lot, and sorry for the slow review!\r\nI have no opinion about proper map / compact preimages in this case, but since properness covers your use cases I'd say it's completely fine to rely on the (small) existing API for `IsProperMap`.\r\n\r\nbors d+",
              "state": "COMMENTED",
              "author": {
                "login": "ADedecker"
              },
              "submittedAt": "2023-08-30T14:36:31Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5fitF1",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "urkud"
              },
              "submittedAt": "2023-08-30T15:06:53Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5NbhKU",
                    "body": "```suggestion\r\n/-- The preimage of a compact set under `(c • ·)` is a compact set. -/\r\nalias CocompactSMul.isCompact_preimage_smul ← IsCompact.preimage_smul\r\n```",
                    "createdAt": "2023-08-19T03:40:45Z",
                    "author": {
                      "login": "urkud"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Nbhd7",
                    "body": "```suggestion\r\nattribute [to_additive \"The preimage of a compact set under `(c +ᵥ ·)` is a compact set.\"]\r\n  IsCompact.preimage_smul\r\n```",
                    "createdAt": "2023-08-19T03:41:51Z",
                    "author": {
                      "login": "urkud"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Nb7B3",
                    "body": "While you're at it, could you link this to the [IsProperMap](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/ProperMap.html#IsProperMap) API by showing that any map from a compact space to a Hausdorff space is proper?",
                    "createdAt": "2023-08-19T09:54:50Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5NcGxL",
                    "body": "BTW, we have `IsProperMap` and `CocompactMap`.",
                    "createdAt": "2023-08-19T15:44:42Z",
                    "author": {
                      "login": "urkud"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5NcVn8",
                    "body": "I know, I added `IsProperMap` recently. I claim that it is the right concept mathematically, so I think we should expand this API rather than that of `CocompactMap`.",
                    "createdAt": "2023-08-19T22:22:21Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5NcZON",
                    "body": "> ... right concept mathematically\r\n\r\nI wouldn't be surprised if both are useful (or even all 3 if you add `isCompact_preimage`). BTW, I didn't look closely at the definitions; which one is weaker?",
                    "createdAt": "2023-08-20T02:10:00Z",
                    "author": {
                      "login": "urkud"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5NcubP",
                    "body": "In general spaces (and for continuous functions of course), `IsProperMap` -> `isCompact_preimage` -> `CocompactMap` . The equivalence between `isCompact_preimage` and `CocompactMap` works as soon as the codomain is Hausdorff, and everything is equivalent when the codomain is Hausdorff and locally compact.\r\n\r\nRegarding `isCompact_preimage` vs `CocompactMap`, I think we can safely redefine `CocompactMap` in terms of compact preimages, the tendsto definition was a nice trick but I don't think it's mathematically meaningful.\r\n\r\n`IsProperMap` on the other hand is indeed significantly stronger than `CocompactMap`, so I'm not suggesting removing the latter, but I know that some key results that are usually proved for `isCompact_preimage` maps only work in locally compact space unless you assume the stronger `IsProperMap`. I don't have a good example in mathlib of such a theorem about `CocompactMap`, but we have some in the context of group actions. For example you can remove the locally compactness assumption in [t2Space_of_properlyDiscontinuousSMul_of_t2Space](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Algebra/ConstMulAction.html#t2Space_of_properlyDiscontinuousSMul_of_t2Space) if you strengthen the definition of [ProperlyDiscontinuousSMul](https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Algebra/ConstMulAction.html#ProperlyDiscontinuousSMul) to use `IsProperMap`.",
                    "createdAt": "2023-08-20T13:14:52Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5NzF_6",
                    "body": "Done. I also added a version of `isProperMap_iff_ultrafilter` for a T₂ codomain.",
                    "createdAt": "2023-08-25T06:39:25Z",
                    "author": {
                      "login": "urkud"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5NzG5d",
                    "body": "Do you think I should use `IsProperMap` instead of `IsCompact s → IsCompact (f ⁻¹' s)`? UPD: done.",
                    "createdAt": "2023-08-25T06:41:06Z",
                    "author": {
                      "login": "urkud"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5OGfDU",
                    "body": "Could you add the same comment on the multiplicative version?",
                    "createdAt": "2023-08-30T13:54:09Z",
                    "author": {
                      "login": "ADedecker"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5OG4jx",
                    "body": "```suggestion\r\n/-- A mixin typeclass saying that `(c • ·)` is a proper map for all `c`.\r\n\r\nNote that this is **not** the same as a proper multiplicative action (not yet in `Mathlib`). -/\r\n```",
                    "createdAt": "2023-08-30T15:06:53Z",
                    "author": {
                      "login": "urkud"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjE4ODgxMw==",
              "login": "urkud"
            },
            {
              "id": "MDQ6VXNlcjQ4NjU2Nzkz",
              "login": "ADedecker"
            },
            {
              "id": "U_kgDOB75MNQ",
              "login": "leanprover-community-mathlib4-bot"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": null,
        "title": "[Merged by Bors] - feat: define `ProperConstSMul`",
        "updatedAt": "2023-08-30T17:46:42Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/6675",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "42c8d83d0b3ed400cb25f596edebba6ee58fc16e"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5utzBmzwAAAAJcFj1l",
              "createdAt": "2023-08-19T02:41:52Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5utzBmzwAAAAJcFj1m",
              "createdAt": "2023-08-19T02:41:52Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJbOw",
                "name": "t-topology"
              }
            },
            {
              "__typename": "ReviewRequestedEvent",
              "id": "RRE_lADOFcwZ1c5utzBmzwAAAAJcFj3m",
              "createdAt": "2023-08-19T02:41:59Z",
              "requestedReviewer": {
                "id": "MDQ6VXNlcjQ4NjU2Nzkz",
                "login": "ADedecker"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5egK6p",
              "createdAt": "2023-08-19T03:40:45Z",
              "body": "",
              "author": {
                "login": "urkud"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5egLXk",
              "createdAt": "2023-08-19T03:41:50Z",
              "body": "",
              "author": {
                "login": "urkud"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "0725c5afd6bc69a8739fb5454c07d469c70524ad"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "6b6493fe23466c30b74a046e763ec63ffad061e0"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5kbZ15",
              "createdAt": "2023-08-19T09:37:43Z",
              "body": "I don't like `CocompactSMul` as a name due to the existence of https://en.wikipedia.org/wiki/Cocompact_group_action\r\n\r\nThis is really a technical condition that would never be talked about in usual maths (since everyone just talks about group actions) so I think it's best if the name is a bit technical :sweat_smile: but I have no good suggestion. \r\n\r\nBy the way, do you have a use case for the `Lp` result for monoid actions?",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5egq2m",
              "createdAt": "2023-08-19T09:54:50Z",
              "body": "",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5utzBmzwAAAAJcJBdC",
              "createdAt": "2023-08-19T10:14:54Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5utzBmzwAAAAJcJBdD",
              "createdAt": "2023-08-19T10:14:54Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5kb4YP",
              "createdAt": "2023-08-19T15:38:46Z",
              "body": "> This is really a technical condition that would never be talked about in usual maths (since everyone just talks about group actions) so I think it's best if the name is a bit technical 😅 but I have no good suggestion.\r\n> \r\n\r\n`CompactPreimageSMul` (renamed)?\r\n\r\n> By the way, do you have a use case for the `Lp` result for monoid actions?\r\n\r\nYes, ~more details later today.~ I'm going to use it to prove the following fact (under some topological assumptions on `G` which I'm trying to minimize - WIP): if `H : Subgroup G` is topologically dense and `s : Set G` is a.e. invariant under multiplication of all `g ∈ H`, then `s` is a.e. invariant under multiplications of all `g : G`. In particular, if `Subgroup.closure {g}` is topologically dense, then multiplication by `g` is ergodic.",
              "author": {
                "login": "urkud"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "9c1576638c971c88a47f0811ed1fa50a455fed05"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "e1085629f9f867c6d5d1f968bc03375f0a7423fe"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "e8f9c1d398ff0d6e8bd504b690604608a2e6a193"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "79a20471c334080984a347ae02652b7baf505120"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "74f8ea4c1a8e1bc15d865466db5e3229a7dcea00"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5utzBmzwAAAAJfU9Id",
              "createdAt": "2023-08-25T06:34:51Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5utzBmzwAAAAJfU9Ih",
              "createdAt": "2023-08-25T06:34:51Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "c8c7696d5cb10e1acb83040b434df81dcab168ed"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "b94e6904d8609df026f967496085bcf7e7912ba6"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "444260e125ff7db9ca14ce1820c82f65201161c0"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5fiFjU",
              "createdAt": "2023-08-30T13:54:09Z",
              "body": "Thanks a lot, and sorry for the slow review!\r\nI have no opinion about proper map / compact preimages in this case, but since properness covers your use cases I'd say it's completely fine to rely on the (small) existing API for `IsProperMap`.\r\n\r\nbors d+",
              "author": {
                "login": "ADedecker"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5lSWRR",
              "createdAt": "2023-08-30T14:36:33Z",
              "body": ":v: urkud can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests).",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5utzBmzwAAAAJh_f1N",
              "createdAt": "2023-08-30T14:36:46Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABAt13Ow",
                "name": "delegated"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5utzBmzwAAAAJh_f4D",
              "createdAt": "2023-08-30T14:36:47Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5fitF1",
              "createdAt": "2023-08-30T15:06:53Z",
              "body": "",
              "author": {
                "login": "urkud"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "4a04c8bae97fd39bc08b20f4a332e20842d3d105"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5lSjQI",
              "createdAt": "2023-08-30T15:07:29Z",
              "body": "bors merge",
              "author": {
                "login": "urkud"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5utzBmzwAAAAJiA4NG",
              "createdAt": "2023-08-30T15:07:56Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
                "name": "ready-to-merge"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5lTdP3",
              "createdAt": "2023-08-30T17:46:18Z",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * Build\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6027747864/job/16353609237)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6027747864/job/16353608859)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c5utzBmzwAAAAJiGlok",
              "createdAt": "2023-08-30T17:46:20Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c5utzBmzwAAAAJiGmXg",
              "createdAt": "2023-08-30T17:46:42Z"
            }
          ]
        }
      }
    }
  }
}
