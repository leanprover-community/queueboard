{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 102,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "ocfnash"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "The point is that the following four lemmas are now all true by definition:\r\n\r\n- `LieSubmodule.inf_coe_toSubmodule`\r\n- `LieSubmodule.sInf_coe_toSubmodule`\r\n- `LieSubmodule.sup_coe_toSubmodule` [previously existed but not true by definition]\r\n- `LieSubmodule.sSup_coe_toSubmodule` [previously did not exist]\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 3,
        "closed": true,
        "closedAt": "2023-10-12T12:33:42Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5o4Dnw",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6494681437/job/17638096057)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6494681437/job/17638095463)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6494681437/job/17638095667)",
              "createdAt": "2023-10-12T12:33:40Z",
              "author": {
                "login": "bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "db23493c02f3477dc0f69efcada6c9044be603d0",
                "additions": 78,
                "deletions": 39,
                "committedDate": "2023-10-10T14:59:46Z",
                "author": {
                  "name": "Oliver Nash",
                  "email": "github@olivernash.org"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "91e0031923bd3e7ea25f9cd054db45879e8ef8f7",
                "additions": 6,
                "deletions": 0,
                "committedDate": "2023-10-10T16:23:21Z",
                "author": {
                  "name": "Oliver Nash",
                  "email": "github@olivernash.org"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "3392c8065abf50b3c760ef18b5bd2413b0c2fcda",
                "additions": 8,
                "deletions": 8,
                "committedDate": "2023-10-11T12:31:08Z",
                "author": {
                  "name": "Oliver Nash",
                  "email": "github@olivernash.org"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "ac0680aaa72dca6647265750fa782c6327c85c49",
                "additions": 23,
                "deletions": 6,
                "committedDate": "2023-10-11T14:23:41Z",
                "author": {
                  "name": "Oliver Nash",
                  "email": "github@olivernash.org"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "4f03d489d65f9721e8fe99faeca0b4f4a38f988c",
                "additions": 11,
                "deletions": 14,
                "committedDate": "2023-10-11T16:04:23Z",
                "author": {
                  "name": "Oliver Nash",
                  "email": "github@olivernash.org"
                },
                "statusCheckRollup": null
              }
            }
          ]
        },
        "createdAt": "2023-10-10T15:01:23Z",
        "deletions": 43,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/Algebra/Lie/Submodule.lean",
              "additions": 87,
              "deletions": 43
            },
            {
              "path": "Mathlib/LinearAlgebra/Finsupp.lean",
              "additions": 11,
              "deletions": 0
            },
            {
              "path": "Mathlib/LinearAlgebra/Span.lean",
              "additions": 4,
              "deletions": 0
            }
          ]
        },
        "headRefName": "ocfnash/lie_lattice",
        "headRefOid": "4f03d489d65f9721e8fe99faeca0b4f4a38f988c",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5cZbCa",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
              "color": "06e039",
              "name": "ready-to-merge"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJjTQ",
              "color": "33DBEC",
              "name": "t-algebra"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5jxmFd",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-10-12T11:42:59Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5jxSj9",
              "body": "Thanks :tada:\r\n\r\nbors merge",
              "state": "APPROVED",
              "author": {
                "login": "jcommelin"
              },
              "submittedAt": "2023-10-12T10:52:06Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 7608,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": "APPROVED",
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5jmRdE",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-10-11T11:47:12Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5jmTJ-",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-10-11T11:48:42Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5jmT6Y",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-10-11T11:49:44Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5jmXQo",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-10-11T11:57:21Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5jmgWM",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-10-11T12:18:21Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5jmg7g",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-10-11T12:19:37Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5jmkrA",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-10-11T12:27:53Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5jmor6",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-10-11T12:35:52Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5jnrkD",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-10-11T14:09:58Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5jnx5t",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-10-11T14:20:20Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5jn2-z",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-10-11T14:26:41Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5jn8yX",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-10-11T14:36:49Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5joAF_",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-10-11T14:41:57Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5jpOeT",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-10-11T16:05:10Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5jxSj9",
              "body": "Thanks :tada:\r\n\r\nbors merge",
              "state": "APPROVED",
              "author": {
                "login": "jcommelin"
              },
              "submittedAt": "2023-10-12T10:52:06Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5jxmFd",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-10-12T11:42:59Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5j7jZ8",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "ocfnash"
              },
              "submittedAt": "2023-10-13T13:51:03Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5QwSnG",
                    "body": "Can you get here via `CompleteLattice.lift`?",
                    "createdAt": "2023-10-11T11:47:11Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QwfDN",
                    "body": "I can't find `CompleteLattice.lift`: am I being ridiculous?",
                    "createdAt": "2023-10-11T12:27:53Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QwhUX",
                    "body": "Maybe it's `Injective.completeLattice`?",
                    "createdAt": "2023-10-11T12:35:52Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QxMsw",
                    "body": "> Maybe it's `Injective.completeLattice`?\r\n\r\nAh yes (sorry I should have been able to guess that).\r\n\r\nUsing `Injective.completeLattice` does work but it seems to produce a `PartialOrder` instance that is syntactically inferior. To be precise, if we add:\r\n```lean\r\ntheorem sInf_coe_toSubmodule' (S : Set (LieSubmodule R L M)) :\r\n    (↑(sInf S) : Submodule R M) = ⨅ N ∈ S, (N : Submodule R M) :=\r\n  sorry\r\n\r\ntheorem sSup_coe_toSubmodule' (S : Set (LieSubmodule R L M)) :\r\n    (↑(sSup S) : Submodule R M) = ⨆ N ∈ S, (N : Submodule R M) :=\r\n  sorry\r\n```\r\nthen we can indeed define the `CompleteLattice` structure as you suggest:\r\n```lean\r\ninstance : CompleteLattice (LieSubmodule R L M) :=\r\n  LieSubmodule.coeSubmodule_injective.completeLattice toSubmodule\r\n    sup_coe_toSubmodule inf_coe_toSubmodule sSup_coe_toSubmodule' sInf_coe_toSubmodule' rfl rfl\r\n```\r\nHowever some (admittedly old, brittle) proofs lower down then break. I can illustrate the failures with the following example:\r\n```lean\r\nexample (m : M) (N₁ N₂ : LieSubmodule R L M) (hN : N₁ ≤ N₂) (hm : m ∈ N₁) : m ∈ N₂ := by\r\n  specialize hN hm\r\n  /- The above line produces `hN : m ∈ ↑N₂`, with an awkward coercion if we use\r\n  `Function.Injective.completeLattice` but the superior `hN : m ∈ N₂` if we do not -/\r\n  sorry\r\n```",
                    "createdAt": "2023-10-11T14:09:58Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QxQlk",
                    "body": "A good compromise is probably to combine `Injective.completeLattice` with the syntactically superior partial order instance?",
                    "createdAt": "2023-10-11T14:20:20Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QxXD_",
                    "body": "I see, the following works:\r\n```lean\r\ninstance : CompleteLattice (LieSubmodule R L M) :=\r\n  { coeSubmodule_injective.completeLattice toSubmodule sup_coe_toSubmodule inf_coe_toSubmodule\r\n      sSup_coe_toSubmodule' sInf_coe_toSubmodule' rfl rfl with\r\n    toPartialOrder := SetLike.instPartialOrder }\r\n```\r\nbut apparently we should avoid using `with` like this. How do I do that?",
                    "createdAt": "2023-10-11T14:36:48Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QxZOs",
                    "body": "I think using `with` here is fine; you've already addresse the main concern with `with` by using ` toPartialOrder := SetLike.instPartialOrder` instead of putting `SetLike.instPartialOrder` in the `with` too.",
                    "createdAt": "2023-10-11T14:41:56Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QyGG9",
                    "body": "OK I've done this; thanks for the suggestion.",
                    "createdAt": "2023-10-11T16:05:10Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5QwT0j",
                    "body": "style nit:\r\n```suggestion\r\ninstance : SupSet (LieSubmodule R L M) where\r\n  sSup S :=\r\n```\r\n(and drop the closing `⟩`)",
                    "createdAt": "2023-10-11T11:48:41Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QwcqP",
                    "body": "Thanks, better!",
                    "createdAt": "2023-10-11T12:19:37Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5QwUVU",
                    "body": "The primed version of this lemma is the more useful one, as it can be used with the `induction` tactic.",
                    "createdAt": "2023-10-11T11:49:44Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QxTfm",
                    "body": "OK I've added `iSup_induction'` now also.",
                    "createdAt": "2023-10-11T14:26:40Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5QwWcj",
                    "body": "Does this work?\r\n```suggestion\r\n        induction' s using Finset.cons_induction_on with q t hqt ih generalizing m\r\n```",
                    "createdAt": "2023-10-11T11:57:21Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QwcRz",
                    "body": "It does work but it's immediately less convenient, partly due to a lack of API for dealing with `iSup`s bounded by a disjunction. (The term `hsm` becomes `m ∈ ⨆ (i : Submodule R M) (_ : i = q ∨ i ∈ t), i` rather than `m ∈ ⨆ (i : Submodule R M) (_ : i ∈ insert q t), i` to which I can coveniently apply `Finset.iSup_insert`).",
                    "createdAt": "2023-10-11T12:18:21Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Q3Xto",
                    "body": "I tried to golf this by proving it in terms of the submodule version, but ran afoul of leanprover/lean4#1926",
                    "createdAt": "2023-10-12T11:42:58Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5Q9fp0",
                    "body": "Thank you for trying all the same!",
                    "createdAt": "2023-10-13T13:51:03Z",
                    "author": {
                      "login": "ocfnash"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjc3MzQzNjQ=",
              "login": "ocfnash"
            },
            {
              "id": "MDQ6VXNlcjQyNTI2MA==",
              "login": "eric-wieser"
            },
            {
              "id": "MDQ6VXNlcjU2MzY3MDU=",
              "login": "jcommelin"
            },
            {
              "id": "U_kgDOB75MNQ",
              "login": "leanprover-community-mathlib4-bot"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": null,
        "title": "[Merged by Bors] - chore: improve defeq for `Sup` and `sSup` of `LieSubmodule`s",
        "updatedAt": "2023-10-13T13:51:03Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/7608",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "db23493c02f3477dc0f69efcada6c9044be603d0"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5zXtbPzwAAAAJ4KJtN",
              "createdAt": "2023-10-10T15:01:23Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5zXtbPzwAAAAJ4KJtT",
              "createdAt": "2023-10-10T15:01:24Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5zXtbPzwAAAAJ4KJte",
              "createdAt": "2023-10-10T15:01:24Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJjTQ",
                "name": "t-algebra"
              }
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5Ozjri",
              "createdAt": "2023-10-10T15:03:16Z",
              "source": {
                "id": "PR_kwDOFcwZ1c5b6jj8",
                "title": "[Merged by Bors] - feat: various Lie algebra definitions / lemmas",
                "url": "https://github.com/leanprover-community/mathlib4/pull/7507"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "91e0031923bd3e7ea25f9cd054db45879e8ef8f7"
              }
            },
            {
              "__typename": "HeadRefForcePushedEvent",
              "id": "HRFPE_lADOFcwZ1c5zXtbPzwAAAAJ4N3YQ",
              "createdAt": "2023-10-10T16:23:29Z"
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5zXtbPzwAAAAJ4PZ-x",
              "createdAt": "2023-10-10T17:01:07Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5Oz4aM",
              "createdAt": "2023-10-10T20:20:05Z",
              "source": {
                "id": "PR_kwDOFcwZ1c5cbUqv",
                "title": "[Merged by Bors] - feat: a non-singular Killing form remains non-singular when restricted to a Cartan subalgebra",
                "url": "https://github.com/leanprover-community/mathlib4/pull/7613"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5jmRdE",
              "createdAt": "2023-10-11T11:47:10Z",
              "body": "",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5jmTJ-",
              "createdAt": "2023-10-11T11:48:41Z",
              "body": "",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5jmT6Y",
              "createdAt": "2023-10-11T11:49:44Z",
              "body": "",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5jmXQo",
              "createdAt": "2023-10-11T11:57:21Z",
              "body": "",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "3392c8065abf50b3c760ef18b5bd2413b0c2fcda"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "ac0680aaa72dca6647265750fa782c6327c85c49"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "4f03d489d65f9721e8fe99faeca0b4f4a38f988c"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5jxSj9",
              "createdAt": "2023-10-12T10:52:06Z",
              "body": "Thanks :tada:\r\n\r\nbors merge",
              "author": {
                "login": "jcommelin"
              }
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOB7kabM5O1-FH",
              "createdAt": "2023-10-12T10:52:09Z",
              "source": {
                "id": "I_kwDOB7kabM5YZdoY",
                "title": "`simp` not rewriting in binder",
                "url": "https://github.com/leanprover/lean4/issues/1926"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5zXtbPzwAAAAJ5mgrX",
              "createdAt": "2023-10-12T10:52:20Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
                "name": "ready-to-merge"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5zXtbPzwAAAAJ5mguR",
              "createdAt": "2023-10-12T10:52:21Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "UnsubscribedEvent"
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5jxmFd",
              "createdAt": "2023-10-12T11:42:58Z",
              "body": "",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5o4Dnw",
              "createdAt": "2023-10-12T12:33:40Z",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6494681437/job/17638096057)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6494681437/job/17638095463)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6494681437/job/17638095667)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c5zXtbPzwAAAAJ5qJx2",
              "createdAt": "2023-10-12T12:33:42Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c5zXtbPzwAAAAJ5qKQh",
              "createdAt": "2023-10-12T12:33:53Z"
            },
            {
              "__typename": "ReferencedEvent"
            }
          ]
        }
      }
    }
  }
}
