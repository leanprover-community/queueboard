{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 46,
        "assignees": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjIxMTY1NzA=",
              "login": "Vierkantor"
            }
          ]
        },
        "author": {
          "login": "darabos"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "Remove unnecessary \"rw\"s.\r\n\r\n---\r\n\r\nThis is a non-forked and updated version of https://github.com/leanprover-community/mathlib4/pull/10338. I figure if the proofs still work without these rewrites, then it's best if we remove them, right?\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 41,
        "closed": true,
        "closedAt": "2024-02-20T11:30:21Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c50Z1A8",
              "body": "> Impressive work! I hope you used some sort of automation for this, you didn't open up every file and go through every `rw` by hand, right?!\r\n\r\nHaha, no! We're working on a system (machine learning) where the unnecessary `rw`s manifested as errors. I thought this accidental detection may actually be useful for something.\r\n\r\n> I think we should slightly more careful in removing `rw` rules here: if the two sides happen to be definitionally equal according to `rfl`, we don't always have that `rw` sees this too. The latter is important if the context changes and we need to add an additional `rw` step. So I went through and suggested to revert every change where the two sides did not end up exactly the same (at least, the same as far as `rw` is concerned). On the other hand, it seems much easier to implement automation for trimming a `rw` set if the only criteria are that the proof still goes through. And maybe some types of definitional equalities are more acceptable than others, so I labeled each of the suggestions.\r\n> \r\n> What do you think?\r\n\r\nSorry, I'm too new to Lean to have an opinion on this. I implemented your suggested changes. Thanks for the careful review!",
              "createdAt": "2024-02-19T17:31:18Z",
              "author": {
                "login": "darabos"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c50d_fY",
              "body": "Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/7971736233/job/21762051598)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/7971736233/job/21762051901)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/7971736233/job/21762050744)",
              "createdAt": "2024-02-20T11:30:20Z",
              "author": {
                "login": "mathlib-bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "f636b356b7a7deb595b6304a1bd5a18974860fae",
                "additions": 84,
                "deletions": 91,
                "committedDate": "2024-02-18T21:01:53Z",
                "author": {
                  "name": "Daniel Darabos",
                  "email": "darabos.daniel@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "5350bd25bd5789e01af0cd04defb3564a8e3dda9",
                "additions": 29900,
                "deletions": 15780,
                "committedDate": "2024-02-18T21:32:14Z",
                "author": {
                  "name": "Daniel Darabos",
                  "email": "darabos.daniel@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFD3X1fg",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7961928871/job/21734225278"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFD3XyoA",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7961928866/job/21734224544"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFD3X2hw",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7961928869/job/21734225543"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFDcShgg",
                        "name": "Add annotations",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7951883276/job/21705826690"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFDcShjA",
                        "name": "label-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7951883279/job/21705826700"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFDcOkjw",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7951852477/job/21705761935"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFDcOlnw",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7951852475/job/21705762207"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFDcShhQ",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7951883278/job/21705826693"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFD3XxZA",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7961928871/job/21734224228"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFDcOlmw",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7951852477/job/21705762203"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFDcOmDQ",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7951852475/job/21705762317"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFDcShrA",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7951883278/job/21705826732"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFDcOk_A",
                        "name": "Check all files imported (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7951852477/job/21705762044"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFDcOkgA",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7951852475/job/21705761920"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFDcOmnw",
                        "name": "check workflows (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7951852477/job/21705762463"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFDcOk-A",
                        "name": "check workflows",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7951852475/job/21705762040"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFDcOmCg",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7951852477/job/21705762314"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFDcOmdA",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7951852475/job/21705762420"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFDcOm-A",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7951852477/job/21705762552"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFDdFmYw",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7951852475/job/21706663523"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFDcSz6Q",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/github/leanprover-community/repo/mathlib4/event-logs?pullRequestNumber=10704"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "0ec56bad17f2f13436516665b6d718b2dcd73fc5",
                "additions": 39,
                "deletions": 37,
                "committedDate": "2024-02-19T17:23:50Z",
                "author": {
                  "name": "Daniel Darabos",
                  "email": "darabos.daniel@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "646dfd9fdaf2ba94569a3e32f0b99bba89e5d004",
                "additions": 1,
                "deletions": 3,
                "committedDate": "2024-02-19T17:23:55Z",
                "author": {
                  "name": "Daniel Darabos",
                  "email": "darabos.daniel@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFEPiCYA",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7970930339/job/21759558240"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFEPiCQw",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7970930353/job/21759558211"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFD7XzdQ",
                        "name": "Add annotations",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7963245380/job/21738419061"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFD7Xw9g",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7963245063/job/21738418422"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFD-dEuA",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7963245058/job/21741651128"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFD7XzaQ",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7963245379/job/21738419049"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFEPiDfA",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7970930353/job/21759558524"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFD7Xydg",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7963245063/job/21738418806"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFD-dETA",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7963245058/job/21741651020"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFD7X0LA",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7963245379/job/21738419244"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFD7XxsA",
                        "name": "Check all files imported (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7963245063/job/21738418608"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFD-dFgA",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7963245058/job/21741651328"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFD7X0Eg",
                        "name": "check workflows (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7963245063/job/21738419218"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFD-dFHw",
                        "name": "check workflows",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7963245058/job/21741651231"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFD7XzOw",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7963245063/job/21738419003"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFD-dF3g",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7963245058/job/21741651422"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFD7X0zA",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7963245063/job/21738419404"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFEAF1LA",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7963245058/job/21743367468"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAFD7Ywew",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/github/leanprover-community/repo/mathlib4/event-logs?pullRequestNumber=10704"
                      },
                      {
                        "__typename": "StatusContext",
                        "id": "SC_kwDOFcwZ1c8AAAAGbaUcEQ",
                        "context": "bors",
                        "state": "SUCCESS",
                        "targetUrl": "https://mathlib-bors-ca18eefec4cb.herokuapp.com/batches/1716",
                        "description": "Build succeeded"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "createdAt": "2024-02-18T21:38:51Z",
        "deletions": 53,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/Algebra/Algebra/Operations.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Algebra/BigOperators/Basic.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Algebra/DirectSum/Algebra.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Algebra/GCDMonoid/Basic.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Algebra/Quandle.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Algebra/Regular/Basic.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/AlgebraicGeometry/OpenImmersion.lean",
              "additions": 1,
              "deletions": 2
            },
            {
              "path": "Mathlib/Analysis/BoxIntegral/Partition/Split.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Analysis/Fourier/RiemannLebesgueLemma.lean",
              "additions": 1,
              "deletions": 2
            },
            {
              "path": "Mathlib/Analysis/NormedSpace/ContinuousAffineMap.lean",
              "additions": 1,
              "deletions": 3
            },
            {
              "path": "Mathlib/Analysis/SpecialFunctions/Complex/Log.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/CategoryTheory/Localization/Composition.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Data/Int/Cast/Basic.lean",
              "additions": 3,
              "deletions": 3
            },
            {
              "path": "Mathlib/Data/List/Rotate.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Data/Num/Lemmas.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Data/PNat/Factors.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Data/Polynomial/Eval.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Data/Polynomial/Monic.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Data/Set/Card.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Init/Data/Nat/Bitwise.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/LinearAlgebra/AffineSpace/AffineSubspace.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/LinearAlgebra/Basis.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/LinearAlgebra/Dimension/Constructions.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Logic/Equiv/List.lean",
              "additions": 1,
              "deletions": 2
            },
            {
              "path": "Mathlib/Logic/Function/Basic.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/MeasureTheory/Group/AddCircle.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/MeasureTheory/Measure/OuterMeasure.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/MeasureTheory/Measure/VectorMeasure.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/NumberTheory/BernoulliPolynomials.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/NumberTheory/DiophantineApproximation.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/NumberTheory/NumberField/Embeddings.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/NumberTheory/RamificationInertia.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Order/OmegaCompletePartialOrder.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Order/SymmDiff.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/RingTheory/DedekindDomain/Ideal.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/RingTheory/IsTensorProduct.lean",
              "additions": 1,
              "deletions": 2
            },
            {
              "path": "Mathlib/RingTheory/Norm.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/RingTheory/Polynomial/Cyclotomic/Expand.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/RingTheory/Polynomial/Pochhammer.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/RingTheory/Trace.lean",
              "additions": 1,
              "deletions": 2
            },
            {
              "path": "Mathlib/SetTheory/Ordinal/Notation.lean",
              "additions": 1,
              "deletions": 1
            }
          ]
        },
        "headRefName": "darabos-unnecessary-rws",
        "headRefOid": "646dfd9fdaf2ba94569a3e32f0b99bba89e5d004",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5nOdPX",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
              "color": "06e039",
              "name": "ready-to-merge"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5wpKLC",
              "body": "Thanks! I really appreciate the time you took to deal with these little annoyances.\r\n\r\nbors r+",
              "state": "APPROVED",
              "author": {
                "login": "Vierkantor"
              },
              "submittedAt": "2024-02-20T09:06:06Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 10704,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": "APPROVED",
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5wkMon",
              "body": "Impressive work! I hope you used some sort of automation for this, you didn't open up every file and go through every `rw` by hand, right?!\r\n\r\nI think we should slightly more careful in removing `rw` rules here: if the two sides happen to be definitionally equal according to `rfl`, we don't always have that `rw` sees this too. The latter is important if the context changes and we need to add an additional `rw` step. So I went through and suggested to revert every change where the two sides did not end up exactly the same (at least, the same as far as `rw` is concerned). On the other hand, it seems much easier to implement automation for trimming a `rw` set if the only criteria are that the proof still goes through. And maybe some types of definitional equalities are more acceptable than others, so I labeled each of the suggestions.\r\n\r\nWhat do you think?",
              "state": "COMMENTED",
              "author": {
                "login": "Vierkantor"
              },
              "submittedAt": "2024-02-19T15:31:24Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5wpKLC",
              "body": "Thanks! I really appreciate the time you took to deal with these little annoyances.\r\n\r\nbors r+",
              "state": "APPROVED",
              "author": {
                "login": "Vierkantor"
              },
              "submittedAt": "2024-02-20T09:06:06Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZFipK",
                    "body": "Closing this goal requires reducing the same projection as `Subtype.coe_mk` does, so let's keep it:\r\n```suggestion\r\n  rw [decompose_of_mem _ hx, DirectSum.of_eq_same, Subtype.coe_mk]\r\n```",
                    "createdAt": "2024-02-19T14:24:32Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZFjVD",
                    "body": "This is another projection reduction that I would like to keep:\r\n```suggestion\r\n    ← eq_intCast (algebraMap ℤ K) _, Basis.restrictScalars_repr_apply, coe_mk]\r\n```",
                    "createdAt": "2024-02-19T14:26:29Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZFjg-",
                    "body": "idem:\r\n```suggestion\r\n      rw [decomposeAux_single, DirectSum.coeAlgHom_of, Subtype.coe_mk])\r\n```",
                    "createdAt": "2024-02-19T14:27:03Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZFkBA",
                    "body": "idem:\r\n```suggestion\r\n      IsLocalization.mk'_eq_of_eq (by rw [mul_comm, Subtype.coe_mk, ← h, mul_comm, Subtype.coe_mk])\r\n```",
                    "createdAt": "2024-02-19T14:28:39Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZFkJG",
                    "body": "idem:\r\n```suggestion\r\n  rw [Fin.ext_iff, Fin.coe_castLE, Composition.ones_embedding, Fin.val_mk]\r\n```",
                    "createdAt": "2024-02-19T14:29:03Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZFkTf",
                    "body": "(This projection reduction is legitimately unneeded!)",
                    "createdAt": "2024-02-19T14:29:33Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZFkyi",
                    "body": "```suggestion\r\n    rw [gaugeSeminormFamily_ball, Subtype.coe_mk]\r\n```",
                    "createdAt": "2024-02-19T14:30:46Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZFlvh",
                    "body": "In fact we can do one better and solve the porting note here. GitHub unfortunately doesn't allow me to make a suggestion, so please replace line 263 (porting note)-265 (rw) with this one:\r\n```lean\r\n    simp only [coe_add, ContinuousLinearMap.coe_toContinuousAffineMap, Pi.add_apply, coe_const]\r\n```\r\n(The line could even be a `simp` by itself, but that's a big change for a part of the library I'm not familiar with.)",
                    "createdAt": "2024-02-19T14:33:47Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZFmHZ",
                    "body": "```suggestion\r\n  rw [log_of_ne_zero hx, ← coe_expOrderIso_apply, OrderIso.apply_symm_apply, Subtype.coe_mk]\r\n```",
                    "createdAt": "2024-02-19T14:35:00Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZFnYd",
                    "body": "This is solved by reduction of natural number multiplication. I think we should not expect `rw` to deal with that.\r\n```suggestion\r\n    have aux' : 2 * n.succ = 2 * n + 2 := by rw [Nat.succ_eq_add_one, mul_add, mul_one]\r\n```",
                    "createdAt": "2024-02-19T14:38:15Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZFnnk",
                    "body": "```suggestion\r\n    rw [l.apply_none _ _ hi.right, Subtype.coe_mk]\r\n```",
                    "createdAt": "2024-02-19T14:38:57Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZFn1D",
                    "body": "Natural number reduction:\r\n```suggestion\r\n    · rw [Ico_eq_empty fun h' => h h'.le, Icc_eq_empty h, card_empty, zero_tsub]\r\n```",
                    "createdAt": "2024-02-19T14:39:40Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZFn4W",
                    "body": "```suggestion\r\n    · rw [Ioo_eq_empty h, Ico_eq_empty h, card_empty, zero_tsub]\r\n```",
                    "createdAt": "2024-02-19T14:39:47Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZFoSV",
                    "body": "Natural number reduction:\r\n```suggestion\r\n    rw [this, bit_false, bit0_val, hn fun i => by rw [← h (i + 1), testBit_bit_succ], mul_zero]\r\n```",
                    "createdAt": "2024-02-19T14:41:00Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZFohJ",
                    "body": "This is unfolding the definition of `+`.\r\n```suggestion\r\n  funext fun k => by rw [hyperoperation, Nat.succ_eq_add_one]\r\n```",
                    "createdAt": "2024-02-19T14:41:42Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZFopp",
                    "body": "Natural number reduction:\r\n```suggestion\r\n  · rw [log_of_left_le_one hb, log_of_left_le_one hb, Nat.zero_sub]\r\n```",
                    "createdAt": "2024-02-19T14:42:06Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZFriu",
                    "body": "Natural number reduction:\r\n```suggestion\r\n  · rw [hp, zero_mul, natDegree_zero, mul_zero]\r\n```",
                    "createdAt": "2024-02-19T14:49:02Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZFrmM",
                    "body": "Natural number reduction:\r\n```suggestion\r\n  · rw [hp, zero_mul, natTrailingDegree_zero, mul_zero]\r\n```",
                    "createdAt": "2024-02-19T14:49:13Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZFsWN",
                    "body": "Structure projection:\r\n```suggestion\r\n    ⟨x, x.2, by rw [hfg, hx, Subtype.coe_mk]⟩⟩\r\n```",
                    "createdAt": "2024-02-19T14:51:14Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZFt2R",
                    "body": "Structure projection:\r\n```suggestion\r\n  · rw [IntermediateField.minpoly_eq, Subtype.coe_mk]\r\n```",
                    "createdAt": "2024-02-19T14:55:28Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZFu-H",
                    "body": "Structure projection:\r\n```suggestion\r\n  rw [Equiv.symm_apply_eq, finEquivPowers_apply, Subtype.mk_eq_mk, ← pow_mod_orderOf, Fin.val_mk]\r\n```",
                    "createdAt": "2024-02-19T14:58:31Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZFvPq",
                    "body": "Definition of `+`:\r\n```suggestion\r\n      rw [hl, Nat.mod_eq_of_lt hk', h1, ← Nat.add_mod, Nat.succ_add, Nat.succ_eq_add_one]\r\n```",
                    "createdAt": "2024-02-19T14:59:23Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZFvae",
                    "body": "Structure projection:\r\n```suggestion\r\n      rw [ofInjective_apply, Subtype.coe_mk, Subtype.coe_mk]\r\n```",
                    "createdAt": "2024-02-19T14:59:57Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZFvga",
                    "body": "Structure projection:\r\n```suggestion\r\n        rw [extendDomain_apply_subtype _ _ pb, h, apply_symm_apply, Subtype.coe_mk]\r\n```",
                    "createdAt": "2024-02-19T15:00:14Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZFv-N",
                    "body": "These are two tricky cases because in fact before and after the two sides don't look quite the same. So it doesn't hurt to delete these `rw` rules.",
                    "createdAt": "2024-02-19T15:01:45Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZFxIq",
                    "body": "Structure projection:\r\n```suggestion\r\n      rw [lift_ι_apply, GradedAlgebra.ι_apply Q, DirectSum.coeAlgHom_of, Subtype.coe_mk])\r\n```",
                    "createdAt": "2024-02-19T15:04:43Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZFx64",
                    "body": "Structure projection:\r\n```suggestion\r\n      rw [lift_ι_apply, GradedAlgebra.ι_apply R M, DirectSum.coeAlgHom_of, Subtype.coe_mk])\r\n```",
                    "createdAt": "2024-02-19T15:06:58Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZFybP",
                    "body": "Definition of `+` (here I'd go for the other direction, `succ n = n + 1`):\r\n```suggestion\r\n        LinearMap.mul_eq_comp, LinearMap.mul_eq_comp, LinearMap.ker_comp, LinearMap.ker_comp, h,\r\n        Nat.succ_eq_add_one]\r\n```",
                    "createdAt": "2024-02-19T15:08:35Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZFy5K",
                    "body": "Structure projection:\r\n```suggestion\r\n    rw [add_right_comm (x _), hxy, add_assoc, hxy, coe_mk, coe_mk]\r\n```",
                    "createdAt": "2024-02-19T15:10:09Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZFzOM",
                    "body": "Structure projection:\r\n```suggestion\r\n      rw [lift_ι_apply, GradedAlgebra.ι_apply R M, DirectSum.coeAlgHom_of, Subtype.coe_mk])\r\n```",
                    "createdAt": "2024-02-19T15:11:09Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZF1Gb",
                    "body": "Structure eta (more or less the opposite of structure projection reduction):\r\n```suggestion\r\n        rw [get_finRange, Fin.eta]\r\n```",
                    "createdAt": "2024-02-19T15:14:50Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZF2hI",
                    "body": "Structure projection:\r\n```suggestion\r\n      rw [Submonoid.coe_one, map_one, mul_one, PadicInt.algebraMap_apply, Subtype.coe_mk]\r\n```",
                    "createdAt": "2024-02-19T15:18:31Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZF4Hz",
                    "body": "Structure projection:\r\n```suggestion\r\n        rw [h.basis_apply, Fin.val_mk]\r\n```",
                    "createdAt": "2024-02-19T15:22:18Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZF4XJ",
                    "body": "Structure projection:\r\n```suggestion\r\n      _ = Pi.single (f := fun _ => R) n 1 i := by rw [Fin.val_mk, Fin.val_mk]\r\n```\r\nor alternatively:\r\n```suggestion\r\n      _ = Pi.single (f := fun _ => R) n 1 i := rfl\r\n```",
                    "createdAt": "2024-02-19T15:22:40Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZF66s",
                    "body": "Structure projection:\r\n```suggestion\r\n      dsimp; rw [Multiset.map_replicate, Multiset.prod_replicate, Subtype.coe_mk])\r\n```",
                    "createdAt": "2024-02-19T15:26:20Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZF7NH",
                    "body": "Structure eta:\r\n```suggestion\r\n  rw [out]; dsimp only; rw [dif_pos i.is_lt, Fin.eta]\r\n```",
                    "createdAt": "2024-02-19T15:27:16Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZF7SH",
                    "body": "Structure projection:\r\n```suggestion\r\n  rw [coeff_truncateFun, Fin.val_mk]\r\n```",
                    "createdAt": "2024-02-19T15:27:30Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5ZF8RW",
                    "body": "Structure projection:\r\n```suggestion\r\n      have ihi_eq : (⟨i, hi⟩ : Fin (N q)) = (E q) ⟨y, ys⟩ := by rw [Fin.ext_iff, Fin.val_mk]\r\n```",
                    "createdAt": "2024-02-19T15:30:43Z",
                    "author": {
                      "login": "Vierkantor"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjEyNjgwMTg=",
              "login": "darabos"
            },
            {
              "id": "MDQ6VXNlcjIxMTY1NzA=",
              "login": "Vierkantor"
            },
            {
              "id": "U_kgDOB75MNQ",
              "login": "leanprover-community-mathlib4-bot"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAFEPiCYA",
                "name": "Ping maintainers on Zulip",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7970930339/job/21759558240"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAFEPiCQw",
                "name": "Add ready-to-merge label",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7970930353/job/21759558211"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAFD7XzdQ",
                "name": "Add annotations",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7963245380/job/21738419061"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAFD7Xw9g",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7963245063/job/21738418422"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAFD-dEuA",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7963245058/job/21741651128"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAFD7XzaQ",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7963245379/job/21738419049"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAFEPiDfA",
                "name": "Add delegated label",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7970930353/job/21759558524"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAFD7Xydg",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7963245063/job/21738418806"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAFD-dETA",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7963245058/job/21741651020"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAFD7X0LA",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7963245379/job/21738419244"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAFD7XxsA",
                "name": "Check all files imported (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7963245063/job/21738418608"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAFD-dFgA",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7963245058/job/21741651328"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAFD7X0Eg",
                "name": "check workflows (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7963245063/job/21738419218"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAFD-dFHw",
                "name": "check workflows",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7963245058/job/21741651231"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAFD7XzOw",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7963245063/job/21738419003"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAFD-dF3g",
                "name": "Build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7963245058/job/21741651422"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAFD7X0zA",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7963245063/job/21738419404"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAFEAF1LA",
                "name": "Post-CI job",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/7963245058/job/21743367468"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAFD7Ywew",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/github/leanprover-community/repo/mathlib4/event-logs?pullRequestNumber=10704"
              },
              {
                "__typename": "StatusContext",
                "id": "SC_kwDOFcwZ1c8AAAAGbaUcEQ",
                "context": "bors",
                "state": "SUCCESS",
                "targetUrl": "https://mathlib-bors-ca18eefec4cb.herokuapp.com/batches/1716",
                "description": "Build succeeded"
              }
            ]
          }
        },
        "title": "[Merged by Bors] - chore: Remove unnecessary \"rw\"s",
        "updatedAt": "2024-02-20T11:30:26Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/10704",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5Q7CUu",
              "createdAt": "2024-02-18T21:40:25Z",
              "source": {
                "id": "PR_kwDOFcwZ1c5mSjEX",
                "title": "Remove two unnecessary rws",
                "url": "https://github.com/leanprover-community/mathlib4/pull/10338"
              }
            },
            {
              "__typename": "AssignedEvent",
              "id": "AE_lADOFcwZ1c5_oBNPzwAAAALCT4qc",
              "createdAt": "2024-02-19T13:46:31Z",
              "assignee": {
                "id": "MDQ6VXNlcjIxMTY1NzA=",
                "login": "Vierkantor"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5_oBNPzwAAAALCT5KC",
              "createdAt": "2024-02-19T13:46:41Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5wkMon",
              "createdAt": "2024-02-19T14:24:32Z",
              "body": "Impressive work! I hope you used some sort of automation for this, you didn't open up every file and go through every `rw` by hand, right?!\r\n\r\nI think we should slightly more careful in removing `rw` rules here: if the two sides happen to be definitionally equal according to `rfl`, we don't always have that `rw` sees this too. The latter is important if the context changes and we need to add an additional `rw` step. So I went through and suggested to revert every change where the two sides did not end up exactly the same (at least, the same as far as `rw` is concerned). On the other hand, it seems much easier to implement automation for trimming a `rw` set if the only criteria are that the proof still goes through. And maybe some types of definitional equalities are more acceptable than others, so I labeled each of the suggestions.\r\n\r\nWhat do you think?",
              "author": {
                "login": "Vierkantor"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5_oBNPzwAAAALCZYpp",
              "createdAt": "2024-02-19T15:31:35Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5_oBNPzwAAAALCZYp8",
              "createdAt": "2024-02-19T15:31:35Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c50Z1A8",
              "createdAt": "2024-02-19T17:31:18Z",
              "body": "> Impressive work! I hope you used some sort of automation for this, you didn't open up every file and go through every `rw` by hand, right?!\r\n\r\nHaha, no! We're working on a system (machine learning) where the unnecessary `rw`s manifested as errors. I thought this accidental detection may actually be useful for something.\r\n\r\n> I think we should slightly more careful in removing `rw` rules here: if the two sides happen to be definitionally equal according to `rfl`, we don't always have that `rw` sees this too. The latter is important if the context changes and we need to add an additional `rw` step. So I went through and suggested to revert every change where the two sides did not end up exactly the same (at least, the same as far as `rw` is concerned). On the other hand, it seems much easier to implement automation for trimming a `rw` set if the only criteria are that the proof still goes through. And maybe some types of definitional equalities are more acceptable than others, so I labeled each of the suggestions.\r\n> \r\n> What do you think?\r\n\r\nSorry, I'm too new to Lean to have an opinion on this. I implemented your suggested changes. Thanks for the careful review!",
              "author": {
                "login": "darabos"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5wpKLC",
              "createdAt": "2024-02-20T09:06:06Z",
              "body": "Thanks! I really appreciate the time you took to deal with these little annoyances.\r\n\r\nbors r+",
              "author": {
                "login": "Vierkantor"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5_oBNPzwAAAALC1RtD",
              "createdAt": "2024-02-20T09:06:18Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
                "name": "ready-to-merge"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5_oBNPzwAAAALC1RwJ",
              "createdAt": "2024-02-20T09:06:19Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c50d_fY",
              "createdAt": "2024-02-20T11:30:20Z",
              "body": "Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/7971736233/job/21762051598)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/7971736233/job/21762051901)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/7971736233/job/21762050744)",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c5_oBNPzwAAAALC7-_e",
              "createdAt": "2024-02-20T11:30:21Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c5_oBNPzwAAAALC7_Ne",
              "createdAt": "2024-02-20T11:30:26Z"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "ReferencedEvent"
            }
          ]
        }
      }
    }
  }
}
