{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 65,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "sgouezel"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 15,
        "closed": true,
        "closedAt": "2023-10-31T19:24:26Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5qddBL",
              "body": "Should this also do the reverse? where `push_neg` of `not (s = emptyset)` becomes `Set.Nonempty s`?",
              "createdAt": "2023-10-30T21:53:21Z",
              "author": {
                "login": "kmill"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qdmIt",
              "body": "To get the opposite behavior too, here's what you can replace the `Eq` case with:\r\n```lean\r\n  | (``Eq, #[ty, e₁, e₂]) =>\r\n      if ty.isAppOfArity ``Set 1\r\n          && e₂.isAppOfArity ``EmptyCollection.emptyCollection 2 then\r\n        let thm ← mkAppM ``ne_empty_eq_nonempty #[e₁]\r\n        let some (_, _, rhs) := (← inferType thm).eq? | return none\r\n        return mkSimpStep rhs thm\r\n      else\r\n        return Simp.Step.visit { expr := ← mkAppM ``Ne #[e₁, e₂] }\r\n```\r\nIt needs this extra theorem:\r\n```lean\r\ntheorem ne_empty_eq_nonempty (s : Set γ) : (s ≠ ∅) = s.Nonempty := by\r\n  rw [ne_eq, ← not_nonempty_eq s, not_not]\r\n```\r\nHere are a couple extra tests:\r\n```lean\r\nexample (s : Set α) (h : ¬ s = ∅) : s.Nonempty := by\r\n  push_neg at h\r\n  exact h\r\n\r\nexample (s : Set α) (h : s ≠ ∅) : s.Nonempty := by\r\n  push_neg at h\r\n  exact h\r\n```",
              "createdAt": "2023-10-30T22:27:33Z",
              "author": {
                "login": "kmill"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qfsKG",
              "body": "Good idea, thanks a lot for the idea and the implementation!",
              "createdAt": "2023-10-31T07:59:51Z",
              "author": {
                "login": "sgouezel"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qjgPr",
              "body": "Thanks!\r\n\r\nbors r+",
              "createdAt": "2023-10-31T17:45:14Z",
              "author": {
                "login": "kmill"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5qkP5k",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6710699445/job/18236470348)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6710699445/job/18236469536)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6710699445/job/18236470092)",
              "createdAt": "2023-10-31T19:24:25Z",
              "author": {
                "login": "bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "655f061f14a93fa2200f82517d76fa69c37b1f64",
                "additions": 25,
                "deletions": 10,
                "committedDate": "2023-10-28T10:12:48Z",
                "author": {
                  "name": "sgouezel",
                  "email": "sebastien.gouezel@univ-rennes1.fr"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "884027ef278d766a34206415f6cef14b063354bb",
                "additions": 2,
                "deletions": 4,
                "committedDate": "2023-10-28T10:31:06Z",
                "author": {
                  "name": "sgouezel",
                  "email": "sebastien.gouezel@univ-rennes1.fr"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "7357a6c00ad7f005c94b2045d2e3339397b5aedc",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-10-28T11:09:39Z",
                "author": {
                  "name": "sgouezel",
                  "email": "sebastien.gouezel@univ-rennes1.fr"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "3daa20a6822421bbd225c1e845e91ba7087df20b",
                "additions": 0,
                "deletions": 1,
                "committedDate": "2023-10-28T11:40:58Z",
                "author": {
                  "name": "sgouezel",
                  "email": "sebastien.gouezel@univ-rennes1.fr"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "a04562c6e0844b5c305c2b20bc5a099e8b011953",
                "additions": 3,
                "deletions": 2,
                "committedDate": "2023-10-28T12:43:28Z",
                "author": {
                  "name": "sgouezel",
                  "email": "sebastien.gouezel@univ-rennes1.fr"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "374cef0ed9e0625c70f08311a4970c93644859a4",
                "additions": 2,
                "deletions": 4,
                "committedDate": "2023-10-28T13:15:22Z",
                "author": {
                  "name": "sgouezel",
                  "email": "sebastien.gouezel@univ-rennes1.fr"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "b56c086a2ff9899cc23bb448f057b01533909952",
                "additions": 3,
                "deletions": 4,
                "committedDate": "2023-10-28T13:21:50Z",
                "author": {
                  "name": "sgouezel",
                  "email": "sebastien.gouezel@univ-rennes1.fr"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "cdc231eba03ba1bbbfbb22d45d0e379d0918a4bf",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-10-28T14:36:58Z",
                "author": {
                  "name": "sgouezel",
                  "email": "sebastien.gouezel@univ-rennes1.fr"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "8b98e2352d5881548609fadf2a290fca6a831530",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-10-28T14:57:28Z",
                "author": {
                  "name": "sgouezel",
                  "email": "sebastien.gouezel@univ-rennes1.fr"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "0d0a0e4e5f05ffdcca51a4884f13cfcee6c59c0f",
                "additions": 3,
                "deletions": 2,
                "committedDate": "2023-10-30T20:04:05Z",
                "author": {
                  "name": "sgouezel",
                  "email": "sebastien.gouezel@univ-rennes1.fr"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "77819e0ecef869f9f46405685df040a0835dd973",
                "additions": 0,
                "deletions": 1,
                "committedDate": "2023-10-30T20:05:30Z",
                "author": {
                  "name": "sgouezel",
                  "email": "sebastien.gouezel@univ-rennes1.fr"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "75f7f44860d13919c5d231fd50f6367325e706db",
                "additions": 35,
                "deletions": 2,
                "committedDate": "2023-10-31T07:49:55Z",
                "author": {
                  "name": "sgouezel",
                  "email": "sebastien.gouezel@univ-rennes1.fr"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "e587bd74119101e42cde02952ac402edc801f7d6",
                "additions": 2,
                "deletions": 4,
                "committedDate": "2023-10-31T09:10:53Z",
                "author": {
                  "name": "sgouezel",
                  "email": "sebastien.gouezel@univ-rennes1.fr"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "096f9c92d21dca62525824f69568cbcbf6764ece",
                "additions": 2,
                "deletions": 2,
                "committedDate": "2023-10-31T09:53:57Z",
                "author": {
                  "name": "sgouezel",
                  "email": "sebastien.gouezel@univ-rennes1.fr"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "92d4d7dbad81fde9f88c7be243cb2c6ba8dc7b79",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-10-31T15:33:32Z",
                "author": {
                  "name": "sgouezel",
                  "email": "sebastien.gouezel@univ-rennes1.fr"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "1477677b33cc336201e0e96c6310149e948d5615",
                "additions": 9,
                "deletions": 11,
                "committedDate": "2023-10-31T17:44:14Z",
                "author": {
                  "name": "Kyle Miller",
                  "email": "kmill31415@gmail.com"
                },
                "statusCheckRollup": null
              }
            }
          ]
        },
        "createdAt": "2023-10-28T15:14:57Z",
        "deletions": 26,
        "files": {
          "nodes": [
            {
              "path": "Counterexamples/Phillips.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/AlgebraicGeometry/PrimeSpectrum/Basic.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Analysis/Convex/StoneSeparation.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Analysis/LocallyConvex/BalancedCoreHull.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Data/Set/Basic.lean",
              "additions": 0,
              "deletions": 8
            },
            {
              "path": "Mathlib/Init/Set.lean",
              "additions": 7,
              "deletions": 0
            },
            {
              "path": "Mathlib/MeasureTheory/Covering/Vitali.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/MeasureTheory/Measure/MeasureSpace.lean",
              "additions": 2,
              "deletions": 4
            },
            {
              "path": "Mathlib/Order/ConditionallyCompleteLattice/Basic.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Tactic/PushNeg.lean",
              "additions": 30,
              "deletions": 1
            },
            {
              "path": "Mathlib/Topology/Algebra/Order/LiminfLimsup.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Topology/Compactness/Compact.lean",
              "additions": 2,
              "deletions": 2
            },
            {
              "path": "Mathlib/Topology/Connected/Basic.lean",
              "additions": 0,
              "deletions": 3
            },
            {
              "path": "Mathlib/Topology/ExtremallyDisconnected.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "test/push_neg.lean",
              "additions": 16,
              "deletions": 0
            }
          ]
        },
        "headRefName": "SG_push_neg",
        "headRefOid": "1477677b33cc336201e0e96c6310149e948d5615",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5eB_Aw",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
              "color": "06e039",
              "name": "ready-to-merge"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABKAKYew",
              "color": "33DBEC",
              "name": "t-meta"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5lnzrK",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kmill"
              },
              "submittedAt": "2023-10-30T19:42:22Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5ljz0i",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-10-30T11:39:52Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 8000,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5lf53Z",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-10-28T23:36:20Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5lgDrK",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "sgouezel"
              },
              "submittedAt": "2023-10-29T06:31:41Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5lge-a",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-10-29T18:00:14Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5lif7e",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "sgouezel"
              },
              "submittedAt": "2023-10-30T08:37:21Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5ljzOt",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-10-30T11:38:25Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5ljz0i",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-10-30T11:39:52Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5lkBwh",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "sgouezel"
              },
              "submittedAt": "2023-10-30T12:07:20Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5lnzrK",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "kmill"
              },
              "submittedAt": "2023-10-30T19:42:22Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5R-fCn",
                    "body": "Why can't we use the existing `not_nonempty_iff_eq_empty` lemma here?",
                    "createdAt": "2023-10-28T23:36:20Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5R-pcy",
                    "body": "Because of the import order: `not_nonempty_iff_eq_empty` is in a file which imports `PushNeg`. Instead of trying to shuffle everything around, I moved as little as possible to the file `Init.Set` (only the definition of `Set.Nonempty`) and went for a direct proof here.",
                    "createdAt": "2023-10-29T06:31:41Z",
                    "author": {
                      "login": "sgouezel"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5R_DZT",
                    "body": "Should we just move the existig lemma then, since it has basically the same statement?",
                    "createdAt": "2023-10-29T18:00:14Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SAdAp",
                    "body": "The existing lemma has a natural one-liner proof, while the one here is unnatural because the theory hasn't been built yet. I'm more thinking of the lemma `not_nonempty_eq` as an artifact which is necessary for `push_neg` but doesn't really take part in theory building, and keep things as they are currently.",
                    "createdAt": "2023-10-30T08:37:21Z",
                    "author": {
                      "login": "sgouezel"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SBQ-L",
                    "body": "Can we instead add some kind of `push_neg` extension so that this can go in an appropriate file? I feel like we'll want that anyway to add the analogous behavior for `not (Finset.Nonempty s)`, but likely won't have the luxury of being able to import it at all...",
                    "createdAt": "2023-10-30T11:38:25Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SBRVN",
                    "body": "`Not (Nontrivial X)` and `Not (Nonempty X)` seem like other good candidates, which may or may not be easy to add into this file without an extension mechanism.",
                    "createdAt": "2023-10-30T11:39:52Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SBYnv",
                    "body": "An extension mechanism would definitely be even better, but this is out of my pay grade: the goal of the PR is just for this single case that I've encountered several times before, while the other ones have never bitten me.",
                    "createdAt": "2023-10-30T12:07:20Z",
                    "author": {
                      "login": "sgouezel"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5SDyVo",
                    "body": "I think it's nice when meta code states its own theorems, since that protects itself from future changes to mathlib (this is a place where we otherwise rely entirely on tests -- the meta code doesn't have any compile-time typechecking for referenced theorems).\r\n\r\nRegarding extension mechanisms, I don't think it's worth it if we're only going to add a handful of things to `push_neg`. The cost of maintaining an extension mechanism is significantly higher than adding occasional extra cases in the code, even if it involves duplicating a bit of code (and this is only three lines, so I think we're doing alright). Or, let's not add hooks ahead of actually needing them.\r\n\r\n@sgouezel Could you remove the `variable {γ : Type v}`? We have `autoImplicits` on in this file so you don't need it.",
                    "createdAt": "2023-10-30T19:42:16Z",
                    "author": {
                      "login": "kmill"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5SDw49",
                    "body": "We can get the RHS from the theorem's type, rather than by synthesizing a RHS ourselves.\r\n```suggestion\r\n  | (``Set.Nonempty, #[_ty, e]) =>\r\n      let thm ← mkAppM ``not_nonempty_eq #[e]\r\n      let some (_, _, rhs) := (← inferType thm).eq? | return none\r\n      return mkSimpStep rhs thm\r\n```",
                    "createdAt": "2023-10-30T19:35:31Z",
                    "author": {
                      "login": "kmill"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjEwODE4NDM0",
              "login": "sgouezel"
            },
            {
              "id": "MDQ6VXNlcjIzNTMwNw==",
              "login": "kmill"
            },
            {
              "id": "MDQ6VXNlcjQyNTI2MA==",
              "login": "eric-wieser"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": null,
        "title": "[Merged by Bors] - feat: let `push_neg` replace `not (Set.Nonempty s)` with `s = emptyset`",
        "updatedAt": "2023-10-31T19:24:29Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/8000",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "655f061f14a93fa2200f82517d76fa69c37b1f64"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "884027ef278d766a34206415f6cef14b063354bb"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "7357a6c00ad7f005c94b2045d2e3339397b5aedc"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "3daa20a6822421bbd225c1e845e91ba7087df20b"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "a04562c6e0844b5c305c2b20bc5a099e8b011953"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "374cef0ed9e0625c70f08311a4970c93644859a4"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "b56c086a2ff9899cc23bb448f057b01533909952"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "cdc231eba03ba1bbbfbb22d45d0e379d0918a4bf"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "8b98e2352d5881548609fadf2a290fca6a831530"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c51OHDizwAAAAKDnQBH",
              "createdAt": "2023-10-28T15:14:57Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c51OHDizwAAAAKDnQBI",
              "createdAt": "2023-10-28T15:14:57Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKAKYew",
                "name": "t-meta"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5lf53Z",
              "createdAt": "2023-10-28T23:36:20Z",
              "body": "",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5lnzrK",
              "createdAt": "2023-10-30T19:35:31Z",
              "body": "",
              "author": {
                "login": "kmill"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "0d0a0e4e5f05ffdcca51a4884f13cfcee6c59c0f"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "77819e0ecef869f9f46405685df040a0835dd973"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qddBL",
              "createdAt": "2023-10-30T21:53:21Z",
              "body": "Should this also do the reverse? where `push_neg` of `not (s = emptyset)` becomes `Set.Nonempty s`?",
              "author": {
                "login": "kmill"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qdmIt",
              "createdAt": "2023-10-30T22:27:33Z",
              "body": "To get the opposite behavior too, here's what you can replace the `Eq` case with:\r\n```lean\r\n  | (``Eq, #[ty, e₁, e₂]) =>\r\n      if ty.isAppOfArity ``Set 1\r\n          && e₂.isAppOfArity ``EmptyCollection.emptyCollection 2 then\r\n        let thm ← mkAppM ``ne_empty_eq_nonempty #[e₁]\r\n        let some (_, _, rhs) := (← inferType thm).eq? | return none\r\n        return mkSimpStep rhs thm\r\n      else\r\n        return Simp.Step.visit { expr := ← mkAppM ``Ne #[e₁, e₂] }\r\n```\r\nIt needs this extra theorem:\r\n```lean\r\ntheorem ne_empty_eq_nonempty (s : Set γ) : (s ≠ ∅) = s.Nonempty := by\r\n  rw [ne_eq, ← not_nonempty_eq s, not_not]\r\n```\r\nHere are a couple extra tests:\r\n```lean\r\nexample (s : Set α) (h : ¬ s = ∅) : s.Nonempty := by\r\n  push_neg at h\r\n  exact h\r\n\r\nexample (s : Set α) (h : s ≠ ∅) : s.Nonempty := by\r\n  push_neg at h\r\n  exact h\r\n```",
              "author": {
                "login": "kmill"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "75f7f44860d13919c5d231fd50f6367325e706db"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qfsKG",
              "createdAt": "2023-10-31T07:59:51Z",
              "body": "Good idea, thanks a lot for the idea and the implementation!",
              "author": {
                "login": "sgouezel"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "e587bd74119101e42cde02952ac402edc801f7d6"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "096f9c92d21dca62525824f69568cbcbf6764ece"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "92d4d7dbad81fde9f88c7be243cb2c6ba8dc7b79"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "1477677b33cc336201e0e96c6310149e948d5615"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qjgPr",
              "createdAt": "2023-10-31T17:45:14Z",
              "body": "Thanks!\r\n\r\nbors r+",
              "author": {
                "login": "kmill"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c51OHDizwAAAAKFLBY8",
              "createdAt": "2023-10-31T17:45:30Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
                "name": "ready-to-merge"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c51OHDizwAAAAKFLBdN",
              "createdAt": "2023-10-31T17:45:31Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "UnsubscribedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5qkP5k",
              "createdAt": "2023-10-31T19:24:25Z",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6710699445/job/18236470348)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6710699445/job/18236469536)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6710699445/job/18236470092)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c51OHDizwAAAAKFOtUf",
              "createdAt": "2023-10-31T19:24:26Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c51OHDizwAAAAKFOtdM",
              "createdAt": "2023-10-31T19:24:29Z"
            },
            {
              "__typename": "ReferencedEvent"
            }
          ]
        }
      }
    }
  }
}
