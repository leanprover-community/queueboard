{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 22,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "nomeata"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "the naive implementation of `mapArrays`, when run in the interpreter, can\r\nstack overflow when creating the `find_theorems` cache in CI, this\r\nblocks #7244.\r\n\r\nWhile more fundamental fixes are possible (e.g. a Trie structure that\r\ncannot be that deep, https://github.com/leanprover/lean4/pull/2577),\r\nsimply rewriting `mapArrays` to be a single tail-recursive function\r\n(which the interpreter is able to execute without using stack space)\r\nshould prevent more unrelated PRs from failing CI.\r\n\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 1,
        "closed": true,
        "closedAt": "2023-10-11T21:40:39Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5ojUZH",
              "body": "After Mario's changes, let's get this in:\r\n\r\nbors d+",
              "createdAt": "2023-10-10T00:07:53Z",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5ojUZ-",
              "body": ":v: nomeata can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests).",
              "createdAt": "2023-10-10T00:07:55Z",
              "author": {
                "login": "bors"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5ozxmf",
              "body": "bors r+",
              "createdAt": "2023-10-11T19:33:49Z",
              "author": {
                "login": "nomeata"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5o0efx",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6487453000/job/17617794704)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6487453000/job/17617794492)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6487453000/job/17617794243)",
              "createdAt": "2023-10-11T21:40:37Z",
              "author": {
                "login": "bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "9ae38b831267ee6bf6a1518adee02dbad65e4aaf",
                "additions": 16,
                "deletions": 10,
                "committedDate": "2023-09-26T16:45:22Z",
                "author": {
                  "name": "Joachim Breitner",
                  "email": "mail@joachim-breitner.de"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "55f56166d2a3ff4fca6092f0a104bf72e50bba63",
                "additions": 2,
                "deletions": 2,
                "committedDate": "2023-09-26T18:06:05Z",
                "author": {
                  "name": "Joachim Breitner",
                  "email": "mail@joachim-breitner.de"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "d79aa242391d627afbf485c502ef8cff4b3e2140",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-10-09T21:06:58Z",
                "author": {
                  "name": "Joachim Breitner",
                  "email": "mail@joachim-breitner.de"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "159f308400a537759385862ccc7b3896f9d4f892",
                "additions": 13,
                "deletions": 8,
                "committedDate": "2023-10-10T07:12:21Z",
                "author": {
                  "name": "Joachim Breitner",
                  "email": "mail@joachim-breitner.de"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "7f124737e47fee62f40bb3b4552334eb90ef1965",
                "additions": 3,
                "deletions": 2,
                "committedDate": "2023-10-10T09:06:13Z",
                "author": {
                  "name": "Joachim Breitner",
                  "email": "mail@joachim-breitner.de"
                },
                "statusCheckRollup": null
              }
            }
          ]
        },
        "createdAt": "2023-09-26T16:48:17Z",
        "deletions": 10,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/Lean/Meta/DiscrTree.lean",
              "additions": 22,
              "deletions": 10
            }
          ]
        },
        "headRefName": "joachim/stackless-mapApply",
        "headRefOid": "7f124737e47fee62f40bb3b4552334eb90ef1965",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5bQNFU",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABAt13Ow",
              "color": "bfd4f2",
              "name": "delegated"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABKAKYew",
              "color": "33DBEC",
              "name": "t-meta"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5jQbOG",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-10-09T20:41:34Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 7387,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": [
            {
              "requestedReviewer": {
                "id": "MDQ6VXNlcjg2ODU4OA==",
                "login": "digama0"
              }
            }
          ]
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5iCzSg",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "nomeata"
              },
              "submittedAt": "2023-09-26T18:05:56Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5jQMC4",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-10-09T20:08:08Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5jQQEA",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "nomeata"
              },
              "submittedAt": "2023-10-09T20:19:12Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5jQbOG",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-10-09T20:41:34Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5jQsOr",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "digama0"
              },
              "submittedAt": "2023-10-09T21:26:51Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5jQwbg",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "digama0"
              },
              "submittedAt": "2023-10-09T21:47:50Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5jUoNa",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "nomeata"
              },
              "submittedAt": "2023-10-10T06:19:19Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5jUvca",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "digama0"
              },
              "submittedAt": "2023-10-10T06:35:27Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5jUvs5",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "nomeata"
              },
              "submittedAt": "2023-10-10T06:36:03Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5jVFA5",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "nomeata"
              },
              "submittedAt": "2023-10-10T06:59:30Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5jVM-J",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "nomeata"
              },
              "submittedAt": "2023-10-10T07:13:47Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5jVfd8",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "digama0"
              },
              "submittedAt": "2023-10-10T07:47:21Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5jVijC",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "nomeata"
              },
              "submittedAt": "2023-10-10T07:51:07Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5jd4pd",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "nomeata"
              },
              "submittedAt": "2023-10-10T19:55:56Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Pui-5",
                    "body": "```suggestion\r\n  /-- This implementation as a single tail-recursive function is chosen to not blow the\r\n      interpreter stack when the `Trie` is very deep -/\r\n```",
                    "createdAt": "2023-09-26T18:05:56Z",
                    "author": {
                      "login": "nomeata"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5QgspW",
                    "body": "Can you explain what \"better\" means here? I assume it's some combination of:\r\n* Smaller memory footprint\r\n* This being a bottleneck somehow\r\n* Tail recursion not working for a nested recursor",
                    "createdAt": "2023-10-09T20:08:08Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5Qgufk",
                    "body": "Only smaller memory footprint, one could use `List (a × b × c d)` here as well, and it would still be tail recursive. Maybe a bit premature optimization, but it doesn't hurt.",
                    "createdAt": "2023-10-09T20:19:12Z",
                    "author": {
                      "login": "nomeata"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QgyJw",
                    "body": "```suggestion\r\n/-- A representation of lists-of-quadruples with a smaller memory footprint. -/\r\nprivate inductive Ctxt (α β γ δ : Type)\r\n  | empty : Ctxt α β γ δ\r\n  | ctxt : α → β → γ → δ → Ctxt α β γ δ → Ctxt α β γ δ\r\n```",
                    "createdAt": "2023-10-09T20:41:34Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Qg5K2",
                    "body": "the `toList` here is unnecessary, you can loop over the array with an index `i`.",
                    "createdAt": "2023-10-09T21:26:51Z",
                    "author": {
                      "login": "digama0"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5Qj60N",
                    "body": "I had that before, but this led to prettier code, and is also necessary to allow it to free the memory as it goes.",
                    "createdAt": "2023-10-10T06:19:19Z",
                    "author": {
                      "login": "nomeata"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5Qj_pd",
                    "body": "To free the memory, you can do this (similar to `Array.mapM`):\r\n```lean\r\n      let (k, .node vs' cs') := todo[i]\r\n      -- clear elements from the array after visiting them\r\n      let todo := todo.set ⟨i, h⟩ (unsafe unsafeCast (default : NonScalar))\r\n      go (.ctxt cs vs todo (i+1) k ps) #[] (f vs') cs' 0\r\n```\r\nalthough whether this is actually a win depends on whether we expect the input `t` to be unshared or not. As for prettier code, this is generally not the main priority, especially for an optimization PR. The prettiest code is the one liner that was there originally. If we are going to optimize it, we may as well do it properly.",
                    "createdAt": "2023-10-10T06:35:27Z",
                    "author": {
                      "login": "digama0"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QkP_T",
                    "body": "I’d say it’s a hotfix PR to work around absurd trees, the real fix should be something like https://github.com/leanprover/lean4/pull/2577 :-)\r\n\r\n`unsafe unsafCast` looks like a far too big hammer. I’ll use an array, but will simply reverse it and then `pop` elements off it. This frees memory, avoids lists, is in-place if the trie is exclusive, avoid any explicit indices and almost looks good. WDYT?",
                    "createdAt": "2023-10-10T06:59:30Z",
                    "author": {
                      "login": "nomeata"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QkU4S",
                    "body": "Pushed, how about this?",
                    "createdAt": "2023-10-10T07:13:47Z",
                    "author": {
                      "login": "nomeata"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QqQ9x",
                    "body": "(I’ll merge tomorrow; there are many ways to skin this cat, no need to dwell too long on the various variants.)",
                    "createdAt": "2023-10-10T19:55:56Z",
                    "author": {
                      "login": "nomeata"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5Qg75D",
                    "body": "```suggestion\r\n/-- A stack representation for `Trie.mapArrays` with a smaller memory footprint. -/\r\nprivate inductive Ctxt {α β s}\r\n  | empty : Ctxt\r\n  | ctxt : Array (Key s × Trie β s) → Array β → Array (Key s × Trie α s) → Nat → Key s → Ctxt → Ctxt\r\n\r\n/-- Apply a function to the array of values at each node in a `DiscrTree`. -/\r\npartial def Trie.mapArrays (t : Trie α s) (f : Array α → Array β) : Trie β s :=\r\n  let .node vs0 cs0 := t\r\n  go Ctxt.empty #[] (f vs0) cs0 0\r\nwhere\r\n  /-- This implementation as a single tail-recursive function is chosen to not blow the\r\n      interpreter stack when the `Trie` is very deep -/\r\n  go ps cs vs todo i := \r\n    if h : i < todo.size then\r\n      let (k, .node vs' cs') := todo[i]\r\n      go (.ctxt cs vs todo (i+1) k ps) #[] (f vs') cs' 0\r\n    else\r\n      match ps with\r\n      | .empty => .node vs cs\r\n      | .ctxt cs' vs' todo i k ps => go ps (cs'.push (k, .node vs cs)) vs' todo i\r\n```\r\n```",
                    "createdAt": "2023-10-09T21:47:49Z",
                    "author": {
                      "login": "digama0"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5Qj_yM",
                    "body": "You specialize the list-of-quadruples. I considered it, but to me it made the code less readable (it's so verbose), but maybe explicit is better. I assume performance wise it doesn't matter, does it?\r\n\r\nI am wary about keeping the full array alive, this means the map operation will need twice the memory, because the old trie can't be freed until the very end. (One could empty out the fields in the old array… but I'm leaning towards elegance here, hoping that the cs array is typically very small anyways - most of the time it's a singleton anyways.)",
                    "createdAt": "2023-10-10T06:36:03Z",
                    "author": {
                      "login": "nomeata"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5Qkgq9",
                    "body": "> I assume performance wise it doesn't matter, does it?\r\n\r\nIt can matter, if any of the fields are scalars. Here I don't think it makes a difference (although `i` could be a scalar if we used `USize` instead of `Nat`).\r\n\r\n> You specialize the list-of-quadruples. I considered it, but to me it made the code less readable (it's so verbose), but maybe explicit is better.\r\n\r\nI think it makes it clear that this is really specific to this algorithm and is not intended for general use. Also the complete lack of types in this rather complex recursive function is not conducive to understanding. I think `go` should probably just have a full type.\r\n\r\n> I am wary about keeping the full array alive, this means the map operation will need twice the memory, because the old trie can't be freed until the very end.\r\n\r\nConverting to a list uses more than double the memory already. The main memory savings here are not from the array itself but from the linked sub-tree which could be arbitrarily large, which is why clearing the array elements after we are finished with them is a good idea. But for the currently iterating array, we don't have any choice other than to have a new array and the old array and copy things over. (Actually there is an even more unsafe trick one could play, which is to directly write the `β` elements into the `Array α`, avoiding a reallocation. But this requires dealing with half-typed arrays which is messy.)\r\n",
                    "createdAt": "2023-10-10T07:47:21Z",
                    "author": {
                      "login": "digama0"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5QkiyP",
                    "body": ">  Converting to a list uses more than double the memory already. \r\n\r\nOnly for the spine, and only in the nodes under processing, which is much less than the overall data structure. Which I think is what we are both saying :-)\r\nIt’s important to release the subtree elements (which the naive array-indexing-code didn’t do yet, but either the list variant or the unsafe overriding or the reversing would do).\r\n\r\n\r\n",
                    "createdAt": "2023-10-10T07:51:06Z",
                    "author": {
                      "login": "nomeata"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjE0ODAzNw==",
              "login": "nomeata"
            },
            {
              "id": "MDQ6VXNlcjQ3Nzk1Ng==",
              "login": "kim-em"
            },
            {
              "id": "MDQ6VXNlcjQyNTI2MA==",
              "login": "eric-wieser"
            },
            {
              "id": "MDQ6VXNlcjg2ODU4OA==",
              "login": "digama0"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": null,
        "title": "[Merged by Bors] - refactor(Lean.Meta.DiscrTree): Stackless `mapArrays`",
        "updatedAt": "2023-10-11T21:40:46Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/7387",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "9ae38b831267ee6bf6a1518adee02dbad65e4aaf"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5yFBKszwAAAAJwhnp_",
              "createdAt": "2023-09-26T16:48:35Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5yFBKszwAAAAJwhnqD",
              "createdAt": "2023-09-26T16:48:35Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKAKYew",
                "name": "t-meta"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5iCzSg",
              "createdAt": "2023-09-26T18:05:56Z",
              "body": "",
              "author": {
                "login": "nomeata"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "55f56166d2a3ff4fca6092f0a104bf72e50bba63"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5Oyk_O",
              "createdAt": "2023-10-09T20:06:43Z",
              "source": {
                "id": "PR_kwDOFcwZ1c5anG3L",
                "title": "[Merged by Bors] - feat: MonoidalCategory (QuadraticModuleCat R)",
                "url": "https://github.com/leanprover-community/mathlib4/pull/7244"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5jQMC4",
              "createdAt": "2023-10-09T20:08:08Z",
              "body": "",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "d79aa242391d627afbf485c502ef8cff4b3e2140"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5jQsOr",
              "createdAt": "2023-10-09T21:26:51Z",
              "body": "",
              "author": {
                "login": "digama0"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5jQwbg",
              "createdAt": "2023-10-09T21:47:49Z",
              "body": "",
              "author": {
                "login": "digama0"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5ojUZH",
              "createdAt": "2023-10-10T00:07:53Z",
              "body": "After Mario's changes, let's get this in:\r\n\r\nbors d+",
              "author": {
                "login": "kim-em"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5ojUZ-",
              "createdAt": "2023-10-10T00:07:55Z",
              "body": ":v: nomeata can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests).",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5yFBKszwAAAAJ3o0Kl",
              "createdAt": "2023-10-10T00:08:07Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABAt13Ow",
                "name": "delegated"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5yFBKszwAAAAJ3o0L3",
              "createdAt": "2023-10-10T00:08:08Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "159f308400a537759385862ccc7b3896f9d4f892"
              }
            },
            {
              "__typename": "ReviewRequestedEvent",
              "id": "RRE_lADOFcwZ1c5yFBKszwAAAAJ3zuY9",
              "createdAt": "2023-10-10T07:13:38Z",
              "requestedReviewer": {
                "id": "MDQ6VXNlcjg2ODU4OA==",
                "login": "digama0"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "7f124737e47fee62f40bb3b4552334eb90ef1965"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5ozxmf",
              "createdAt": "2023-10-11T19:33:49Z",
              "body": "bors r+",
              "author": {
                "login": "nomeata"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5o0efx",
              "createdAt": "2023-10-11T21:40:37Z",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6487453000/job/17617794704)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6487453000/job/17617794492)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6487453000/job/17617794243)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c5yFBKszwAAAAJ5RTp7",
              "createdAt": "2023-10-11T21:40:39Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c5yFBKszwAAAAJ5RT1u",
              "createdAt": "2023-10-11T21:40:46Z"
            }
          ]
        }
      }
    }
  }
}
