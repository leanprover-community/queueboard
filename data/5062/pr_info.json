{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 181,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "adomani"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "This tactic removes very conservatively all local declarations that\r\n1. do not appear in the main goal,\r\n2. do not appear in a declaration that appears in the main goal,\r\n3. ... and so on recursively.\r\n\r\nThe main motivation for this tactic is that all available variables in the current `namespace/section` appear in the goal state, not just the ones that are needed for the statement to type-check.  Using `prune` mitigates this situation.\r\n\r\nThe tactic also admits an optional natural number argument: `prune n` removes all variables that have not appeared at the `(n+1)`-st stage in the above list.  Thus, `prune 0` only leaves the variables needed for the statement to type-check.  Also, for sufficiently large `n`, `prune n` is a synonym for `prune`.\r\n\r\n[Zulip discussion](https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/substitute.20for.20.60include.2Fomit.60.3F)\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 4,
        "closed": false,
        "closedAt": null,
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5fFW3k",
              "body": "I read the [long thread](https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Displaying.20explicit.20arguments) which is relevant to this tactic / PR. Personally, while I appreciate what you are trying to do with `prune`, it feels to me like this is not something we want because it is a band-aid, whereas we actually want `variable`s to Just Workᵀᴹ.",
              "createdAt": "2023-06-16T20:04:46Z",
              "author": {
                "login": "j-loreaux"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5vfCUU",
              "body": "I know this isn't the same as the dream you had for `prune`, but what do you think about making `prune` be a straightforward frontend for [Lean.MVarId.cleanup](https://leanprover-community.github.io/mathlib4_docs/Lean/Meta/Tactic/Cleanup.html#Lean.MVarId.cleanup)? I'm imagining `prune` would have similar features as `extract_goal`, but instead of pretty printing a goal state it would have the effect of cleaning up the goal state. The `prune` tactic might want to expose the \"indirect props\" configuration option too, which if I understand correctly, is roughly related to what the \"prune offset\" is controlling, but it's either on or off and only affects Props.",
              "createdAt": "2023-12-27T15:27:40Z",
              "author": {
                "login": "kmill"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5vf9wv",
              "body": "Kyle, this seems like a good idea: I'd be happy to put `prune` to some use!\n\nI'm not sure about your suggestion, though.  Should prune be an \"interactive\" version of `Lean.MVarId.cleanu`?  I.e., should it take similar inputs and have some \"reasonable\" defaults in case of no input?",
              "createdAt": "2023-12-27T21:54:04Z",
              "author": {
                "login": "adomani"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5vf_Q-",
              "body": "I don't have a clear idea of the exact UI for `prune`, but, yeah, I was thinking it could be the interactive version of `Lean.MVarId.cleanup`. Maybe `prune` without arguments is `Lean.MVarId.cleanup` with the default arguments?\r\n\r\nMaybe `prune!` is the version that turns off including indirect propositions? Maybe there's a better syntax. The mnemonic I was thinking is that `prune!` prunes more.\r\n\r\n(If there's some additional feature we really want to support in `Lean.MVarId.cleanup`, depending on how reasonable it is we *might* be able to get a core change.)\r\n\r\nI think though we should start small with `prune`. If it's just a frontend to `Lean.MVarId.cleanup` I think it's a super easy decision to add the tactic. You might decide to call it `cleanup`, but I think `prune` is evocative and am happy with it myself.",
              "createdAt": "2023-12-27T22:06:46Z",
              "author": {
                "login": "kmill"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5vgAQA",
              "body": "I agree with you:\n* `prune` should remove some hypotheses, \n* `prune!` should probably remove more hypotheses;\n* `prune <some_syntax>` should give some control over which hypotheses to remove/keep.\n\nI'll think a little about situations in which you might want to remove a non-minimal/maximal subset of hypotheses, so as to tailor the tactic to that situation.",
              "createdAt": "2023-12-27T22:15:52Z",
              "author": {
                "login": "adomani"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "1a8ff0e6d36e31421a22f128488e82560c55dec9",
                "additions": 179,
                "deletions": 0,
                "committedDate": "2023-06-14T23:21:25Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "a442a95387917f613e38cd40b02d676ac003614b",
                "additions": 1,
                "deletions": 0,
                "committedDate": "2023-06-14T23:25:48Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "d342192857259df2b7187e11aaa618aa07d6a869",
                "additions": 1,
                "deletions": 0,
                "committedDate": "2023-06-14T23:41:16Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAErF7k1g",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=5062&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "createdAt": "2023-06-14T23:35:49Z",
        "deletions": 0,
        "files": {
          "nodes": [
            {
              "path": "Mathlib.lean",
              "additions": 1,
              "deletions": 0
            },
            {
              "path": "Mathlib/Tactic.lean",
              "additions": 1,
              "deletions": 0
            },
            {
              "path": "Mathlib/Tactic/Prune.lean",
              "additions": 104,
              "deletions": 0
            },
            {
              "path": "test/Prune.lean",
              "additions": 75,
              "deletions": 0
            }
          ]
        },
        "headRefName": "adomani_prune",
        "headRefOid": "d342192857259df2b7187e11aaa618aa07d6a869",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5TCuqN",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c7P265b",
              "color": "f9d0c4",
              "name": "awaiting-author"
            },
            {
              "id": "LA_kwDOFcwZ1c7mTAET",
              "color": "DA6D43",
              "name": "modifies-tactic-syntax"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABKAKYew",
              "color": "33DBEC",
              "name": "t-meta"
            }
          ]
        },
        "latestReviews": {
          "nodes": []
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "BLOCKED",
        "mergeable": "MERGEABLE",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 5062,
        "potentialMergeCommit": {
          "oid": "4e2cb06f9fcfa0a5347aadaed16a27a15252428e"
        },
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": []
        },
        "reviewThreads": {
          "nodes": []
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjI5NDY3NzQ1",
              "login": "adomani"
            },
            {
              "id": "MDQ6VXNlcjg5MjA1OTg=",
              "login": "j-loreaux"
            },
            {
              "id": "MDQ6VXNlcjIzNTMwNw==",
              "login": "kmill"
            }
          ]
        },
        "state": "OPEN",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAErF7k1g",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=5062&login=leanprover-community&repository=mathlib4"
              }
            ]
          }
        },
        "title": "feat(Tactic/Prune + test/Prune): add `prune` tactic, for removing unnecessary hypotheses",
        "updatedAt": "2024-07-31T08:14:03Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/5062",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5oxfnNzwAAAAI4SIsb",
              "createdAt": "2023-06-14T23:46:47Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5oxfnNzwAAAAI4SIsh",
              "createdAt": "2023-06-14T23:46:47Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7mTAET",
                "name": "modifies-tactic-syntax"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5oxfnNzwAAAAI4SIsj",
              "createdAt": "2023-06-14T23:46:47Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKAKYew",
                "name": "t-meta"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5fFW3k",
              "createdAt": "2023-06-16T20:04:46Z",
              "body": "I read the [long thread](https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Displaying.20explicit.20arguments) which is relevant to this tactic / PR. Personally, while I appreciate what you are trying to do with `prune`, it feels to me like this is not something we want because it is a band-aid, whereas we actually want `variable`s to Just Workᵀᴹ.",
              "author": {
                "login": "j-loreaux"
              }
            },
            {
              "__typename": "BaseRefChangedEvent"
            },
            {
              "__typename": "BaseRefChangedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5vfCUU",
              "createdAt": "2023-12-27T15:27:40Z",
              "body": "I know this isn't the same as the dream you had for `prune`, but what do you think about making `prune` be a straightforward frontend for [Lean.MVarId.cleanup](https://leanprover-community.github.io/mathlib4_docs/Lean/Meta/Tactic/Cleanup.html#Lean.MVarId.cleanup)? I'm imagining `prune` would have similar features as `extract_goal`, but instead of pretty printing a goal state it would have the effect of cleaning up the goal state. The `prune` tactic might want to expose the \"indirect props\" configuration option too, which if I understand correctly, is roughly related to what the \"prune offset\" is controlling, but it's either on or off and only affects Props.",
              "author": {
                "login": "kmill"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5oxfnNzwAAAAKkQi-E",
              "createdAt": "2023-12-27T15:27:47Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5oxfnNzwAAAAKkQi-J",
              "createdAt": "2023-12-27T15:27:47Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5vf9wv",
              "createdAt": "2023-12-27T21:54:04Z",
              "body": "Kyle, this seems like a good idea: I'd be happy to put `prune` to some use!\n\nI'm not sure about your suggestion, though.  Should prune be an \"interactive\" version of `Lean.MVarId.cleanu`?  I.e., should it take similar inputs and have some \"reasonable\" defaults in case of no input?",
              "author": {
                "login": "adomani"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5vf_Q-",
              "createdAt": "2023-12-27T22:06:46Z",
              "body": "I don't have a clear idea of the exact UI for `prune`, but, yeah, I was thinking it could be the interactive version of `Lean.MVarId.cleanup`. Maybe `prune` without arguments is `Lean.MVarId.cleanup` with the default arguments?\r\n\r\nMaybe `prune!` is the version that turns off including indirect propositions? Maybe there's a better syntax. The mnemonic I was thinking is that `prune!` prunes more.\r\n\r\n(If there's some additional feature we really want to support in `Lean.MVarId.cleanup`, depending on how reasonable it is we *might* be able to get a core change.)\r\n\r\nI think though we should start small with `prune`. If it's just a frontend to `Lean.MVarId.cleanup` I think it's a super easy decision to add the tactic. You might decide to call it `cleanup`, but I think `prune` is evocative and am happy with it myself.",
              "author": {
                "login": "kmill"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5vgAQA",
              "createdAt": "2023-12-27T22:15:52Z",
              "body": "I agree with you:\n* `prune` should remove some hypotheses, \n* `prune!` should probably remove more hypotheses;\n* `prune <some_syntax>` should give some control over which hypotheses to remove/keep.\n\nI'll think a little about situations in which you might want to remove a non-minimal/maximal subset of hypotheses, so as to tailor the tactic to that situation.",
              "author": {
                "login": "adomani"
              }
            }
          ]
        }
      }
    }
  }
}
