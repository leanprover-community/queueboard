{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 19,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "dagurtomas"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 1,
        "closed": true,
        "closedAt": "2023-08-31T09:12:20Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5lWxwD",
              "body": ":v: dagurtomas can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests).",
              "createdAt": "2023-08-31T06:57:34Z",
              "author": {
                "login": "bors"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5lXAUA",
              "body": "> You might also want:\r\n> \r\n> ```lean\r\n> /-- The empty set is the smallest coverage -/\r\n> instance : OrderBot (Coverage C) where\r\n>   bot :=\r\n>   { covering := fun _ => ∅\r\n>     pullback := fun _ _ _ _ => False.elim }\r\n>   bot_le _ _ := bot_le\r\n> ```\r\n> \r\n> (as well as a `bot_covering` lemma)\r\n\r\nI'll merge it as is once CI passes, to get on with what I'm using this for. But I can open a new PR with this `bot` stuff once it's merged",
              "createdAt": "2023-08-31T07:43:46Z",
              "author": {
                "login": "dagurtomas"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5lXCuA",
              "body": "bors r+",
              "createdAt": "2023-08-31T07:51:21Z",
              "author": {
                "login": "dagurtomas"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5lXgrS",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6034815657/job/16373948141)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6034815657/job/16373948515)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6034815657/job/16373948853)",
              "createdAt": "2023-08-31T09:12:19Z",
              "author": {
                "login": "bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "ac4c5d5ba3ab38b939fa596dfe8c49a6ae35fee3",
                "additions": 11,
                "deletions": 0,
                "committedDate": "2023-08-30T15:48:54Z",
                "author": {
                  "name": "dagurtomas",
                  "email": "dagurtomas@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "51a03972cef5e45bc123d5629dcf8400e87d58bf",
                "additions": 11,
                "deletions": 0,
                "committedDate": "2023-08-30T18:40:22Z",
                "author": {
                  "name": "dagurtomas",
                  "email": "dagurtomas@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "02121939b4c6e14ef74cd87991098855208423ba",
                "additions": 3,
                "deletions": 7,
                "committedDate": "2023-08-31T06:49:20Z",
                "author": {
                  "name": "dagurtomas",
                  "email": "dagurtomas@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "514d32482c5c8901e059c0da7a3355879c11e5af",
                "additions": 5,
                "deletions": 0,
                "committedDate": "2023-08-31T06:54:47Z",
                "author": {
                  "name": "dagurtomas",
                  "email": "dagurtomas@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "a93d32281fd71acc22f3635d33158e20a5def281",
                "additions": 3,
                "deletions": 1,
                "committedDate": "2023-08-31T07:00:49Z",
                "author": {
                  "name": "dagurtomas",
                  "email": "dagurtomas@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "32ef3badb0a451aa7f4dceda088d11809c202002",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-08-31T07:18:07Z",
                "author": {
                  "name": "Dagur Tómas Ásgeirsson",
                  "email": "dagurtomas@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "8007338cd7cb96118497f69ad59f74471446b5ef",
                "additions": 8,
                "deletions": 14,
                "committedDate": "2023-08-31T07:25:01Z",
                "author": {
                  "name": "dagurtomas",
                  "email": "dagurtomas@gmail.com"
                },
                "statusCheckRollup": null
              }
            }
          ]
        },
        "createdAt": "2023-08-30T15:49:34Z",
        "deletions": 0,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/CategoryTheory/Sites/Coverage.lean",
              "additions": 19,
              "deletions": 0
            }
          ]
        },
        "headRefName": "dagur_CoverageUnion",
        "headRefOid": "8007338cd7cb96118497f69ad59f74471446b5ef",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5ZJ62w",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABAt13Ow",
              "color": "bfd4f2",
              "name": "delegated"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABJc1VKA",
              "color": "acff3f",
              "name": "easy"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJTYQ",
              "color": "33dbec",
              "name": "t-category-theory"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5fnRYN",
              "body": "You might also want:\r\n```lean\r\n/-- The empty set is the smallest coverage -/\r\ninstance : OrderBot (Coverage C) where\r\n  bot :=\r\n  { covering := fun _ => ∅\r\n    pullback := fun _ _ _ _ => False.elim }\r\n  bot_le _ _ := bot_le\r\n```\r\n(as well as a `bot_covering` lemma)",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-08-31T07:38:14Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5fnB1w",
              "body": "bors d+",
              "state": "COMMENTED",
              "author": {
                "login": "jcommelin"
              },
              "submittedAt": "2023-08-31T06:57:33Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 6878,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": null,
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5fjzBJ",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-08-30T17:49:03Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5fkGLx",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "dagurtomas"
              },
              "submittedAt": "2023-08-30T18:40:42Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5flTPy",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-08-30T23:03:04Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5flTom",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-08-30T23:05:24Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5fm_x8",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "dagurtomas"
              },
              "submittedAt": "2023-08-31T06:51:22Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5fnBE7",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "jcommelin"
              },
              "submittedAt": "2023-08-31T06:55:20Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5fnBpX",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "jcommelin"
              },
              "submittedAt": "2023-08-31T06:57:00Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5fnB1w",
              "body": "bors d+",
              "state": "COMMENTED",
              "author": {
                "login": "jcommelin"
              },
              "submittedAt": "2023-08-31T06:57:33Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5fnGcY",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-08-31T07:10:28Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5fnI6U",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-08-31T07:16:59Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5fnK7-",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "dagurtomas"
              },
              "submittedAt": "2023-08-31T07:21:56Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5fnRYN",
              "body": "You might also want:\r\n```lean\r\n/-- The empty set is the smallest coverage -/\r\ninstance : OrderBot (Coverage C) where\r\n  bot :=\r\n  { covering := fun _ => ∅\r\n    pullback := fun _ _ _ _ => False.elim }\r\n  bot_le _ _ := bot_le\r\n```\r\n(as well as a `bot_covering` lemma)",
              "state": "COMMENTED",
              "author": {
                "login": "eric-wieser"
              },
              "submittedAt": "2023-08-31T07:38:14Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5OHpsA",
                    "body": "Would it make sense to make this a `Sup` instance? Is `SemilatticeSup (Coverage C)` true?",
                    "createdAt": "2023-08-30T17:49:03Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5OH2F4",
                    "body": "Done!",
                    "createdAt": "2023-08-30T18:40:42Z",
                    "author": {
                      "login": "dagurtomas"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5OIyGA",
                    "body": "I think it would be best to drop the definition altogether, as\r\n```suggestion\r\n/-- The union of two coverages is a coverage. -/\r\ninstance : Sup (Coverage C) where\r\n  sup x y :=\r\n  { covering := fun B => x.covering B ∪ y.covering B\r\n    pullback := by\r\n      rintro X Y f S (hx | hy)\r\n      · obtain ⟨T, hT⟩ := x.pullback f S hx\r\n        exact ⟨T, Or.inl hT.1, hT.2⟩\r\n      · obtain ⟨T, hT⟩ := y.pullback f S hy\r\n        exact ⟨T, Or.inr hT.1, hT.2⟩ }\r\n```\r\nYou'll unfortunately need to write the `simps` lemma manually, but you're currently missing the lemma spelt in terms of `\\sup` anyway.",
                    "createdAt": "2023-08-30T23:03:03Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5OJuTl",
                    "body": "I would like to keep the `union` notation. It feels more natural to me than `sup`. I can write the `simps` lemma in terms of `\\sup` though",
                    "createdAt": "2023-08-31T06:51:22Z",
                    "author": {
                      "login": "dagurtomas"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5OJvLq",
                    "body": "I think we can get used to the `\\sup` notation pretty quickly. It looks almost the same as `\\cup` anyways.\r\n\r\nIf you choose to keep `union`, please make it a `protected def`.",
                    "createdAt": "2023-08-31T06:55:20Z",
                    "author": {
                      "login": "jcommelin"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5OJ0eg",
                    "body": "The (minor) problem with having `union` at all is that whenever you use it, you can't apply any of the lemmas from `SemilatticeSup` without first using ` rw [←sup_eq_union]`.\r\n\r\nMerging the two removes this unnecessary extra step, and is consistent with the approach used in most other places in mathlib (the exception being Set and Finset, which duplicate all the API instead)",
                    "createdAt": "2023-08-31T07:16:59Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5OJ1zt",
                    "body": "Ok, I'm convinced. I'll remove `union`",
                    "createdAt": "2023-08-31T07:21:56Z",
                    "author": {
                      "login": "dagurtomas"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5OIycQ",
                    "body": "Does something like this work, after fixing the number of underscores?\r\n```suggestion\r\n  le_sup_left _ _ _ := Set.subset_union_left _ _ _\r\n```",
                    "createdAt": "2023-08-30T23:05:24Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5OJvnY",
                    "body": "Maybe also add a (non-simp) lemma `sup_eq_union`, that allows for easy rewriting between the two spellings.",
                    "createdAt": "2023-08-31T06:57:00Z",
                    "author": {
                      "login": "jcommelin"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5OJyzv",
                    "body": "```suggestion\r\n  rfl\r\n```\r\nTo allow dsimp to use this",
                    "createdAt": "2023-08-31T07:10:28Z",
                    "author": {
                      "login": "eric-wieser"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjI1NjIzODI5",
              "login": "dagurtomas"
            },
            {
              "id": "MDQ6VXNlcjQyNTI2MA==",
              "login": "eric-wieser"
            },
            {
              "id": "MDQ6VXNlcjU2MzY3MDU=",
              "login": "jcommelin"
            },
            {
              "id": "U_kgDOB75MNQ",
              "login": "leanprover-community-mathlib4-bot"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": null,
        "title": "[Merged by Bors] - feat: define the union of two coverages",
        "updatedAt": "2023-08-31T09:12:26Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/6878",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "ac4c5d5ba3ab38b939fa596dfe8c49a6ae35fee3"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5vsjOkzwAAAAJiCqXp",
              "createdAt": "2023-08-30T15:49:34Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5vsjOkzwAAAAJiCqXt",
              "createdAt": "2023-08-30T15:49:34Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABJc1VKA",
                "name": "easy"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5vsjOkzwAAAAJiCqX4",
              "createdAt": "2023-08-30T15:49:34Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5vsjOkzwAAAAJiCqX6",
              "createdAt": "2023-08-30T15:49:35Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJTYQ",
                "name": "t-category-theory"
              }
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5OMhTU",
              "createdAt": "2023-08-30T15:50:17Z",
              "source": {
                "id": "PR_kwDOFcwZ1c5ZJIYE",
                "title": "[Merged by Bors] - [Merged by Bors] - feat: the union of the regular and extensive coverages generates the coherent topology",
                "url": "https://github.com/leanprover-community/mathlib4/pull/6876"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5vsjOkzwAAAAJiDiT1",
              "createdAt": "2023-08-30T16:12:09Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABKteTVQ",
                "name": "awaiting-CI"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5fjzBJ",
              "createdAt": "2023-08-30T17:49:03Z",
              "body": "",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "51a03972cef5e45bc123d5629dcf8400e87d58bf"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5flTPy",
              "createdAt": "2023-08-30T23:03:03Z",
              "body": "",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5flTom",
              "createdAt": "2023-08-30T23:05:24Z",
              "body": "",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "02121939b4c6e14ef74cd87991098855208423ba"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "514d32482c5c8901e059c0da7a3355879c11e5af"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5fnBpX",
              "createdAt": "2023-08-31T06:57:00Z",
              "body": "",
              "author": {
                "login": "jcommelin"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5fnB1w",
              "createdAt": "2023-08-31T06:57:33Z",
              "body": "bors d+",
              "author": {
                "login": "jcommelin"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5lWxwD",
              "createdAt": "2023-08-31T06:57:34Z",
              "body": ":v: dagurtomas can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests).",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5vsjOkzwAAAAJiY-ZM",
              "createdAt": "2023-08-31T06:57:46Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABAt13Ow",
                "name": "delegated"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5vsjOkzwAAAAJiY-bB",
              "createdAt": "2023-08-31T06:57:47Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "a93d32281fd71acc22f3635d33158e20a5def281"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5fnGcY",
              "createdAt": "2023-08-31T07:10:27Z",
              "body": "",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "32ef3badb0a451aa7f4dceda088d11809c202002"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "8007338cd7cb96118497f69ad59f74471446b5ef"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5fnRYN",
              "createdAt": "2023-08-31T07:38:14Z",
              "body": "You might also want:\r\n```lean\r\n/-- The empty set is the smallest coverage -/\r\ninstance : OrderBot (Coverage C) where\r\n  bot :=\r\n  { covering := fun _ => ∅\r\n    pullback := fun _ _ _ _ => False.elim }\r\n  bot_le _ _ := bot_le\r\n```\r\n(as well as a `bot_covering` lemma)",
              "author": {
                "login": "eric-wieser"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5lXAUA",
              "createdAt": "2023-08-31T07:43:46Z",
              "body": "> You might also want:\r\n> \r\n> ```lean\r\n> /-- The empty set is the smallest coverage -/\r\n> instance : OrderBot (Coverage C) where\r\n>   bot :=\r\n>   { covering := fun _ => ∅\r\n>     pullback := fun _ _ _ _ => False.elim }\r\n>   bot_le _ _ := bot_le\r\n> ```\r\n> \r\n> (as well as a `bot_covering` lemma)\r\n\r\nI'll merge it as is once CI passes, to get on with what I'm using this for. But I can open a new PR with this `bot` stuff once it's merged",
              "author": {
                "login": "dagurtomas"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5lXCuA",
              "createdAt": "2023-08-31T07:51:21Z",
              "body": "bors r+",
              "author": {
                "login": "dagurtomas"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5lXgrS",
              "createdAt": "2023-08-31T09:12:19Z",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6034815657/job/16373948141)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6034815657/job/16373948515)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6034815657/job/16373948853)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c5vsjOkzwAAAAJiejRi",
              "createdAt": "2023-08-31T09:12:20Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c5vsjOkzwAAAAJiejko",
              "createdAt": "2023-08-31T09:12:26Z"
            },
            {
              "__typename": "ReferencedEvent"
            }
          ]
        }
      }
    }
  }
}
