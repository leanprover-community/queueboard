{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 170,
        "assignees": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjEwMTA1MDE2",
              "login": "grunweg"
            }
          ]
        },
        "author": {
          "login": "sgouezel"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "This will ensure that, for C^2 maps over real or complex manifolds, the second derivative in charts is symmetric (because that is true at interior points, and then it extends by continuity if interior points are dense). To be used in #18396 to define the Lie bracket of vector fields on manifolds.\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nFor details on the \"pull request lifecycle\" in mathlib, please see:\r\nhttps://leanprover-community.github.io/contribute/index.html\r\n\r\nIn particular, note that most reviewers will only notice your PR\r\nif it passes the continuous integration checks.\r\nPlease ask for help on https://leanprover.zulipchat.com if needed.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nIf you are moving or deleting declarations, please include these lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nMoves:\r\n- Vector.* -> Mathlib.Vector.*\r\n- ...\r\n\r\nDeletions:\r\n- Nat.bit1_add_bit1\r\n- ...\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n\r\n-->\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 5,
        "closed": true,
        "closedAt": "2024-11-01T10:28:57Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c6RuZZ1",
              "body": "### PR summary [6d69ab4aa6](https://github.com/leanprover-community/mathlib4/pull/18403/commits/6d69ab4aa6c9b1d0680288b19ec1c0847d0867f4)\n\n#### Import changes for modified files\n\nNo significant changes to the import graph\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ ChartedSpace.t1Space`\n`+ EventuallyEq.mem_interior_iff`\n`+ Filter.EventuallyEq.mem_interior`\n`+ closure_open_halfspace`\n`+ extChartAt_mem_closure_interior`\n`+ extChartAt_target_eventuallyEq`\n`+ extChartAt_target_eventuallyEq'`\n`+ extChartAt_target_eventuallyEq_of_mem`\n`+ extChartAt_target_mem_nhdsWithin_of_mem`\n`+ extChartAt_target_subset_closure_interior`\n`+ extChartAt_target_union_comp_range_mem_nhds_of_mem`\n`+ extend_target_eventuallyEq`\n`+ nhdsWithin_extChartAt_target_eq_of_mem`\n`+ range_eq_closure_interior`\n`+ range_subset_closure_interior`\n`+ t1Space`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n</details>",
              "createdAt": "2024-10-29T17:01:59Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6R0w4t",
              "body": "I also wanted to change the definition of a ModelWithCorners, since the current doesn't impose enough conditions. \r\nThis change is fine by me, but I don't think it's good enough.\r\n\r\nThe problem I was facing is that currently a ModelWithCorners over `\\C` is not a ModelWithCorners over `\\R`. The issue is the unique derivative: it is easier to have a unique derivative over C than over R. This is problematic, since we cannot show that complex manifold is a real manifold.\r\n\r\nI believe your new condition doesn't imply uniqueness of derivative, right? So we would have to change it again. One way is just to say that the target must be a `1/(2^n)`-th space (i.e. you require that for some basis certain coordinates are positive), but probably we can get away with something weaker, e.g. convexity together with the regularity condition. Does that imply uniqueness of derivative?\r\n\r\nI'm fine merging this as-is, but if we're changing ModelWithCorners again soon, we should probably decide now whether the current change is compatible with the planned change in the future.",
              "createdAt": "2024-10-30T10:43:19Z",
              "author": {
                "login": "fpvandoorn"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6R1G7K",
              "body": "There is a definitely a difficulty between complex and real manifolds: as you point out, a complex model with corners is not a real model with corners because of the lack of unique differentiability. My new condition doesn't imply unique differentiability, that's why it is added on top of it. \r\n\r\nI don't know how to fix it for the complex case (if you want a condition that makes sense over a general field, you can not mention positivity in the definition). But even if the conditions we impose did match over R and C, the models with corners would still be different because the field is baked in. Whatever we do, it looks like there is a difficult issue here related to the tangent bundle: the real tangent bundle and the complex tangent bundle are always going to be different objects, right?\r\n\r\n",
              "createdAt": "2024-10-30T11:04:49Z",
              "author": {
                "login": "sgouezel"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6R1LNr",
              "body": "In fact, I think I have a fix for the complex case: add yet another field saying that, if `IsRCLikeNormedField ùïú`, then the interior of `range I` is convex for the inherited real structure. And we could have a specific constructor for models with corners with `IsRCLikeNormedField ùïú`, using that the latter condition implies both unique differentiability and that the range is included in the closure of its interior. ",
              "createdAt": "2024-10-30T11:09:07Z",
              "author": {
                "login": "sgouezel"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6R1NxK",
              "body": "(I wrote this before you posted your last comment.)\r\n\r\nI wonder: is having the model with corners depend on the field a bad thing? If, say, there is a map from \"models over \\C\" to \"models over \\R\", but that map is well-behaved? Treating a complex manifold specifically as a real manifold is sometimes useful (say, consider a Riemann surface as a surface with an almost complex structure; my area does that all the time), but not always.\r\nThat said, I don't have enough experience with library design yet to know the trade-offs of such choices well.\r\n\r\nAfter talking with Floris, I had attempted to simply add the additional condition of some positive coordinates to the model with boundary. Another issue I realised is that the *correct* definition of complex manifolds with boundary is *not* just the same as in the real case. See e.g. [this answer](https://math.stackexchange.com/a/1958392) on math.stackexchange ---- just asking for \"is modelled on some quadrant\" is too restrictive in the complex case.",
              "createdAt": "2024-10-30T11:11:25Z",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6R1Okn",
              "body": "> In fact, I think I have a fix for the complex case: add yet another field saying that, if `IsRCLikeNormedField ùïú`, then the interior of `range I` is convex for the inherited real structure. And we could have a specific constructor for models with corners with `IsRCLikeNormedField ùïú`, using that the latter condition implies both unique differentiability and that the range is included in the closure of its interior.\r\n\r\nThat sounds reasonable at first glance, and definitely like an improvement.\r\n\r\nThinking about it slightly more: this looks like it should resolve the real vs complex case, and also is compatible with the correct definition of complex manifolds with boundary.",
              "createdAt": "2024-10-30T11:12:19Z",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6R2a2E",
              "body": "Another (essentially equivalent option) is to require either that `range I = univ`, or that the field is `IsRCLikeNormedField` and the range is convex wrt the real structure. And then the properties that the range has unique differentials, and is the closure of its interior, would be deduced from this one. I don't think one option is really better than the other one.\r\n",
              "createdAt": "2024-10-30T12:24:29Z",
              "author": {
                "login": "sgouezel"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6R2bhC",
              "body": "To answer your other question, I think we should definitely have `I.toReal` for `I` a model with corners over C, to be able to see a complex manifold as a real manifold. ",
              "createdAt": "2024-10-30T12:25:49Z",
              "author": {
                "login": "sgouezel"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6R223G",
              "body": "> Another (essentially equivalent option) is to require either that `range I = univ`, or that the field is `IsRCLikeNormedField` and the range is convex wrt the real structure. And then the properties that the range has unique differentials, and is the closure of its interior, would be deduced from this one. I don't think one option is really better than the other one.\r\n\r\nIs there an interesting theory of manifolds with boundary over `Q_p` (or Q, or any other field different from R or C)? Because it seems this proposal would exclude them, right?",
              "createdAt": "2024-10-30T13:03:17Z",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6R58bW",
              "body": "> Is there an interesting theory of manifolds with boundary over `Q_p` (or Q, or any other field different from R or C)? Because it seems this proposal would exclude them, right?\r\n\r\nNot that I know, which is why my second proposal makes sense. But maybe it's safer to go with the first one. In any case, I don't think these improvements should block the current PR, as they should be compatible.\r\n\r\n",
              "createdAt": "2024-10-30T17:29:36Z",
              "author": {
                "login": "sgouezel"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6R6CUP",
              "body": "> > Is there an interesting theory of manifolds with boundary over `Q_p` (or Q, or any other field different from R or C)? Because it seems this proposal would exclude them, right?\r\n> \r\n> Not that I know, which is why my second proposal makes sense. But maybe it's safer to go with the first one. In any case, I don't think these improvements should block the current PR, as they should be compatible.\r\n\r\nThat sounds fair; I trust your judgement on this. And I agree the first proposal could be better.\r\nI can review this PR now/very soon; would you like to work on the follow-up proposal also?",
              "createdAt": "2024-10-30T17:40:21Z",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6R6Dtj",
              "body": "I won't work on the follow-up in the near future, sorry, I have already too much on my hands with #17152 and #18396",
              "createdAt": "2024-10-30T17:43:12Z",
              "author": {
                "login": "sgouezel"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6R6Pf_",
              "body": "Fair enough. Sounds like a project for another volunteer to adapt this; I would be happy to :-)",
              "createdAt": "2024-10-30T18:05:56Z",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6R6kRv",
              "body": "> In fact, I think I have a fix for the complex case: add yet another field saying that, if `IsRCLikeNormedField ùïú`, then the interior of `range I` is convex for the inherited real structure. And we could have a specific constructor for models with corners with `IsRCLikeNormedField ùïú`, using that the latter condition implies both unique differentiability and that the range is included in the closure of its interior.\r\n\r\nAh wait, I forgot that convexity is not definable over an arbitrary field... \r\n\r\nThe current PR indeed doesn't conflict with any of the future plans (although it will be made partially obsolete if we go with the second option, since then it's provable). But then removing this condition and proving it as a consequence will be easy anyway, so let's merge this PR and generalize later. (Michael offered a review, so I'll let him do that.)",
              "createdAt": "2024-10-30T18:34:47Z",
              "author": {
                "login": "fpvandoorn"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6SBBVR",
              "body": "Thanks a lot for the review!",
              "createdAt": "2024-10-31T12:34:46Z",
              "author": {
                "login": "sgouezel"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6SBXLT",
              "body": "I took a quick look, and I'm happy to merge this if Michael is happy with it.\r\n\r\nbors d=grunweg",
              "createdAt": "2024-10-31T13:21:26Z",
              "author": {
                "login": "fpvandoorn"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6SBXMj",
              "body": ":v: grunweg can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests).",
              "createdAt": "2024-10-31T13:21:29Z",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6SIOOY",
              "body": "I am happy with this. Thanks for the quick turnaround, and for initiating this refactor!\r\nbors merge",
              "createdAt": "2024-11-01T10:05:34Z",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c6SIVR5",
              "body": "Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/11627714568/job/32381552460)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/11627714568/job/32381552201)",
              "createdAt": "2024-11-01T10:28:56Z",
              "author": {
                "login": "mathlib-bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "8e1a87a18a5ba82d4df433da31702acd0dcfdb6e",
                "additions": 157,
                "deletions": 4,
                "committedDate": "2024-10-29T16:36:19Z",
                "author": {
                  "name": "sgouezel",
                  "email": "sebastien.gouezel@univ-rennes1.fr"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHhr9bDQ",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11609024076/job/32325458701"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHh0bfQA",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11611942215/job/32334339904"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHh0ePpg",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11611956869/job/32334385062"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHhr9Yhg",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11609024045/job/32325458054"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHh0bc2g",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11611942194/job/32334339290"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHh0ePhw",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11611956871/job/32334385031"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHhr9X6g",
                        "name": "Fix style issues from lint",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11609024062/job/32325457898"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHh0beCQ",
                        "name": "Fix style issues from lint",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11611942200/job/32334339593"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHh0ePkQ",
                        "name": "Fix style issues from lint",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11611956874/job/32334385041"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHgUWg8Q",
                        "name": "Add topic label",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11578828408/job/32233595121"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHgUWgOw",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11578828419/job/32233594939"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHgUWgcw",
                        "name": "build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11578828398/job/32233594995"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHgTADgA",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11578415645/job/32232178560"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHgTAFmQ",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11578415640/job/32232179097"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHgUWiJQ",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11578828400/job/32233595429"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHhr9YHw",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11609024076/job/32325457951"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHh0bcxg",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11611942215/job/32334339270"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHh0eRSQ",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11611956869/job/32334385481"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHgTAGsA",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11578415645/job/32232179376"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHgTAHzg",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11578415640/job/32232179662"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHgUWgmg",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11578828400/job/32233595034"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHgTAFDg",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11578415645/job/32232178958"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHgTADPw",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11578415640/job/32232178495"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHgTAIKA",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11578415645/job/32232179752"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHgTfKkw",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11578415640/job/32232688275"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHgUXDUQ",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/32233603921"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHgUYtaA",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=18403&login=leanprover-community&repository=mathlib4"
                      }
                    ]
                  }
                }
              }
            },
            {
              "commit": {
                "oid": "6d69ab4aa6c9b1d0680288b19ec1c0847d0867f4",
                "additions": 32,
                "deletions": 19,
                "committedDate": "2024-10-31T12:34:27Z",
                "author": {
                  "name": "sgouezel",
                  "email": "sebastien.gouezel@univ-rennes1.fr"
                },
                "statusCheckRollup": {
                  "contexts": {
                    "nodes": [
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHihU4Cw",
                        "name": "Add ready-to-merge label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11627667409/job/32381417483"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHihU2_w",
                        "name": "Ping maintainers on Zulip",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11627667427/job/32381417215"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHihU27A",
                        "name": "Fix style issues from lint",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11627667422/job/32381417196"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHh0m2mQ",
                        "name": "label-and-report-new-contributor",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11612000065/job/32334526105"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHh0m2XQ",
                        "name": "build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11612000044/job/32334526045"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHh0mu9g",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11611999393/job/32334524150"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHh0muyg",
                        "name": "Cancel Previous Runs (CI)",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11611999390/job/32334524106"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHh0m3zQ",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11612000056/job/32334526413"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHihU5lA",
                        "name": "Add delegated label",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11627667409/job/32381417876"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHh0mwDw",
                        "name": "Lint style (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11611999393/job/32334524431"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHh0mw_A",
                        "name": "Lint style",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11611999390/job/32334524668"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHh0m2iA",
                        "name": "Check all files imported",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11612000056/job/32334526088"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHh0mxFQ",
                        "name": "Build (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11611999393/job/32334524693"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHh0mvwQ",
                        "name": "Build",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11611999390/job/32334524353"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHh0myJg",
                        "name": "Post-CI job (fork)",
                        "conclusion": "SKIPPED",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11611999393/job/32334524966"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHh1iLJQ",
                        "name": "Post-CI job",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11611999390/job/32335498021"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHh0nUDQ",
                        "name": "New Contributor Check",
                        "conclusion": "NEUTRAL",
                        "status": "COMPLETED",
                        "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/32334533645"
                      },
                      {
                        "__typename": "CheckRun",
                        "id": "CR_kwDOFcwZ1c8AAAAHh0oMeA",
                        "name": "Summary",
                        "conclusion": "SUCCESS",
                        "status": "COMPLETED",
                        "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=18403&login=leanprover-community&repository=mathlib4"
                      },
                      {
                        "__typename": "StatusContext",
                        "id": "SC_kwDOFcwZ1c8AAAAHh17sQA",
                        "context": "bors",
                        "state": "SUCCESS",
                        "targetUrl": "https://mathlib-bors-ca18eefec4cb.herokuapp.com/batches/7019",
                        "description": "Build succeeded"
                      }
                    ]
                  }
                }
              }
            }
          ]
        },
        "createdAt": "2024-10-29T17:01:06Z",
        "deletions": 4,
        "files": {
          "nodes": [
            {
              "path": "Mathlib/Geometry/Manifold/ChartedSpace.lean",
              "additions": 12,
              "deletions": 0
            },
            {
              "path": "Mathlib/Geometry/Manifold/Diffeomorph.lean",
              "additions": 9,
              "deletions": 0
            },
            {
              "path": "Mathlib/Geometry/Manifold/Instances/Real.lean",
              "additions": 14,
              "deletions": 0
            },
            {
              "path": "Mathlib/Geometry/Manifold/SmoothManifoldWithCorners.lean",
              "additions": 126,
              "deletions": 4
            },
            {
              "path": "Mathlib/Topology/ContinuousOn.lean",
              "additions": 9,
              "deletions": 0
            }
          ]
        },
        "headRefName": "SG_closure_interior",
        "headRefOid": "6d69ab4aa6c9b1d0680288b19ec1c0847d0867f4",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c6ARiCv",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABAt13Ow",
              "color": "bfd4f2",
              "name": "delegated"
            },
            {
              "id": "LA_kwDOFcwZ1c8AAAABViJYYw",
              "color": "33dbec",
              "name": "t-differential-geometry"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c6Potz8",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "grunweg"
              },
              "submittedAt": "2024-11-01T10:02:48Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 18403,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": "APPROVED",
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c6PfLdA",
              "body": "I just took a careful look. I have a bunch of questions and optional suggestions, and a few minor comments. Thanks for doing this!",
              "state": "APPROVED",
              "author": {
                "login": "grunweg"
              },
              "submittedAt": "2024-10-31T09:05:34Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6PhC0W",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "sgouezel"
              },
              "submittedAt": "2024-10-31T12:30:42Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6PhDSH",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "sgouezel"
              },
              "submittedAt": "2024-10-31T12:31:40Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c6Potz8",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "grunweg"
              },
              "submittedAt": "2024-11-01T10:02:48Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5suLy-",
                    "body": "Optional: feel free to inline this into the `refine`.",
                    "createdAt": "2024-10-31T08:11:24Z",
                    "author": {
                      "login": "grunweg"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5suMDI",
                    "body": "Optional: would you like to mention a counter-example in this doc-string, e.g. the real line with a double origin?",
                    "createdAt": "2024-10-31T08:12:20Z",
                    "author": {
                      "login": "grunweg"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5suMtU",
                    "body": "Would you like to use dot notation here (for `IsOpenMap`)? (untested)",
                    "createdAt": "2024-10-31T08:14:59Z",
                    "author": {
                      "login": "grunweg"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5suOFF",
                    "body": "Should something along these lines (about PiLp, or even more generally) become a lemma elsewhere?",
                    "createdAt": "2024-10-31T08:18:21Z",
                    "author": {
                      "login": "grunweg"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5svamT",
                    "body": "I expect this one will disappear if/when we refactor things in terms of convexity, so I'd rather keep it here for now because it's pretty specific.",
                    "createdAt": "2024-10-31T12:31:40Z",
                    "author": {
                      "login": "sgouezel"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5suOg6",
                    "body": "This is partially pre-existing, but: is there documentation on the design choice with this condition - e.g., why `uniqueDiffOn'` or this condition are *sufficient* for what mathlib needs/why they were chosen? It could be nice to have some.\r\n\r\nThis can also happen in a follow-up PR changing the definition yet again; I will not insist of that for this PR.",
                    "createdAt": "2024-10-31T08:20:02Z",
                    "author": {
                      "login": "grunweg"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5suSbk",
                    "body": "At first sight (can't read this in VS Code right now), I was slightly surprised to see a `T2Space` here. Then I realised why this is: a normed space is always T2, hence so is `H` (as `I` is an embedding), and in particular `M` must be T1. Good spot!\r\nThis probably doesn't need a comment --- but you could add a doc-string to the theorem, such as\r\n```suggestion\r\n`/-- Every smooth manifold is a Fr√©chet space (T1 space) --- regardless of whether it is Hausdorff. -/",
                    "createdAt": "2024-10-31T08:33:15Z",
                    "author": {
                      "login": "grunweg"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5suTJi",
                    "body": "For other reviewers: I think you don't use this lemma - but I think including it is fine.",
                    "createdAt": "2024-10-31T08:35:56Z",
                    "author": {
                      "login": "grunweg"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5svaUW",
                    "body": "You're right, I included it by mistake when I cherry picked the changes from another branch because it just happened to be in the same file as the other changes. Let me keep it for now because it will be needed eventually, but I can remove it from this PR if you prefer.",
                    "createdAt": "2024-10-31T12:30:41Z",
                    "author": {
                      "login": "sgouezel"
                    }
                  },
                  {
                    "id": "PRRC_kwDOFcwZ1c5s0U43",
                    "body": "Thanks for explaining. Keeping it is fine with me.",
                    "createdAt": "2024-11-01T10:02:48Z",
                    "author": {
                      "login": "grunweg"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5suT4b",
                    "body": "This lemma surely belongs to a more basic file. Can you move it there, please? Same for the next one.",
                    "createdAt": "2024-10-31T08:38:39Z",
                    "author": {
                      "login": "grunweg"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5suUVh",
                    "body": "Please update this doc-string.",
                    "createdAt": "2024-10-31T08:40:15Z",
                    "author": {
                      "login": "grunweg"
                    }
                  }
                ]
              }
            },
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5suaJC",
                    "body": "```suggestion\r\n/-- Around a point in the source, `(extChartAt I x).target` and `range I` coincide locally. -/",
                    "createdAt": "2024-10-31T08:59:33Z",
                    "author": {
                      "login": "grunweg"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjEwODE4NDM0",
              "login": "sgouezel"
            },
            {
              "id": "MDQ6VXNlcjczNzYwMTI=",
              "login": "fpvandoorn"
            },
            {
              "id": "MDQ6VXNlcjEwMTA1MDE2",
              "login": "grunweg"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": {
          "contexts": {
            "nodes": [
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHihU4Cw",
                "name": "Add ready-to-merge label",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11627667409/job/32381417483"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHihU2_w",
                "name": "Ping maintainers on Zulip",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11627667427/job/32381417215"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHihU27A",
                "name": "Fix style issues from lint",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11627667422/job/32381417196"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHh0m2mQ",
                "name": "label-and-report-new-contributor",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11612000065/job/32334526105"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHh0m2XQ",
                "name": "build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11612000044/job/32334526045"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHh0mu9g",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11611999393/job/32334524150"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHh0muyg",
                "name": "Cancel Previous Runs (CI)",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11611999390/job/32334524106"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHh0m3zQ",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11612000056/job/32334526413"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHihU5lA",
                "name": "Add delegated label",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11627667409/job/32381417876"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHh0mwDw",
                "name": "Lint style (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11611999393/job/32334524431"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHh0mw_A",
                "name": "Lint style",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11611999390/job/32334524668"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHh0m2iA",
                "name": "Check all files imported",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11612000056/job/32334526088"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHh0mxFQ",
                "name": "Build (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11611999393/job/32334524693"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHh0mvwQ",
                "name": "Build",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11611999390/job/32334524353"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHh0myJg",
                "name": "Post-CI job (fork)",
                "conclusion": "SKIPPED",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11611999393/job/32334524966"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHh1iLJQ",
                "name": "Post-CI job",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/actions/runs/11611999390/job/32335498021"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHh0nUDQ",
                "name": "New Contributor Check",
                "conclusion": "NEUTRAL",
                "status": "COMPLETED",
                "detailsUrl": "https://github.com/leanprover-community/mathlib4/runs/32334533645"
              },
              {
                "__typename": "CheckRun",
                "id": "CR_kwDOFcwZ1c8AAAAHh0oMeA",
                "name": "Summary",
                "conclusion": "SUCCESS",
                "status": "COMPLETED",
                "detailsUrl": "https://dashboard.mergify.com/event-logs?pullRequestNumber=18403&login=leanprover-community&repository=mathlib4"
              },
              {
                "__typename": "StatusContext",
                "id": "SC_kwDOFcwZ1c8AAAAHh17sQA",
                "context": "bors",
                "state": "SUCCESS",
                "targetUrl": "https://mathlib-bors-ca18eefec4cb.herokuapp.com/batches/7019",
                "description": "Build succeeded"
              }
            ]
          }
        },
        "title": "[Merged by Bors] - refactor: require that the range of a model with corners is included in the closure of its interior",
        "updatedAt": "2024-11-01T10:29:00Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/18403",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6cRkInzwAAAAN9X5E0",
              "createdAt": "2024-10-29T17:01:45Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABViJYYw",
                "name": "t-differential-geometry"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6RuZZ1",
              "createdAt": "2024-10-29T17:01:59Z",
              "body": "### PR summary [6d69ab4aa6](https://github.com/leanprover-community/mathlib4/pull/18403/commits/6d69ab4aa6c9b1d0680288b19ec1c0847d0867f4)\n\n#### Import changes for modified files\n\nNo significant changes to the import graph\n\n\n<details><summary>Import changes for all files</summary>\n\n|Files|Import difference|\n|-|-|\n\n</details>\n\n---\n\n<details><summary>\n\n#### Declarations diff\n\n</summary>\n\n`+ ChartedSpace.t1Space`\n`+ EventuallyEq.mem_interior_iff`\n`+ Filter.EventuallyEq.mem_interior`\n`+ closure_open_halfspace`\n`+ extChartAt_mem_closure_interior`\n`+ extChartAt_target_eventuallyEq`\n`+ extChartAt_target_eventuallyEq'`\n`+ extChartAt_target_eventuallyEq_of_mem`\n`+ extChartAt_target_mem_nhdsWithin_of_mem`\n`+ extChartAt_target_subset_closure_interior`\n`+ extChartAt_target_union_comp_range_mem_nhds_of_mem`\n`+ extend_target_eventuallyEq`\n`+ nhdsWithin_extChartAt_target_eq_of_mem`\n`+ range_eq_closure_interior`\n`+ range_subset_closure_interior`\n`+ t1Space`\n<details>\n  <summary>You can run this locally as follows</summary>\n\n\n```bash\n## summary with just the declaration names:\n./scripts/declarations_diff.sh <optional_commit>\n\n## more verbose report:\n./scripts/declarations_diff.sh long <optional_commit>\n```\n</details>\n\nThe doc-module for `script/declarations_diff.sh` contains some details about this script.\n\n</details>",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5g_-as",
              "createdAt": "2024-10-29T17:02:03Z",
              "source": {
                "id": "PR_kwDOFcwZ1c6ARAcD",
                "title": "feat: the Lie algebra of a Lie group over R or C",
                "url": "https://github.com/leanprover-community/mathlib4/pull/18396"
              }
            },
            {
              "__typename": "AssignedEvent",
              "id": "AE_lADOFcwZ1c6cRkInzwAAAAN9iVZF",
              "createdAt": "2024-10-29T20:38:52Z",
              "assignee": {
                "id": "MDQ6VXNlcjEwMTA1MDE2",
                "login": "grunweg"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6R0w4t",
              "createdAt": "2024-10-30T10:43:19Z",
              "body": "I also wanted to change the definition of a ModelWithCorners, since the current doesn't impose enough conditions. \r\nThis change is fine by me, but I don't think it's good enough.\r\n\r\nThe problem I was facing is that currently a ModelWithCorners over `\\C` is not a ModelWithCorners over `\\R`. The issue is the unique derivative: it is easier to have a unique derivative over C than over R. This is problematic, since we cannot show that complex manifold is a real manifold.\r\n\r\nI believe your new condition doesn't imply uniqueness of derivative, right? So we would have to change it again. One way is just to say that the target must be a `1/(2^n)`-th space (i.e. you require that for some basis certain coordinates are positive), but probably we can get away with something weaker, e.g. convexity together with the regularity condition. Does that imply uniqueness of derivative?\r\n\r\nI'm fine merging this as-is, but if we're changing ModelWithCorners again soon, we should probably decide now whether the current change is compatible with the planned change in the future.",
              "author": {
                "login": "fpvandoorn"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6R1G7K",
              "createdAt": "2024-10-30T11:04:49Z",
              "body": "There is a definitely a difficulty between complex and real manifolds: as you point out, a complex model with corners is not a real model with corners because of the lack of unique differentiability. My new condition doesn't imply unique differentiability, that's why it is added on top of it. \r\n\r\nI don't know how to fix it for the complex case (if you want a condition that makes sense over a general field, you can not mention positivity in the definition). But even if the conditions we impose did match over R and C, the models with corners would still be different because the field is baked in. Whatever we do, it looks like there is a difficult issue here related to the tangent bundle: the real tangent bundle and the complex tangent bundle are always going to be different objects, right?\r\n\r\n",
              "author": {
                "login": "sgouezel"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6R1LNr",
              "createdAt": "2024-10-30T11:09:07Z",
              "body": "In fact, I think I have a fix for the complex case: add yet another field saying that, if `IsRCLikeNormedField ùïú`, then the interior of `range I` is convex for the inherited real structure. And we could have a specific constructor for models with corners with `IsRCLikeNormedField ùïú`, using that the latter condition implies both unique differentiability and that the range is included in the closure of its interior. ",
              "author": {
                "login": "sgouezel"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6R1NxK",
              "createdAt": "2024-10-30T11:11:25Z",
              "body": "(I wrote this before you posted your last comment.)\r\n\r\nI wonder: is having the model with corners depend on the field a bad thing? If, say, there is a map from \"models over \\C\" to \"models over \\R\", but that map is well-behaved? Treating a complex manifold specifically as a real manifold is sometimes useful (say, consider a Riemann surface as a surface with an almost complex structure; my area does that all the time), but not always.\r\nThat said, I don't have enough experience with library design yet to know the trade-offs of such choices well.\r\n\r\nAfter talking with Floris, I had attempted to simply add the additional condition of some positive coordinates to the model with boundary. Another issue I realised is that the *correct* definition of complex manifolds with boundary is *not* just the same as in the real case. See e.g. [this answer](https://math.stackexchange.com/a/1958392) on math.stackexchange ---- just asking for \"is modelled on some quadrant\" is too restrictive in the complex case.",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6R1Okn",
              "createdAt": "2024-10-30T11:12:19Z",
              "body": "> In fact, I think I have a fix for the complex case: add yet another field saying that, if `IsRCLikeNormedField ùïú`, then the interior of `range I` is convex for the inherited real structure. And we could have a specific constructor for models with corners with `IsRCLikeNormedField ùïú`, using that the latter condition implies both unique differentiability and that the range is included in the closure of its interior.\r\n\r\nThat sounds reasonable at first glance, and definitely like an improvement.\r\n\r\nThinking about it slightly more: this looks like it should resolve the real vs complex case, and also is compatible with the correct definition of complex manifolds with boundary.",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6R2a2E",
              "createdAt": "2024-10-30T12:24:29Z",
              "body": "Another (essentially equivalent option) is to require either that `range I = univ`, or that the field is `IsRCLikeNormedField` and the range is convex wrt the real structure. And then the properties that the range has unique differentials, and is the closure of its interior, would be deduced from this one. I don't think one option is really better than the other one.\r\n",
              "author": {
                "login": "sgouezel"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6R2bhC",
              "createdAt": "2024-10-30T12:25:49Z",
              "body": "To answer your other question, I think we should definitely have `I.toReal` for `I` a model with corners over C, to be able to see a complex manifold as a real manifold. ",
              "author": {
                "login": "sgouezel"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6R223G",
              "createdAt": "2024-10-30T13:03:17Z",
              "body": "> Another (essentially equivalent option) is to require either that `range I = univ`, or that the field is `IsRCLikeNormedField` and the range is convex wrt the real structure. And then the properties that the range has unique differentials, and is the closure of its interior, would be deduced from this one. I don't think one option is really better than the other one.\r\n\r\nIs there an interesting theory of manifolds with boundary over `Q_p` (or Q, or any other field different from R or C)? Because it seems this proposal would exclude them, right?",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6R58bW",
              "createdAt": "2024-10-30T17:29:36Z",
              "body": "> Is there an interesting theory of manifolds with boundary over `Q_p` (or Q, or any other field different from R or C)? Because it seems this proposal would exclude them, right?\r\n\r\nNot that I know, which is why my second proposal makes sense. But maybe it's safer to go with the first one. In any case, I don't think these improvements should block the current PR, as they should be compatible.\r\n\r\n",
              "author": {
                "login": "sgouezel"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6R6CUP",
              "createdAt": "2024-10-30T17:40:21Z",
              "body": "> > Is there an interesting theory of manifolds with boundary over `Q_p` (or Q, or any other field different from R or C)? Because it seems this proposal would exclude them, right?\r\n> \r\n> Not that I know, which is why my second proposal makes sense. But maybe it's safer to go with the first one. In any case, I don't think these improvements should block the current PR, as they should be compatible.\r\n\r\nThat sounds fair; I trust your judgement on this. And I agree the first proposal could be better.\r\nI can review this PR now/very soon; would you like to work on the follow-up proposal also?",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6R6Dtj",
              "createdAt": "2024-10-30T17:43:12Z",
              "body": "I won't work on the follow-up in the near future, sorry, I have already too much on my hands with #17152 and #18396",
              "author": {
                "login": "sgouezel"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6R6Pf_",
              "createdAt": "2024-10-30T18:05:56Z",
              "body": "Fair enough. Sounds like a project for another volunteer to adapt this; I would be happy to :-)",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6R6kRv",
              "createdAt": "2024-10-30T18:34:47Z",
              "body": "> In fact, I think I have a fix for the complex case: add yet another field saying that, if `IsRCLikeNormedField ùïú`, then the interior of `range I` is convex for the inherited real structure. And we could have a specific constructor for models with corners with `IsRCLikeNormedField ùïú`, using that the latter condition implies both unique differentiability and that the range is included in the closure of its interior.\r\n\r\nAh wait, I forgot that convexity is not definable over an arbitrary field... \r\n\r\nThe current PR indeed doesn't conflict with any of the future plans (although it will be made partially obsolete if we go with the second option, since then it's provable). But then removing this condition and proving it as a consequence will be easy anyway, so let's merge this PR and generalize later. (Michael offered a review, so I'll let him do that.)",
              "author": {
                "login": "fpvandoorn"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c6PfLdA",
              "createdAt": "2024-10-31T08:11:24Z",
              "body": "I just took a careful look. I have a bunch of questions and optional suggestions, and a few minor comments. Thanks for doing this!",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6cRkInzwAAAAN_tNAl",
              "createdAt": "2024-10-31T09:06:18Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "PullRequestCommit"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6SBBVR",
              "createdAt": "2024-10-31T12:34:46Z",
              "body": "Thanks a lot for the review!",
              "author": {
                "login": "sgouezel"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c6cRkInzwAAAAOAMDHI",
              "createdAt": "2024-10-31T13:14:26Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7P265b",
                "name": "awaiting-author"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6SBXLT",
              "createdAt": "2024-10-31T13:21:26Z",
              "body": "I took a quick look, and I'm happy to merge this if Michael is happy with it.\r\n\r\nbors d=grunweg",
              "author": {
                "login": "fpvandoorn"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6SBXMj",
              "createdAt": "2024-10-31T13:21:29Z",
              "body": ":v: grunweg can now approve this pull request. To approve and merge a pull request, simply reply with `bors r+`. More detailed instructions are available [here](https://bors.tech/documentation/getting-started/#reviewing-pull-requests).",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c6cRkInzwAAAAOAMxrj",
              "createdAt": "2024-10-31T13:21:36Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABAt13Ow",
                "name": "delegated"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6SIOOY",
              "createdAt": "2024-11-01T10:05:34Z",
              "body": "I am happy with this. Thanks for the quick turnaround, and for initiating this refactor!\r\nbors merge",
              "author": {
                "login": "grunweg"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c6SIVR5",
              "createdAt": "2024-11-01T10:28:56Z",
              "body": "Pull request successfully merged into master.\n\nBuild succeeded:\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/11627714568/job/32381552460)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/11627714568/job/32381552201)",
              "author": {
                "login": "mathlib-bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c6cRkInzwAAAAOB4gz3",
              "createdAt": "2024-11-01T10:28:57Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c6cRkInzwAAAAOB4g7s",
              "createdAt": "2024-11-01T10:29:00Z"
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "CrossReferencedEvent",
              "id": "CRE_kwDOFcwZ1c5h-dGI",
              "createdAt": "2024-11-02T14:42:28Z",
              "source": {
                "id": "PR_kwDOFcwZ1c6AspCd",
                "title": "feat: require that real or complex models with corners have convex interior",
                "url": "https://github.com/leanprover-community/mathlib4/pull/18554"
              }
            }
          ]
        }
      }
    }
  }
}
