{
  "data": {
    "repository": {
      "pullRequest": {
        "additions": 248,
        "assignees": {
          "nodes": []
        },
        "author": {
          "login": "adomani"
        },
        "autoMergeRequest": null,
        "baseRefName": "master",
        "body": "Introduce the notation `R[A]` for `AddMonoidAlgebra R A`.  This is to align `Mathlib`s notation with the standard notation for [group ring](https://en.wikipedia.org/wiki/Group_ring).\r\n\r\nThe notation is scoped in `AddMonoidAlgebra` and there is *no* analogous notation for `MonoidAlgebra`.\r\n\r\nI only used the notation for single-character `R` and `A`s and only in the range `[a-zA-Z]`.\r\n\r\nThe extra lines are all in `Mathlib/Algebra/MonoidAlgebra/Basic.lean`.  They are accounted for by extra text in the doc-module and the actual notation.\r\n\r\nAffected files:\r\n```bash\r\nCounterexamples/ZeroDivisorsInAddMonoidAlgebras\r\nAlgebra/AlgebraicCard\r\nAlgebra/MonoidAlgebra/Basic\r\nAlgebra/MonoidAlgebra/Degree\r\nAlgebra/MonoidAlgebra/Division\r\nAlgebra/MonoidAlgebra/Grading\r\nAlgebra/MonoidAlgebra/NoZeroDivisors\r\nAlgebra/MonoidAlgebra/Support\r\nData/Polynomial/AlgebraMap\r\nData/Polynomial/Basic\r\nData/Polynomial/Eval\r\nData/Polynomial/Laurent\r\nRingTheory/FiniteType\r\n```\r\n\r\n---\r\n<!-- The text above the `---` will become the commit message when your\r\nPR is merged. Please leave a blank newline before the `---`, otherwise\r\nGitHub will format the text above it as a title.\r\n\r\nTo indicate co-authors, include lines at the bottom of the commit message\r\n(that is, before the `---`) using the following format:\r\n\r\nCo-authored-by: Author Name <author@email.com>\r\n\r\nAny other comments you want to keep out of the PR commit should go\r\nbelow the `---`, and placed outside this HTML comment, or else they\r\nwill be invisible to reviewers.\r\n\r\nIf this PR depends on other PRs, please list them below this comment,\r\nusing the following format:\r\n- [ ] depends on: #abc [optional extra text]\r\n- [ ] depends on: #xyz [optional extra text]\r\n-->\r\n\r\n[On line 105 of Counterexamples/ZeroDivisorsInAddMonoidAlgebras.lean](https://github.com/leanprover-community/mathlib4/blob/440128f4db6f954c064994041d17b0dd3a01a8cb/Counterexamples/ZeroDivisorsInAddMonoidAlgebras.lean#L105-L106), the notation does not work when used as a direct call to an implicit argument:\r\n```lean\r\n  Â· convert Commute.geom_sumâ‚‚_mul (Î± := AddMonoidAlgebra R A) _ (addOrderOf a) using 3\r\n-- using `(Î± := R[A])` gives the error\r\n/-\r\nambiguous, possible interpretations \r\n  R[A] : Type (max u_2 u_1)\r\n  \r\n  R[A] : Type ?u.23226\r\n-/\r\n```\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/from-referrer/)\r\n",
        "changedFiles": 13,
        "closed": true,
        "closedAt": "2023-09-16T20:24:52Z",
        "comments": {
          "nodes": [
            {
              "id": "IC_kwDOFcwZ1c5mpn54",
              "body": "~~It seems to me the notation is more suited for MonoidAlgebra, even though mathlib currently has a lot more about AddMonoidAlgebra than MonoidAlgebra ... Maybe we could ditch MonoidAlgebra and use `AddMonoidAlgebra R (Additive A)` when necessary? :)~~ Oh I guess it's okay since it's scoped in AddMonoidAlgebra â€¦",
              "createdAt": "2023-09-16T09:25:38Z",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5mpx1e",
              "body": "If wanted/possible, we could introduce the two notations `R[A+]` and `R[G*]` to distinguish the two, but, as you also observed, currently \"additive\" is more used than \"multiplicative\".",
              "createdAt": "2023-09-16T13:14:45Z",
              "author": {
                "login": "adomani"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5mp2_f",
              "body": "I just checked:\r\n```lean\r\nscoped[AddMonoidAlgebra] notation :9000 R \"[\" A \"+]\" => AddMonoidAlgebra R A\r\nscoped[MonoidAlgebra]    notation :9000 R \"[\" A \"*]\" => MonoidAlgebra R A\r\n\r\nvariable {R A} [Semiring R] [Field A]\r\n\r\nopen AddMonoidAlgebra MonoidAlgebra\r\nvariable (f : R[A+]) (g : R[A*])\r\n#check f  -- f : R[A+]\r\n#check g  -- g : R[A*]\r\n```\r\nseems to work, if it is wanted.\r\n\r\nPersonally, I am not too convinced.  Maybe, once we end up using `MonoidAlgebra`s more, we may revise this.",
              "createdAt": "2023-09-16T15:05:56Z",
              "author": {
                "login": "adomani"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5mqCeN",
              "body": "ðŸš€ Pull request has been placed on the maintainer queue by alreadydone.",
              "createdAt": "2023-09-16T19:09:40Z",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5mqDEy",
              "body": "Thanks :tada:\r\n\r\nbors merge",
              "createdAt": "2023-09-16T19:24:35Z",
              "author": {
                "login": "jcommelin"
              }
            },
            {
              "id": "IC_kwDOFcwZ1c5mqFmr",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6209204253/job/16856170484)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6209204253/job/16856170518)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6209204253/job/16856170449)",
              "createdAt": "2023-09-16T20:24:51Z",
              "author": {
                "login": "bors"
              }
            }
          ]
        },
        "commits": {
          "nodes": [
            {
              "commit": {
                "oid": "054c889c2baf61d5ae5026282fa0238ce4f5179c",
                "additions": 243,
                "deletions": 233,
                "committedDate": "2023-09-16T05:06:01Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "440128f4db6f954c064994041d17b0dd3a01a8cb",
                "additions": 1,
                "deletions": 1,
                "committedDate": "2023-09-16T05:54:30Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "14848bbe3dd0ebce4d5ba338d60e611c572e1324",
                "additions": 38,
                "deletions": 38,
                "committedDate": "2023-09-16T06:20:21Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "40236933cce9abc435beccd0b7d5e0bc08dfaa56",
                "additions": 2,
                "deletions": 0,
                "committedDate": "2023-09-16T06:24:22Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            },
            {
              "commit": {
                "oid": "28caf474bd3bf1610f629d2fb5d18035e30feb4f",
                "additions": 26,
                "deletions": 26,
                "committedDate": "2023-09-16T14:49:12Z",
                "author": {
                  "name": "adomani",
                  "email": "adomani@gmail.com"
                },
                "statusCheckRollup": null
              }
            }
          ]
        },
        "createdAt": "2023-09-16T05:15:33Z",
        "deletions": 236,
        "files": {
          "nodes": [
            {
              "path": "Counterexamples/ZeroDivisorsInAddMonoidAlgebras.lean",
              "additions": 10,
              "deletions": 10
            },
            {
              "path": "Mathlib/Algebra/AlgebraicCard.lean",
              "additions": 3,
              "deletions": 3
            },
            {
              "path": "Mathlib/Algebra/MonoidAlgebra/Basic.lean",
              "additions": 113,
              "deletions": 102
            },
            {
              "path": "Mathlib/Algebra/MonoidAlgebra/Degree.lean",
              "additions": 24,
              "deletions": 24
            },
            {
              "path": "Mathlib/Algebra/MonoidAlgebra/Division.lean",
              "additions": 22,
              "deletions": 22
            },
            {
              "path": "Mathlib/Algebra/MonoidAlgebra/Grading.lean",
              "additions": 13,
              "deletions": 13
            },
            {
              "path": "Mathlib/Algebra/MonoidAlgebra/NoZeroDivisors.lean",
              "additions": 7,
              "deletions": 7
            },
            {
              "path": "Mathlib/Algebra/MonoidAlgebra/Support.lean",
              "additions": 9,
              "deletions": 9
            },
            {
              "path": "Mathlib/Data/Polynomial/AlgebraMap.lean",
              "additions": 3,
              "deletions": 2
            },
            {
              "path": "Mathlib/Data/Polynomial/Basic.lean",
              "additions": 13,
              "deletions": 13
            },
            {
              "path": "Mathlib/Data/Polynomial/Eval.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/Data/Polynomial/Laurent.lean",
              "additions": 1,
              "deletions": 1
            },
            {
              "path": "Mathlib/RingTheory/FiniteType.lean",
              "additions": 29,
              "deletions": 29
            }
          ]
        },
        "headRefName": "adomani/AddMonoidAlgebra_notation",
        "headRefOid": "28caf474bd3bf1610f629d2fb5d18035e30feb4f",
        "headRepository": {
          "name": "mathlib4",
          "owner": {
            "login": "leanprover-community"
          }
        },
        "headRepositoryOwner": {
          "login": "leanprover-community"
        },
        "id": "PR_kwDOFcwZ1c5afKFo",
        "isCrossRepository": false,
        "isDraft": false,
        "labels": {
          "nodes": [
            {
              "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
              "color": "06e039",
              "name": "ready-to-merge"
            }
          ]
        },
        "latestReviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5hJ-S7",
              "body": "LGTM\r\n\r\nmaintainer merge",
              "state": "APPROVED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2023-09-16T19:09:29Z"
            }
          ]
        },
        "maintainerCanModify": false,
        "mergeCommit": null,
        "mergeStateStatus": "UNKNOWN",
        "mergeable": "UNKNOWN",
        "mergedAt": null,
        "mergedBy": null,
        "milestone": null,
        "number": 7203,
        "potentialMergeCommit": null,
        "projectCards": {
          "nodes": []
        },
        "reactionGroups": [
          {
            "content": "THUMBS_UP",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "THUMBS_DOWN",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "LAUGH",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HOORAY",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "CONFUSED",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "HEART",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "ROCKET",
            "users": {
              "nodes": []
            }
          },
          {
            "content": "EYES",
            "users": {
              "nodes": []
            }
          }
        ],
        "reviewDecision": "APPROVED",
        "reviewRequests": {
          "nodes": []
        },
        "reviews": {
          "nodes": [
            {
              "id": "PRR_kwDOFcwZ1c5hJ-RI",
              "body": "",
              "state": "COMMENTED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2023-09-16T19:08:09Z"
            },
            {
              "id": "PRR_kwDOFcwZ1c5hJ-S7",
              "body": "LGTM\r\n\r\nmaintainer merge",
              "state": "APPROVED",
              "author": {
                "login": "alreadydone"
              },
              "submittedAt": "2023-09-16T19:09:29Z"
            }
          ]
        },
        "reviewThreads": {
          "nodes": [
            {
              "comments": {
                "nodes": [
                  {
                    "id": "PRRC_kwDOFcwZ1c5PJ6aO",
                    "body": "Interesting that this works and Lean doesn't try to find `(X : Type*)`.\r\n\r\nI think it's probably safe to use the same notation for `AddMonoidAlgebra` and `MonoidAlgebra`, as long as they're scoped in different locales(=namespaces now?), since it's not common that we open both (and other conflicts will appear if we do). I imagine if we do any Kaplansky's conjecture stuff in mathlib we'd be using `MonoidAlgebra` rather than `AddMonoidAlgebra` (we have to make a choice to avoid duplication unless we make to_additive work), although [existing works](https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Formalizing.20Gardam's.20disproof.20of.20a.20.22Kaplansky.20Conjecture.22) seem to use hand-rolled computable versions of group algebra.",
                    "createdAt": "2023-09-16T19:08:08Z",
                    "author": {
                      "login": "alreadydone"
                    }
                  }
                ]
              }
            }
          ]
        },
        "closingIssuesReferences": {
          "nodes": []
        },
        "participants": {
          "nodes": [
            {
              "id": "MDQ6VXNlcjI5NDY3NzQ1",
              "login": "adomani"
            },
            {
              "id": "MDQ6VXNlcjMwNjQxNDU=",
              "login": "alreadydone"
            },
            {
              "id": "MDQ6VXNlcjU2MzY3MDU=",
              "login": "jcommelin"
            }
          ]
        },
        "state": "CLOSED",
        "statusCheckRollup": null,
        "title": "[Merged by Bors] - feat(AddMonoidAlgebra*): add notation `R[A]` for `addMonoidAlgebra R A`",
        "updatedAt": "2023-09-16T20:24:56Z",
        "url": "https://github.com/leanprover-community/mathlib4/pull/7203",
        "timelineItems": {
          "nodes": [
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "054c889c2baf61d5ae5026282fa0238ce4f5179c"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "440128f4db6f954c064994041d17b0dd3a01a8cb"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "14848bbe3dd0ebce4d5ba338d60e611c572e1324"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "40236933cce9abc435beccd0b7d5e0bc08dfaa56"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5xNQ3AzwAAAAJrPbQw",
              "createdAt": "2023-09-16T06:54:09Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5mpn54",
              "createdAt": "2023-09-16T09:25:38Z",
              "body": "~~It seems to me the notation is more suited for MonoidAlgebra, even though mathlib currently has a lot more about AddMonoidAlgebra than MonoidAlgebra ... Maybe we could ditch MonoidAlgebra and use `AddMonoidAlgebra R (Additive A)` when necessary? :)~~ Oh I guess it's okay since it's scoped in AddMonoidAlgebra â€¦",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5mpx1e",
              "createdAt": "2023-09-16T13:14:45Z",
              "body": "If wanted/possible, we could introduce the two notations `R[A+]` and `R[G*]` to distinguish the two, but, as you also observed, currently \"additive\" is more used than \"multiplicative\".",
              "author": {
                "login": "adomani"
              }
            },
            {
              "__typename": "PullRequestCommit",
              "commit": {
                "oid": "28caf474bd3bf1610f629d2fb5d18035e30feb4f"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5mp2_f",
              "createdAt": "2023-09-16T15:05:56Z",
              "body": "I just checked:\r\n```lean\r\nscoped[AddMonoidAlgebra] notation :9000 R \"[\" A \"+]\" => AddMonoidAlgebra R A\r\nscoped[MonoidAlgebra]    notation :9000 R \"[\" A \"*]\" => MonoidAlgebra R A\r\n\r\nvariable {R A} [Semiring R] [Field A]\r\n\r\nopen AddMonoidAlgebra MonoidAlgebra\r\nvariable (f : R[A+]) (g : R[A*])\r\n#check f  -- f : R[A+]\r\n#check g  -- g : R[A*]\r\n```\r\nseems to work, if it is wanted.\r\n\r\nPersonally, I am not too convinced.  Maybe, once we end up using `MonoidAlgebra`s more, we may revise this.",
              "author": {
                "login": "adomani"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5hJ-RI",
              "createdAt": "2023-09-16T19:08:08Z",
              "body": "",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "__typename": "PullRequestReview",
              "id": "PRR_kwDOFcwZ1c5hJ-S7",
              "createdAt": "2023-09-16T19:09:29Z",
              "body": "LGTM\r\n\r\nmaintainer merge",
              "author": {
                "login": "alreadydone"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5mqCeN",
              "createdAt": "2023-09-16T19:09:40Z",
              "body": "ðŸš€ Pull request has been placed on the maintainer queue by alreadydone.",
              "author": {
                "login": "github-actions"
              }
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5mqDEy",
              "createdAt": "2023-09-16T19:24:35Z",
              "body": "Thanks :tada:\r\n\r\nbors merge",
              "author": {
                "login": "jcommelin"
              }
            },
            {
              "__typename": "LabeledEvent",
              "id": "LE_lADOFcwZ1c5xNQ3AzwAAAAJrThQq",
              "createdAt": "2023-09-16T19:24:48Z",
              "label": {
                "id": "LA_kwDOFcwZ1c8AAAABHuWjJg",
                "name": "ready-to-merge"
              }
            },
            {
              "__typename": "UnlabeledEvent",
              "id": "UNLE_lADOFcwZ1c5xNQ3AzwAAAAJrThQ2",
              "createdAt": "2023-09-16T19:24:49Z",
              "label": {
                "id": "LA_kwDOFcwZ1c7ECuhA",
                "name": "awaiting-review"
              }
            },
            {
              "__typename": "ReferencedEvent"
            },
            {
              "__typename": "IssueComment",
              "id": "IC_kwDOFcwZ1c5mqFmr",
              "createdAt": "2023-09-16T20:24:51Z",
              "body": "Pull request successfully merged into master.\n\n  Build succeeded!\n\n  The publicly hosted instance of bors-ng is deprecated and will go away soon.\n\n  If you want to self-host your own instance, [instructions are here][instructions].\n  For more help, visit [the forum].\n\n  If you want to switch to GitHub's built-in merge queue, visit [their help page][gh].\n\n  [instructions]: https://github.com/bors-ng/bors-ng#how-to-set-up-your-own-real-instance\n  [the forum]: https://forum.bors.tech\n  [gh]: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue\n\n\n\n  * [Build](https://github.com/leanprover-community/mathlib4/actions/runs/6209204253/job/16856170484)\n  * [Check all files imported](https://github.com/leanprover-community/mathlib4/actions/runs/6209204253/job/16856170518)\n  * [Lint style](https://github.com/leanprover-community/mathlib4/actions/runs/6209204253/job/16856170449)",
              "author": {
                "login": "bors"
              }
            },
            {
              "__typename": "RenamedTitleEvent"
            },
            {
              "__typename": "ClosedEvent",
              "id": "CE_lADOFcwZ1c5xNQ3AzwAAAAJrTytG",
              "createdAt": "2023-09-16T20:24:53Z"
            },
            {
              "__typename": "HeadRefDeletedEvent",
              "id": "HRDE_lADOFcwZ1c5xNQ3AzwAAAAJrTyuA",
              "createdAt": "2023-09-16T20:24:56Z"
            },
            {
              "__typename": "ReferencedEvent"
            }
          ]
        }
      }
    }
  }
}
